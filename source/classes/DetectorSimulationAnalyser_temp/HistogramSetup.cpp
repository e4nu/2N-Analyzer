#include "DetectorSimulationAnalyser.h"

void DetectorSimulationAnalyser::HistogramSetup() {
    CodeDebugger.PrintStepTester(DebuggerMode);

    RefreshNumOfBins();

    RefresHistogramLimits();

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                      Histogram definitions                                                                          //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // Histogram definitions
    /* Histogram definitions and setup. */

    cout << "\033[33m\nDefining histograms...\033[0m";

    // ======================================================================================================================================================================
    // Cut parameters plots
    // ======================================================================================================================================================================

    CodeDebugger.PrintStepTester(DebuggerMode);

    // Cut parameters plots

    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // Number of Photo-electrons (Nphe) histograms (FD only)
    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Number of Photo-electrons (Nphe) histograms (FD only)

    // Nphe plots (1e cut, FD)
    hPlot1D hNphe_1e_cut_BC_FD, hNphe_1e_cut_AC_FD;

    if (!apply_cuts) {
        hNphe_1e_cut_BC_FD = hPlot1D("1e cut", "", "N_{phe} in HTCC BC", "#Photo-electrons in HTCC - N_{phe} - BC", "N_{phe}", directories.Nphe_Directory_map["Nphe_1e_cut_BC_Directory"],
                                     "01_Nphe_1e_cut_BC", 0, Nphe_boundary, numTH1Dbins);
        hNphe_1e_cut_AC_FD = hPlot1D("1e cut", "", "N_{phe} in HTCC AC", "#Photo-electrons in HTCC - N_{phe} - AC", "N_{phe}", directories.Nphe_Directory_map["Nphe_1e_cut_AC_Directory"],
                                     "02_Nphe_1e_cut_AC", 0, Nphe_boundary, numTH1Dbins);
    } else {
        hNphe_1e_cut_BC_FD = hPlot1D("1e cut", "", "N_{phe} in HTCC", "#Photo-electrons in HTCC - N_{phe}", "N_{phe}", directories.Nphe_Directory_map["Nphe_1e_cut_BC_Directory"],
                                     "01_Nphe_1e_cut", 0, Nphe_boundary, numTH1Dbins);
    }

    // Nphe plots (1p, FD)
    hPlot1D hNphe_1p_FD = hPlot1D("1p", "", "N_{phe} in HTCC", "#Photo-electrons in HTCC - N_{phe}", "N_{phe}", directories.Nphe_Directory_map["Nphe_1p_Directory"], "01_Nphe_1p", 0,
                                  Nphe_boundary, numTH1Dbins);

    // Nphe plots (1n, FD)
    hPlot1D hNphe_1n_FD = hPlot1D("1n", "", "N_{phe} in HTCC", "#Photo-electrons in HTCC - N_{phe}", "N_{phe}", directories.Nphe_Directory_map["Nphe_1n_Directory"], "01_Nphe_1n", 0,
                                  Nphe_boundary, numTH1Dbins);

    // Nphe plots (2p, FD)
    hPlot1D hNphe_2p_FD = hPlot1D("2p", "", "N_{phe} in HTCC", "#Photo-electrons in HTCC - N_{phe}", "N_{phe}", directories.Nphe_Directory_map["Nphe_2p_Directory"], "01_Nphe_2p", 0,
                                  Nphe_boundary, numTH1Dbins);

    // Nphe plots (pFDpCD, FD)
    hPlot1D hNphe_pFDpCD_FD = hPlot1D("pFDpCD", "", "N_{phe} in HTCC", "#Photo-electrons in HTCC - N_{phe}", "N_{phe}", directories.Nphe_Directory_map["Nphe_pFDpCD_Directory"],
                                      "01_Nphe_pFDpCD", 0, Nphe_boundary, numTH1Dbins);

    // Nphe plots (nFDpCD, FD)
    hPlot1D hNphe_nFDpCD_FD = hPlot1D("nFDpCD", "", "N_{phe} in HTCC", "#Photo-electrons in HTCC - N_{phe}", "N_{phe}", directories.Nphe_Directory_map["Nphe_nFDpCD_Directory"],
                                      "01_Nphe_nFDpCD", 0, Nphe_boundary, numTH1Dbins);

    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // Chi2 plots
    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Chi2 plots

    // Chi2 plots (no #(e) cut)
    /* Plots of chi2 with no cut on number of electrons - NOT used later! */

    hPlot1D hChi2_Electron_FD = hPlot1D("no #(e) cut", "", "#chi^{2}_{e}", "#chi^{2}_{e} histogram", "#chi^{2}_{e}", directories.Chi2_Directory_map["Chi2_All_e_Directory"],
                                        "01_Electron_chi2", -Chi2_boundary, Chi2_boundary, numTH1Dbins);

    hPlot1D hChi2_Proton_CD = hPlot1D("no #(e) cut", "CD", "#chi^{2}_{p}", "#chi^{2}_{p} histogram", "#chi^{2}_{p}", directories.Chi2_Directory_map["Chi2_All_e_Directory"], "02_Proton_chi2",
                                      -Chi2_boundary, Chi2_boundary, numTH1Dbins);
    hPlot1D hChi2_Proton_FD = hPlot1D("no #(e) cut", "FD", "#chi^{2}_{p}", "#chi^{2}_{p} histogram", "#chi^{2}_{p}", directories.Chi2_Directory_map["Chi2_All_e_Directory"], "02_Proton_chi2",
                                      -Chi2_boundary, Chi2_boundary, numTH1Dbins);

    // Chi2 plots (1e cut)
    /* Plots of chi2 with no cut on number of electrons - used later to apply cuts with my mechanism (NOT Justin's ana) */

    hPlot1D hChi2_Electron_1e_cut_FD = hPlot1D("1e cut", "", "#chi^{2}_{e}", "#chi^{2}_{e} histogram", "#chi^{2}_{e}", directories.Chi2_Directory_map["Chi2_1e_cut_Directory"],
                                               "01_Electron_chi2", -Chi2_boundary, Chi2_boundary, numTH1Dbins);

    hPlot1D hChi2_Proton_1e_cut_CD = hPlot1D("1e cut", "CD", "#chi^{2}_{p}", "#chi^{2}_{p} histogram", "#chi^{2}_{p}", directories.Chi2_Directory_map["Chi2_1e_cut_Directory"],
                                             "02_Proton_chi2", -Chi2_boundary, Chi2_boundary, numTH1Dbins);
    hPlot1D hChi2_Proton_1e_cut_FD = hPlot1D("1e cut", "FD", "#chi^{2}_{p}", "#chi^{2}_{p} histogram", "#chi^{2}_{p}", directories.Chi2_Directory_map["Chi2_1e_cut_Directory"],
                                             "02_Proton_chi2", -Chi2_boundary, Chi2_boundary, numTH1Dbins);

    hPlot1D hChi2_Kplus_1e_cut_CD = hPlot1D("1e cut", "CD", "#chi^{2}_{K^{+}}", "#chi^{2}_{K^{+}} histogram", "#chi^{2}_{K^{+}}", directories.Chi2_Directory_map["Chi2_1e_cut_Directory"],
                                            "03_Kplus_chi2", -Chi2_boundary, Chi2_boundary, numTH1Dbins);
    hPlot1D hChi2_Kplus_1e_cut_FD = hPlot1D("1e cut", "FD", "#chi^{2}_{K^{+}}", "#chi^{2}_{K^{+}} histogram", "#chi^{2}_{K^{+}}", directories.Chi2_Directory_map["Chi2_1e_cut_Directory"],
                                            "03_Kplus_chi2", -Chi2_boundary, Chi2_boundary, numTH1Dbins);

    hPlot1D hChi2_Kminus_1e_cut_CD = hPlot1D("1e cut", "CD", "#chi^{2}_{K^{-}}", "#chi^{2}_{K^{-}} histogram", "#chi^{2}_{K^{-}}", directories.Chi2_Directory_map["Chi2_1e_cut_Directory"],
                                             "04_Kminus_chi2", -Chi2_boundary, Chi2_boundary, numTH1Dbins);
    hPlot1D hChi2_Kminus_1e_cut_FD = hPlot1D("1e cut", "FD", "#chi^{2}_{K^{-}}", "#chi^{2}_{K^{-}} histogram", "#chi^{2}_{K^{-}}", directories.Chi2_Directory_map["Chi2_1e_cut_Directory"],
                                             "04_Kminus_chi2", -Chi2_boundary, Chi2_boundary, numTH1Dbins);

    hPlot1D hChi2_piplus_1e_cut_CD = hPlot1D("1e cut", "CD", "#chi^{2}_{#pi^{+}}", "#chi^{2}_{#pi^{+}} histogram", "#chi^{2}_{#pi^{+}}",
                                             directories.Chi2_Directory_map["Chi2_1e_cut_Directory"], "05_piplus_chi2", -Chi2_boundary, Chi2_boundary, numTH1Dbins);
    hPlot1D hChi2_piplus_1e_cut_FD = hPlot1D("1e cut", "FD", "#chi^{2}_{#pi^{+}}", "#chi^{2}_{#pi^{+}} histogram", "#chi^{2}_{#pi^{+}}",
                                             directories.Chi2_Directory_map["Chi2_1e_cut_Directory"], "05_piplus_chi2", -Chi2_boundary, Chi2_boundary, numTH1Dbins);

    hPlot1D hChi2_piminus_1e_cut_CD = hPlot1D("1e cut", "CD", "#chi^{2}_{#pi^{-}}", "#chi^{2}_{#pi^{-}} histogram", "#chi^{2}_{#pi^{-}}",
                                              directories.Chi2_Directory_map["Chi2_1e_cut_Directory"], "06_piminus_chi2", -Chi2_boundary, Chi2_boundary, numTH1Dbins);
    hPlot1D hChi2_piminus_1e_cut_FD = hPlot1D("1e cut", "FD", "#chi^{2}_{#pi^{-}}", "#chi^{2}_{#pi^{-}} histogram", "#chi^{2}_{#pi^{-}}",
                                              directories.Chi2_Directory_map["Chi2_1e_cut_Directory"], "06_piminus_chi2", -Chi2_boundary, Chi2_boundary, numTH1Dbins);

    hPlot1D hChi2_deuteron_1e_cut_CD = hPlot1D("1e cut", "CD", "#chi^{2}_{D}", "#chi^{2}_{D} histogram", "#chi^{2}_{D}", directories.Chi2_Directory_map["Chi2_1e_cut_Directory"],
                                               "07_deuteron_chi2", -Chi2_boundary, Chi2_boundary, numTH1Dbins);
    hPlot1D hChi2_deuteron_1e_cut_FD = hPlot1D("1e cut", "FD", "#chi^{2}_{D}", "#chi^{2}_{D} histogram", "#chi^{2}_{D}", directories.Chi2_Directory_map["Chi2_1e_cut_Directory"],
                                               "07_deuteron_chi2", -Chi2_boundary, Chi2_boundary, numTH1Dbins);

    // Chi2 plots (1p)
    hPlot1D hChi2_Electron_1p_FD = hPlot1D("1p", "", "#chi^{2}_{e}", "#chi^{2}_{e} histogram", "#chi^{2}_{e}", directories.Chi2_Directory_map["Chi2_1p_Directory"], "01_Electron_Chi2_1p",
                                           -Chi2_boundary, Chi2_boundary, numTH1Dbins);
    hPlot1D hChi2_Proton_1p_CD = hPlot1D("1p", "CD", "#chi^{2}_{p}", "#chi^{2}_{p} histogram", "#chi^{2}_{p}", directories.Chi2_Directory_map["Chi2_1p_Directory"], "02_Proton_Chi2_1p",
                                         -Chi2_boundary, Chi2_boundary, numTH1Dbins);
    hPlot1D hChi2_Proton_1p_FD = hPlot1D("1p", "FD", "#chi^{2}_{p}", "#chi^{2}_{p} histogram", "#chi^{2}_{p}", directories.Chi2_Directory_map["Chi2_1p_Directory"], "02_Proton_Chi2_1p",
                                         -Chi2_boundary, Chi2_boundary, numTH1Dbins);

    // Chi2 plots (1n)
    hPlot1D hChi2_Electron_1n_FD = hPlot1D("1n", "", "#chi^{2}_{e}", "#chi^{2}_{e} histogram", "#chi^{2}_{e}", directories.Chi2_Directory_map["Chi2_1n_Directory"], "01_Electron_Chi2_1n",
                                           -Chi2_boundary, Chi2_boundary, numTH1Dbins);
    hPlot1D hChi2_Proton_1n_CD = hPlot1D("1n", "CD", "#chi^{2}_{p}", "#chi^{2}_{p} histogram", "#chi^{2}_{p}", directories.Chi2_Directory_map["Chi2_1n_Directory"], "02_Proton_Chi2_1n",
                                         -Chi2_boundary, Chi2_boundary, numTH1Dbins);
    hPlot1D hChi2_Proton_1n_FD = hPlot1D("1n", "FD", "#chi^{2}_{p}", "#chi^{2}_{p} histogram", "#chi^{2}_{p}", directories.Chi2_Directory_map["Chi2_1n_Directory"], "02_Proton_Chi2_1n",
                                         -Chi2_boundary, Chi2_boundary, numTH1Dbins);

    // Chi2 plots (2p)
    hPlot1D hChi2_Electron_2p_FD = hPlot1D("2p", "", "#chi^{2}_{e}", "#chi^{2}_{e} histogram", "#chi^{2}_{e}", directories.Chi2_Directory_map["Chi2_2p_Directory"], "01_Electron_Chi2_2p",
                                           -Chi2_boundary, Chi2_boundary, numTH1Dbins);
    hPlot1D hChi2_Proton_2p_CD = hPlot1D("2p", "CD", "#chi^{2}_{p}", "#chi^{2}_{p} histogram", "#chi^{2}_{p}", directories.Chi2_Directory_map["Chi2_2p_Directory"], "02_Proton_Chi2_2p",
                                         -Chi2_boundary, Chi2_boundary, numTH1Dbins);
    hPlot1D hChi2_Proton_2p_FD = hPlot1D("2p", "FD", "#chi^{2}_{p}", "#chi^{2}_{p} histogram", "#chi^{2}_{p}", directories.Chi2_Directory_map["Chi2_2p_Directory"], "02_Proton_Chi2_2p",
                                         -Chi2_boundary, Chi2_boundary, numTH1Dbins);

    // Chi2 plots (pFDpCD)
    hPlot1D hChi2_Electron_pFDpCD_FD = hPlot1D("pFDpCD", "", "#chi^{2}_{e}", "#chi^{2}_{e} histogram", "#chi^{2}_{e}", directories.Chi2_Directory_map["Chi2_pFDpCD_Directory"],
                                               "01_Electron_Chi2_pFDpCD", -Chi2_boundary, Chi2_boundary, numTH1Dbins);

    hPlot1D hChi2_Proton_pFDpCD_CD = hPlot1D("pFDpCD", "CD", "#chi^{2}_{pCD}", "#chi^{2}_{pCD} histogram", "#chi^{2}_{pCD}", directories.Chi2_Directory_map["Chi2_pFDpCD_Directory"],
                                             "02_Proton_Chi2_pFDpCD", -Chi2_boundary, Chi2_boundary, numTH1Dbins);
    hPlot1D hChi2_Proton_pFDpCD_FD = hPlot1D("pFDpCD", "FD", "#chi^{2}_{pFD}", "#chi^{2}_{pFD} histogram", "#chi^{2}_{pFD}", directories.Chi2_Directory_map["Chi2_pFDpCD_Directory"],
                                             "02_Proton_Chi2_pFDpCD", -Chi2_boundary, Chi2_boundary, numTH1Dbins);

    // Chi2 plots (nFDpCD)
    hPlot1D hChi2_Electron_nFDpCD_FD = hPlot1D("nFDpCD", "", "#chi^{2}_{e}", "#chi^{2}_{e} histogram", "#chi^{2}_{e}", directories.Chi2_Directory_map["Chi2_nFDpCD_Directory"],
                                               "01_Electron_Chi2_nFDpCD", -Chi2_boundary, Chi2_boundary, numTH1Dbins);

    hPlot1D hChi2_Proton_nFDpCD_CD = hPlot1D("nFDpCD", "CD", "#chi^{2}_{pCD}", "#chi^{2}_{pCD} histogram", "#chi^{2}_{pCD}", directories.Chi2_Directory_map["Chi2_nFDpCD_Directory"],
                                             "02_Proton_Chi2_nFDpCD", -Chi2_boundary, Chi2_boundary, numTH1Dbins);
    hPlot1D hChi2_Proton_nFDpCD_FD = hPlot1D("nFDpCD", "FD", "#chi^{2}_{p}", "#chi^{2}_{p} histogram", "#chi^{2}_{p}", directories.Chi2_Directory_map["Chi2_nFDpCD_Directory"],
                                             "02_Proton_Chi2_nFDpCD", -Chi2_boundary, Chi2_boundary, numTH1Dbins);

    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // Vertex plots
    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Vertex plots

    // Vertex plots (1e cut)
    hPlot1D hVx_Electron_1e_cut_FD = hPlot1D("1e cut", "", "V_{x}^{e}", "V_{x}^{e} histogram", "V_{x}^{e} [cm]", directories.Vertex_Directory_map["Vertex_Electron_1e_cut_Vtx_Directory"],
                                             "01_Electron_Vx", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVx_Electron_1e_cut_FD.SetLogScalePlot(Log_scale_Vx_plots);
    hPlot1D hVy_Electron_1e_cut_FD = hPlot1D("1e cut", "", "V_{y}^{e}", "V_{y}^{e} histogram", "V_{y}^{e} [cm]", directories.Vertex_Directory_map["Vertex_Electron_1e_cut_Vtx_Directory"],
                                             "02_Electron_Vy", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVy_Electron_1e_cut_FD.SetLogScalePlot(Log_scale_Vy_plots);
    hPlot1D hVz_Electron_1e_cut_FD = hPlot1D("1e cut", "", "V_{z}^{e}", "V_{z}^{e} histogram", "V_{z}^{e} [cm]", directories.Vertex_Directory_map["Vertex_Electron_1e_cut_Vtx_Directory"],
                                             "03_Electron_Vz", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVz_Electron_1e_cut_FD.SetLogScalePlot(Log_scale_Vz_plots);
    hPlot2D hVz_Electron_vs_P_e_1e_cut_FD =
        hPlot2D("1e cut", "FD", "V_{z}^{e} vs. P_{e}", "V_{z}^{e} vs. P_{e}", "P_{e} [GeV/c]", "V_{z}^{e} [cm]", directories.Vertex_Directory_map["Vertex_Electron_1e_cut_Vtx_Directory"],
                "04_Vz_Electron_vs_P_e_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, Vertex_lboundary_FD, Vertex_uboundary_FD, numTH2Dbins, numTH2Dbins);
    hPlot2D hVz_Electron_vs_Theta_e_1e_cut_FD = hPlot2D("1e cut", "FD", "V_{z}^{e} vs. #theta_{e}", "V_{z}^{e} vs. #theta_{e}", "#theta_{e} [#circ]", "V_{z}^{e} [cm]",
                                                        directories.Vertex_Directory_map["Vertex_Electron_1e_cut_Vtx_Directory"], "05_Vz_Electron_vs_Theta_e_1e_cut_FD", Theta_lboundary_FD,
                                                        Theta_uboundary_FD, Vertex_lboundary_FD, Vertex_uboundary_FD, numTH2Dbins, numTH2Dbins);
    hPlot2D hVz_Electron_vs_Phi_e_1e_cut_FD = hPlot2D("1e cut", "FD", "V_{z}^{e} vs. #phi_{e}", "V_{z}^{e} vs. #theta_{e}", "#phi_{e} [#circ]", "V_{z}^{e} [cm]",
                                                      directories.Vertex_Directory_map["Vertex_Electron_1e_cut_Vtx_Directory"], "06_Vz_Electron_vs_Phi_e_1e_cut_FD", Phi_lboundary,
                                                      Phi_uboundary, Vertex_lboundary_FD, Vertex_uboundary_FD, numTH2Dbins, numTH2Dbins);

    hPlot1D hVx_Proton_1e_cut_CD = hPlot1D("1e cut", "CD", "V_{x}^{p}", "V_{x}^{p} histogram", "V_{x}^{p} [cm]", directories.Vertex_Directory_map["Vertex_Proton_1e_cut_Vtx_Directory"],
                                           "01_Proton_Vx", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hVx_Proton_1e_cut_CD.SetLogScalePlot(Log_scale_Vx_plots);
    hPlot1D hVx_Proton_1e_cut_FD = hPlot1D("1e cut", "FD", "V_{x}^{p}", "V_{x}^{p} histogram", "V_{x}^{p} [cm]", directories.Vertex_Directory_map["Vertex_Proton_1e_cut_Vtx_Directory"],
                                           "01_Proton_Vx", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVx_Proton_1e_cut_FD.SetLogScalePlot(Log_scale_Vx_plots);
    hPlot1D hVy_Proton_1e_cut_CD = hPlot1D("1e cut", "CD", "V_{y}^{p}", "V_{y}^{p} histogram", "V_{y}^{p} [cm]", directories.Vertex_Directory_map["Vertex_Proton_1e_cut_Vtx_Directory"],
                                           "02_Proton_Vy", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hVy_Proton_1e_cut_CD.SetLogScalePlot(Log_scale_Vy_plots);
    hPlot1D hVy_Proton_1e_cut_FD = hPlot1D("1e cut", "FD", "V_{y}^{p}", "V_{y}^{p} histogram", "V_{y}^{p} [cm]", directories.Vertex_Directory_map["Vertex_Proton_1e_cut_Vtx_Directory"],
                                           "02_Proton_Vy", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVy_Proton_1e_cut_FD.SetLogScalePlot(Log_scale_Vy_plots);
    hPlot1D hVz_Proton_1e_cut_CD = hPlot1D("1e cut", "CD", "V_{z}^{p}", "V_{z}^{p} histogram", "V_{z}^{p} [cm]", directories.Vertex_Directory_map["Vertex_Proton_1e_cut_Vtx_Directory"],
                                           "03_Proton_Vz", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hVz_Proton_1e_cut_CD.SetLogScalePlot(Log_scale_Vz_plots);
    hPlot1D hVz_Proton_1e_cut_FD = hPlot1D("1e cut", "FD", "V_{z}^{p}", "V_{z}^{p} histogram", "V_{z}^{p} [cm]", directories.Vertex_Directory_map["Vertex_Proton_1e_cut_Vtx_Directory"],
                                           "03_Proton_Vz", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVz_Proton_1e_cut_FD.SetLogScalePlot(Log_scale_Vz_plots);
    hPlot2D hVz_Proton_vs_P_p_1e_cut_FD =
        hPlot2D("1e cut", "FD", "V_{z}^{p} vs. P_{p}", "V_{z}^{p} vs. P_{p}", "P_{p} [GeV/c]", "V_{z}^{p} [cm]", directories.Vertex_Directory_map["Vertex_Proton_1e_cut_Vtx_Directory"],
                "04a_Vz_Proton_vs_P_p_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, Vertex_lboundary_FD, Vertex_uboundary_FD, numTH2Dbins, numTH2Dbins);
    hPlot2D hVz_Proton_vs_Theta_p_1e_cut_FD = hPlot2D("1e cut", "FD", "V_{z}^{p} vs. #theta_{p}", "V_{z}^{p} vs. #theta_{p}", "#theta_{p} [#circ]", "V_{z}^{p} [cm]",
                                                      directories.Vertex_Directory_map["Vertex_Proton_1e_cut_Vtx_Directory"], "05a_Vz_Proton_vs_Theta_p_1e_cut_FD", Theta_lboundary_FD,
                                                      Theta_uboundary_FD, Vertex_lboundary_FD, Vertex_uboundary_FD, numTH2Dbins, numTH2Dbins);
    hPlot2D hVz_Proton_vs_Phi_p_1e_cut_FD = hPlot2D("1e cut", "FD", "V_{z}^{p} vs. #phi_{p}", "V_{z}^{p} vs. #theta_{p}", "#phi_{p} [#circ]", "V_{z}^{p} [cm]",
                                                    directories.Vertex_Directory_map["Vertex_Proton_1e_cut_Vtx_Directory"], "06a_Vz_Proton_vs_Phi_p_1e_cut_FD", Phi_lboundary, Phi_uboundary,
                                                    Vertex_lboundary_FD, Vertex_uboundary_FD, numTH2Dbins, numTH2Dbins);
    hPlot2D hVz_Proton_vs_P_p_1e_cut_CD =
        hPlot2D("1e cut", "CD", "V_{z}^{p} vs. P_{p}", "V_{z}^{p} vs. P_{p}", "P_{p} [GeV/c]", "V_{z}^{p} [cm]", directories.Vertex_Directory_map["Vertex_Proton_1e_cut_Vtx_Directory"],
                "04b_Vz_Proton_vs_P_p_1e_cut_CD", Momentum_lboundary, Momentum_uboundary, Vertex_lboundary_CD, Vertex_uboundary_CD, numTH2Dbins, numTH2Dbins);
    hPlot2D hVz_Proton_vs_Theta_p_1e_cut_CD = hPlot2D("1e cut", "CD", "V_{z}^{p} vs. #theta_{p}", "V_{z}^{p} vs. #theta_{p}", "#theta_{p} [#circ]", "V_{z}^{p} [cm]",
                                                      directories.Vertex_Directory_map["Vertex_Proton_1e_cut_Vtx_Directory"], "05b_Vz_Proton_vs_Theta_p_1e_cut_CD", Theta_lboundary_CD,
                                                      Theta_uboundary_CD, Vertex_lboundary_CD, Vertex_uboundary_CD, numTH2Dbins, numTH2Dbins);
    hPlot2D hVz_Proton_vs_Phi_p_1e_cut_CD = hPlot2D("1e cut", "CD", "V_{z}^{p} vs. #phi_{p}", "V_{z}^{p} vs. #theta_{p}", "#phi_{p} [#circ]", "V_{z}^{p} [cm]",
                                                    directories.Vertex_Directory_map["Vertex_Proton_1e_cut_Vtx_Directory"], "06b_Vz_Proton_vs_Phi_p_1e_cut_CD", Phi_lboundary, Phi_uboundary,
                                                    Vertex_lboundary_CD, Vertex_uboundary_CD, numTH2Dbins, numTH2Dbins);

    hPlot1D hVx_Kplus_1e_cut_CD = hPlot1D("1e cut", "CD", "V_{x}^{K^{+}}", "V_{x}^{K^{+}} histogram", "V_{x}^{K^{+}} [cm]",
                                          directories.Vertex_Directory_map["Vertex_Kplus_1e_cut_Vtx_Directory"], "01_Kplus_Vx", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hVx_Kplus_1e_cut_CD.SetLogScalePlot(Log_scale_Vx_plots);
    hPlot1D hVx_Kplus_1e_cut_FD = hPlot1D("1e cut", "FD", "V_{x}^{K^{+}}", "V_{x}^{K^{+}} histogram", "V_{x}^{K^{+}} [cm]",
                                          directories.Vertex_Directory_map["Vertex_Kplus_1e_cut_Vtx_Directory"], "01_Kplus_Vx", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVx_Kplus_1e_cut_FD.SetLogScalePlot(Log_scale_Vx_plots);
    hPlot1D hVy_Kplus_1e_cut_CD = hPlot1D("1e cut", "CD", "V_{y}^{K^{+}}", "V_{y}^{K^{+}} histogram", "V_{y}^{K^{+}} [cm]",
                                          directories.Vertex_Directory_map["Vertex_Kplus_1e_cut_Vtx_Directory"], "02_Kplus_Vy", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hVy_Kplus_1e_cut_CD.SetLogScalePlot(Log_scale_Vy_plots);
    hPlot1D hVy_Kplus_1e_cut_FD = hPlot1D("1e cut", "FD", "V_{y}^{K^{+}}", "V_{y}^{K^{+}} histogram", "V_{y}^{K^{+}} [cm]",
                                          directories.Vertex_Directory_map["Vertex_Kplus_1e_cut_Vtx_Directory"], "02_Kplus_Vy", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVy_Kplus_1e_cut_FD.SetLogScalePlot(Log_scale_Vy_plots);
    hPlot1D hVz_Kplus_1e_cut_CD = hPlot1D("1e cut", "CD", "V_{z}^{K^{+}}", "V_{z}^{K^{+}} histogram", "V_{z}^{K^{+}} [cm]",
                                          directories.Vertex_Directory_map["Vertex_Kplus_1e_cut_Vtx_Directory"], "03_Kplus_Vz", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hVz_Kplus_1e_cut_CD.SetLogScalePlot(Log_scale_Vz_plots);
    hPlot1D hVz_Kplus_1e_cut_FD = hPlot1D("1e cut", "FD", "V_{z}^{K^{+}}", "V_{z}^{K^{+}} histogram", "V_{z}^{K^{+}} [cm]",
                                          directories.Vertex_Directory_map["Vertex_Kplus_1e_cut_Vtx_Directory"], "03_Kplus_Vz", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVz_Kplus_1e_cut_FD.SetLogScalePlot(Log_scale_Vz_plots);

    hPlot1D hVx_Kminus_1e_cut_CD = hPlot1D("1e cut", "CD", "V_{x}^{K^{-}}", "V_{x}^{K^{-}} histogram", "V_{x}^{K^{-}} [cm]",
                                           directories.Vertex_Directory_map["Vertex_Kminus_1e_cut_Vtx_Directory"], "01_Kminus_Vx", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hVx_Kminus_1e_cut_CD.SetLogScalePlot(Log_scale_Vx_plots);
    hPlot1D hVx_Kminus_1e_cut_FD = hPlot1D("1e cut", "FD", "V_{x}^{K^{-}}", "V_{x}^{K^{-}} histogram", "V_{x}^{K^{-}} [cm]",
                                           directories.Vertex_Directory_map["Vertex_Kminus_1e_cut_Vtx_Directory"], "01_Kminus_Vx", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVx_Kminus_1e_cut_FD.SetLogScalePlot(Log_scale_Vx_plots);
    hPlot1D hVy_Kminus_1e_cut_CD = hPlot1D("1e cut", "CD", "V_{y}^{K^{-}}", "V_{y}^{K^{-}} histogram", "V_{y}^{K^{-}} [cm]",
                                           directories.Vertex_Directory_map["Vertex_Kminus_1e_cut_Vtx_Directory"], "02_Kminus_Vy", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hVy_Kminus_1e_cut_CD.SetLogScalePlot(Log_scale_Vy_plots);
    hPlot1D hVy_Kminus_1e_cut_FD = hPlot1D("1e cut", "FD", "V_{y}^{K^{-}}", "V_{y}^{K^{-}} histogram", "V_{y}^{K^{-}} [cm]",
                                           directories.Vertex_Directory_map["Vertex_Kminus_1e_cut_Vtx_Directory"], "02_Kminus_Vy", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVy_Kminus_1e_cut_FD.SetLogScalePlot(Log_scale_Vy_plots);
    hPlot1D hVz_Kminus_1e_cut_CD = hPlot1D("1e cut", "CD", "V_{z}^{K^{-}}", "V_{z}^{K^{-}} histogram", "V_{z}^{K^{-}} [cm]",
                                           directories.Vertex_Directory_map["Vertex_Kminus_1e_cut_Vtx_Directory"], "03_Kminus_Vz", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hVz_Kminus_1e_cut_CD.SetLogScalePlot(Log_scale_Vz_plots);
    hPlot1D hVz_Kminus_1e_cut_FD = hPlot1D("1e cut", "FD", "V_{z}^{K^{-}}", "V_{z}^{K^{-}} histogram", "V_{z}^{K^{-}} [cm]",
                                           directories.Vertex_Directory_map["Vertex_Kminus_1e_cut_Vtx_Directory"], "03_Kminus_Vz", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVz_Kminus_1e_cut_FD.SetLogScalePlot(Log_scale_Vz_plots);

    hPlot1D hVx_piplus_1e_cut_CD = hPlot1D("1e cut", "CD", "V_{x}^{#pi^{+}}", "V_{x}^{#pi^{+}} histogram", "V_{x}^{#pi^{+}} [cm]",
                                           directories.Vertex_Directory_map["Vertex_piplus_1e_cut_Vtx_Directory"], "01_piplus_Vx", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hVx_piplus_1e_cut_CD.SetLogScalePlot(Log_scale_Vx_plots);
    hPlot1D hVx_piplus_1e_cut_FD = hPlot1D("1e cut", "FD", "V_{x}^{#pi^{+}}", "V_{x}^{#pi^{+}} histogram", "V_{x}^{#pi^{+}} [cm]",
                                           directories.Vertex_Directory_map["Vertex_piplus_1e_cut_Vtx_Directory"], "01_piplus_Vx", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVx_piplus_1e_cut_FD.SetLogScalePlot(Log_scale_Vx_plots);
    hPlot1D hVy_piplus_1e_cut_CD = hPlot1D("1e cut", "CD", "V_{y}^{#pi^{+}}", "V_{y}^{#pi^{+}} histogram", "V_{y}^{#pi^{+}} [cm]",
                                           directories.Vertex_Directory_map["Vertex_piplus_1e_cut_Vtx_Directory"], "02_piplus_Vy", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hVy_piplus_1e_cut_CD.SetLogScalePlot(Log_scale_Vy_plots);
    hPlot1D hVy_piplus_1e_cut_FD = hPlot1D("1e cut", "FD", "V_{y}^{#pi^{+}}", "V_{y}^{#pi^{+}} histogram", "V_{y}^{#pi^{+}} [cm]",
                                           directories.Vertex_Directory_map["Vertex_piplus_1e_cut_Vtx_Directory"], "02_piplus_Vy", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVy_piplus_1e_cut_FD.SetLogScalePlot(Log_scale_Vy_plots);
    hPlot1D hVz_piplus_1e_cut_CD = hPlot1D("1e cut", "CD", "V_{z}^{#pi^{+}}", "V_{z}^{#pi^{+}} histogram", "V_{z}^{#pi^{+}} [cm]",
                                           directories.Vertex_Directory_map["Vertex_piplus_1e_cut_Vtx_Directory"], "03_piplus_Vz", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hVz_piplus_1e_cut_CD.SetLogScalePlot(Log_scale_Vz_plots);
    hPlot1D hVz_piplus_1e_cut_FD = hPlot1D("1e cut", "FD", "V_{z}^{#pi^{+}}", "V_{z}^{#pi^{+}} histogram", "V_{z}^{#pi^{+}} [cm]",
                                           directories.Vertex_Directory_map["Vertex_piplus_1e_cut_Vtx_Directory"], "03_piplus_Vz", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVz_piplus_1e_cut_FD.SetLogScalePlot(Log_scale_Vz_plots);

    hPlot1D hVx_piminus_1e_cut_CD = hPlot1D("1e cut", "CD", "V_{x}^{#pi^{-}}", "V_{x}^{#pi^{-}} histogram", "V_{x}^{#pi^{-}} [cm]",
                                            directories.Vertex_Directory_map["Vertex_piminus_1e_cut_Vtx_Directory"], "01_piminus_Vx", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hVx_piminus_1e_cut_CD.SetLogScalePlot(Log_scale_Vx_plots);
    hPlot1D hVx_piminus_1e_cut_FD = hPlot1D("1e cut", "FD", "V_{x}^{#pi^{-}}", "V_{x}^{#pi^{-}} histogram", "V_{x}^{#pi^{-}} [cm]",
                                            directories.Vertex_Directory_map["Vertex_piminus_1e_cut_Vtx_Directory"], "01_piminus_Vx", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVx_piminus_1e_cut_FD.SetLogScalePlot(Log_scale_Vx_plots);
    hPlot1D hVy_piminus_1e_cut_CD = hPlot1D("1e cut", "CD", "V_{y}^{#pi^{-}}", "V_{y}^{#pi^{-}} histogram", "V_{y}^{#pi^{-}} [cm]",
                                            directories.Vertex_Directory_map["Vertex_piminus_1e_cut_Vtx_Directory"], "02_piminus_Vy", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hVy_piminus_1e_cut_CD.SetLogScalePlot(Log_scale_Vy_plots);
    hPlot1D hVy_piminus_1e_cut_FD = hPlot1D("1e cut", "FD", "V_{y}^{#pi^{-}}", "V_{y}^{#pi^{-}} histogram", "V_{y}^{#pi^{-}} [cm]",
                                            directories.Vertex_Directory_map["Vertex_piminus_1e_cut_Vtx_Directory"], "02_piminus_Vy", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVy_piminus_1e_cut_FD.SetLogScalePlot(Log_scale_Vy_plots);
    hPlot1D hVz_piminus_1e_cut_CD = hPlot1D("1e cut", "CD", "V_{z}^{#pi^{-}}", "V_{z}^{#pi^{-}} histogram", "V_{z}^{#pi^{-}} [cm]",
                                            directories.Vertex_Directory_map["Vertex_piminus_1e_cut_Vtx_Directory"], "03_piminus_Vz", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hVz_piminus_1e_cut_CD.SetLogScalePlot(Log_scale_Vz_plots);
    hPlot1D hVz_piminus_1e_cut_FD = hPlot1D("1e cut", "FD", "V_{z}^{#pi^{-}}", "V_{z}^{#pi^{-}} histogram", "V_{z}^{#pi^{-}} [cm]",
                                            directories.Vertex_Directory_map["Vertex_piminus_1e_cut_Vtx_Directory"], "03_piminus_Vz", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVz_piminus_1e_cut_FD.SetLogScalePlot(Log_scale_Vz_plots);

    hPlot1D hVx_Deuteron_1e_cut_CD = hPlot1D("1e cut", "CD", "V_{x}^{D}", "V_{x}^{D} histogram", "V_{x}^{D} [cm]", directories.Vertex_Directory_map["Vertex_deuteron_1e_cut_Vtx_Directory"],
                                             "01_Deuteron_Vx", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hVx_Deuteron_1e_cut_CD.SetLogScalePlot(Log_scale_Vx_plots);
    hPlot1D hVx_Deuteron_1e_cut_FD = hPlot1D("1e cut", "FD", "V_{x}^{D}", "V_{x}^{D} histogram", "V_{x}^{D} [cm]", directories.Vertex_Directory_map["Vertex_deuteron_1e_cut_Vtx_Directory"],
                                             "01_Deuteron_Vx", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVx_Deuteron_1e_cut_FD.SetLogScalePlot(Log_scale_Vx_plots);
    hPlot1D hVy_Deuteron_1e_cut_CD = hPlot1D("1e cut", "CD", "V_{y}^{D}", "V_{y}^{D} histogram", "V_{y}^{D} [cm]", directories.Vertex_Directory_map["Vertex_deuteron_1e_cut_Vtx_Directory"],
                                             "02_Deuteron_Vy", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hVy_Deuteron_1e_cut_CD.SetLogScalePlot(Log_scale_Vy_plots);
    hPlot1D hVy_Deuteron_1e_cut_FD = hPlot1D("1e cut", "FD", "V_{y}^{D}", "V_{y}^{D} histogram", "V_{y}^{D} [cm]", directories.Vertex_Directory_map["Vertex_deuteron_1e_cut_Vtx_Directory"],
                                             "02_Deuteron_Vy", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVy_Deuteron_1e_cut_FD.SetLogScalePlot(Log_scale_Vy_plots);
    hPlot1D hVz_Deuteron_1e_cut_CD = hPlot1D("1e cut", "CD", "V_{z}^{D}", "V_{z}^{D} histogram", "V_{z}^{D} [cm]", directories.Vertex_Directory_map["Vertex_deuteron_1e_cut_Vtx_Directory"],
                                             "03_Deuteron_Vz", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hVz_Deuteron_1e_cut_CD.SetLogScalePlot(Log_scale_Vz_plots);
    hPlot1D hVz_Deuteron_1e_cut_FD = hPlot1D("1e cut", "FD", "V_{z}^{D}", "V_{z}^{D} histogram", "V_{z}^{D} [cm]", directories.Vertex_Directory_map["Vertex_deuteron_1e_cut_Vtx_Directory"],
                                             "03_Deuteron_Vz", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hVz_Deuteron_1e_cut_FD.SetLogScalePlot(Log_scale_Vz_plots);

    // dV plots (1e cut)
    hPlot1D hdVx_Proton_FD_1e_cut = hPlot1D("1e cut", "FD", "Vertex corr. dV^{p}_{x}", "Vertex correlation dV^{p}_{x}=V^{p}_{x}-V^{e}_{x}", "dV^{p}_{x} [cm]",
                                            directories.Vertex_Directory_map["Vertex_corr_Proton_1e_cut_Vtx_Directory"], "01_dVx_d", dV_lboundary_FD, dV_uboundary_FD, numTH1Dbins);
    hPlot1D hdVy_Proton_FD_1e_cut = hPlot1D("1e cut", "FD", "Vertex corr. dV^{p}_{y}", "Vertex correlation dV^{p}_{y}=V^{p}_{y}-V^{e}_{y}", "dV^{p}_{y} [cm]",
                                            directories.Vertex_Directory_map["Vertex_corr_Proton_1e_cut_Vtx_Directory"], "02_dVy_d", dV_lboundary_FD, dV_uboundary_FD, numTH1Dbins);
    hPlot1D hdVz_Proton_FD_1e_cut = hPlot1D("1e cut", "FD", "Vertex corr. dV^{p}_{z}", "Vertex correlation dV^{p}_{z}=V^{p}_{z}-V^{e}_{z}", "dV^{p}_{z} [cm]",
                                            directories.Vertex_Directory_map["Vertex_corr_Proton_1e_cut_Vtx_Directory"], "03_dVz_d", dV_lboundary_FD, dV_uboundary_FD, numTH1Dbins);
    hdVz_Proton_FD_1e_cut.SetLogScalePlot(Log_scale_dVz_plots);
    hPlot2D hdVz_Proton_vs_P_p_1e_cut_FD = hPlot2D("1e cut", "FD", "dV^{p}_{z} vs. P_{p}", "dV^{p}_{z} vs. P_{p}", "P_{p} [GeV/c]", "dV^{p}_{z} [cm]",
                                                   directories.Vertex_Directory_map["Vertex_corr_Proton_1e_cut_Vtx_Directory"], "04a_dVz_Proton_vs_P_p_1e_cut_FD", Momentum_lboundary,
                                                   Momentum_uboundary, dV_lboundary_FD, dV_uboundary_FD, numTH2Dbins, numTH2Dbins);
    hPlot2D hdVz_Proton_vs_Theta_p_1e_cut_FD = hPlot2D("1e cut", "FD", "dV^{p}_{z} vs. #theta_{p}", "dV^{p}_{z} vs. #theta_{p}", "#theta_{p} [#circ]", "dV^{p}_{z} [cm]",
                                                       directories.Vertex_Directory_map["Vertex_corr_Proton_1e_cut_Vtx_Directory"], "05a_dVz_Proton_vs_Theta_p_1e_cut_FD", Theta_lboundary_FD,
                                                       Theta_uboundary_FD, dV_lboundary_FD, dV_uboundary_FD, numTH2Dbins, numTH2Dbins);
    hPlot2D hdVz_Proton_vs_Phi_p_1e_cut_FD = hPlot2D("1e cut", "FD", "dV^{p}_{z} vs. #phi_{p}", "dV^{p}_{z} vs. #theta_{p}", "#phi_{p} [#circ]", "dV^{p}_{z} [cm]",
                                                     directories.Vertex_Directory_map["Vertex_corr_Proton_1e_cut_Vtx_Directory"], "06a_dVz_Proton_vs_Phi_p_1e_cut_FD", Phi_lboundary,
                                                     Phi_uboundary, dV_lboundary_FD, dV_uboundary_FD, numTH2Dbins, numTH2Dbins);

    hPlot1D hdVx_Proton_CD_1e_cut = hPlot1D("1e cut", "CD", "Vertex corr. dV^{p}_{x}", "Vertex correlation dV^{p}_{x}=V^{p}_{x}-V^{e}_{x}", "dV^{p}_{x} [cm]",
                                            directories.Vertex_Directory_map["Vertex_corr_Proton_1e_cut_Vtx_Directory"], "01_dVx_d", dV_lboundary_CD, dV_uboundary_CD, numTH1Dbins);
    hPlot1D hdVy_Proton_CD_1e_cut = hPlot1D("1e cut", "CD", "Vertex corr. dV^{p}_{y}", "Vertex correlation dV^{p}_{y}=V^{p}_{y}-V^{e}_{y}", "dV^{p}_{y} [cm]",
                                            directories.Vertex_Directory_map["Vertex_corr_Proton_1e_cut_Vtx_Directory"], "02_dVy_d", dV_lboundary_CD, dV_uboundary_CD, numTH1Dbins);
    hPlot1D hdVz_Proton_CD_1e_cut = hPlot1D("1e cut", "CD", "Vertex corr. dV^{p}_{z}", "Vertex correlation dV^{p}_{z}=V^{p}_{z}-V^{e}_{z}", "dV^{p}_{z} [cm]",
                                            directories.Vertex_Directory_map["Vertex_corr_Proton_1e_cut_Vtx_Directory"], "03_dVz_d", dV_lboundary_CD, dV_uboundary_CD, numTH1Dbins);
    hdVz_Proton_CD_1e_cut.SetLogScalePlot(Log_scale_dVz_plots);
    hPlot2D hdVz_Proton_vs_P_p_1e_cut_CD = hPlot2D("1e cut", "CD", "dV^{p}_{z} vs. P_{p}", "dV^{p}_{z} vs. P_{p}", "P_{p} [GeV/c]", "dV^{p}_{z} [cm]",
                                                   directories.Vertex_Directory_map["Vertex_corr_Proton_1e_cut_Vtx_Directory"], "04b_dVz_Proton_vs_P_p_1e_cut_CD", Momentum_lboundary,
                                                   Momentum_uboundary, dV_lboundary_CD, dV_uboundary_CD, numTH2Dbins, numTH2Dbins);
    hPlot2D hdVz_Proton_vs_Theta_p_1e_cut_CD = hPlot2D("1e cut", "CD", "dV^{p}_{z} vs. #theta_{p}", "dV^{p}_{z} vs. #theta_{p}", "#theta_{p} [#circ]", "dV^{p}_{z} [cm]",
                                                       directories.Vertex_Directory_map["Vertex_corr_Proton_1e_cut_Vtx_Directory"], "05b_dVz_Proton_vs_Theta_p_1e_cut_CD", Theta_lboundary_CD,
                                                       Theta_uboundary_CD, dV_lboundary_CD, dV_uboundary_CD, numTH2Dbins, numTH2Dbins);
    hPlot2D hdVz_Proton_vs_Phi_p_1e_cut_CD = hPlot2D("1e cut", "CD", "dV^{p}_{z} vs. #phi_{p}", "dV^{p}_{z} vs. #theta_{p}", "#phi_{p} [#circ]", "dV^{p}_{z} [cm]",
                                                     directories.Vertex_Directory_map["Vertex_corr_Proton_1e_cut_Vtx_Directory"], "06b_dVz_Proton_vs_Phi_p_1e_cut_CD", Phi_lboundary,
                                                     Phi_uboundary, dV_lboundary_CD, dV_uboundary_CD, numTH2Dbins, numTH2Dbins);

    hPlot1D hdVx_Kplus_FD_1e_cut = hPlot1D("1e cut", "FD", "Vertex corr. dV^{K^{+}}_{x}", "Vertex correlation dV^{K^{+}}_{x}=V^{K^{+}}_{x}-V^{e}_{x}", "dV^{K^{+}}_{x} [cm]",
                                           directories.Vertex_Directory_map["Vertex_corr_Kplus_1e_cut_Vtx_Directory"], "01_dVx_Kplus", dV_lboundary_FD, dV_uboundary_FD, numTH1Dbins);
    hPlot1D hdVy_Kplus_FD_1e_cut = hPlot1D("1e cut", "FD", "Vertex corr. dV^{K^{+}}_{y}", "Vertex correlation dV^{K^{+}}_{y}=V^{K^{+}}_{y}-V^{e}_{y}", "dV^{K^{+}}_{y} [cm]",
                                           directories.Vertex_Directory_map["Vertex_corr_Kplus_1e_cut_Vtx_Directory"], "02_dVy_Kplus", dV_lboundary_FD, dV_uboundary_FD, numTH1Dbins);
    hPlot1D hdVz_Kplus_FD_1e_cut = hPlot1D("1e cut", "FD", "Vertex corr. dV^{K^{+}}_{z}", "Vertex correlation dV^{K^{+}}_{z}=V^{K^{+}}_{z}-V^{e}_{z}", "dV^{K^{+}}_{z} [cm]",
                                           directories.Vertex_Directory_map["Vertex_corr_Kplus_1e_cut_Vtx_Directory"], "03_dVz_Kplus", dV_lboundary_FD, dV_uboundary_FD, numTH1Dbins);
    hdVz_Kplus_FD_1e_cut.SetLogScalePlot(Log_scale_dVz_plots);
    hPlot1D hdVx_Kplus_CD_1e_cut = hPlot1D("1e cut", "CD", "Vertex corr. dV^{K^{+}}_{x}", "Vertex correlation dV^{K^{+}}_{x}=V^{K^{+}}_{x}-V^{e}_{x}", "dV^{K^{+}}_{x} [cm]",
                                           directories.Vertex_Directory_map["Vertex_corr_Kplus_1e_cut_Vtx_Directory"], "01_dVx_Kplus", dV_lboundary_CD, dV_uboundary_CD, numTH1Dbins);
    hPlot1D hdVy_Kplus_CD_1e_cut = hPlot1D("1e cut", "CD", "Vertex corr. dV^{K^{+}}_{y}", "Vertex correlation dV^{K^{+}}_{y}=V^{K^{+}}_{y}-V^{e}_{y}", "dV^{K^{+}}_{y} [cm]",
                                           directories.Vertex_Directory_map["Vertex_corr_Kplus_1e_cut_Vtx_Directory"], "02_dVy_Kplus", dV_lboundary_CD, dV_uboundary_CD, numTH1Dbins);
    hPlot1D hdVz_Kplus_CD_1e_cut = hPlot1D("1e cut", "CD", "Vertex corr. dV^{K^{+}}_{z}", "Vertex correlation dV^{K^{+}}_{z}=V^{K^{+}}_{z}-V^{e}_{z}", "dV^{K^{+}}_{z} [cm]",
                                           directories.Vertex_Directory_map["Vertex_corr_Kplus_1e_cut_Vtx_Directory"], "03_dVz_Kplus", dV_lboundary_CD, dV_uboundary_CD, numTH1Dbins);
    hdVz_Kplus_CD_1e_cut.SetLogScalePlot(Log_scale_dVz_plots);

    hPlot1D hdVx_Kminus_FD_1e_cut = hPlot1D("1e cut", "FD", "Vertex corr. dV^{K^{-}}_{x}", "Vertex correlation dV^{K^{-}}_{x}=V^{K^{-}}_{x}-V^{e}_{x}", "dV^{K^{-}}_{x} [cm]",
                                            directories.Vertex_Directory_map["Vertex_corr_Kminus_1e_cut_Vtx_Directory"], "01_dVx_Kminus", dV_lboundary_FD, dV_uboundary_FD, numTH1Dbins);
    hPlot1D hdVy_Kminus_FD_1e_cut = hPlot1D("1e cut", "FD", "Vertex corr. dV^{K^{-}}_{y}", "Vertex correlation dV^{K^{-}}_{y}=V^{K^{-}}_{y}-V^{e}_{y}", "dV^{K^{-}}_{y} [cm]",
                                            directories.Vertex_Directory_map["Vertex_corr_Kminus_1e_cut_Vtx_Directory"], "02_dVy_Kminus", dV_lboundary_FD, dV_uboundary_FD, numTH1Dbins);
    hPlot1D hdVz_Kminus_FD_1e_cut = hPlot1D("1e cut", "FD", "Vertex corr. dV^{K^{-}}_{z}", "Vertex correlation dV^{K^{-}}_{z}=V^{K^{-}}_{z}-V^{e}_{z}", "dV^{K^{-}}_{z} [cm]",
                                            directories.Vertex_Directory_map["Vertex_corr_Kminus_1e_cut_Vtx_Directory"], "03_dVz_Kminus", dV_lboundary_FD, dV_uboundary_FD, numTH1Dbins);
    hdVz_Kminus_FD_1e_cut.SetLogScalePlot(Log_scale_dVz_plots);
    hPlot1D hdVx_Kminus_CD_1e_cut = hPlot1D("1e cut", "CD", "Vertex corr. dV^{K^{-}}_{x}", "Vertex correlation dV^{K^{-}}_{x}=V^{K^{-}}_{x}-V^{e}_{x}", "dV^{K^{-}}_{x} [cm]",
                                            directories.Vertex_Directory_map["Vertex_corr_Kminus_1e_cut_Vtx_Directory"], "01_dVx_Kminus", dV_lboundary_CD, dV_uboundary_CD, numTH1Dbins);
    hPlot1D hdVy_Kminus_CD_1e_cut = hPlot1D("1e cut", "CD", "Vertex corr. dV^{K^{-}}_{y}", "Vertex correlation dV^{K^{-}}_{y}=V^{K^{-}}_{y}-V^{e}_{y}", "dV^{K^{-}}_{y} [cm]",
                                            directories.Vertex_Directory_map["Vertex_corr_Kminus_1e_cut_Vtx_Directory"], "02_dVy_Kminus", dV_lboundary_CD, dV_uboundary_CD, numTH1Dbins);
    hPlot1D hdVz_Kminus_CD_1e_cut = hPlot1D("1e cut", "CD", "Vertex corr. dV^{K^{-}}_{z}", "Vertex correlation dV^{K^{-}}_{z}=V^{K^{-}}_{z}-V^{e}_{z}", "dV^{K^{-}}_{z} [cm]",
                                            directories.Vertex_Directory_map["Vertex_corr_Kminus_1e_cut_Vtx_Directory"], "03_dVz_Kminus", dV_lboundary_CD, dV_uboundary_CD, numTH1Dbins);
    hdVz_Kminus_CD_1e_cut.SetLogScalePlot(Log_scale_dVz_plots);

    hPlot1D hdVx_piplus_FD_1e_cut = hPlot1D("1e cut", "FD", "Vertex corr. dV^{#pi^{+}}_{x}", "Vertex correlation dV^{#pi^{+}}_{x}=V^{#pi^{+}}_{x}-V^{e}_{x}", "dV^{#pi^{+}}_{x} [cm]",
                                            directories.Vertex_Directory_map["Vertex_corr_piplus_1e_cut_Vtx_Directory"], "01_dVx_Piplus", dV_lboundary_FD, dV_uboundary_FD, numTH1Dbins);
    hPlot1D hdVy_piplus_FD_1e_cut = hPlot1D("1e cut", "FD", "Vertex corr. dV^{#pi^{+}}_{y}", "Vertex correlation dV^{#pi^{+}}_{y}=V^{#pi^{+}}_{y}-V^{e}_{y}", "dV^{#pi^{+}}_{y} [cm]",
                                            directories.Vertex_Directory_map["Vertex_corr_piplus_1e_cut_Vtx_Directory"], "02_dVy_Piplus", dV_lboundary_FD, dV_uboundary_FD, numTH1Dbins);
    hPlot1D hdVz_piplus_FD_1e_cut = hPlot1D("1e cut", "FD", "Vertex corr. dV^{#pi^{+}}_{z}", "Vertex correlation dV^{#pi^{+}}_{z}=V^{#pi^{+}}_{z}-V^{e}_{z}", "dV^{#pi^{+}}_{z} [cm]",
                                            directories.Vertex_Directory_map["Vertex_corr_piplus_1e_cut_Vtx_Directory"], "03_dVz_Piplus", dV_lboundary_FD, dV_uboundary_FD, numTH1Dbins);
    hdVz_piplus_FD_1e_cut.SetLogScalePlot(Log_scale_dVz_plots);
    hPlot1D hdVx_piplus_CD_1e_cut = hPlot1D("1e cut", "CD", "Vertex corr. dV^{#pi^{+}}_{x}", "Vertex correlation dV^{#pi^{+}}_{x}=V^{#pi^{+}}_{x}-V^{e}_{x}", "dV^{#pi^{+}}_{x} [cm]",
                                            directories.Vertex_Directory_map["Vertex_corr_piplus_1e_cut_Vtx_Directory"], "01_dVx_Piplus", dV_lboundary_CD, dV_uboundary_CD, numTH1Dbins);
    hPlot1D hdVy_piplus_CD_1e_cut = hPlot1D("1e cut", "CD", "Vertex corr. dV^{#pi^{+}}_{y}", "Vertex correlation dV^{#pi^{+}}_{y}=V^{#pi^{+}}_{y}-V^{e}_{y}", "dV^{#pi^{+}}_{y} [cm]",
                                            directories.Vertex_Directory_map["Vertex_corr_piplus_1e_cut_Vtx_Directory"], "02_dVy_Piplus", dV_lboundary_CD, dV_uboundary_CD, numTH1Dbins);
    hPlot1D hdVz_piplus_CD_1e_cut = hPlot1D("1e cut", "CD", "Vertex corr. dV^{#pi^{+}}_{z}", "Vertex correlation dV^{#pi^{+}}_{z}=V^{#pi^{+}}_{z}-V^{e}_{z}", "dV^{#pi^{+}}_{z} [cm]",
                                            directories.Vertex_Directory_map["Vertex_corr_piplus_1e_cut_Vtx_Directory"], "03_dVz_Piplus", dV_lboundary_CD, dV_uboundary_CD, numTH1Dbins);
    hdVz_piplus_CD_1e_cut.SetLogScalePlot(Log_scale_dVz_plots);

    hPlot1D hdVx_piminus_FD_1e_cut = hPlot1D("1e cut", "FD", "Vertex corr. dV^{#pi^{-}}_{x}", "Vertex correlation dV^{#pi^{-}}_{x}=V^{#pi^{-}}_{x}-V^{e}_{x}", "dV^{#pi^{-}}_{x} [cm]",
                                             directories.Vertex_Directory_map["Vertex_corr_piminus_1e_cut_Vtx_Directory"], "01_dVx_Piminus", dV_lboundary_FD, dV_uboundary_FD, numTH1Dbins);
    hPlot1D hdVy_piminus_FD_1e_cut = hPlot1D("1e cut", "FD", "Vertex corr. dV^{#pi^{-}}_{y}", "Vertex correlation dV^{#pi^{-}}_{y}=V^{#pi^{-}}_{y}-V^{e}_{y}", "dV^{#pi^{-}}_{y} [cm]",
                                             directories.Vertex_Directory_map["Vertex_corr_piminus_1e_cut_Vtx_Directory"], "02_dVy_Piminus", dV_lboundary_FD, dV_uboundary_FD, numTH1Dbins);
    hPlot1D hdVz_piminus_FD_1e_cut = hPlot1D("1e cut", "FD", "Vertex corr. dV^{#pi^{-}}_{z}", "Vertex correlation dV^{#pi^{-}}_{z}=V^{#pi^{-}}_{z}-V^{e}_{z}", "dV^{#pi^{-}}_{z} [cm]",
                                             directories.Vertex_Directory_map["Vertex_corr_piminus_1e_cut_Vtx_Directory"], "03_dVz_Piminus", dV_lboundary_FD, dV_uboundary_FD, numTH1Dbins);
    hdVz_piminus_FD_1e_cut.SetLogScalePlot(Log_scale_dVz_plots);
    hPlot1D hdVx_piminus_CD_1e_cut = hPlot1D("1e cut", "CD", "Vertex corr. dV^{#pi^{-}}_{x}", "Vertex correlation dV^{#pi^{-}}_{x}=V^{#pi^{-}}_{x}-V^{e}_{x}", "dV^{#pi^{-}}_{x} [cm]",
                                             directories.Vertex_Directory_map["Vertex_corr_piminus_1e_cut_Vtx_Directory"], "01_dVx_Piminus", dV_lboundary_CD, dV_uboundary_CD, numTH1Dbins);
    hPlot1D hdVy_piminus_CD_1e_cut = hPlot1D("1e cut", "CD", "Vertex corr. dV^{#pi^{-}}_{y}", "Vertex correlation dV^{#pi^{-}}_{y}=V^{#pi^{-}}_{y}-V^{e}_{y}", "dV^{#pi^{-}}_{y} [cm]",
                                             directories.Vertex_Directory_map["Vertex_corr_piminus_1e_cut_Vtx_Directory"], "02_dVy_Piminus", dV_lboundary_CD, dV_uboundary_CD, numTH1Dbins);
    hPlot1D hdVz_piminus_CD_1e_cut = hPlot1D("1e cut", "CD", "Vertex corr. dV^{#pi^{-}}_{z}", "Vertex correlation dV^{#pi^{-}}_{z}=V^{#pi^{-}}_{z}-V^{e}_{z}", "dV^{#pi^{-}}_{z} [cm]",
                                             directories.Vertex_Directory_map["Vertex_corr_piminus_1e_cut_Vtx_Directory"], "03_dVz_Piminus", dV_lboundary_CD, dV_uboundary_CD, numTH1Dbins);
    hdVz_piminus_CD_1e_cut.SetLogScalePlot(Log_scale_dVz_plots);

    hPlot1D hdVx_Deuteron_FD_1e_cut = hPlot1D("1e cut", "FD", "Vertex corr. dV^{D}_{x}", "Vertex correlation dV^{D}_{x}=V^{D}_{x}-V^{e}_{x}", "dV^{D}_{x} [cm]",
                                              directories.Vertex_Directory_map["Vertex_corr_deuteron_1e_cut_Vtx_Directory"], "01_dVx_d", dV_lboundary_FD, dV_uboundary_FD, numTH1Dbins);
    hPlot1D hdVy_Deuteron_FD_1e_cut = hPlot1D("1e cut", "FD", "Vertex corr. dV^{D}_{y}", "Vertex correlation dV^{D}_{y}=V^{D}_{y}-V^{e}_{y}", "dV^{D}_{y} [cm]",
                                              directories.Vertex_Directory_map["Vertex_corr_deuteron_1e_cut_Vtx_Directory"], "02_dVy_d", dV_lboundary_FD, dV_uboundary_FD, numTH1Dbins);
    hPlot1D hdVz_Deuteron_FD_1e_cut = hPlot1D("1e cut", "FD", "Vertex corr. dV^{D}_{z}", "Vertex correlation dV^{D}_{z}=V^{D}_{z}-V^{e}_{z}", "dV^{D}_{z} [cm]",
                                              directories.Vertex_Directory_map["Vertex_corr_deuteron_1e_cut_Vtx_Directory"], "03_dVz_d", dV_lboundary_FD, dV_uboundary_FD, numTH1Dbins);
    hdVz_Deuteron_FD_1e_cut.SetLogScalePlot(Log_scale_dVz_plots);
    hPlot1D hdVx_Deuteron_CD_1e_cut = hPlot1D("1e cut", "CD", "Vertex corr. dV^{D}_{x}", "Vertex correlation dV^{D}_{x}=V^{D}_{x}-V^{e}_{x}", "dV^{D}_{x} [cm]",
                                              directories.Vertex_Directory_map["Vertex_corr_deuteron_1e_cut_Vtx_Directory"], "01_dVx_d", dV_lboundary_CD, dV_uboundary_CD, numTH1Dbins);
    hPlot1D hdVy_Deuteron_CD_1e_cut = hPlot1D("1e cut", "CD", "Vertex corr. dV^{D}_{y}", "Vertex correlation dV^{D}_{y}=V^{D}_{y}-V^{e}_{y}", "dV^{D}_{y} [cm]",
                                              directories.Vertex_Directory_map["Vertex_corr_deuteron_1e_cut_Vtx_Directory"], "02_dVy_d", dV_lboundary_CD, dV_uboundary_CD, numTH1Dbins);
    hPlot1D hdVz_Deuteron_CD_1e_cut = hPlot1D("1e cut", "CD", "Vertex corr. dV^{D}_{z}", "Vertex correlation dV^{D}_{z}=V^{D}_{z}-V^{e}_{z}", "dV^{D}_{z} [cm]",
                                              directories.Vertex_Directory_map["Vertex_corr_deuteron_1e_cut_Vtx_Directory"], "03_dVz_d", dV_lboundary_CD, dV_uboundary_CD, numTH1Dbins);
    hdVz_Deuteron_CD_1e_cut.SetLogScalePlot(Log_scale_dVz_plots);

    // dV plots (1p)
    hPlot1D hdVx_1p = hPlot1D("1p", "", "Vertex corr. dV^{p}_{x}", "Vertex correlation dV^{p}_{x}=V^{p}_{x}-V^{e}_{x}", "dV^{p}_{x} [cm]",
                              directories.Vertex_Directory_map["Vertex_dV_1p_Directory"], "01_dVx", -dV_boundary, dV_boundary, numTH1Dbins);
    hPlot1D hdVy_1p = hPlot1D("1p", "", "Vertex corr. dV^{p}_{y}", "Vertex correlation dV^{p}_{y}=V^{p}_{y}-V^{e}_{y}", "dV^{p}_{y} [cm]",
                              directories.Vertex_Directory_map["Vertex_dV_1p_Directory"], "02_dVy", -dV_boundary, dV_boundary, numTH1Dbins);
    hPlot1D hdVz_1p = hPlot1D("1p", "", "Vertex corr. dV^{p}_{z}", "Vertex correlation dV^{p}_{z}=V^{p}_{z}-V^{e}_{z}", "dV^{p}_{z} [cm]",
                              directories.Vertex_Directory_map["Vertex_dV_1p_Directory"], "03_dVz", -dV_boundary, dV_boundary, numTH1Dbins);

    // dV plots (1n)
    hPlot1D hdVx_1n = hPlot1D("1n", "", "Vertex corr. dV^{n}_{x}", "Vertex correlation dV^{n}_{x}=V^{n}_{x}-V^{e}_{x}", "dV^{n}_{x} [cm]",
                              directories.Vertex_Directory_map["Vertex_dV_1n_Directory"], "01_dVx", -dV_boundary, dV_boundary, numTH1Dbins);
    hPlot1D hdVy_1n = hPlot1D("1n", "", "Vertex corr. dV^{n}_{y}", "Vertex correlation dV^{n}_{y}=V^{n}_{y}-V^{e}_{y}", "dV^{n}_{y} [cm]",
                              directories.Vertex_Directory_map["Vertex_dV_1n_Directory"], "02_dVy", -dV_boundary, dV_boundary, numTH1Dbins);
    hPlot1D hdVz_1n = hPlot1D("1n", "", "Vertex corr. dV^{n}_{z}", "Vertex correlation dV^{n}_{z}=V^{n}_{z}-V^{e}_{z}", "dV^{n}_{z} [cm]",
                              directories.Vertex_Directory_map["Vertex_dV_1n_Directory"], "03_dVz", -dV_boundary, dV_boundary, numTH1Dbins);

    // dV plots (2p)
    hPlot1D hdVx_2p = hPlot1D("2p", "", "Vertex corr. dV^{p}_{x}", "Vertex correlation dV^{p}_{x}=V^{p}_{x}-V^{e}_{x}", "dV^{p}_{x} [cm]",
                              directories.Vertex_Directory_map["Vertex_dV_2p_Directory"], "01_dVx", -dV_boundary, dV_boundary, numTH1Dbins);
    hPlot1D hdVy_2p = hPlot1D("2p", "", "Vertex corr. dV^{p}_{y}", "Vertex correlation dV^{p}_{y}=V^{p}_{y}-V^{e}_{y}", "dV^{p}_{y} [cm]",
                              directories.Vertex_Directory_map["Vertex_dV_2p_Directory"], "02_dVy", -dV_boundary, dV_boundary, numTH1Dbins);
    hPlot1D hdVz_2p = hPlot1D("2p", "", "Vertex corr. dV^{p}_{z}", "Vertex correlation dV^{p}_{z}=V^{p}_{z}-V^{e}_{z}", "dV^{p}_{z} [cm]",
                              directories.Vertex_Directory_map["Vertex_dV_2p_Directory"], "03_dVz", -dV_boundary, dV_boundary, numTH1Dbins);

    // dV plots (pFDpCD)
    hPlot1D hdVx_pFDpCD = hPlot1D("pFDpCD", "", "Vertex corr. dV^{p}_{x}", "Vertex correlation dV^{p}_{x}=V^{p}_{x}-V^{e}_{x}", "dV^{p}_{x} [cm]",
                                  directories.Vertex_Directory_map["Vertex_dV_pFDpCD_Directory"], "01_dVx", -dV_boundary, dV_boundary, numTH1Dbins);
    hPlot1D hdVy_pFDpCD = hPlot1D("pFDpCD", "", "Vertex corr. dV^{p}_{y}", "Vertex correlation dV^{p}_{y}=V^{p}_{y}-V^{e}_{y}", "dV^{p}_{y} [cm]",
                                  directories.Vertex_Directory_map["Vertex_dV_pFDpCD_Directory"], "02_dVy", -dV_boundary, dV_boundary, numTH1Dbins);
    hPlot1D hdVz_pFDpCD = hPlot1D("pFDpCD", "", "Vertex corr. dV^{p}_{z}", "Vertex correlation dV^{p}_{z}=V^{p}_{z}-V^{e}_{z}", "dV^{p}_{z} [cm]",
                                  directories.Vertex_Directory_map["Vertex_dV_pFDpCD_Directory"], "03_dVz", -dV_boundary, dV_boundary, numTH1Dbins);

    hPlot1D hdVx_pFD_pFDpCD = hPlot1D("pFDpCD", "", "dV^{pFD}_{x} of FD proton", "Vertex corr. dV^{pFD}_{x}=V^{pFD}_{x}-V^{e}_{x} of FD proton", "dV^{pFD}_{x} [cm]",
                                      directories.Vertex_Directory_map["Vertex_dV_pFDpCD_Directory"], "04_dVx_pFD", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hPlot1D hdVy_pFD_pFDpCD = hPlot1D("pFDpCD", "", "dV^{pFD}_{y} of FD proton", "Vertex corr. dV^{pFD}_{y}=V^{pFD}_{y}-V^{e}_{y} of FD proton", "dV^{pFD}_{y} [cm]",
                                      directories.Vertex_Directory_map["Vertex_dV_pFDpCD_Directory"], "05_dVy_pFD", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);
    hPlot1D hdVz_pFD_pFDpCD = hPlot1D("pFDpCD", "", "dV^{pFD}_{z} of FD proton", "Vertex corr. dV^{pFD}_{z}=V^{pFD}_{z}-V^{e}_{z} of FD proton", "dV^{pFD}_{z} [cm]",
                                      directories.Vertex_Directory_map["Vertex_dV_pFDpCD_Directory"], "06_dVz_pFD", Vertex_lboundary_FD, Vertex_uboundary_FD, numTH1Dbins);

    hPlot1D hdVx_pCD_pFDpCD = hPlot1D("pFDpCD", "", "dV^{pCD}_{x} of CD proton", "Vertex corr. dV^{pCD}_{x}=V^{pCD}_{x}-V^{e}_{x} of CD proton", "dV^{pCD}_{x} [cm]",
                                      directories.Vertex_Directory_map["Vertex_dV_pFDpCD_Directory"], "07_dVx_pCD", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hPlot1D hdVy_pCD_pFDpCD = hPlot1D("pFDpCD", "", "dV^{pCD}_{y} of CD proton", "Vertex corr. dV^{pCD}_{y}=V^{pCD}_{y}-V^{e}_{y} of CD proton", "dV^{pCD}_{y} [cm]",
                                      directories.Vertex_Directory_map["Vertex_dV_pFDpCD_Directory"], "08_dVy_pCD", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hPlot1D hdVz_pCD_pFDpCD = hPlot1D("pFDpCD", "", "dV^{pCD}_{z} of CD proton", "Vertex corr. dV^{pCD}_{z}=V^{pCD}_{z}-V^{e}_{z} of CD proton", "dV^{pCD}_{z} [cm]",
                                      directories.Vertex_Directory_map["Vertex_dV_pFDpCD_Directory"], "09_dVz_pCD", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);

    // dV plots (nFDpCD)
    hPlot1D hdVx_nFDpCD = hPlot1D("nFDpCD", "", "Vertex corr. dV_{x}", "Vertex correlation dV_{x}=V^{p}_{x}-V^{e}_{x}", "dV_{x} [cm]",
                                  directories.Vertex_Directory_map["Vertex_dV_nFDpCD_Directory"], "01_dVx", -dV_boundary, dV_boundary, numTH1Dbins);
    hPlot1D hdVy_nFDpCD = hPlot1D("nFDpCD", "", "Vertex corr. dV_{y}", "Vertex correlation dV_{y}=V^{p}_{y}-V^{e}_{y}", "dV_{y} [cm]",
                                  directories.Vertex_Directory_map["Vertex_dV_nFDpCD_Directory"], "02_dVy", -dV_boundary, dV_boundary, numTH1Dbins);
    hPlot1D hdVz_nFDpCD = hPlot1D("nFDpCD", "", "Vertex corr. dV_{z}", "Vertex correlation dV_{z}=V^{p}_{z}-V^{e}_{z}", "dV_{z} [cm]",
                                  directories.Vertex_Directory_map["Vertex_dV_nFDpCD_Directory"], "03_dVz", -dV_boundary, dV_boundary, numTH1Dbins);

    hPlot1D hdVx_pCD_nFDpCD = hPlot1D("nFDpCD", "", "dV^{pCD}_{x} of CD proton", "Vertex corr. dV^{pCD}_{x}=V^{pCD}_{x}-V^{e}_{x} of CD proton", "dV^{pCD}_{x} [cm]",
                                      directories.Vertex_Directory_map["Vertex_dV_nFDpCD_Directory"], "07_dVx_pCD", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hPlot1D hdVy_pCD_nFDpCD = hPlot1D("nFDpCD", "", "dV^{pCD}_{y} of CD proton", "Vertex corr. dV^{pCD}_{y}=V^{pCD}_{y}-V^{e}_{y} of CD proton", "dV^{pCD}_{y} [cm]",
                                      directories.Vertex_Directory_map["Vertex_dV_nFDpCD_Directory"], "08_dVy_pCD", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);
    hPlot1D hdVz_pCD_nFDpCD = hPlot1D("nFDpCD", "", "dV^{pCD}_{z} of CD proton", "Vertex corr. dV^{pCD}_{z}=V^{pCD}_{z}-V^{e}_{z} of CD proton", "dV^{pCD}_{z} [cm]",
                                      directories.Vertex_Directory_map["Vertex_dV_nFDpCD_Directory"], "09_dVz_pCD", Vertex_lboundary_CD, Vertex_uboundary_CD, numTH1Dbins);

    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // Sampling Fraction (SF) histograms (FD only)
    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Sampling Fraction (SF) histograms (FD)

    // Sampling Fraction (SF) histograms (1e cut, FD only)

    // SF plots (1e cut, FD)
    hPlot1D hSF_1e_cut_BC_FD, hSF_1e_cut_AC_FD;

    if (!apply_cuts) {
        hSF_1e_cut_BC_FD = hPlot1D("1e cut", "FD", "SF BC", "Sampling fraction f_{e} - before cuts", "f_{e} = (E_{PCAL} + E_{IN} + E_{OUT})/P_{e}",
                                   directories.SF_Directory_map["SF_1e_cut_BC_Directory"], "01_SF_1e_cut_before_SF_cuts", SF_lboundary, SF_uboundary, numTH1Dbins);
        hSF_1e_cut_AC_FD = hPlot1D("1e cut", "FD", "SF AC", "Sampling fraction f_{e} - after cuts", "f_{e} = (E_{PCAL} + E_{IN} + E_{OUT})/P_{e}",
                                   directories.SF_Directory_map["SF_1e_cut_AC_Directory"], "02_SF_1e_cut_after_SF_cuts", SF_lboundary, SF_uboundary, numTH1Dbins);
    } else {
        hSF_1e_cut_BC_FD = hPlot1D("1e cut", "FD", "SF", "Sampling fraction f_{e}", "f_{e} = (E_{PCAL} + E_{IN} + E_{OUT})/P_{e}", directories.SF_Directory_map["SF_1e_cut_BC_Directory"],
                                   "01_SF_1e_cut", SF_lboundary, SF_uboundary, numTH1Dbins);
    }

    // SF vs. P plots (1e cut, FD)
    hPlot2D hSF_VS_P_e_1e_cut_BC_FD, hSF_VS_P_e_1e_cut_AC_FD;

    if (!apply_cuts) {
        hSF_VS_P_e_1e_cut_BC_FD =
            hPlot2D("1e cut", "FD", "SF vs. P_{e} BC", "Sampling fraction f_{e} vs. P_{e} - before cuts", "P_{e} [GeV/c]", "f_{e} = (E_{PCAL} + E_{IN} + E_{OUT})/P_{e}",
                    directories.SF_Directory_map["SF_VS_P_e_1e_cut_BC_Directory"], "01_SF_VS_P_e_1e_cut_BC_FD", 0, beamE * 1.1, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);
        hSF_VS_P_e_1e_cut_AC_FD =
            hPlot2D("1e cut", "FD", "SF vs. P_{e} AC", "Sampling fraction f_{e} vs. P_{e} - after cuts", "P_{e} [GeV/c]", "f_{e} = (E_{PCAL} + E_{IN} + E_{OUT})/P_{e}",
                    directories.SF_Directory_map["SF_VS_P_e_1e_cut_AC_Directory"], "01_SF_VS_P_e_1e_cut_AC_FD", 0, beamE * 1.1, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);
    } else {
        hSF_VS_P_e_1e_cut_BC_FD =
            hPlot2D("1e cut", "FD", "SF vs. P_{e}", "Sampling fraction f_{e} vs. P_{e}", "P_{e} [GeV/c]", "f_{e} = (E_{PCAL} + E_{IN} + E_{OUT})/P_{e}",
                    directories.SF_Directory_map["SF_VS_P_e_1e_cut_BC_Directory"], "01_SF_VS_P_e_1e_cut_FD", 0, beamE * 1.1, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);
    }

    // Sampling Fraction (SF) histograms (1p, FD only)

    // SF plots (1p, FD)
    hPlot1D hSF_1p_FD = hPlot1D("1p", "FD", "SF", "Sampling fraction f_{e}", "f_{e} = (E_{PCAL} + E_{IN} + E_{OUT})/P_{e}", directories.SF_Directory_map["SF_1p_Directory"], "01_SF_1p",
                                SF_lboundary, SF_uboundary, numTH1Dbins);

    // SF vs. P plots (1p, FD)
    hPlot2D hSF_VS_P_e_1p_FD = hPlot2D("1p", "FD", "SF vs. P_{e}", "Sampling fraction f_{e} vs. P_{e}", "P_{e} [GeV/c]", "f_{e} = (E_{PCAL} + E_{IN} + E_{OUT})/P_{e}",
                                       directories.SF_Directory_map["SF_VS_P_e_1p_Directory"], "01_SF_VS_P_e_1p_FD", 0, beamE * 1.1, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);

    // Sampling Fraction (SF) histograms (1n, FD only)

    // SF plots (1n, FD)
    hPlot1D hSF_1n_FD = hPlot1D("1n", "FD", "SF", "Sampling fraction f_{e}", "f_{e} = (E_{PCAL} + E_{IN} + E_{OUT})/P_{e}", directories.SF_Directory_map["SF_1n_Directory"], "01_SF_1n",
                                SF_lboundary, SF_uboundary, numTH1Dbins);

    // SF vs. P plots (1n, FD)
    hPlot2D hSF_VS_P_e_1n_FD = hPlot2D("1n", "FD", "SF vs. P_{e}", "Sampling fraction f_{e} vs. P_{e}", "P_{e} [GeV/c]", "f_{e} = (E_{PCAL} + E_{IN} + E_{OUT})/P_{e}",
                                       directories.SF_Directory_map["SF_VS_P_e_1n_Directory"], "01_SF_VS_P_e_1n_FD", 0, beamE * 1.1, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);

    // Sampling Fraction (SF) histograms (2p, FD only)

    // SF plots (2p, FD)
    hPlot1D hSF_2p_FD = hPlot1D("2p", "FD", "SF", "Sampling fraction f_{e}", "f_{e} = (E_{PCAL} + E_{IN} + E_{OUT})/P_{e}", directories.SF_Directory_map["SF_2p_Directory"], "01_SF_2p",
                                SF_lboundary, SF_uboundary, numTH1Dbins);

    // SF vs. P plots (2p, FD)
    hPlot2D hSF_VS_P_e_2p_FD = hPlot2D("2p", "FD", "SF vs. P_{e}", "Sampling fraction f_{e} vs. P_{e}", "P_{e} [GeV/c]", "f_{e} = (E_{PCAL} + E_{IN} + E_{OUT})/P_{e}",
                                       directories.SF_Directory_map["SF_VS_P_e_2p_Directory"], "01_SF_VS_P_e_2p_FD", 0, beamE * 1.1, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);

    // Sampling Fraction (SF) histograms (pFDpCD, FD only)

    // SF plots (pFDpCD, FD)
    hPlot1D hSF_pFDpCD_FD = hPlot1D("pFDpCD", "FD", "SF", "Sampling fraction f_{e}", "f_{e} = (E_{PCAL} + E_{IN} + E_{OUT})/P_{e}", directories.SF_Directory_map["SF_pFDpCD_Directory"],
                                    "01_SF_pFDpCD", SF_lboundary, SF_uboundary, numTH1Dbins);

    // SF vs. P plots (pFDpCD, FD)
    hPlot2D hSF_VS_P_e_pFDpCD_FD =
        hPlot2D("pFDpCD", "FD", "SF vs. P_{e}", "Sampling fraction f_{e} vs. P_{e}", "P_{e} [GeV/c]", "f_{e} = (E_{PCAL} + E_{IN} + E_{OUT})/P_{e}",
                directories.SF_Directory_map["SF_VS_P_e_pFDpCD_Directory"], "01_SF_VS_P_e_pFDpCD_FD", 0, beamE * 1.1, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);

    // Sampling Fraction (SF) histograms (nFDpCD, FD only)

    // SF plots (nFDpCD, FD)
    hPlot1D hSF_nFDpCD_FD = hPlot1D("nFDpCD", "FD", "SF", "Sampling fraction f_{e}", "f_{e} = (E_{PCAL} + E_{IN} + E_{OUT})/P_{e}", directories.SF_Directory_map["SF_nFDpCD_Directory"],
                                    "01_SF_nFDpCD", SF_lboundary, SF_uboundary, numTH1Dbins);

    // SF vs. P plots (nFDpCD, FD)
    hPlot2D hSF_VS_P_e_nFDpCD_FD =
        hPlot2D("nFDpCD", "FD", "SF vs. P_{e}", "Sampling fraction f_{e} vs. P_{e}", "P_{e} [GeV/c]", "f_{e} = (E_{PCAL} + E_{IN} + E_{OUT})/P_{e}",
                directories.SF_Directory_map["SF_VS_P_e_nFDpCD_Directory"], "01_SF_VS_P_e_nFDpCD_FD", 0, beamE * 1.1, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);

    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // ECAL edge histograms (FD only)
    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    // ECAL edge histograms (FD only)

    // ECAL coordinates vs. SF plots (1e cut, FD)
    hPlot2D hVcal_VS_EoP_1e_cut_BC_PCAL, hVcal_VS_EoP_1e_cut_AC_PCAL;
    hPlot2D hWcal_VS_EoP_1e_cut_BC_PCAL, hWcal_VS_EoP_1e_cut_AC_PCAL;
    hPlot2D hUcal_VS_EoP_1e_cut_BC_PCAL, hUcal_VS_EoP_1e_cut_AC_PCAL;  // TODO: add this to all final states

    if (!apply_cuts) {
        hVcal_VS_EoP_1e_cut_BC_PCAL =
            hPlot2D("1e cut", "PCAL", "Vcal vs. SF BC", "ECAL V coordinate vs. SF - before cuts", "ECAL V coordinate [cm]", "Sampling Fraction (SF)",
                    directories.Fiducial_Directory_map["Edge_1e_BC_PCAL_Directory"], "01_Vcal_VS_EoP_PCAL_1e_cut_BC", 0, 50, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);
        hVcal_VS_EoP_1e_cut_AC_PCAL =
            hPlot2D("1e cut", "PCAL", "Vcal vs. SF AC", "ECAL V coordinate vs. SF - after cuts", "ECAL V coordinate [cm]", "Sampling Fraction (SF)",
                    directories.Fiducial_Directory_map["Edge_1e_BC_PCAL_Directory"], "01_Vcal_VS_EoP_PCAL_1e_cut_AC", 0, 50, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);

        hWcal_VS_EoP_1e_cut_BC_PCAL =
            hPlot2D("1e cut", "PCAL", "Wcal vs. SF BC", "ECAL W coordinate vs. SF - before cuts", "ECAL W coordinate [cm]", "Sampling Fraction (SF)",
                    directories.Fiducial_Directory_map["Edge_1e_BC_PCAL_Directory"], "02_Wcal_VS_EoP_PCAL_1e_cut_BC", 0, 50, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);
        hWcal_VS_EoP_1e_cut_AC_PCAL =
            hPlot2D("1e cut", "PCAL", "Wcal vs. SF AC", "ECAL W coordinate vs. SF - after cuts", "ECAL W coordinate [cm]", "Sampling Fraction (SF)",
                    directories.Fiducial_Directory_map["Edge_1e_BC_PCAL_Directory"], "02_Wcal_VS_EoP_PCAL_1e_cut_AC", 0, 50, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);

        hUcal_VS_EoP_1e_cut_BC_PCAL = hPlot2D("1e cut", "PCAL", "Ucal vs. SF BC", "ECAL U coordinate vs. SF - before cuts", "ECAL U coordinate [cm]", "Sampling Fraction (SF)",
                                              directories.Fiducial_Directory_map["Edge_1e_BC_PCAL_Directory"], "03_Ucal_VS_EoP_PCAL_1e_cut_BC", 0, 50, SF_lboundary, SF_uboundary, 100, 100);
        hUcal_VS_EoP_1e_cut_AC_PCAL = hPlot2D("1e cut", "PCAL", "Ucal vs. SF AC", "ECAL U coordinate vs. SF - after cuts", "ECAL U coordinate [cm]", "Sampling Fraction (SF)",
                                              directories.Fiducial_Directory_map["Edge_1e_BC_PCAL_Directory"], "03_Ucal_VS_EoP_PCAL_1e_cut_AC", 0, 50, SF_lboundary, SF_uboundary, 100, 100);
    } else {
        hVcal_VS_EoP_1e_cut_BC_PCAL =
            hPlot2D("1e cut", "PCAL", "Vcal vs. SF", "ECAL V coordinate vs. SF", "ECAL V coordinate [cm]", "Sampling Fraction (SF)",
                    directories.Fiducial_Directory_map["Edge_1e_BC_PCAL_Directory"], "01_Vcal_VS_EoP_PCAL_1e_cut", 0, 50, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);
        hWcal_VS_EoP_1e_cut_BC_PCAL =
            hPlot2D("1e cut", "PCAL", "Wcal vs. SF", "ECAL W coordinate vs. SF", "ECAL W coordinate [cm]", "Sampling Fraction (SF)",
                    directories.Fiducial_Directory_map["Edge_1e_BC_PCAL_Directory"], "02_Wcal_VS_EoP_PCAL_1e_cut", 0, 50, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);
        hUcal_VS_EoP_1e_cut_BC_PCAL = hPlot2D("1e cut", "PCAL", "Ucal vs. SF", "ECAL U coordinate vs. SF", "ECAL U coordinate [cm]", "Sampling Fraction (SF)",
                                              directories.Fiducial_Directory_map["Edge_1e_BC_PCAL_Directory"], "03_Ucal_VS_EoP_PCAL_1e_cut", 0, 50, SF_lboundary, SF_uboundary, 100, 100);
    }

    hPlot2D hPCAL_acceptance_1e_cut =
        hPlot2D("1e cut", "PCAL", "Electron PCAL acceptance", "Electron PCAL acceptance", "x [cm]", "y [cm]", directories.Fiducial_Directory_map["Edge_1e_BC_PCAL_Directory"],
                "04_Electron_PCAL_acceptance_1e_cut", -400, 400, -400, 400, 100, 100);  // TODO: add this to all final states

    // ECAL coordinates vs. SF plots vs. SF plots (1p, FD)
    hPlot2D hVcal_VS_EoP_1p_PCAL =
        hPlot2D("1p", "PCAL", "Vcal vs. SF", "ECAL V coordinate vs. SF", "ECAL V coordinate [cm]", "Sampling Fraction (SF)", directories.Fiducial_Directory_map["Edge_1p_PCAL_Directory"],
                "01_Vcal_VS_EoP_PCAL_1p", 0, 50, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);
    hPlot2D hWcal_VS_EoP_1p_PCAL =
        hPlot2D("1p", "PCAL", "Wcal vs. SF", "ECAL W coordinate vs. SF", "ECAL W coordinate [cm]", "Sampling Fraction (SF)", directories.Fiducial_Directory_map["Edge_1p_PCAL_Directory"],
                "02_Wcal_VS_EoP_PCAL_1p", 0, 50, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);

    // ECAL coordinates vs. SF plots vs. SF plots (1n, FD)
    hPlot2D hVcal_VS_EoP_1n_PCAL =
        hPlot2D("1n", "PCAL", "Vcal vs. SF", "ECAL V coordinate vs. SF", "ECAL V coordinate [cm]", "Sampling Fraction (SF)", directories.Fiducial_Directory_map["Edge_1n_PCAL_Directory"],
                "01_Vcal_VS_EoP_PCAL_1n", 0, 50, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);
    hPlot2D hWcal_VS_EoP_1n_PCAL =
        hPlot2D("1n", "PCAL", "Wcal vs. SF", "ECAL W coordinate vs. SF", "ECAL W coordinate [cm]", "Sampling Fraction (SF)", directories.Fiducial_Directory_map["Edge_1n_PCAL_Directory"],
                "02_Wcal_VS_EoP_PCAL_1n", 0, 50, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);

    // ECAL coordinates vs. SF plots vs. SF plots (2p, FD)
    hPlot2D hVcal_VS_EoP_2p_PCAL =
        hPlot2D("2p", "PCAL", "Vcal vs. SF", "ECAL V coordinate vs. SF", "ECAL V coordinate [cm]", "Sampling Fraction (SF)", directories.Fiducial_Directory_map["Edge_2p_PCAL_Directory"],
                "01_Vcal_VS_EoP_PCAL_2p", 0, 50, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);
    hPlot2D hWcal_VS_EoP_2p_PCAL =
        hPlot2D("2p", "PCAL", "Wcal vs. SF", "ECAL W coordinate vs. SF", "ECAL W coordinate [cm]", "Sampling Fraction (SF)", directories.Fiducial_Directory_map["Edge_2p_PCAL_Directory"],
                "02_Wcal_VS_EoP_PCAL_2p", 0, 50, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);

    // ECAL coordinates vs. SF plots vs. SF plots (pFDpCD, FD)
    hPlot2D hVcal_VS_EoP_pFDpCD_PCAL =
        hPlot2D("pFDpCD", "PCAL", "Vcal vs. SF", "ECAL V coordinate vs. SF", "ECAL V coordinate [cm]", "Sampling Fraction (SF)",
                directories.Fiducial_Directory_map["Edge_pFDpCD_PCAL_Directory"], "01_Vcal_VS_EoP_PCAL_pFDpCD", 0, 50, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);
    hPlot2D hWcal_VS_EoP_pFDpCD_PCAL =
        hPlot2D("pFDpCD", "PCAL", "Wcal vs. SF", "ECAL W coordinate vs. SF", "ECAL W coordinate [cm]", "Sampling Fraction (SF)",
                directories.Fiducial_Directory_map["Edge_pFDpCD_PCAL_Directory"], "02_Wcal_VS_EoP_PCAL_pFDpCD", 0, 50, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);

    // ECAL coordinates vs. SF plots vs. SF plots (nFDpCD, FD)
    hPlot2D hVcal_VS_EoP_nFDpCD_PCAL =
        hPlot2D("nFDpCD", "PCAL", "Vcal vs. SF", "ECAL V coordinate vs. SF", "ECAL V coordinate [cm]", "Sampling Fraction (SF)",
                directories.Fiducial_Directory_map["Edge_nFDpCD_PCAL_Directory"], "01_Vcal_VS_EoP_PCAL_nFDpCD", 0, 50, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);
    hPlot2D hWcal_VS_EoP_nFDpCD_PCAL =
        hPlot2D("nFDpCD", "PCAL", "Wcal vs. SF", "ECAL W coordinate vs. SF", "ECAL W coordinate [cm]", "Sampling Fraction (SF)",
                directories.Fiducial_Directory_map["Edge_nFDpCD_PCAL_Directory"], "02_Wcal_VS_EoP_PCAL_nFDpCD", 0, 50, SF_lboundary, SF_uboundary, numTH2Dbins, numTH2Dbins);

    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // Momentum threshold histograms
    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Momentum threshold histograms
    /* Here are the definitions for the Momentum threshold plots. These are used to check that momentum cuts were applied in 1e_cut and 2p plots. */

    // Momentum threshold plots (1e cut)

    // Momentum threshold plots (1e cut)
    hPlot1D hP_e_1e_cut_FD = hPlot1D("1e cut", "", "Electron momentum", "Electron momentum P_{e}", "P_{e} [GeV/c]", directories.Momentum_Directory_map["Momentum_1e_cut_Directory"],
                                     "01_P_e_1e_cut_FD", 0, beamE * 1.1, numTH1Dbins);

    hPlot1D hP_p_1e_cut_CD = hPlot1D("1e cut", "CD", "Proton momentum", "Proton momentum P_{p}", "P_{p} [GeV/c]", directories.Momentum_Directory_map["Momentum_1e_cut_Directory"],
                                     "02_P_p_1e_cut_CD", 0, beamE * 1.1, numTH1Dbins);
    hPlot1D hP_p_1e_cut_FD = hPlot1D("1e cut", "FD", "Proton momentum", "Proton momentum P_{p}", "P_{p} [GeV/c]", directories.Momentum_Directory_map["Momentum_1e_cut_Directory"],
                                     "02_P_p_1e_cut_FD", 0, beamE * 1.1, numTH1Dbins);

    hPlot1D hP_piplus_1e_cut_CD = hPlot1D("1e cut", "CD", "#pi^{+} momentum", "#pi^{+} momentum P_{#pi^{+}}", "P_{#pi^{+}} [GeV/c]",
                                          directories.Momentum_Directory_map["Momentum_1e_cut_Directory"], "03_P_piplus_1e_cut_CD", 0, beamE * 1.1, numTH1Dbins);
    hPlot1D hP_piplus_1e_cut_FD = hPlot1D("1e cut", "FD", "#pi^{+} momentum", "#pi^{+} momentum P_{#pi^{+}}", "P_{#pi^{+}} [GeV/c]",
                                          directories.Momentum_Directory_map["Momentum_1e_cut_Directory"], "03_P_piplus_1e_cut_FD", 0, beamE * 1.1, numTH1Dbins);

    hPlot1D hP_piminus_1e_cut_CD = hPlot1D("1e cut", "CD", "#pi^{-} momentum", "#pi^{-} momentum P_{#pi^{-}}", "P_{#pi^{-}} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_1e_cut_Directory"], "04_P_piminus_1e_cut_CD", 0, beamE * 1.1, numTH1Dbins);
    hPlot1D hP_piminus_1e_cut_FD = hPlot1D("1e cut", "FD", "#pi^{-} momentum", "#pi^{-} momentum P_{#pi^{-}}", "P_{#pi^{-}} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_1e_cut_Directory"], "04_P_piminus_1e_cut_FD", 0, beamE * 1.1, numTH1Dbins);

    hPlot1D hP_Kplus_1e_cut_CD = hPlot1D("1e cut", "CD", "K^{+} momentum", "K^{+} momentum P_{K^{+}}", "P_{K^{+}} [GeV/c]", directories.Momentum_Directory_map["Momentum_1e_cut_Directory"],
                                         "05_P_Kplus_1e_cut_CD", 0, beamE * 1.1, numTH1Dbins);
    hPlot1D hP_Kplus_1e_cut_FD = hPlot1D("1e cut", "FD", "K^{+} momentum", "K^{+} momentum P_{K^{+}}", "P_{K^{+}} [GeV/c]", directories.Momentum_Directory_map["Momentum_1e_cut_Directory"],
                                         "05_P_Kplus_1e_cut_FD", 0, beamE * 1.1, numTH1Dbins);

    hPlot1D hP_Kminus_1e_cut_CD = hPlot1D("1e cut", "CD", "K^{-} momentum", "K^{-} momentum P_{K^{-}}", "P_{K^{-}} [GeV/c]", directories.Momentum_Directory_map["Momentum_1e_cut_Directory"],
                                          "06_P_Kminus_1e_cut_CD", 0, beamE * 1.1, numTH1Dbins);
    hPlot1D hP_Kminus_1e_cut_FD = hPlot1D("1e cut", "FD", "K^{-} momentum", "K^{-} momentum P_{K^{-}}", "P_{K^{-}} [GeV/c]", directories.Momentum_Directory_map["Momentum_1e_cut_Directory"],
                                          "06_P_Kminus_1e_cut_FD", 0, beamE * 1.1, numTH1Dbins);

    hPlot1D hP_deuteron_1e_cut_CD = hPlot1D("1e cut", "CD", "Deuterons momentum", "Deuterons momentum P_{D}", "P_{D} [GeV/c]",
                                            directories.Momentum_Directory_map["Momentum_1e_cut_Directory"], "07_P_deuteron_1e_cut_CD", 0, beamE * 1.1, numTH1Dbins);
    hPlot1D hP_deuteron_1e_cut_FD = hPlot1D("1e cut", "FD", "Deuterons momentum", "Deuterons momentum P_{D}", "P_{D} [GeV/c]",
                                            directories.Momentum_Directory_map["Momentum_1e_cut_Directory"], "07_P_deuteron_1e_cut_FD", 0, beamE * 1.1, numTH1Dbins);

    hPlot1D hP_LnFD_APID_1e_cut_FD =
        hPlot1D("1e_cut", "FD", "Leading FD neutron momentum APID", "Leading FD neutron momentum P_{n} APID", "P_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_1e_cut_Directory"], "08a_P_LnFD_APID_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);  // Leading nFD
    hPlot1D hP_LnFD_APID_1e_cut_ZOOMOUT_FD =
        hPlot1D("1e_cut", "FD", "Leading FD neutron momentum APID - ZOOMOUT", "Leading FD neutron momentum P_{n} APID - ZOOMOUT", "P_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_1e_cut_Directory"], "08b_P_LnFD_APID_1e_cut_ZOOMOUT_FD", Momentum_lboundary, 15., numTH1Dbins);  // Leading nFD
    hPlot1D hP_LnFD_BPID_1e_cut_FD =
        hPlot1D("1e_cut", "FD", "Leading FD neutron momentum BPID", "Leading FD neutron momentum P_{n} BPID", "P_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_1e_cut_Directory"], "08c_P_LnFD_BPID_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);  // Leading nFD
    hPlot1D hP_LnFD_BPID_1e_cut_ZOOMOUT_FD =
        hPlot1D("1e_cut", "FD", "Leading FD neutron momentum BPID - ZOOMOUT", "Leading FD neutron momentum P_{n} BPID - ZOOMOUT", "P_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_1e_cut_Directory"], "08d_P_LnFD_BPID_1e_cut_ZOOMOUT_FD", Momentum_lboundary, 15., numTH1Dbins);  // Leading nFD
    hPlot1D hP_LnFD_APIDandNS_1e_cut_FD =
        hPlot1D("1e_cut", "FD", "Leading FD neutron momentum APID&NC", "Leading FD neutron momentum P_{n} APID&NC", "P_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_1e_cut_Directory"], "08e_P_LnFD_APIDandNS_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);  // Leading nFD
    hPlot1D hP_LnFD_APIDandNS_1e_cut_ZOOMOUT_FD =
        hPlot1D("1e_cut", "FD", "Leading FD neutron momentum APID&NC - ZOOMOUT", "Leading FD neutron momentum P_{n} APID&NC - ZOOMOUT", "P_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_1e_cut_Directory"], "08f_P_LnFD_APIDandNS_1e_cut_ZOOMOUT_FD", Momentum_lboundary, 15., numTH1Dbins);  // Leading nFD

    hPlot1D hP_nFD_APID_1e_cut_FD =
        hPlot1D("1e_cut", "FD", "FD neutron momentum APID", "FD neutron momentum P_{n} APID", "P_{n} [GeV/c]", directories.Momentum_Directory_map["Momentum_1e_cut_Directory"],
                "09a_P_nFD_APID_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);  // All nFD
    hPlot1D hP_nFD_APID_1e_cut_ZOOMOUT_FD =
        hPlot1D("1e_cut", "FD", "FD neutron momentum APID - ZOOMOUT", "FD neutron momentum P_{n} APID - ZOOMOUT", "P_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_1e_cut_Directory"], "09b_P_nFD_APID_1e_cut_ZOOMOUT_FD", Momentum_lboundary, 15., numTH1Dbins);  // All nFD
    hPlot1D hP_nFD_BPID_1e_cut_FD =
        hPlot1D("1e_cut", "FD", "FD neutron momentum BPID", "FD neutron momentum P_{n} BPID", "P_{n} [GeV/c]", directories.Momentum_Directory_map["Momentum_1e_cut_Directory"],
                "09c_P_nFD_BPID_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);  // All nFD
    hPlot1D hP_nFD_BPID_1e_cut_ZOOMOUT_FD =
        hPlot1D("1e_cut", "FD", "FD neutron momentum BPID - ZOOMOUT", "FD neutron momentum P_{n} BPID - ZOOMOUT", "P_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_1e_cut_Directory"], "09d_P_nFD_BPID_1e_cut_ZOOMOUT_FD", Momentum_lboundary, 15., numTH1Dbins);  // All nFD
    hPlot1D hP_nFD_APIDandNS_1e_cut_FD =
        hPlot1D("1e_cut", "FD", "FD neutron momentum APID&NC", "FD neutron momentum P_{n} APID&NC", "P_{n} [GeV/c]", directories.Momentum_Directory_map["Momentum_1e_cut_Directory"],
                "09e_P_nFD_APIDandNS_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);  // All nFD
    hPlot1D hP_nFD_APIDandNS_1e_cut_ZOOMOUT_FD =
        hPlot1D("1e_cut", "FD", "FD neutron momentum APID&NC - ZOOMOUT", "FD neutron momentum P_{n} APID&NC - ZOOMOUT", "P_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_1e_cut_Directory"], "09f_P_nFD_APIDandNS_1e_cut_ZOOMOUT_FD", Momentum_lboundary, 15., numTH1Dbins);  // All nFD

    // Reco momentum plots for momentum thresholds (1e cut)
    hPlot1D hP_e_reco_1e_cut_FD =
        hPlot1D("1e cut", "FD", "Reco FD Electron momentum", "FD Electron momentum P^{reco}_{e}", "P^{reco}_{e} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "01a_P_e_reco_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_e_reco_1e_cut_FD_ZOOMIN = hPlot1D("1e cut", "FD", "Reco FD Electron momentum - ZOOMIN", "FD Electron momentum P^{reco}_{e} - ZOOMIN", "P^{reco}_{e} [GeV/c]",
                                                 directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "01b_P_e_reco_1e_cut_FD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot2D hP_e_vs_Theta_e_reco_1e_cut_FD = hPlot2D("1e cut", "FD", "P_{e} vs. #theta_{e}", "P_{e} vs. #theta_{e}", "P_{e} [GeV/c]", "#theta_{e} [#circ]",
                                                     directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "01c_P_e_vs_Theta_e_reco_1e_cut_FD", Momentum_lboundary,
                                                     Momentum_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins * 2, numTH2Dbins * 2);

    hPlot1D hP_p_reco_1e_cut_FD =
        hPlot1D("1e cut", "FD", "Reco FD Proton momentum", "FD Proton momentum P^{reco}_{p}", "P^{reco}_{p} [GeV/c]", directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"],
                "02a_P_p_reco_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_p_reco_1e_cut_CD =
        hPlot1D("1e cut", "CD", "Reco CD Proton momentum", "CD Proton momentum P^{reco}_{p}", "P^{reco}_{p} [GeV/c]", directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"],
                "02b_P_p_reco_1e_cut_CD", CDMomentum_lboundary, CDMomentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_p_reco_1e_cut_FD_ZOOMIN = hPlot1D("1e cut", "FD", "Reco FD Proton momentum - ZOOMIN", "FD Proton momentum P^{reco}_{p} - ZOOMIN", "P^{reco}_{p} [GeV/c]",
                                                 directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "02aa_P_p_reco_1e_cut_FD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_p_reco_1e_cut_CD_ZOOMIN = hPlot1D("1e cut", "CD", "Reco CD Proton momentum - ZOOMIN", "CD Proton momentum P^{reco}_{p} - ZOOMIN", "P^{reco}_{p} [GeV/c]",
                                                 directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "02bb_P_p_reco_1e_cut_CD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot2D hP_p_vs_Theta_p_reco_1e_cut_FD = hPlot2D("1e cut", "FD", "P_{p} vs. #theta_{p}", "P_{p} vs. #theta_{p}", "P_{p} [GeV/c]", "#theta_{p} [#circ]",
                                                     directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "02c_P_p_vs_Theta_p_reco_1e_cut_FD", Momentum_lboundary,
                                                     Momentum_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins * 2, numTH2Dbins * 2);
    hPlot2D hP_p_vs_Theta_p_reco_1e_cut_CD = hPlot2D("1e cut", "CD", "P_{p} vs. #theta_{p}", "P_{p} vs. #theta_{p}", "P_{p} [GeV/c]", "#theta_{p} [#circ]",
                                                     directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "02d_P_p_vs_Theta_p_reco_1e_cut_CD", CDMomentum_lboundary,
                                                     CDMomentum_uboundary, Theta_lboundary_CD, Theta_uboundary_CD, numTH2Dbins * 2, numTH2Dbins * 2);

    // leading nFD (APID):
    hPlot1D hP_LnFD_reco_APID_1e_cut_FD =
        hPlot1D("1e cut", "FD", "Reco leading FD neutron momentum APID", "Leading FD neutron momentum P^{reco}_{n} APID", "P^{reco}_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "03a_P_LnFD_reco_APID_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_LnFD_reco_APID_1e_cut_FD_ZOOMIN =
        hPlot1D("1e cut", "FD", "Reco leading FD neutron momentum APID - ZOOMIN", "Leading FD neutron momentum P^{reco}_{n} APID - ZOOMIN", "P^{reco}_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "03b_P_LnFD_reco_APID_1e_cut_FD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_LnFD_reco_APID_1e_cut_FD_ZOOMOUT =
        hPlot1D("1e cut", "FD", "Reco leading FD neutron momentum APID - ZOOMOUT", "Leading FD neutron momentum P^{reco}_{n} APID - ZOOMOUT", "P^{reco}_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "03c_P_LnFD_reco_APID_1e_cut_FD_ZOOMOUT", 0, 15., numTH1Dbins_Mom_eff_Plots);
    hPlot2D hP_LnFD_vs_Theta_LnFD_reco_APID_1e_cut_FD =
        hPlot2D("1e cut", "FD", "P_{LnFD} vs. #theta_{LnFD} APID", "P_{LnFD} vs. #theta_{LnFD} APID", "P_{LnFD} [GeV/c]", "#theta_{LnFD} [#circ]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "03d_P_LnFD_vs_Theta_LnFD_reco_APID_1e_cut_FD", Momentum_lboundary, Momentum_uboundary,
                Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins * 2, numTH2Dbins * 2);

    // leading nFD (BPID):
    hPlot1D hP_LnFD_reco_BPID_1e_cut_FD =
        hPlot1D("1e cut", "FD", "Reco leading FD neutron momentum BPID", "Leading FD neutron momentum P^{reco}_{n} BPID", "P^{reco}_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "03a_P_LnFD_reco_BPID_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_LnFD_reco_BPID_1e_cut_FD_ZOOMIN =
        hPlot1D("1e cut", "FD", "Reco leading FD neutron momentum BPID - ZOOMIN", "Leading FD neutron momentum P^{reco}_{n} BPID - ZOOMIN", "P^{reco}_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "03b_P_LnFD_reco_BPID_1e_cut_FD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_LnFD_reco_BPID_1e_cut_FD_ZOOMOUT =
        hPlot1D("1e cut", "FD", "Reco leading FD neutron momentum BPID - ZOOMOUT", "Leading FD neutron momentum P^{reco}_{n} BPID - ZOOMOUT", "P^{reco}_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "03c_P_LnFD_reco_BPID_1e_cut_FD_ZOOMOUT", 0, 15., numTH1Dbins_Mom_eff_Plots);
    hPlot2D hP_LnFD_vs_Theta_LnFD_reco_BPID_1e_cut_FD =
        hPlot2D("1e cut", "FD", "P_{LnFD} vs. #theta_{LnFD} BPID", "P_{LnFD} vs. #theta_{LnFD} BPID", "P_{LnFD} [GeV/c]", "#theta_{LnFD} [#circ]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "03d_P_LnFD_vs_Theta_LnFD_reco_BPID_1e_cut_FD", Momentum_lboundary, Momentum_uboundary,
                Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins * 2, numTH2Dbins * 2);

    // all nFD (APID):
    hPlot1D hP_nFD_reco_APID_1e_cut_FD =
        hPlot1D("1e cut", "FD", "Reco FD neutrons momentum APID", "FD neutrons momentum P^{reco}_{n} APID", "P^{reco}_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "03a_P_nFD_reco_APID_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_nFD_reco_APID_1e_cut_FD_ZOOMIN =
        hPlot1D("1e cut", "FD", "Reco FD neutrons momentum APID - ZOOMIN", "FD neutrons momentum P^{reco}_{n} APID - ZOOMIN", "P^{reco}_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "03b_P_nFD_reco_APID_1e_cut_FD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_nFD_reco_APID_1e_cut_FD_ZOOMOUT =
        hPlot1D("1e cut", "FD", "Reco FD neutron momentum APID - ZOOMOUT", "FD neutrons momentum P^{reco}_{n} APID - ZOOMOUT", "P^{reco}_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "03c_P_nFD_reco_APID_1e_cut_FD_ZOOMOUT", 0, 15., numTH1Dbins_Mom_eff_Plots);
    hPlot2D hP_nFD_vs_Theta_nFD_reco_APID_1e_cut_FD = hPlot2D("1e cut", "FD", "P_{nFD} vs. #theta_{nFD} APID", "P_{nFD} vs. #theta_{nFD} APID", "P_{nFD} [GeV/c]", "#theta_{nFD} [#circ]",
                                                              directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "03d_P_nFD_vs_Theta_nFD_reco_APID_1e_cut_FD",
                                                              Momentum_lboundary, Momentum_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins * 2, numTH2Dbins * 2);

    // all nFD (BPID):
    hPlot1D hP_nFD_reco_BPID_1e_cut_FD =
        hPlot1D("1e cut", "FD", "Reco FD neutrons momentum BPID", "FD neutrons momentum P^{reco}_{n} BPID", "P^{reco}_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "03a_P_nFD_reco_BPID_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_nFD_reco_BPID_1e_cut_FD_ZOOMIN =
        hPlot1D("1e cut", "FD", "Reco FD neutrons momentum BPID - ZOOMIN", "FD neutrons momentum P^{reco}_{n} BPID - ZOOMIN", "P^{reco}_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "03b_P_nFD_reco_BPID_1e_cut_FD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_nFD_reco_BPID_1e_cut_FD_ZOOMOUT =
        hPlot1D("1e cut", "FD", "Reco FD neutron momentum BPID - ZOOMOUT", "FD neutrons momentum P^{reco}_{n} BPID - ZOOMOUT", "P^{reco}_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "03c_P_nFD_reco_BPID_1e_cut_FD_ZOOMOUT", 0, 15., numTH1Dbins_Mom_eff_Plots);
    hPlot2D hP_nFD_vs_Theta_nFD_reco_BPID_1e_cut_FD = hPlot2D("1e cut", "FD", "P_{nFD} vs. #theta_{nFD} BPID", "P_{nFD} vs. #theta_{nFD} BPID", "P_{nFD} [GeV/c]", "#theta_{nFD} [#circ]",
                                                              directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "03d_P_nFD_vs_Theta_nFD_reco_BPID_1e_cut_FD",
                                                              Momentum_lboundary, Momentum_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins * 2, numTH2Dbins * 2);

    hPlot1D hP_piplus_reco_1e_cut =
        hPlot1D("1e cut", "CD & FD", "Reco #pi^{+} momentum", "#pi^{+} momentum P^{reco}_{#pi^{+}}", "P^{reco}_{#pi^{+}} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "04a_P_piplus_reco_1e_cut", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piplus_reco_1e_cut_ZOOMIN =
        hPlot1D("1e cut", "CD & FD", "Reco #pi^{+} momentum - ZOOMIN", "#pi^{+} momentum P^{reco}_{#pi^{+}} - ZOOMIN", "P^{reco}_{#pi^{+}} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "04b_P_piplus_reco_1e_cut_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piplus_reco_1e_cut_FD =
        hPlot1D("1e cut", "FD", "Reco FD #pi^{+} momentum", "FD #pi^{+} momentum P^{reco}_{#pi^{+}}", "P^{reco}_{#pi^{+}} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "04c_P_piplus_reco_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piplus_reco_1e_cut_CD = hPlot1D("1e cut", "CD", "Reco CD #pi^{+} momentum", "CD #pi^{+} momentum P^{reco}_{#pi^{+}}", "P^{reco}_{#pi^{+}} [GeV/c]",
                                               directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "04d_P_piplus_reco_1e_cut_CD", CDMomentum_lboundary,
                                               CDMomentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piplus_reco_1e_cut_FD_ZOOMIN =
        hPlot1D("1e cut", "FD", "Reco FD #pi^{+} momentum - ZOOMIN", "FD #pi^{+} momentum P^{reco}_{#pi^{+}} - ZOOMIN", "P^{reco}_{#pi^{+}} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "04e_P_piplus_reco_1e_cut_FD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piplus_reco_1e_cut_CD_ZOOMIN =
        hPlot1D("1e cut", "CD", "Reco CD #pi^{+} momentum - ZOOMIN", "CD #pi^{+} momentum P^{reco}_{#pi^{+}} - ZOOMIN", "P^{reco}_{#pi^{+}} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "04f_P_piplus_reco_1e_cut_CD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot2D hP_piplus_vs_Theta_piplus_reco_1e_cut_FD =
        hPlot2D("1e cut", "FD", "P_{#pi^{+}} vs. #theta_{#pi^{+}}", "P_{#pi^{+}} vs. #theta_{#pi^{+}}", "P_{#pi^{+}} [GeV/c]", "#theta_{#pi^{+}} [#circ]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "04g_P_piplus_vs_Theta_piplus_reco_1e_cut_FD", Momentum_lboundary, Momentum_uboundary,
                Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins * 2, numTH2Dbins * 2);
    hPlot2D hP_piplus_vs_Theta_piplus_reco_1e_cut_CD =
        hPlot2D("1e cut", "CD", "P_{#pi^{+}} vs. #theta_{#pi^{+}}", "P_{#pi^{+}} vs. #theta_{#pi^{+}}", "P_{#pi^{+}} [GeV/c]", "#theta_{#pi^{+}} [#circ]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "04h_P_piplus_vs_Theta_piplus_reco_1e_cut_CD", CDMomentum_lboundary, CDMomentum_uboundary,
                Theta_lboundary_CD, Theta_uboundary_CD, numTH2Dbins * 2, numTH2Dbins * 2);

    hPlot1D hP_piminus_reco_1e_cut =
        hPlot1D("1e cut", "CD & FD", "Reco #pi^{-} momentum", "#pi^{-} momentum P^{reco}_{#pi^{-}}", "P^{reco}_{#pi^{-}} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "05a_P_piminus_reco_1e_cut", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piminus_reco_1e_cut_ZOOMIN =
        hPlot1D("1e cut", "CD & FD", "Reco #pi^{-} momentum - ZOOMIN", "#pi^{-} momentum P^{reco}_{#pi^{-}} - ZOOMIN", "P^{reco}_{#pi^{-}} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "05b_P_piminus_reco_1e_cut_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piminus_reco_1e_cut_FD =
        hPlot1D("1e cut", "FD", "Reco FD #pi^{-} momentum", "FD #pi^{-} momentum P^{reco}_{#pi^{-}}", "P^{reco}_{#pi^{-}} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "05c_P_piminus_reco_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piminus_reco_1e_cut_CD = hPlot1D("1e cut", "CD", "Reco CD #pi^{-} momentum", "CD #pi^{-} momentum P^{reco}_{#pi^{-}}", "P^{reco}_{#pi^{-}} [GeV/c]",
                                                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "05d_P_piminus_reco_1e_cut_CD", CDMomentum_lboundary,
                                                CDMomentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piminus_reco_1e_cut_FD_ZOOMIN =
        hPlot1D("1e cut", "FD", "Reco FD #pi^{-} momentum - ZOOMIN", "FD #pi^{-} momentum P^{reco}_{#pi^{-}} - ZOOMIN", "P^{reco}_{#pi^{-}} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "05e_P_piminus_reco_1e_cut_FD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piminus_reco_1e_cut_CD_ZOOMIN =
        hPlot1D("1e cut", "CD", "Reco CD #pi^{-} momentum - ZOOMIN", "CD #pi^{-} momentum P^{reco}_{#pi^{-}} - ZOOMIN", "P^{reco}_{#pi^{-}} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "05f_P_piminus_reco_1e_cut_CD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot2D hP_piminus_vs_Theta_piminus_reco_1e_cut_FD =
        hPlot2D("1e cut", "FD", "P_{#pi^{-}} vs. #theta_{#pi^{-}}", "P_{#pi^{-}} vs. #theta_{#pi^{-}}", "P_{#pi^{-}} [GeV/c]", "#theta_{#pi^{-}} [#circ]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "05g_P_piminus_vs_Theta_piminus_reco_1e_cut_FD", Momentum_lboundary, Momentum_uboundary,
                Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins * 2, numTH2Dbins * 2);
    hPlot2D hP_piminus_vs_Theta_piminus_reco_1e_cut_CD =
        hPlot2D("1e cut", "CD", "P_{#pi^{-}} vs. #theta_{#pi^{-}}", "P_{#pi^{-}} vs. #theta_{#pi^{-}}", "P_{#pi^{-}} [GeV/c]", "#theta_{#pi^{-}} [#circ]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "05h_P_piminus_vs_Theta_piminus_reco_1e_cut_CD", CDMomentum_lboundary, CDMomentum_uboundary,
                Theta_lboundary_CD, Theta_uboundary_CD, numTH2Dbins * 2, numTH2Dbins * 2);

    hPlot1D hP_ph_reco_APID_1e_cut_FD =
        hPlot1D("1e cut", "FD", "Reco FD #gamma momentum APID", "FD #gamma momentum P^{reco}_{#gamma} APID", "P^{reco}_{#gamma} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "06a_P_ph_reco_APID_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_ph_reco_APID_1e_cut_FD_ZOOMIN =
        hPlot1D("1e cut", "FD", "Reco FD #gamma momentum APID - ZOOMIN", "FD #gamma momentum P^{reco}_{#gamma} APID - ZOOMIN", "P^{reco}_{#gamma} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "06b_P_ph_reco_APID_1e_cut_FD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_ph_reco_BPID_1e_cut_FD =
        hPlot1D("1e cut", "FD", "Reco FD #gamma momentum BPID", "FD #gamma momentum P^{reco}_{#gamma} BPID", "P^{reco}_{#gamma} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "06a_P_ph_reco_BPID_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_ph_reco_BPID_1e_cut_FD_ZOOMIN =
        hPlot1D("1e cut", "FD", "Reco FD #gamma momentum BPID - ZOOMIN", "FD #gamma momentum P^{reco}_{#gamma} BPID - ZOOMIN", "P^{reco}_{#gamma} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "06b_P_ph_reco_BPID_1e_cut_FD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot2D hP_ph_vs_Theta_ph_reco_APID_1e_cut_FD =
        hPlot2D("1e cut", "FD", "P_{#gamma} vs. #theta_{#gamma} APID", "P_{#gamma} vs. #theta_{#gamma} APID", "P_{#gamma} [GeV/c]", "#theta_{#gamma} [#circ]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "06e_P_ph_vs_Theta_ph_reco_APID_1e_cut_FD", Momentum_lboundary, Momentum_uboundary,
                Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins * 2, numTH2Dbins * 2);
    hPlot2D hP_ph_vs_Theta_ph_reco_BPID_1e_cut_FD =
        hPlot2D("1e cut", "FD", "P_{#gamma} vs. #theta_{#gamma} BPID", "P_{#gamma} vs. #theta_{#gamma} BPID", "P_{#gamma} [GeV/c]", "#theta_{#gamma} [#circ]",
                directories.Momentum_Directory_map["Momentum_th_reco_1e_cut_Directory"], "06e_P_ph_vs_Theta_ph_reco_BPID_1e_cut_FD", Momentum_lboundary, Momentum_uboundary,
                Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins * 2, numTH2Dbins * 2);

    // Momentum threshold plots (1p)
    hPlot1D hP_e_APID_1p_FD = hPlot1D("1p", "", "Electron momentum APID", "Electron momentum P_{e} APID", "P_{e} [GeV/c]", directories.Momentum_Directory_map["Momentum_1p_Directory"],
                                      "01a_P_e_APID_1p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_e_BPID_1p_FD = hPlot1D("1p", "", "Electron momentum BPID", "Electron momentum P_{e} BPID", "P_{e} [GeV/c]", directories.Momentum_Directory_map["Momentum_1p_Directory"],
                                      "01b_P_e_BPID_1p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_p_APID_1p_CD = hPlot1D("1p", "CD", "Proton momentum APID", "Proton momentum P_{p} APID", "P_{p} [GeV/c]", directories.Momentum_Directory_map["Momentum_1p_Directory"],
                                      "02a_P_p_APID_1p_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_p_APIDandPS_1p_CD = hPlot1D("1p", "CD", "Proton momentum APID&PS", "Proton momentum P_{p} APID&PS", "P_{p} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_1p_Directory"], "02b_P_p_APIDandPS_1p_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_p_BPID_1p_CD = hPlot1D("1p", "CD", "Proton momentum BPID", "Proton momentum P_{p} BPID", "P_{p} [GeV/c]", directories.Momentum_Directory_map["Momentum_1p_Directory"],
                                      "02c_P_p_BPID_1p_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_p_APID_1p_FD = hPlot1D("1p", "FD", "Proton momentum APID", "Proton momentum P_{p} APID", "P_{p} [GeV/c]", directories.Momentum_Directory_map["Momentum_1p_Directory"],
                                      "02d_P_p_APID_1p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_p_APIDandPS_1p_FD = hPlot1D("1p", "FD", "Proton momentum APID&PS", "Proton momentum P_{p} APID&PS", "P_{p} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_1p_Directory"], "02e_P_p_APIDandPS_1p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_p_BPID_1p_FD = hPlot1D("1p", "FD", "Proton momentum BPID", "Proton momentum P_{p} BPID", "P_{p} [GeV/c]", directories.Momentum_Directory_map["Momentum_1p_Directory"],
                                      "02f_P_p_BPID_1p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_pFD_APID_1p =
        hPlot1D("1p", "FD", "FD proton momentum APID", "FD proton momentum APID", "P_{p} [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_1p_Directory"],
                "01a_P_pFD_APID_1p_FD", FDMomentum_lboundary, FDMomentum_uboundary, numTH1Dbins);
    hPlot1D hP_pFD_APIDandPS_1p =
        hPlot1D("1p", "FD", "FD proton momentum APID&PS", "FD proton momentum APID&PS", "P_{p} [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_1p_Directory"],
                "01b_P_pFD_APIDandPS_1p_FD", FDMomentum_lboundary, FDMomentum_uboundary, numTH1Dbins);

    TH2D *hP_pFD_APIDandPS_VS_W_1p =
        new TH2D("FD proton momentum APID vs. W (All Int., 1p)", "FD proton momentum APID vs. W (All Int., 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{p} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hP_pFD_APIDandPS_VS_W_QEL_1p =
        new TH2D("FD proton momentum APID vs. W (QE Only, 1p)", "FD proton momentum APID vs. W (QE Only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{p} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hP_pFD_APIDandPS_VS_W_MEC_1p =
        new TH2D("FD proton momentum APID vs. W (MEC Only, 1p)", "FD proton momentum APID vs. W (MEC Only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{p} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hP_pFD_APIDandPS_VS_W_RES_1p =
        new TH2D("FD proton momentum APID vs. W (RES Only, 1p)", "FD proton momentum APID vs. W (RES Only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{p} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hP_pFD_APIDandPS_VS_W_DIS_1p =
        new TH2D("FD proton momentum APID vs. W (DIS Only, 1p)", "FD proton momentum APID vs. W (DIS Only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{p} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    string hP_pFD_APIDandPS_VS_W_1p_Dir = directories.Momentum_transfer_Directory_map["Analysis_plots_momentum_1p_Directory"];

    hPlot1D hP_piplus_APID_1p_CD = hPlot1D("1p", "CD", "#pi^{+} momentum APID", "#pi^{+} momentum P_{#pi^{+}} APID", "P_{#pi^{+}} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_1p_Directory"], "03a_P_piplus_APID_1p_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piplus_BPID_1p_CD = hPlot1D("1p", "CD", "#pi^{+} momentum BPID", "#pi^{+} momentum P_{#pi^{+}} BPID", "P_{#pi^{+}} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_1p_Directory"], "03b_P_piplus_BPID_1p_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piplus_APID_1p_FD = hPlot1D("1p", "FD", "#pi^{+} momentum APID", "#pi^{+} momentum P_{#pi^{+}} APID", "P_{#pi^{+}} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_1p_Directory"], "03c_P_piplus_APID_1p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piplus_BPID_1p_FD = hPlot1D("1p", "FD", "#pi^{+} momentum BPID", "#pi^{+} momentum P_{#pi^{+}} BPID", "P_{#pi^{+}} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_1p_Directory"], "03d_P_piplus_BPID_1p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_piminus_APID_1p_CD = hPlot1D("1p", "CD", "#pi^{-} momentum APID", "#pi^{-} momentum P_{#pi^{-}} APID", "P_{#pi^{-}} [GeV/c]",
                                            directories.Momentum_Directory_map["Momentum_1p_Directory"], "04a_P_piminus_APID_1p_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piminus_BPID_1p_CD = hPlot1D("1p", "CD", "#pi^{-} momentum BPID", "#pi^{-} momentum P_{#pi^{-}} BPID", "P_{#pi^{-}} [GeV/c]",
                                            directories.Momentum_Directory_map["Momentum_1p_Directory"], "04b_P_piminus_BPID_1p_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piminus_APID_1p_FD = hPlot1D("1p", "FD", "#pi^{-} momentum APID", "#pi^{-} momentum P_{#pi^{-}} APID", "P_{#pi^{-}} [GeV/c]",
                                            directories.Momentum_Directory_map["Momentum_1p_Directory"], "04c_P_piminus_APID_1p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piminus_BPID_1p_FD = hPlot1D("1p", "FD", "#pi^{-} momentum BPID", "#pi^{-} momentum P_{#pi^{-}} BPID", "P_{#pi^{-}} [GeV/c]",
                                            directories.Momentum_Directory_map["Momentum_1p_Directory"], "04d_P_piminus_BPID_1p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_ph_APID_1p_FD = hPlot1D("1p", "FD", "Photon momentum APID", "Photon momentum P_{#gamma} APID", "P_{#gamma} [GeV/c]",
                                       directories.Momentum_Directory_map["Momentum_1p_Directory"], "05c_P_ph_APID_1p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_ph_BPID_1p_FD = hPlot1D("1p", "FD", "Photon momentum BPID", "Photon momentum P_{#gamma} BPID", "P_{#gamma} [GeV/c]",
                                       directories.Momentum_Directory_map["Momentum_1p_Directory"], "05d_P_ph_BPID_1p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_n_APID_1p_FD = hPlot1D("1p", "FD", "Neutron momentum APID", "Neutron momentum P_{n} APID", "P_{n} [GeV/c]", directories.Momentum_Directory_map["Momentum_1p_Directory"],
                                      "06c_P_n_APID_1p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_n_BPID_1p_FD = hPlot1D("1p", "FD", "Neutron momentum BPID", "Neutron momentum P_{n} BPID", "P_{n} [GeV/c]", directories.Momentum_Directory_map["Momentum_1p_Directory"],
                                      "06d_P_n_BPID_1p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    // Momentum threshold plots (1n)
    hPlot1D hP_e_APID_1n_FD = hPlot1D("1n", "", "Electron momentum APID", "Electron momentum P_{e} APID", "P_{e} [GeV/c]", directories.Momentum_Directory_map["Momentum_1n_Directory"],
                                      "01a_P_e_APID_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_e_BPID_1n_FD = hPlot1D("1n", "", "Electron momentum BPID", "Electron momentum P_{e} BPID", "P_{e} [GeV/c]", directories.Momentum_Directory_map["Momentum_1n_Directory"],
                                      "01b_P_e_BPID_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_n_APID_1n_FD = hPlot1D("1n", "FD", "Neutron momentum APID", "Neutron momentum P_{n} APID", "P_{n} [GeV/c]", directories.Momentum_Directory_map["Momentum_1n_Directory"],
                                      "02a_P_n_APID_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_n_APID_1n_ZOOMOUT_FD = hPlot1D("1n", "FD", "Neutron momentum APID - ZOOMOUT", "Neutron momentum P_{n} APID - ZOOMOUT", "P_{n} [GeV/c]",
                                              directories.Momentum_Directory_map["Momentum_1n_Directory"], "02b_P_n_APID_1n_ZOOMOUT_FD", Momentum_lboundary, 15., numTH1Dbins);
    hPlot1D hP_n_BPID_1n_FD = hPlot1D("1n", "FD", "Neutron momentum BPID", "Neutron momentum P_{n} BPID", "P_{n} [GeV/c]", directories.Momentum_Directory_map["Momentum_1n_Directory"],
                                      "02c_P_n_BPID_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_n_BPID_1n_ZOOMOUT_FD = hPlot1D("1n", "FD", "Neutron momentum BPID - ZOOMOUT", "Neutron momentum P_{n} BPID - ZOOMOUT", "P_{n} [GeV/c]",
                                              directories.Momentum_Directory_map["Momentum_1n_Directory"], "02d_P_n_BPID_1n_ZOOMOUT_FD", Momentum_lboundary, 15., numTH1Dbins);
    hPlot1D hP_n_APIDandNS_1n_FD = hPlot1D("1n", "FD", "Neutron momentum APID&NC", "Neutron momentum P_{n} APID&NC", "P_{n} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_1n_Directory"], "02e_P_n_APIDandNS_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_n_APIDandNS_1n_ZOOMOUT_FD = hPlot1D("1n", "FD", "Neutron momentum APID&NC - ZOOMOUT", "Neutron momentum P_{n} APID&NC - ZOOMOUT", "P_{n} [GeV/c]",
                                                   directories.Momentum_Directory_map["Momentum_1n_Directory"], "02f_P_n_APIDandNS_1n_ZOOMOUT_FD", Momentum_lboundary, 15., numTH1Dbins);

    hPlot1D hP_nFD_APID_1n =
        hPlot1D("1n", "FD", "Leading FD neutron momentum APID", "Leading FD neutron momentum APID", "P_{n} [GeV/c]",
                directories.Momentum_Directory_map["Analysis_plots_momentum_1n_Directory"], "01a_P_nFD_APID_1n_FD", FDMomentum_lboundary, FDMomentum_uboundary, numTH1Dbins);
    hPlot1D hP_nFD_APIDandNS_1n =
        hPlot1D("1n", "FD", "Leading FD neutron momentum APID&NC", "Leading FD neutron momentum APID&NC", "P_{n} [GeV/c]",
                directories.Momentum_Directory_map["Analysis_plots_momentum_1n_Directory"], "01b_P_nFD_APIDandNS_1n_FD", FDMomentum_lboundary, FDMomentum_uboundary, numTH1Dbins);
    hPlot1D hP_nFD_APID_1n_ZOOMOUT =
        hPlot1D("1n", "FD", "Leading FD neutron momentum APID - ZOOMOUT", "Leading FD neutron momentum APID - ZOOMOUT", "P_{n} [GeV/c]",
                directories.Momentum_Directory_map["Analysis_plots_momentum_1n_Directory"], "01c_P_nFD_APID_1n_ZOOMOUT_FD", Momentum_lboundary, 15., numTH1Dbins);
    hPlot1D hP_nFD_APIDandNS_1n_ZOOMOUT =
        hPlot1D("1n", "FD", "Leading FD neutron momentum APID&NC - ZOOMOUT", "Leading FD neutron momentum APID&NC - ZOOMOUT", "P_{n} [GeV/c]",
                directories.Momentum_Directory_map["Analysis_plots_momentum_1n_Directory"], "01d_P_nFD_APIDandNS_1n_ZOOMOUT_FD", Momentum_lboundary, 15., numTH1Dbins);

    hPlot2D hP_nFD_vs_P_e_1n =
        hPlot2D("1n", "", "P_{nFD} vs. P_{e}", "P_{nFD} vs. P_{e}", "P_{nFD} [GeV/c]", "P_{e} [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_1n_Directory"],
                "05aa_P_nFD_vs_P_e", P_nucFD_lboundary, P_nucFD_uboundary, Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D hP_nFD_vs_P_e_ZoomOut_1n = hPlot2D("1n", "", "P_{nFD} vs. P_{e} - ZoomOut", "P_{nFD} vs. P_{e} - ZoomOut", "P_{nFD} [GeV/c]", "P_{e} [GeV/c]",
                                               directories.Momentum_Directory_map["Analysis_plots_momentum_1n_Directory"], "05ab_P_nFD_vs_P_e_ZoomOut", P_nucFD_lboundary, beamE * 3.,
                                               Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D hP_nFD_vs_theta_e_1n = hPlot2D("1n", "", "P_{nFD} vs. #theta_{e}", "P_{nFD} vs. #theta_{e}", "P_{nFD} [GeV/c]", "#theta_{e} [#circ]",
                                           directories.Momentum_Directory_map["Analysis_plots_momentum_1n_Directory"], "05ba_P_nFD_vs_theta_e", P_nucFD_lboundary, P_nucFD_uboundary,
                                           Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D hP_nFD_vs_theta_e_ZoomOut_1n = hPlot2D("1n", "", "P_{nFD} vs. #theta_{e} - ZoomOut", "P_{nFD} vs. #theta_{e} - ZoomOut", "P_{nFD} [GeV/c]", "#theta_{e} [#circ]",
                                                   directories.Momentum_Directory_map["Analysis_plots_momentum_1n_Directory"], "05bb_P_nFD_vs_theta_e_ZoomOut", P_nucFD_lboundary, beamE * 3.,
                                                   Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D hP_nFD_vs_phi_e_1n =
        hPlot2D("1n", "", "P_{nFD} vs. #phi_{e}", "P_{nFD} vs. #phi_{e}", "P_{nFD} [GeV/c]", "#phi_{e} [#circ]", directories.Momentum_Directory_map["Analysis_plots_momentum_1n_Directory"],
                "05ca_P_nFD_vs_phi_e", P_nucFD_lboundary, P_nucFD_uboundary, Phi_lboundary, Phi_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D hP_nFD_vs_phi_e_ZoomOut_1n = hPlot2D("1n", "", "P_{nFD} vs. #phi_{e} - ZoomOut", "P_{nFD} vs. #phi_{e} - ZoomOut", "P_{nFD} [GeV/c]", "#phi_{e} [#circ]",
                                                 directories.Momentum_Directory_map["Analysis_plots_momentum_1n_Directory"], "05cb_P_nFD_vs_phi_e_ZoomOut", P_nucFD_lboundary, beamE * 3.,
                                                 Phi_lboundary, Phi_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D htheta_nFD_vs_P_e_1n = hPlot2D("1n", "", "#theta_{nFD} vs. P_{e}", "#theta_{nFD} vs. P_{e}", "#theta_{nFD} [#circ]", "P_{e} [GeV/c]",
                                           directories.Momentum_Directory_map["Analysis_plots_momentum_1n_Directory"], "05d_theta_nFD_vs_P_e", Theta_lboundary_FD, Theta_uboundary_FD,
                                           Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D htheta_nFD_vs_theta_e_1n = hPlot2D("1n", "", "#theta_{nFD} vs. #theta_{e}", "#theta_{nFD} vs. #theta_{e}", "#theta_{nFD} [#circ]", "#theta_{e} [#circ]",
                                               directories.Momentum_Directory_map["Analysis_plots_momentum_1n_Directory"], "05e_theta_nFD_vs_theta_e", Theta_lboundary_FD, Theta_uboundary_FD,
                                               Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D htheta_nFD_vs_phi_e_1n = hPlot2D("1n", "", "#theta_{nFD} vs. #phi_{e}", "#theta_{nFD} vs. #phi_{e}", "#theta_{nFD} [#circ]", "#phi_{e} [#circ]",
                                             directories.Momentum_Directory_map["Analysis_plots_momentum_1n_Directory"], "05f_theta_nFD_vs_phi_e", Theta_lboundary_FD, Theta_uboundary_FD,
                                             Phi_lboundary, Phi_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D hphi_nFD_vs_P_e_1n =
        hPlot2D("1n", "", "#phi_{nFD} vs. P_{e}", "#phi_{nFD} vs. P_{e}", "#phi_{nFD} [#circ]", "P_{e} [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_1n_Directory"],
                "05g_phi_nFD_vs_P_e", Phi_lboundary, Phi_uboundary, Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D hphi_nFD_vs_theta_e_1n = hPlot2D("1n", "", "#phi_{nFD} vs. #theta_{e}", "#phi_{nFD} vs. #theta_{e}", "#phi_{nFD} [#circ]", "#theta_{e} [#circ]",
                                             directories.Momentum_Directory_map["Analysis_plots_momentum_1n_Directory"], "05h_phi_nFD_vs_theta_e", Phi_lboundary, Phi_uboundary,
                                             Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D hphi_nFD_vs_phi_e_1n = hPlot2D("1n", "", "#phi_{nFD} vs. #phi_{e}", "#phi_{nFD} vs. #phi_{e}", "#phi_{nFD} [#circ]", "#phi_{e} [#circ]",
                                           directories.Momentum_Directory_map["Analysis_plots_momentum_1n_Directory"], "05i_phi_nFD_vs_phi_e", Phi_lboundary, Phi_uboundary, Phi_lboundary,
                                           Phi_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);

    TH2D *hP_nFD_APIDandNS_VS_W_1n = new TH2D("Leading FD neutron momentum APID&NC vs. W (All Int., 1n)",
                                              "Leading FD neutron momentum APID&NC vs. W (All Int., 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{n} [GeV/c]",
                                              numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hP_nFD_APIDandNS_VS_W_QEL_1n = new TH2D("Leading FD neutron momentum APID&NC vs. W (QE Only, 1n)",
                                                  "Leading FD neutron momentum APID&NC vs. W (QE Only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{n} [GeV/c]",
                                                  numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hP_nFD_APIDandNS_VS_W_MEC_1n = new TH2D("Leading FD neutron momentum APID&NC vs. W (MEC Only, 1n)",
                                                  "Leading FD neutron momentum APID&NC vs. W (MEC Only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{n} [GeV/c]",
                                                  numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hP_nFD_APIDandNS_VS_W_RES_1n = new TH2D("Leading FD neutron momentum APID&NC vs. W (RES Only, 1n)",
                                                  "Leading FD neutron momentum APID&NC vs. W (RES Only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{n} [GeV/c]",
                                                  numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hP_nFD_APIDandNS_VS_W_DIS_1n = new TH2D("Leading FD neutron momentum APID&NC vs. W (DIS Only, 1n)",
                                                  "Leading FD neutron momentum APID&NC vs. W (DIS Only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{n} [GeV/c]",
                                                  numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    string hP_nFD_APIDandNS_VS_W_1n_Dir = directories.Momentum_transfer_Directory_map["Analysis_plots_momentum_1n_Directory"];

    hPlot1D hP_p_APID_1n_CD = hPlot1D("1n", "CD", "Proton momentum APID", "Proton momentum P_{p} APID", "P_{p} [GeV/c]", directories.Momentum_Directory_map["Momentum_1n_Directory"],
                                      "03a_P_p_APID_1n_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_p_BPID_1n_CD = hPlot1D("1n", "CD", "Proton momentum BPID", "Proton momentum P_{p} BPID", "P_{p} [GeV/c]", directories.Momentum_Directory_map["Momentum_1n_Directory"],
                                      "03b_P_p_BPID_1n_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_p_APID_1n_FD = hPlot1D("1n", "FD", "Proton momentum APID", "Proton momentum P_{p} APID", "P_{p} [GeV/c]", directories.Momentum_Directory_map["Momentum_1n_Directory"],
                                      "03c_P_p_APID_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_p_BPID_1n_FD = hPlot1D("1n", "FD", "Proton momentum BPID", "Proton momentum P_{p} BPID", "P_{p} [GeV/c]", directories.Momentum_Directory_map["Momentum_1n_Directory"],
                                      "03d_P_p_BPID_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_piplus_APID_1n_CD = hPlot1D("1n", "CD", "#pi^{+} momentum APID", "#pi^{+} momentum P_{#pi^{+}} APID", "P_{#pi^{+}} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_1n_Directory"], "04a_P_piplus_APID_1n_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piplus_BPID_1n_CD = hPlot1D("1n", "CD", "#pi^{+} momentum BPID", "#pi^{+} momentum P_{#pi^{+}} BPID", "P_{#pi^{+}} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_1n_Directory"], "04b_P_piplus_BPID_1n_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piplus_APID_1n_FD = hPlot1D("1n", "FD", "#pi^{+} momentum APID", "#pi^{+} momentum P_{#pi^{+}} APID", "P_{#pi^{+}} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_1n_Directory"], "04c_P_piplus_APID_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piplus_BPID_1n_FD = hPlot1D("1n", "FD", "#pi^{+} momentum BPID", "#pi^{+} momentum P_{#pi^{+}} BPID", "P_{#pi^{+}} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_1n_Directory"], "04d_P_piplus_BPID_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_piminus_APID_1n_CD = hPlot1D("1n", "CD", "#pi^{-} momentum APID", "#pi^{-} momentum P_{#pi^{-}} APID", "P_{#pi^{-}} [GeV/c]",
                                            directories.Momentum_Directory_map["Momentum_1n_Directory"], "05a_P_piminus_APID_1n_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piminus_BPID_1n_CD = hPlot1D("1n", "CD", "#pi^{-} momentum BPID", "#pi^{-} momentum P_{#pi^{-}} BPID", "P_{#pi^{-}} [GeV/c]",
                                            directories.Momentum_Directory_map["Momentum_1n_Directory"], "05b_P_piminus_BPID_1n_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piminus_APID_1n_FD = hPlot1D("1n", "FD", "#pi^{-} momentum APID", "#pi^{-} momentum P_{#pi^{-}} APID", "P_{#pi^{-}} [GeV/c]",
                                            directories.Momentum_Directory_map["Momentum_1n_Directory"], "05c_P_piminus_APID_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piminus_BPID_1n_FD = hPlot1D("1n", "FD", "#pi^{-} momentum BPID", "#pi^{-} momentum P_{#pi^{-}} BPID", "P_{#pi^{-}} [GeV/c]",
                                            directories.Momentum_Directory_map["Momentum_1n_Directory"], "05d_P_piminus_BPID_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_n_VN_BPID_1n_FD = hPlot1D("1n", "FD", "P_{n} (from v. neutrons) BPID", "Neutron Momentum (from v. neutrons) BPID", "P_{n} [GeV/c]",
                                         directories.Momentum_Directory_map["Momentum_1n_Directory"], "06a_P_n_VNeutrons_BPID_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_n_VN_APID_1n_FD = hPlot1D("1n", "FD", "P_{n} (from v. neutrons) APID", "Neutron Momentum (from v. neutrons) APID", "P_{n} [GeV/c]",
                                         directories.Momentum_Directory_map["Momentum_1n_Directory"], "06b_P_n_VNeutrons_APID_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_n_Ph_BPID_1n_FD = hPlot1D("1n", "FD", "P_{n} (from 'Photons') BPID", "Neutron Momentum (from 'Photons') BPID", "P_{n} [GeV/c]",
                                         directories.Momentum_Directory_map["Momentum_1n_Directory"], "07a_P_n_From_Photons_BPID_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_n_Ph_APID_1n_FD = hPlot1D("1n", "FD", "P_{n} (from 'Photons') APID", "Neutron Momentum (from 'Photons') APID", "P_{n} [GeV/c]",
                                         directories.Momentum_Directory_map["Momentum_1n_Directory"], "07b_P_n_From_Photons_APID_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_ph_APID_1n_FD = hPlot1D("1n", "FD", "Photon momentum APID", "Photon momentum P_{#gamma} APID", "P_{#gamma} [GeV/c]",
                                       directories.Momentum_Directory_map["Momentum_1n_Directory"], "08a_P_ph_APID_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_ph_BPID_1n_FD = hPlot1D("1n", "FD", "Photon momentum BPID", "Photon momentum P_{#gamma} BPID", "P_{#gamma} [GeV/c]",
                                       directories.Momentum_Directory_map["Momentum_1n_Directory"], "08b_P_ph_BPID_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    // Momentum threshold plots (2p)

    // Momentum threshold plots (2p)
    hPlot1D hP_e_APID_2p_FD = hPlot1D("2p", "", "Electron momentum APID", "Electron momentum P_{e} APID", "P_{e} [GeV/c]", directories.Momentum_Directory_map["Momentum_2p_Directory"],
                                      "01a_P_e_APID_2p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_e_BPID_2p_FD = hPlot1D("2p", "", "Electron momentum BPID", "Electron momentum P_{e} BPID", "P_{e} [GeV/c]", directories.Momentum_Directory_map["Momentum_2p_Directory"],
                                      "01b_P_e_BPID_2p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_p_APID_2p_CD = hPlot1D("2p", "CD", "Proton momentum APID", "Proton momentum P_{p} APID", "P_{p} [GeV/c]", directories.Momentum_Directory_map["Momentum_2p_Directory"],
                                      "02a_P_p_APID_2p_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_p_BPID_2p_CD = hPlot1D("2p", "CD", "Proton momentum BPID", "Proton momentum P_{p} BPID", "P_{p} [GeV/c]", directories.Momentum_Directory_map["Momentum_2p_Directory"],
                                      "02b_P_p_BPID_2p_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_p_APID_2p_FD = hPlot1D("2p", "FD", "Proton momentum APID", "Proton momentum P_{p} APID", "P_{p} [GeV/c]", directories.Momentum_Directory_map["Momentum_2p_Directory"],
                                      "03c_P_p_APID_2p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_p_BPID_2p_FD = hPlot1D("2p", "FD", "Proton momentum BPID", "Proton momentum P_{p} BPID", "P_{p} [GeV/c]", directories.Momentum_Directory_map["Momentum_2p_Directory"],
                                      "03d_P_p_BPID_2p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_piplus_APID_2p_CD = hPlot1D("2p", "CD", "#pi^{+} momentum APID", "#pi^{+} momentum P_{#pi^{+}} APID", "P_{#pi^{+}} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_2p_Directory"], "04a_P_piplus_APID_2p_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piplus_BPID_2p_CD = hPlot1D("2p", "CD", "#pi^{+} momentum BPID", "#pi^{+} momentum P_{#pi^{+}} BPID", "P_{#pi^{+}} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_2p_Directory"], "04b_P_piplus_BPID_2p_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piplus_APID_2p_FD = hPlot1D("2p", "FD", "#pi^{+} momentum APID", "#pi^{+} momentum P_{#pi^{+}} APID", "P_{#pi^{+}} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_2p_Directory"], "04c_P_piplus_APID_2p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piplus_BPID_2p_FD = hPlot1D("2p", "FD", "#pi^{+} momentum BPID", "#pi^{+} momentum P_{#pi^{+}} BPID", "P_{#pi^{+}} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_2p_Directory"], "04d_P_piplus_BPID_2p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_piminus_APID_2p_CD = hPlot1D("2p", "CD", "#pi^{-} momentum APID", "#pi^{-} momentum P_{#pi^{-}} APID", "P_{#pi^{-}} [GeV/c]",
                                            directories.Momentum_Directory_map["Momentum_2p_Directory"], "05a_P_piminus_APID_2p_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piminus_BPID_2p_CD = hPlot1D("2p", "CD", "#pi^{-} momentum BPID", "#pi^{-} momentum P_{#pi^{-}} BPID", "P_{#pi^{-}} [GeV/c]",
                                            directories.Momentum_Directory_map["Momentum_2p_Directory"], "05b_P_piminus_BPID_2p_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piminus_APID_2p_FD = hPlot1D("2p", "FD", "#pi^{-} momentum APID", "#pi^{-} momentum P_{#pi^{-}} APID", "P_{#pi^{-}} [GeV/c]",
                                            directories.Momentum_Directory_map["Momentum_2p_Directory"], "05c_P_piminus_APID_2p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piminus_BPID_2p_FD = hPlot1D("2p", "FD", "#pi^{-} momentum BPID", "#pi^{-} momentum P_{#pi^{-}} BPID", "P_{#pi^{-}} [GeV/c]",
                                            directories.Momentum_Directory_map["Momentum_2p_Directory"], "05d_P_piminus_BPID_2p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_ph_APID_2p_FD = hPlot1D("2p", "FD", "Photon momentum APID", "Photon momentum P_{#gamma} APID", "P_{#gamma} [GeV/c]",
                                       directories.Momentum_Directory_map["Momentum_2p_Directory"], "06c_P_ph_APID_2p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_ph_BPID_2p_FD = hPlot1D("2p", "FD", "Photon momentum BPID", "Photon momentum P_{#gamma} BPID", "P_{#gamma} [GeV/c]",
                                       directories.Momentum_Directory_map["Momentum_2p_Directory"], "06d_P_ph_BPID_2p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_n_APID_2p_FD = hPlot1D("2p", "FD", "Neutron momentum APID", "Neutron momentum P_{n} APID", "P_{n} [GeV/c]", directories.Momentum_Directory_map["Momentum_2p_Directory"],
                                      "07c_P_n_APID_2p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_n_BPID_2p_FD = hPlot1D("2p", "FD", "Neutron momentum BPID", "Neutron momentum P_{n} BPID", "P_{n} [GeV/c]", directories.Momentum_Directory_map["Momentum_2p_Directory"],
                                      "07d_P_n_BPID_2p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    // Leading (P_1) and recoil (P_2) Momentum threshold plots (2p)
    hPlot1D hP_p_1_2p = hPlot1D("2p", "", "Leading proton P_{1}", "Leading proton momentum P_{1}", "P_{1} [GeV/c]", directories.Momentum_Directory_map["Momentum_2p_Directory"],
                                "07_P_p_1_2p", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_p_2_2p = hPlot1D("2p", "", "Recoil proton P_{2}", "Recoil proton momentum P_{2}", "P_{2} [GeV/c]", directories.Momentum_Directory_map["Momentum_2p_Directory"], "07_P_p_2_2p",
                                Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    // P1 vs P2 (2p, CD & FD)
    hPlot2D hP_p_1_vs_P_p_2_2p = hPlot2D("2p", "", "P_{1} vs. P_{2}", "P_{1} vs. P_{2}", "P_{1} [GeV/c]", "P_{2} [GeV/c]", directories.Momentum_Directory_map["Momentum_2p_Directory"],
                                         "08_P_p_1_vs_P_p_2", Momentum_lboundary, Momentum_uboundary, Momentum_lboundary, Momentum_uboundary, numTH2Dbins, numTH2Dbins);

    // Momentum threshold plots (pFDpCD)
    hPlot1D hP_e_APID_pFDpCD_FD = hPlot1D("pFDpCD", "", "Electron momentum APID", "Electron momentum P_{e} APID", "P_{e} [GeV/c]",
                                          directories.Momentum_Directory_map["Momentum_pFDpCD_Directory"], "01a_P_e_APID_pFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_e_BPID_pFDpCD_FD = hPlot1D("pFDpCD", "", "Electron momentum BPID", "Electron momentum P_{e} BPID", "P_{e} [GeV/c]",
                                          directories.Momentum_Directory_map["Momentum_pFDpCD_Directory"], "01b_P_e_BPID_pFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_p_APID_pFDpCD_CD = hPlot1D("pFDpCD", "CD", "Proton momentum APID", "Proton momentum P_{p} APID", "P_{p} [GeV/c]",
                                          directories.Momentum_Directory_map["Momentum_pFDpCD_Directory"], "02a_P_p_APID_pFDpCD_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_p_BPID_pFDpCD_CD = hPlot1D("pFDpCD", "CD", "Proton momentum BPID", "Proton momentum P_{p} BPID", "P_{p} [GeV/c]",
                                          directories.Momentum_Directory_map["Momentum_pFDpCD_Directory"], "02b_P_p_BPID_pFDpCD_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_p_APID_pFDpCD_FD = hPlot1D("pFDpCD", "FD", "Proton momentum APID", "Proton momentum P_{p} APID", "P_{p} [GeV/c]",
                                          directories.Momentum_Directory_map["Momentum_pFDpCD_Directory"], "03c_P_p_APID_pFDpCD_FD", FDMomentum_lboundary, FDMomentum_uboundary, numTH1Dbins);
    hPlot1D hP_p_APIDandPS_pFDpCD_FD =
        hPlot1D("pFDpCD", "FD", "Proton momentum APID&PS", "Proton momentum P_{p} APID&PS", "P_{p} [GeV/c]", directories.Momentum_Directory_map["Momentum_pFDpCD_Directory"],
                "03d_P_p_APIDandPS_pFDpCD_FD", FDMomentum_lboundary, FDMomentum_uboundary, numTH1Dbins);
    hPlot1D hP_p_BPID_pFDpCD_FD = hPlot1D("pFDpCD", "FD", "Proton momentum BPID", "Proton momentum P_{p} BPID", "P_{p} [GeV/c]",
                                          directories.Momentum_Directory_map["Momentum_pFDpCD_Directory"], "03e_P_p_BPID_pFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_piplus_APID_pFDpCD_CD =
        hPlot1D("pFDpCD", "CD", "#pi^{+} momentum APID", "#pi^{+} momentum P_{#pi^{+}} APID", "P_{#pi^{+}} [GeV/c]", directories.Momentum_Directory_map["Momentum_pFDpCD_Directory"],
                "04a_P_piplus_APID_pFDpCD_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piplus_BPID_pFDpCD_CD =
        hPlot1D("pFDpCD", "CD", "#pi^{+} momentum BPID", "#pi^{+} momentum P_{#pi^{+}} BPID", "P_{#pi^{+}} [GeV/c]", directories.Momentum_Directory_map["Momentum_pFDpCD_Directory"],
                "04b_P_piplus_BPID_pFDpCD_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piplus_APID_pFDpCD_FD =
        hPlot1D("pFDpCD", "FD", "#pi^{+} momentum APID", "#pi^{+} momentum P_{#pi^{+}} APID", "P_{#pi^{+}} [GeV/c]", directories.Momentum_Directory_map["Momentum_pFDpCD_Directory"],
                "04c_P_piplus_APID_pFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piplus_BPID_pFDpCD_FD =
        hPlot1D("pFDpCD", "FD", "#pi^{+} momentum BPID", "#pi^{+} momentum P_{#pi^{+}} BPID", "P_{#pi^{+}} [GeV/c]", directories.Momentum_Directory_map["Momentum_pFDpCD_Directory"],
                "04d_P_piplus_BPID_pFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_piminus_APID_pFDpCD_CD =
        hPlot1D("pFDpCD", "CD", "#pi^{-} momentum APID", "#pi^{-} momentum P_{#pi^{-}} APID", "P_{#pi^{-}} [GeV/c]", directories.Momentum_Directory_map["Momentum_pFDpCD_Directory"],
                "05a_P_piminus_APID_pFDpCD_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piminus_BPID_pFDpCD_CD =
        hPlot1D("pFDpCD", "CD", "#pi^{-} momentum BPID", "#pi^{-} momentum P_{#pi^{-}} BPID", "P_{#pi^{-}} [GeV/c]", directories.Momentum_Directory_map["Momentum_pFDpCD_Directory"],
                "05b_P_piminus_BPID_pFDpCD_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piminus_APID_pFDpCD_FD =
        hPlot1D("pFDpCD", "FD", "#pi^{-} momentum APID", "#pi^{-} momentum P_{#pi^{-}} APID", "P_{#pi^{-}} [GeV/c]", directories.Momentum_Directory_map["Momentum_pFDpCD_Directory"],
                "05c_P_piminus_APID_pFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piminus_BPID_pFDpCD_FD =
        hPlot1D("pFDpCD", "FD", "#pi^{-} momentum BPID", "#pi^{-} momentum P_{#pi^{-}} BPID", "P_{#pi^{-}} [GeV/c]", directories.Momentum_Directory_map["Momentum_pFDpCD_Directory"],
                "05d_P_piminus_BPID_pFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_ph_APID_pFDpCD_FD = hPlot1D("pFDpCD", "FD", "Photon momentum APID", "Photon momentum P_{#gamma} APID", "P_{#gamma} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_pFDpCD_Directory"], "06c_P_ph_APID_pFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_ph_BPID_pFDpCD_FD = hPlot1D("pFDpCD", "FD", "Photon momentum BPID", "Photon momentum P_{#gamma} BPID", "P_{#gamma} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_pFDpCD_Directory"], "06d_P_ph_BPID_pFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_n_APID_pFDpCD_FD = hPlot1D("pFDpCD", "FD", "Neutron momentum APID", "Neutron momentum P_{n} APID", "P_{n} [GeV/c]",
                                          directories.Momentum_Directory_map["Momentum_pFDpCD_Directory"], "07c_P_n_APID_pFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_n_BPID_pFDpCD_FD = hPlot1D("pFDpCD", "FD", "Neutron momentum BPID", "Neutron momentum P_{n} BPID", "P_{n} [GeV/c]",
                                          directories.Momentum_Directory_map["Momentum_pFDpCD_Directory"], "07d_P_n_BPID_pFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    // Momentum threshold plots (nFDpCD)
    hPlot1D hP_e_APID_nFDpCD_FD = hPlot1D("nFDpCD", "", "Electron momentum APID", "Electron momentum P_{e} APID", "P_{e} [GeV/c]",
                                          directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"], "01a_P_e_APID_nFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_e_BPID_nFDpCD_FD = hPlot1D("nFDpCD", "", "Electron momentum BPID", "Electron momentum P_{e} BPID", "P_{e} [GeV/c]",
                                          directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"], "01b_P_e_BPID_nFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_p_APID_nFDpCD_CD = hPlot1D("nFDpCD", "CD", "Proton momentum APID", "Proton momentum P_{p} APID", "P_{p} [GeV/c]",
                                          directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"], "02a_P_p_APID_nFDpCD_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_p_BPID_nFDpCD_CD = hPlot1D("nFDpCD", "CD", "Proton momentum BPID", "Proton momentum P_{p} BPID", "P_{p} [GeV/c]",
                                          directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"], "02b_P_p_BPID_nFDpCD_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_p_APID_nFDpCD_FD = hPlot1D("nFDpCD", "FD", "Proton momentum APID", "Proton momentum P_{p} APID", "P_{p} [GeV/c]",
                                          directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"], "03c_P_p_APID_nFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_p_BPID_nFDpCD_FD = hPlot1D("nFDpCD", "FD", "Proton momentum BPID", "Proton momentum P_{p} BPID", "P_{p} [GeV/c]",
                                          directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"], "03d_P_p_BPID_nFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_piplus_APID_nFDpCD_CD =
        hPlot1D("nFDpCD", "CD", "#pi^{+} momentum APID", "#pi^{+} momentum P_{#pi^{+}} APID", "P_{#pi^{+}} [GeV/c]", directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"],
                "04a_P_piplus_APID_nFDpCD_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piplus_BPID_nFDpCD_CD =
        hPlot1D("nFDpCD", "CD", "#pi^{+} momentum BPID", "#pi^{+} momentum P_{#pi^{+}} BPID", "P_{#pi^{+}} [GeV/c]", directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"],
                "04b_P_piplus_BPID_nFDpCD_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piplus_APID_nFDpCD_FD =
        hPlot1D("nFDpCD", "FD", "#pi^{+} momentum APID", "#pi^{+} momentum P_{#pi^{+}} APID", "P_{#pi^{+}} [GeV/c]", directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"],
                "04c_P_piplus_APID_nFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piplus_BPID_nFDpCD_FD =
        hPlot1D("nFDpCD", "FD", "#pi^{+} momentum BPID", "#pi^{+} momentum P_{#pi^{+}} BPID", "P_{#pi^{+}} [GeV/c]", directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"],
                "04d_P_piplus_BPID_nFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_piminus_APID_nFDpCD_CD =
        hPlot1D("nFDpCD", "CD", "#pi^{-} momentum APID", "#pi^{-} momentum P_{#pi^{-}} APID", "P_{#pi^{-}} [GeV/c]", directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"],
                "05a_P_piminus_APID_nFDpCD_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piminus_BPID_nFDpCD_CD =
        hPlot1D("nFDpCD", "CD", "#pi^{-} momentum BPID", "#pi^{-} momentum P_{#pi^{-}} BPID", "P_{#pi^{-}} [GeV/c]", directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"],
                "05b_P_piminus_BPID_nFDpCD_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piminus_APID_nFDpCD_FD =
        hPlot1D("nFDpCD", "FD", "#pi^{-} momentum APID", "#pi^{-} momentum P_{#pi^{-}} APID", "P_{#pi^{-}} [GeV/c]", directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"],
                "05c_P_piminus_APID_nFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_piminus_BPID_nFDpCD_FD =
        hPlot1D("nFDpCD", "FD", "#pi^{-} momentum BPID", "#pi^{-} momentum P_{#pi^{-}} BPID", "P_{#pi^{-}} [GeV/c]", directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"],
                "05d_P_piminus_BPID_nFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_ph_APID_nFDpCD_FD = hPlot1D("nFDpCD", "FD", "Photon momentum APID", "Photon momentum P_{#gamma} APID", "P_{#gamma} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"], "06c_P_ph_APID_nFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_ph_BPID_nFDpCD_FD = hPlot1D("nFDpCD", "FD", "Photon momentum BPID", "Photon momentum P_{#gamma} BPID", "P_{#gamma} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"], "06d_P_ph_BPID_nFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_n_APID_nFDpCD_FD = hPlot1D("nFDpCD", "FD", "Neutron momentum APID", "Neutron momentum P_{n} APID", "P_{n} [GeV/c]",
                                          directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"], "07a_P_n_APID_nFDpCD_FD", FDMomentum_lboundary, FDMomentum_uboundary, numTH1Dbins);
    hPlot1D hP_n_APIDandNS_nFDpCD_FD =
        hPlot1D("nFDpCD", "FD", "Neutron momentum APID&NC", "Neutron momentum P_{n} APID&NC", "P_{n} [GeV/c]", directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"],
                "07b_P_n_APIDandNS_nFDpCD_FD", FDMomentum_lboundary, FDMomentum_uboundary, numTH1Dbins);
    hPlot1D hP_n_BPID_nFDpCD_FD = hPlot1D("nFDpCD", "FD", "Neutron momentum BPID", "Neutron momentum P_{n} BPID", "P_{n} [GeV/c]",
                                          directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"], "07c_P_n_BPID_nFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot1D hP_nL_APID_nFDpCD_FD = hPlot1D("nFDpCD", "FD", "Leading neutron momentum APID", "Leading neutron momentum P_{n} APID", "P_{n} [GeV/c]",
                                           directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"], "07a_P_n_APID_nFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_nL_APIDandNS_nFDpCD_FD =
        hPlot1D("nFDpCD", "FD", "Leading neutron momentum APID&NC", "Leading neutron momentum P_{n} APID&NC", "P_{n} [GeV/c]",
                directories.Momentum_Directory_map["Momentum_nFDpCD_Directory"], "07b_P_n_APIDandNS_nFDpCD_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    // Other momentum plots

    // pFD and pCD momentum plots (pFDpCD)
    hPlot1D hP_pFD_pFDpCD =
        hPlot1D("pFDpCD", "", "FD proton momentum", "FD proton momentum P_{pFD}", "P_{pFD} [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_pFDpCD_Directory"],
                "01a_P_pFD_pFDpCD", FDMomentum_lboundary, FDMomentum_uboundary, numTH1Dbins);
    hPlot1D hP_pCD_pFDpCD =
        hPlot1D("pFDpCD", "", "CD proton momentum", "CD proton momentum P_{pCD}", "P_{pCD} [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_pFDpCD_Directory"],
                "01b_P_pCD_pFDpCD", CDMomentum_lboundary, CDMomentum_uboundary, numTH1Dbins);
    hPlot2D hP_pFD_vs_P_pCD_pFDpCD = hPlot2D("pFDpCD", "", "P_{pFD} vs. P_{pCD}", "P_{pFD} vs. P_{pCD}", "P_{pFD} [GeV/c]", "P_{pCD} [GeV/c]",
                                             directories.Momentum_Directory_map["Analysis_plots_momentum_pFDpCD_Directory"], "05_P_pFD_vs_P_pCD", P_nucFD_lboundary, P_nucFD_uboundary,
                                             P_nucCD_lboundary, P_nucCD_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);

    TH2D *hP_pFD_VS_W_pFDpCD =
        new TH2D("FD proton momentum vs. W (All Int., pFDpCD)", "FD proton momentum vs. W (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{pFD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucFD_lboundary, P_nucFD_uboundary);
    TH2D *hP_pFD_VS_W_QEL_pFDpCD =
        new TH2D("FD proton momentum vs. W (QE Only, pFDpCD)", "FD proton momentum vs. W (QE Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{pFD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucFD_lboundary, P_nucFD_uboundary);
    TH2D *hP_pFD_VS_W_MEC_pFDpCD =
        new TH2D("FD proton momentum vs. W (MEC Only, pFDpCD)", "FD proton momentum vs. W (MEC Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{pFD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucFD_lboundary, P_nucFD_uboundary);
    TH2D *hP_pFD_VS_W_RES_pFDpCD =
        new TH2D("FD proton momentum vs. W (RES Only, pFDpCD)", "FD proton momentum vs. W (RES Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{pFD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucFD_lboundary, P_nucFD_uboundary);
    TH2D *hP_pFD_VS_W_DIS_pFDpCD =
        new TH2D("FD proton momentum vs. W (DIS Only, pFDpCD)", "FD proton momentum vs. W (DIS Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{pFD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucFD_lboundary, P_nucFD_uboundary);
    string hP_pFD_VS_W_pFDpCD_Dir = directories.Momentum_Directory_map["Analysis_plots_momentum_pFDpCD_Directory"];

    TH2D *hP_pCD_VS_W_pFDpCD =
        new TH2D("CD proton momentum vs. W (All Int., pFDpCD)", "CD proton momentum vs. W (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{pCD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucCD_lboundary, P_nucCD_uboundary);
    TH2D *hP_pCD_VS_W_QEL_pFDpCD =
        new TH2D("CD proton momentum vs. W (QE Only, pFDpCD)", "CD proton momentum vs. W (QE Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{pCD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucCD_lboundary, P_nucCD_uboundary);
    TH2D *hP_pCD_VS_W_MEC_pFDpCD =
        new TH2D("CD proton momentum vs. W (MEC Only, pFDpCD)", "CD proton momentum vs. W (MEC Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{pCD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucCD_lboundary, P_nucCD_uboundary);
    TH2D *hP_pCD_VS_W_RES_pFDpCD =
        new TH2D("CD proton momentum vs. W (RES Only, pFDpCD)", "CD proton momentum vs. W (RES Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{pCD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucCD_lboundary, P_nucCD_uboundary);
    TH2D *hP_pCD_VS_W_DIS_pFDpCD =
        new TH2D("CD proton momentum vs. W (DIS Only, pFDpCD)", "CD proton momentum vs. W (DIS Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{pCD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucCD_lboundary, P_nucCD_uboundary);
    string hP_pCD_VS_W_pFDpCD_Dir = directories.Momentum_Directory_map["Analysis_plots_momentum_pFDpCD_Directory"];

    // nFD and pCD momentum plots (nFDpCD)
    hPlot1D hP_nFD_nFDpCD =
        hPlot1D("nFDpCD", "", "FD neutron momentum", "FD neutron momentum P_{nFD}", "P_{nFD} [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"],
                "01aa_P_nFD_nFDpCD", FDMomentum_lboundary, FDMomentum_uboundary, numTH1Dbins);
    hPlot1D hP_nFD_nFDpCD_ZoomOut =
        hPlot1D("nFDpCD", "", "FD neutron momentum - ZoomOut", "FD neutron momentum P_{nFD} - ZoomOut", "P_{nFD} [GeV/c]",
                directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"], "01ab_P_nFD_nFDpCD_ZoomOut", FDMomentum_lboundary, beamE * 3., numTH1Dbins);
    hPlot1D hP_pCD_nFDpCD =
        hPlot1D("nFDpCD", "", "CD proton momentum", "CD proton momentum P_{pCD}", "P_{pCD} [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"],
                "01b_P_pCD_nFDpCD", CDMomentum_lboundary, CDMomentum_uboundary, numTH1Dbins);
    hPlot2D hP_nFD_vs_P_pCD_nFDpCD = hPlot2D("nFDpCD", "", "P_{nFD} vs. P_{pCD}", "P_{nFD} vs. P_{pCD}", "P_{nFD} [GeV/c]", "P_{pCD} [GeV/c]",
                                             directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"], "05_P_nFD_vs_P_pCD", P_nucFD_lboundary, P_nucFD_uboundary,
                                             P_nucCD_lboundary, P_nucCD_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D hP_nFD_vs_P_e_nFDpCD =
        hPlot2D("nFDpCD", "", "P_{nFD} vs. P_{e}", "P_{nFD} vs. P_{e}", "P_{nFD} [GeV/c]", "P_{e} [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"],
                "05aa_P_nFD_vs_P_e", P_nucFD_lboundary, P_nucFD_uboundary, Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D hP_nFD_vs_P_e_ZoomOut_nFDpCD = hPlot2D("nFDpCD", "", "P_{nFD} vs. P_{e} - ZoomOut", "P_{nFD} vs. P_{e} - ZoomOut", "P_{nFD} [GeV/c]", "P_{e} [GeV/c]",
                                                   directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"], "05ab_P_nFD_vs_P_e_ZoomOut", P_nucFD_lboundary, beamE * 3.,
                                                   Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D hP_nFD_vs_theta_e_nFDpCD = hPlot2D("nFDpCD", "", "P_{nFD} vs. #theta_{e}", "P_{nFD} vs. #theta_{e}", "P_{nFD} [GeV/c]", "#theta_{e} [#circ]",
                                               directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"], "05ba_P_nFD_vs_theta_e", P_nucFD_lboundary, P_nucFD_uboundary,
                                               Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D hP_nFD_vs_theta_e_ZoomOut_nFDpCD = hPlot2D("nFDpCD", "", "P_{nFD} vs. #theta_{e} - ZoomOut", "P_{nFD} vs. #theta_{e} - ZoomOut", "P_{nFD} [GeV/c]", "#theta_{e} [#circ]",
                                                       directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"], "05bb_P_nFD_vs_theta_e_ZoomOut", P_nucFD_lboundary,
                                                       beamE * 3., Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D hP_nFD_vs_phi_e_nFDpCD = hPlot2D("nFDpCD", "", "P_{nFD} vs. #phi_{e}", "P_{nFD} vs. #phi_{e}", "P_{nFD} [GeV/c]", "#phi_{e} [#circ]",
                                             directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"], "05ca_P_nFD_vs_phi_e", P_nucFD_lboundary, P_nucFD_uboundary,
                                             Phi_lboundary, Phi_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D hP_nFD_vs_phi_e_ZoomOut_nFDpCD = hPlot2D("nFDpCD", "", "P_{nFD} vs. #phi_{e} - ZoomOut", "P_{nFD} vs. #phi_{e} - ZoomOut", "P_{nFD} [GeV/c]", "#phi_{e} [#circ]",
                                                     directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"], "05cb_P_nFD_vs_phi_e_ZoomOut", P_nucFD_lboundary,
                                                     beamE * 3., Phi_lboundary, Phi_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D htheta_nFD_vs_P_e_nFDpCD = hPlot2D("nFDpCD", "", "#theta_{nFD} vs. P_{e}", "#theta_{nFD} vs. P_{e}", "#theta_{nFD} [#circ]", "P_{e} [GeV/c]",
                                               directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"], "05d_theta_nFD_vs_P_e", Theta_lboundary_FD, Theta_uboundary_FD,
                                               Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D htheta_nFD_vs_theta_e_nFDpCD = hPlot2D("nFDpCD", "", "#theta_{nFD} vs. #theta_{e}", "#theta_{nFD} vs. #theta_{e}", "#theta_{nFD} [#circ]", "#theta_{e} [#circ]",
                                                   directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"], "05e_theta_nFD_vs_theta_e", Theta_lboundary_FD,
                                                   Theta_uboundary_FD, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D htheta_nFD_vs_phi_e_nFDpCD = hPlot2D("nFDpCD", "", "#theta_{nFD} vs. #phi_{e}", "#theta_{nFD} vs. #phi_{e}", "#theta_{nFD} [#circ]", "#phi_{e} [#circ]",
                                                 directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"], "05f_theta_nFD_vs_phi_e", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, Phi_lboundary, Phi_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D hphi_nFD_vs_P_e_nFDpCD = hPlot2D("nFDpCD", "", "#phi_{nFD} vs. P_{e}", "#phi_{nFD} vs. P_{e}", "#phi_{nFD} [#circ]", "P_{e} [GeV/c]",
                                             directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"], "05g_phi_nFD_vs_P_e", Phi_lboundary, Phi_uboundary,
                                             Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D hphi_nFD_vs_theta_e_nFDpCD = hPlot2D("nFDpCD", "", "#phi_{nFD} vs. #theta_{e}", "#phi_{nFD} vs. #theta_{e}", "#phi_{nFD} [#circ]", "#theta_{e} [#circ]",
                                                 directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"], "05h_phi_nFD_vs_theta_e", Phi_lboundary, Phi_uboundary,
                                                 Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    hPlot2D hphi_nFD_vs_phi_e_nFDpCD = hPlot2D("nFDpCD", "", "#phi_{nFD} vs. #phi_{e}", "#phi_{nFD} vs. #phi_{e}", "#phi_{nFD} [#circ]", "#phi_{e} [#circ]",
                                               directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"], "05i_phi_nFD_vs_phi_e", Phi_lboundary, Phi_uboundary,
                                               Phi_lboundary, Phi_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);

    TH2D *hP_nFD_VS_W_nFDpCD =
        new TH2D("FD neutron momentum vs. W (All Int., nFDpCD)", "FD neutron momentum vs. W (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{nFD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucFD_lboundary, P_nucFD_uboundary);
    TH2D *hP_nFD_VS_W_QEL_nFDpCD =
        new TH2D("FD neutron momentum vs. W (QE Only, nFDpCD)", "FD neutron momentum vs. W (QE Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{nFD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucFD_lboundary, P_nucFD_uboundary);
    TH2D *hP_nFD_VS_W_MEC_nFDpCD =
        new TH2D("FD neutron momentum vs. W (MEC Only, nFDpCD)", "FD neutron momentum vs. W (MEC Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{nFD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucFD_lboundary, P_nucFD_uboundary);
    TH2D *hP_nFD_VS_W_RES_nFDpCD =
        new TH2D("FD neutron momentum vs. W (RES Only, nFDpCD)", "FD neutron momentum vs. W (RES Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{nFD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucFD_lboundary, P_nucFD_uboundary);
    TH2D *hP_nFD_VS_W_DIS_nFDpCD =
        new TH2D("FD neutron momentum vs. W (DIS Only, nFDpCD)", "FD neutron momentum vs. W (DIS Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{nFD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucFD_lboundary, P_nucFD_uboundary);
    string hP_nFD_VS_W_nFDpCD_Dir = directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"];

    TH2D *hP_pCD_VS_W_nFDpCD =
        new TH2D("CD proton momentum vs. W (All Int., nFDpCD)", "CD proton momentum vs. W (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{pCD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucCD_lboundary, P_nucCD_uboundary);
    TH2D *hP_pCD_VS_W_QEL_nFDpCD =
        new TH2D("CD proton momentum vs. W (QE Only, nFDpCD)", "CD proton momentum vs. W (QE Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{pCD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucCD_lboundary, P_nucCD_uboundary);
    TH2D *hP_pCD_VS_W_MEC_nFDpCD =
        new TH2D("CD proton momentum vs. W (MEC Only, nFDpCD)", "CD proton momentum vs. W (MEC Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{pCD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucCD_lboundary, P_nucCD_uboundary);
    TH2D *hP_pCD_VS_W_RES_nFDpCD =
        new TH2D("CD proton momentum vs. W (RES Only, nFDpCD)", "CD proton momentum vs. W (RES Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{pCD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucCD_lboundary, P_nucCD_uboundary);
    TH2D *hP_pCD_VS_W_DIS_nFDpCD =
        new TH2D("CD proton momentum vs. W (DIS Only, nFDpCD)", "CD proton momentum vs. W (DIS Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];P_{pCD} [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, P_nucCD_lboundary, P_nucCD_uboundary);
    string hP_pCD_VS_W_nFDpCD_Dir = directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"];

    // Total and relative nucleon momenta (pFDpCD)
    hPlot1D hP_tot_pFDpCD = hPlot1D("pFDpCD", "", "Total nucleon momentum (3-vector)", "Total nucleon 3-momentum", "|#vec{P}_{tot}| = |#vec{P}_{pL} + #vec{P}_{pR}| [GeV/c]",
                                    directories.Momentum_Directory_map["Analysis_plots_momentum_pFDpCD_Directory"], "02a_P_tot_pFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_rel_pFDpCD =
        hPlot1D("pFDpCD", "", "Relative nucleon momentum (3-vector)", "Relative nucleon 3-momentum", "|#vec{P}_{rel}| = |#vec{P}_{pL} - #vec{P}_{pR}|/2 [GeV/c]",
                directories.Momentum_Directory_map["Analysis_plots_momentum_pFDpCD_Directory"], "02b_P_rel_pFDpCD", CDMomentum_lboundary, CDMomentum_uboundary, numTH1Dbins);
    hPlot2D hP_tot_vs_P_rel_pFDpCD =
        hPlot2D("pFDpCD", "", "|#vec{P}_{tot}| vs. |#vec{P}_{rel}|", "|#vec{P}_{tot}| vs. |#vec{P}_{rel}|", "|#vec{P}_{tot}| = |#vec{P}_{pL} + #vec{P}_{pR}| [GeV/c]",
                "|#vec{P}_{rel}| = |#vec{P}_{pL} - #vec{P}_{pR}|/2 [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_pFDpCD_Directory"], "02c_P_tot_vs_P_rel",
                Momentum_lboundary, Momentum_uboundary, Momentum_lboundary, Momentum_uboundary, numTH2Dbins, numTH2Dbins);

    hPlot1D hP_tot_mu_pFDpCD =
        hPlot1D("pFDpCD", "", "Total nucleon momentum (4-vector)", "Total nucleon 4-momentum", "P_{tot}^{#mu} = (P_{pL}^{#mu} + P_{pR}^{#mu}) [GeV/c]",
                directories.Momentum_Directory_map["Analysis_plots_momentum_pFDpCD_Directory"], "02d_P_tot_pFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_rel_mu_pFDpCD =
        hPlot1D("pFDpCD", "", "Relative nucleon momentum (4-vector)", "Relative nucleon 4-momentum", "P_{rel}^{#mu} = (P_{pL}^{#mu} - P_{pR}^{#mu})/2 [GeV/c]",
                directories.Momentum_Directory_map["Analysis_plots_momentum_pFDpCD_Directory"], "02e_P_rel_pFDpCD", -CDMomentum_uboundary, CDMomentum_lboundary, numTH1Dbins);
    //                                       "02e_P_rel_pFDpCD", CDMomentum_lboundary, CDMomentum_uboundary, numTH1Dbins);
    hPlot2D hP_tot_mu_vs_P_rel_mu_pFDpCD = hPlot2D("pFDpCD", "", "P_{tot}^{#mu} vs. P_{rel}^{#mu}", "P_{tot}^{#mu} vs. P_{rel}^{#mu}", "P_{tot}^{#mu} = P_{pL}^{#mu} + P_{pR}^{#mu} [GeV/c]",
                                                   "P_{rel}^{#mu} = (P_{pL}^{#mu} - P_{pR}^{#mu})/2 [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_pFDpCD_Directory"],
                                                   "02f_P_tot_vs_P_rel", Momentum_lboundary, Momentum_uboundary, -CDMomentum_uboundary, CDMomentum_lboundary, numTH2Dbins, numTH2Dbins);
    //                                                   Momentum_lboundary, Momentum_uboundary, Momentum_lboundary, Momentum_uboundary, numTH2Dbins, numTH2Dbins);

    hPlot1D hP_tot_minus_q_pFDpCD =
        hPlot1D("pFDpCD", "", "#vec{P}_{tot}-#vec{q} distribution", "#vec{P}_{tot}-#vec{q} distribution", "|#vec{P}_{tot} - #vec{q}| = |#vec{P}_{pL} + #vec{P}_{pR}- #vec{q}| [GeV/c]",
                directories.Momentum_Directory_map["Analysis_plots_momentum_pFDpCD_Directory"], "06_P_tot_minus_q_pFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot2D hP_tot_minus_q_vs_P_tot_pFDpCD =
        hPlot2D("pFDpCD", "", "#vec{P}_{tot}-#vec{q} vs. #vec{P}_{tot}", "#vec{P}_{tot}-#vec{q} vs. #vec{P}_{tot}", "|#vec{P}_{tot}| = |#vec{P}_{nL} + #vec{P}_{nR}| [GeV/c]",
                "|#vec{P}_{tot} - #vec{q}| = |#vec{P}_{nL} + #vec{P}_{nR}- #vec{q}| [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_pFDpCD_Directory"],
                "07a_P_tot_minus_q_vs_P_tot_pFDpCD", Momentum_lboundary, Momentum_uboundary, Momentum_lboundary, Momentum_uboundary, numTH2Dbins, numTH2Dbins);
    hPlot2D hP_tot_minus_q_vs_q_pFDpCD =
        hPlot2D("pFDpCD", "", "|#vec{P}_{tot} - #vec{q}| vs. |#vec{q}|", "|#vec{P}_{tot} - #vec{q}| vs. |#vec{q}|", "|#vec{q}| [GeV/c]",
                "|#vec{P}_{tot} - #vec{q}| = |#vec{P}_{nL} + #vec{P}_{nR}- #vec{q}| [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_pFDpCD_Directory"],
                "07b_P_tot_minus_q_vs_q_pFDpCD", Momentum_lboundary, Momentum_uboundary, Momentum_lboundary, Momentum_uboundary, numTH2Dbins, numTH2Dbins);

    // Total and Relative nucleon momenta (nFDpCD)
    hPlot1D hP_tot_nFDpCD = hPlot1D("nFDpCD", "", "Total nucleon momentum (3-vector)", "Total nucleon 3-momentum", "|#vec{P}_{tot}| = |#vec{P}_{nL} + #vec{P}_{nR}| [GeV/c]",
                                    directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"], "02a_P_tot_nFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_rel_nFDpCD =
        hPlot1D("nFDpCD", "", "Relative nucleon momentum (3-vector)", "Relative nucleon 3-momentum", "|#vec{P}_{rel}| = |#vec{P}_{nL} - #vec{P}_{nR}|/2 [GeV/c]",
                directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"], "02b_P_rel_nFDpCD", CDMomentum_lboundary, CDMomentum_uboundary, numTH1Dbins);
    hPlot2D hP_tot_vs_P_rel_nFDpCD =
        hPlot2D("nFDpCD", "", "|#vec{P}_{tot}| vs. |#vec{P}_{rel}|", "|#vec{P}_{tot}| vs. |#vec{P}_{rel}|", "|#vec{P}_{tot}| = |#vec{P}_{nL} + #vec{P}_{nR}| [GeV/c]",
                "|#vec{P}_{rel}| = |#vec{P}_{nL} - #vec{P}_{nR}|/2 [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"], "02c_P_tot_vs_P_rel",
                Momentum_lboundary, Momentum_uboundary, Momentum_lboundary, Momentum_uboundary, numTH2Dbins, numTH2Dbins);

    hPlot1D hP_tot_mu_nFDpCD =
        hPlot1D("nFDpCD", "", "Total nucleon momentum (4-vector)", "Total nucleon 4-momentum", "P_{tot}^{#mu} = (P_{nL}^{#mu} + P_{nR}^{#mu}) [GeV/c]",
                directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"], "02d_P_tot_nFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hP_rel_mu_nFDpCD =
        hPlot1D("nFDpCD", "", "Relative nucleon momentum (4-vector)", "Relative nucleon 4-momentum", "P_{rel}^{#mu} = (P_{nL}^{#mu} - P_{nR}^{#mu})/2 [GeV/c]",
                directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"], "02e_P_rel_nFDpCD", -CDMomentum_uboundary, CDMomentum_lboundary, numTH1Dbins);
    //                                       "02e_P_rel_nFDpCD", CDMomentum_lboundary, CDMomentum_uboundary, numTH1Dbins);
    hPlot2D hP_tot_mu_vs_P_rel_mu_nFDpCD = hPlot2D("nFDpCD", "", "P_{tot}^{#mu} vs. P_{rel}^{#mu}", "P_{tot}^{#mu} vs. P_{rel}^{#mu}", "P_{tot}^{#mu} = P_{nL}^{#mu} + P_{nR}^{#mu} [GeV/c]",
                                                   "P_{rel}^{#mu} = (P_{nL}^{#mu} - P_{nR}^{#mu})/2 [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"],
                                                   "02f_P_tot_vs_P_rel", Momentum_lboundary, Momentum_uboundary, -CDMomentum_uboundary, CDMomentum_lboundary, numTH2Dbins, numTH2Dbins);

    hPlot1D hP_tot_minus_q_nFDpCD =
        hPlot1D("nFDpCD", "", "#vec{P}_{tot}-#vec{q} distribution", "#vec{P}_{tot}-#vec{q} distribution", "|#vec{P}_{tot} - #vec{q}| = |#vec{P}_{nL} + #vec{P}_{nR}- #vec{q}| [GeV/c]",
                directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"], "06_P_tot_minus_q_nFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot2D hP_tot_minus_q_vs_P_tot_nFDpCD =
        hPlot2D("nFDpCD", "", "#vec{P}_{tot}-#vec{q} vs. #vec{P}_{tot}", "#vec{P}_{tot}-#vec{q} vs. #vec{P}_{tot}", "|#vec{P}_{tot}| = |#vec{P}_{nL} + #vec{P}_{nR}| [GeV/c]",
                "|#vec{P}_{tot} - #vec{q}| = |#vec{P}_{nL} + #vec{P}_{nR}- #vec{q}| [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"],
                "07a_P_tot_minus_q_vs_P_tot_nFDpCD", Momentum_lboundary, Momentum_uboundary, Momentum_lboundary, Momentum_uboundary, numTH2Dbins, numTH2Dbins);
    hPlot2D hP_tot_minus_q_vs_q_nFDpCD =
        hPlot2D("nFDpCD", "", "|#vec{P}_{tot} - #vec{q}| vs. |#vec{q}|", "|#vec{P}_{tot} - #vec{q}| vs. |#vec{q}|", "|#vec{q}| [GeV/c]",
                "|#vec{P}_{tot} - #vec{q}| = |#vec{P}_{nL} + #vec{P}_{nR}- #vec{q}| [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"],
                "07b_P_tot_minus_q_vs_q_nFDpCD", Momentum_lboundary, Momentum_uboundary, Momentum_lboundary, Momentum_uboundary, numTH2Dbins, numTH2Dbins);

    // Leading and recoil nucleon momentum plots (pFDpCD)
    hPlot1D hP_pL_pFDpCD =
        hPlot1D("pFDpCD", "", "Leading proton momentum", "Leading proton momentum", "P_{pL} [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_pFDpCD_Directory"],
                "03a_P_pL_pFDpCD", FDMomentum_lboundary, FDMomentum_uboundary, numTH1Dbins);
    hPlot1D hP_pR_pFDpCD =
        hPlot1D("pFDpCD", "", "Recoil proton momentum", "Recoil proton momentum", "P_{pR} [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_pFDpCD_Directory"],
                "03b_P_pR_pFDpCD", CDMomentum_lboundary, CDMomentum_uboundary, numTH1Dbins);
    hPlot2D hP_pL_vs_P_pR_pFDpCD =
        hPlot2D("pFDpCD", "", "P_{pL} vs. P_{pR}", "P_{pL} vs. P_{pR}", "P_{pL} [GeV/c]", "P_{pR} [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_pFDpCD_Directory"],
                "04_P_pL_vs_P_pR", P_nucFD_lboundary, P_nucFD_uboundary, P_nucCD_lboundary, P_nucCD_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    //                                           Momentum_lboundary, Momentum_uboundary, Momentum_lboundary, Momentum_uboundary, numTH2Dbins, numTH2Dbins);

    // Leading and recoil nucleon momentum plots (nFDpCD)
    hPlot1D hP_nL_nFDpCD =
        hPlot1D("nFDpCD", "", "Leading nucleon momentum", "Leading nucleon momentum", "P_{nL} [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"],
                "03a_P_nL_nFDpCD", FDMomentum_lboundary, FDMomentum_uboundary, numTH1Dbins);
    hPlot1D hP_nR_nFDpCD =
        hPlot1D("nFDpCD", "", "Recoil nucleon momentum", "Recoil nucleon momentum", "P_{nR} [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"],
                "03b_P_nR_nFDpCD", CDMomentum_lboundary, CDMomentum_uboundary, numTH1Dbins);
    hPlot2D hP_nL_vs_P_nR_nFDpCD =
        hPlot2D("nFDpCD", "", "P_{nL} vs. P_{nR}", "P_{nL} vs. P_{nR}", "P_{nL} [GeV/c]", "P_{nR} [GeV/c]", directories.Momentum_Directory_map["Analysis_plots_momentum_nFDpCD_Directory"],
                "04_P_nL_vs_P_nR", P_nucFD_lboundary, P_nucFD_uboundary, P_nucCD_lboundary, P_nucCD_uboundary, numTH2Dbins_Mom_Plots, numTH2Dbins_Mom_Plots);
    //                                           Momentum_lboundary, Momentum_uboundary, Momentum_lboundary, Momentum_uboundary, numTH2Dbins, numTH2Dbins);

    // ======================================================================================================================================================================
    // Beta histograms
    // ======================================================================================================================================================================

    // Beta histograms

    // Beta plots (1n)

    // Beta of neutrons from 'photons' (1n, FD)
    hPlot1D hBeta_n_from_ph_01_1n_FD =
        hPlot1D("1n", "FD", "#beta of n from '#gamma'", "Neutron #beta from 'photons'", "#beta", directories.Beta_Directory_map["Neutron_beta_from_ph_01_1n_Directory"],
                "01_Beta_Neutron_from_photons_1n", 0.98, Beta_dist_uboundary, numTH1Dbins_Beta_Plots);
    hPlot1D hBeta_n_from_ph_01_1n_ZOOMOUT_FD =
        hPlot1D("1n", "FD", "#beta of n from '#gamma' - ZOOMOUT", "Neutron #beta from 'photons' - ZOOMOUT", "#beta", directories.Beta_Directory_map["Neutron_beta_from_ph_01_1n_Directory"],
                "01_Beta_Neutron_from_photons_1n_ZOOMOUT", Beta_dist_ZOOMOUT_lboundary, Beta_dist_ZOOMOUT_uboundary, numTH1Dbins_Beta_Plots);

    hPlot1D hBeta_n_from_ph_02_1n_FD = hPlot1D("1n", "FD", "Neutron #beta from 'photons' - !PCAL", "Neutron #beta from 'photons' w/o PCAL hit", "#beta",
                                               directories.Beta_Directory_map["Neutron_beta_from_ph_02_1n_Directory"], "01_Beta_Neutron_from_photons_noPCAL_1n", Beta_dist_lboundary,
                                               Beta_dist_uboundary, numTH1Dbins_Beta_Plots);
    hPlot1D hBeta_n_from_ph_02_1n_ZOOMOUT_FD = hPlot1D("1n", "FD", "Neutron #beta from 'photons' - !PCAL - ZOOMOUT", "Neutron #beta from 'photons' w/o PCAL hit - ZOOMOUT", "#beta",
                                                       directories.Beta_Directory_map["Neutron_beta_from_ph_02_1n_Directory"], "01_Beta_Neutron_from_photons_noPCAL_1n_ZOOMOUT",
                                                       Beta_dist_ZOOMOUT_lboundary, Beta_dist_ZOOMOUT_uboundary, numTH1Dbins_Beta_Plots);

    hPlot1D hBeta_n_from_ph_03_1n_FD = hPlot1D("1n", "FD", "Neutron #beta from 'photons' - !PCAL & ECIN", "Neutron #beta from 'photons' w/o PCAL & w/ECIN", "#beta",
                                               directories.Beta_Directory_map["Neutron_beta_from_ph_03_1n_Directory"], "01_Beta_Neutron_from_photons_noPCAL_yesECIN_1n", Beta_dist_lboundary,
                                               Beta_dist_uboundary, numTH1Dbins_Beta_Plots);
    hPlot1D hBeta_n_from_ph_03_1n_ZOOMOUT_FD =
        hPlot1D("1n", "FD", "Neutron #beta from 'photons' - !PCAL & ECIN - ZOOMOUT", "Neutron #beta from 'photons' w/o PCAL & w/ECIN - ZOOMOUT", "#beta",
                directories.Beta_Directory_map["Neutron_beta_from_ph_03_1n_Directory"], "01_Beta_Neutron_from_photons_noPCAL_yesECIN_1n_ZOOMOUT", Beta_dist_ZOOMOUT_lboundary,
                Beta_dist_ZOOMOUT_uboundary, numTH1Dbins_Beta_Plots);

    hPlot1D hBeta_n_from_ph_04_1n_FD = hPlot1D("1n", "FD", "Neutron #beta from 'photons' - !PCAL & !ECIN & ECOUT", "Neutron #beta from 'photons' w/o PCAL/ECIN & w/ECOUT", "#beta",
                                               directories.Beta_Directory_map["Neutron_beta_from_ph_04_1n_Directory"], "01_Beta_Neutron_from_photons_noPCAL_noECIN_yesECOUT_1n",
                                               Beta_dist_lboundary, Beta_dist_uboundary, numTH1Dbins_Beta_Plots);
    hPlot1D hBeta_n_from_ph_04_1n_ZOOMOUT_FD =
        hPlot1D("1n", "FD", "Neutron #beta from 'photons' - !PCAL & !ECIN & ECOUT - ZOOMOUT", "Neutron #beta from 'photons' w/o PCAL/ECIN & w/ECOUT - ZOOMOUT", "#beta",
                directories.Beta_Directory_map["Neutron_beta_from_ph_04_1n_Directory"], "01_Beta_Neutron_from_photons_noPCAL_noECIN_yesECOUT_1n_ZOOMOUT", Beta_dist_ZOOMOUT_lboundary,
                Beta_dist_ZOOMOUT_uboundary, numTH1Dbins_Beta_Plots);

    // Beta vs. P plots

    // Beta vs. P (no #(e) cut)

    // Beta vs. P (no #(e) cut)
    hPlot2D hBeta_vs_P_CD = hPlot2D("all particles", "no #(e) cut", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_All_e_Directory"],
                                    "01_Beta_vs_P_All_Particles_CD", 0, beamE * 1.425, 0, Beta_boundary_const, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_FD = hPlot2D("all particles", "no #(e) cut", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_All_e_Directory"],
                                    "01_Beta_vs_P_All_Particles_FD", 0, beamE * 1.425, 0, Beta_boundary_const, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_Electrons_Only_FD =
        hPlot2D("electrons only", "no #(e) cut", "", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_All_e_Directory"],
                "02_Beta_vs_P_Electrons_Only_FD", 0, beamE * 1.425, 0.5, 3, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_Protons_Only_CD =
        hPlot2D("protons only", "no #(e) cut", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_All_e_Directory"],
                "03_Beta_vs_P_Protons_Only_CD", 0, beamE * 1.1, 0, 1.1, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_Protons_Only_FD =
        hPlot2D("protons only", "no #(e) cut", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_All_e_Directory"],
                "03_Beta_vs_P_Protons_Only_FD", 0, beamE * 1.1, 0, 1.1, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_Neutrons_Only_CD =
        hPlot2D("neutrons only", "no #(e) cut", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_All_e_Directory"],
                "04_Beta_vs_P_Neutrons_Only_CD", 0, beamE * 1.1, 0, 3, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_Neutrons_Only_FD =
        hPlot2D("neutrons only", "no #(e) cut", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_All_e_Directory"],
                "04_Beta_vs_P_Neutrons_Only_FD", 0, beamE * 1.1, 0, 3, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    // Beta vs. P by charge (no #(e) cut)
    hPlot2D hBeta_vs_P_positive_part_All_e_CD =
        hPlot2D("", "no #(e) cut", "CD", "#beta vs. P & q = +1", "#beta vs. P for all particles with q = +1", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_All_e_Directory"], "01_Beta_vs_P_q_p1_All_e_CD", 0, beamE * 1.425, 0, 3, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_positive_part_All_e_FD =
        hPlot2D("", "no #(e) cut", "FD", "#beta vs. P & q = +1", "#beta vs. P for all particles with q = +1", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_All_e_Directory"], "01_Beta_vs_P_q_p1_All_e_FD", 0, beamE * 1.425, 0, 3, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_neutral_part_All_e_CD =
        hPlot2D("", "no #(e) cut", "CD", "#beta vs. P & q = 0", "#beta vs. P for all particles with q = 0", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_All_e_Directory"], "02_Beta_vs_P_q_0_All_e_CD", 0, beamE * 1.425, 0, 3, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_neutral_part_All_e_FD =
        hPlot2D("", "no #(e) cut", "FD", "#beta vs. P & q = 0", "#beta vs. P for all particles with q = 0", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_All_e_Directory"], "02_Beta_vs_P_q_0_All_e_FD", 0, beamE * 1.425, 0, 3, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_negative_part_All_e_CD =
        hPlot2D("", "no #(e) cut", "CD", "#beta vs. P & q = -1", "#beta vs. P for all particles with q = -1", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_All_e_Directory"], "03_Beta_vs_P_q_m1_All_e_CD", 0, beamE * 1.425, 0, 3, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_negative_part_All_e_FD =
        hPlot2D("", "no #(e) cut", "FD", "#beta vs. P & q = -1", "#beta vs. P for all particles with q = -1", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_All_e_Directory"], "03_Beta_vs_P_q_m1_All_e_FD", 0, beamE * 1.425, 0, 3, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    // Beta vs. P (1e cut)

    // Beta vs. P for all particles (1e cut)
    hPlot2D hBeta_vs_P_1e_cut_CD = hPlot2D("all particles", "1e cut", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1e_cut_Directory"],
                                           "01_Beta_vs_P_1e_cut_All_Particles_CD", 0, beamE * 1.1, 0, Beta_boundary_const, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_1e_cut_FD = hPlot2D("all particles", "1e cut", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1e_cut_Directory"],
                                           "01_Beta_vs_P_1e_cut_All_Particles_FD", 0, beamE * 1.1, 0, Beta_boundary_const, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_1e_cut_Electrons_Only_FD =
        hPlot2D("electrons only", "1e cut", "", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1e_cut_Directory"],
                "02_Beta_vs_P_1e_cut_Electrons_Only_FD", 0, beamE * 1.425, 0.5, 1.7, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_1e_cut_Protons_Only_CD =
        hPlot2D("protons only", "1e cut", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1e_cut_Directory"],
                "03_Beta_vs_P_1e_cut_Protons_Only_CD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_1e_cut_Protons_Only_FD =
        hPlot2D("protons only", "1e cut", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1e_cut_Directory"],
                "03_Beta_vs_P_1e_cut_Protons_Only_FD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_1e_cut_Neutrons_Only_CD_CLAS12 =
        hPlot2D("neutrons only clas12", "1e cut", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1e_cut_Directory"],
                "04a_Beta_vs_P_1e_cut_Neutrons_Only_CD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_1e_cut_Neutrons_Only_FD_CLAS12 =
        hPlot2D("neutrons only clas12", "1e cut", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1e_cut_Directory"],
                "04a_Beta_vs_P_1e_cut_Neutrons_Only_FD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_1e_cut_Neutrons_Only_FD_ByDef =
        hPlot2D("neutrons only", "1e cut", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1e_cut_Directory"],
                "04b_Beta_vs_P_1e_cut_Neutrons_Only_FD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_1e_cut_Kplus_Only_CD =
        hPlot2D("K^{+} only", "1e cut", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1e_cut_Directory"],
                "05_Beta_vs_P_1e_cut_Kplus_Only_CD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_1e_cut_Kplus_Only_FD =
        hPlot2D("K^{+} only", "1e cut", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1e_cut_Directory"],
                "05_Beta_vs_P_1e_cut_Kplus_Only_FD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_1e_cut_Kminus_Only_CD =
        hPlot2D("K^{-} only", "1e cut", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1e_cut_Directory"],
                "06_Beta_vs_P_1e_cut_Kminus_Only_CD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_1e_cut_Kminus_Only_FD =
        hPlot2D("K^{-} only", "1e cut", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1e_cut_Directory"],
                "06_Beta_vs_P_1e_cut_Kminus_Only_FD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_1e_cut_piplus_Only_CD =
        hPlot2D("#pi^{+} only", "1e cut", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1e_cut_Directory"],
                "07_Beta_vs_P_1e_cut_piplus_Only_CD", 0, P_boundary, 0, 1.7, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_1e_cut_piplus_Only_FD =
        hPlot2D("#pi^{+} only", "1e cut", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1e_cut_Directory"],
                "07_Beta_vs_P_1e_cut_piplus_Only_FD", 0, P_boundary, 0, 1.7, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_1e_cut_piminus_Only_CD =
        hPlot2D("#pi^{-} only", "1e cut", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1e_cut_Directory"],
                "08_Beta_vs_P_1e_cut_piminus_Only_CD", 0, P_boundary, 0, 1.7, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_1e_cut_piminus_Only_FD =
        hPlot2D("#pi^{-} only", "1e cut", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1e_cut_Directory"],
                "08_Beta_vs_P_1e_cut_piminus_Only_FD", 0, P_boundary, 0, 1.7, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    // Beta vs. P by charge (1e cut)
    hPlot2D hBeta_vs_P_positive_part_1e_cut_CD = hPlot2D("all particles", "1e cut", "CD", "#beta vs. P & q = +1", "#beta vs. P for all particles with q = +1", "P [GeV/c]", "#beta",
                                                         directories.Beta_Directory_map["Beta_VS_P_by_charge_1e_cut_Directory"], "01_Beta_vs_P_q_p1_1e_cut_CD", 0, beamE * 1.1, 0, 1.7,
                                                         numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_positive_part_1e_cut_FD = hPlot2D("all particles", "1e cut", "FD", "#beta vs. P & q = +1", "#beta vs. P for all particles with q = +1", "P [GeV/c]", "#beta",
                                                         directories.Beta_Directory_map["Beta_VS_P_by_charge_1e_cut_Directory"], "01_Beta_vs_P_q_p1_1e_cut_FD", 0, beamE * 1.1, 0, 1.7,
                                                         numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_neutral_part_1e_cut_CD =
        hPlot2D("all particles", "1e cut", "CD", "#beta vs. P & q = 0", "#beta vs. P for all particles with q = 0", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_1e_cut_Directory"], "02_Beta_vs_P_q_0_1e_cut_CD", 0, beamE * 1.1, 0, 1.7, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_neutral_part_1e_cut_FD =
        hPlot2D("all particles", "1e cut", "FD", "#beta vs. P & q = 0", "#beta vs. P for all particles with q = 0", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_1e_cut_Directory"], "02_Beta_vs_P_q_0_1e_cut_FD", 0, beamE * 1.1, 0, 1.7, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_negative_part_1e_cut_CD = hPlot2D("all particles", "1e cut", "CD", "#beta vs. P & q = -1", "#beta vs. P for all particles with q = -1", "P [GeV/c]", "#beta",
                                                         directories.Beta_Directory_map["Beta_VS_P_by_charge_1e_cut_Directory"], "03_Beta_vs_P_q_m1_1e_cut_CD", 0, beamE * 1.1, 0, 1.7,
                                                         numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_negative_part_1e_cut_FD = hPlot2D("all particles", "1e cut", "FD", "#beta vs. P & q = -1", "#beta vs. P for all particles with q = -1", "P [GeV/c]", "#beta",
                                                         directories.Beta_Directory_map["Beta_VS_P_by_charge_1e_cut_Directory"], "03_Beta_vs_P_q_m1_1e_cut_FD", 0, beamE * 1.1, 0, 1.7,
                                                         numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    // Beta vs. P (1p)

    // Beta vs. P for all particles (1p)
    hPlot2D hBeta_vs_P_1p_CD = hPlot2D("all particles", "1p", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1p_Directory"],
                                       "01_Beta_vs_P_1p_All_Particles_CD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_1p_FD = hPlot2D("all particles", "1p", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1p_Directory"],
                                       "01_Beta_vs_P_1p_All_Particles_FD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_1p_Electrons_Only_FD =
        hPlot2D("electrons only", "1p", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1p_Directory"],
                "02_Beta_vs_P_1p_Electrons_Only_FD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_1p_Protons_Only_CD = hPlot2D("protons only", "1p", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1p_Directory"],
                                                    "03_Beta_vs_P_1p_Protons_Only_CD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_1p_Protons_Only_FD = hPlot2D("protons only", "1p", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1p_Directory"],
                                                    "03_Beta_vs_P_1p_Protons_Only_FD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    // Beta vs. P by charge (1p)
    hPlot2D hBeta_vs_P_positive_part_1p_CD =
        hPlot2D("all particles", "1p", "CD", "#beta vs. P & q = +1", "#beta vs. P for all particles with q = +1", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_1p_Directory"], "01_Beta_vs_P_q_p1_1p_CD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_positive_part_1p_FD =
        hPlot2D("all particles", "1p", "FD", "#beta vs. P & q = +1", "#beta vs. P for all particles with q = +1", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_1p_Directory"], "01_Beta_vs_P_q_p1_1p_FD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_neutral_part_1p_CD =
        hPlot2D("all particles", "1p", "CD", "#beta vs. P & q = 0", "#beta vs. P for all particles with q = 0", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_1p_Directory"], "02_Beta_vs_P_q_0_1p_CD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_neutral_part_1p_FD =
        hPlot2D("all particles", "1p", "FD", "#beta vs. P & q = 0", "#beta vs. P for all particles with q = 0", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_1p_Directory"], "02_Beta_vs_P_q_0_1p_FD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_negative_part_1p_CD =
        hPlot2D("all particles", "1p", "CD", "#beta vs. P & q = -1", "#beta vs. P for all particles with q = -1", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_1p_Directory"], "03_Beta_vs_P_q_m1_1p_CD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_negative_part_1p_FD =
        hPlot2D("all particles", "1p", "FD", "#beta vs. P & q = -1", "#beta vs. P for all particles with q = -1", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_1p_Directory"], "03_Beta_vs_P_q_m1_1p_FD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    // Beta vs. P (1n)

    // Beta vs. P for all particles (1n)
    hPlot2D hBeta_vs_P_1n_CD = hPlot2D("all particles", "1n", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1n_Directory"],
                                       "00_Beta_vs_P_All_Particles_CD_1n", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_1n_FD = hPlot2D("all particles", "1n", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1n_Directory"],
                                       "00_Beta_vs_P_All_Particles_FD_1n", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_1n_Electrons_Only_FD =
        hPlot2D("electrons only", "1n", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1n_Directory"],
                "01_Beta_vs_P_Electrons_Only_FD_1n", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_1n_Neutrons_Only_CD =
        hPlot2D("id. neutrons only", "1n", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1n_Directory"],
                "02_Beta_vs_P_id_Neutrons_Only_CD_1n", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_1n_Neutrons_Only_FD =
        hPlot2D("id. neutrons only", "1n", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1n_Directory"],
                "02_Beta_vs_P_id_Neutrons_Only_FD_1n", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_1n_Neutrons_Only_ZOOMOUT_FD =
        hPlot2D("id. neutrons only", "1n", "FD", "#beta vs. P - ZOOMOUT", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1n_Directory"],
                "02_Beta_vs_P_id_Neutrons_Only_ZOOMOUT_FD_1n", 0, P_boundary, 0, 2, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_1n_Neutrons_Only_from_photons_FD = hPlot2D("id. neutrons", "1n", "FD", "#beta vs. P", " Cond. to id. neutron's #beta vs. P from 'photons'", "P [GeV/c]", "#beta",
                                                                  directories.Beta_Directory_map["Beta_VS_P_1n_Directory"], "02a_Beta_vs_P_id_Neutrons_Only_from_potons_FD_1n", 0, P_boundary,
                                                                  0.9, 1.15, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_1n_Photons_Only_CD =
        hPlot2D("id. photons only", "1n", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1n_Directory"],
                "03_Beta_vs_P_id_Photons_Only_CD_1n", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_1n_Photons_Only_FD =
        hPlot2D("id. photons only", "1n", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1n_Directory"],
                "03_Beta_vs_P_id_Photons_Only_FD_1n", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_1n_Protons_Only_CD =
        hPlot2D("id. protons only", "1n", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1n_Directory"],
                "04_Beta_vs_P_id_Protons_Only_CD_1n", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_1n_Protons_Only_FD =
        hPlot2D("id. protons only", "1n", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1n_Directory"],
                "04_Beta_vs_P_id_Protons_Only_FD_1n", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_1n_Piplus_Only_CD =
        hPlot2D("id. #pi^{+} only", "1n", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1n_Directory"],
                "05_Beta_vs_P_id_piplus_Only_CD_1n", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_1n_Piplus_Only_FD =
        hPlot2D("id. #pi^{+} only", "1n", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1n_Directory"],
                "05_Beta_vs_P_id_piplus_Only_FD_1n", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_1n_Piminus_Only_CD =
        hPlot2D("id. #pi^{-} only", "1n", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1n_Directory"],
                "06_Beta_vs_P_id_piminus_Only_CD_1n", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_1n_Piminus_Only_FD =
        hPlot2D("id. #pi^{-} only", "1n", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1n_Directory"],
                "06_Beta_vs_P_id_piminus_Only_FD_1n", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_1n_Kplus_Only_CD = hPlot2D("id. K^{+} only", "1n", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1n_Directory"],
                                                  "05_Beta_vs_P_id_Kplus_Only_CD_1n", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_1n_Kplus_Only_FD = hPlot2D("id. K^{+} only", "1n", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1n_Directory"],
                                                  "05_Beta_vs_P_id_Kplus_Only_FD_1n", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_1n_Kminus_Only_CD = hPlot2D("id. K^{-} only", "1n", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1n_Directory"],
                                                   "06_Beta_vs_P_id_Kminus_Only_CD_1n", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_1n_Kminus_Only_FD = hPlot2D("id. K^{-} only", "1n", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_1n_Directory"],
                                                   "06_Beta_vs_P_id_Kminus_Only_FD_1n", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    // Beta vs. P by charge (1n)
    hPlot2D hBeta_vs_P_pos_part_1n_CD =
        hPlot2D("all particles", "1n", "CD", "#beta vs. P & q = +1", "#beta vs. P for all particles with q = +1", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_1n_Directory"], "01_Beta_vs_P_q_p1_1n_CD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_pos_part_1n_FD =
        hPlot2D("all particles", "1n", "FD", "#beta vs. P & q = +1", "#beta vs. P for all particles with q = +1", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_1n_Directory"], "01_Beta_vs_P_q_p1_1n_FD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_neut_part_1n_CD =
        hPlot2D("all particles", "1n", "CD", "#beta vs. P & q = 0", "#beta vs. P for all particles with q = 0", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_1n_Directory"], "02_Beta_vs_P_q_0_1n_CD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_neut_part_1n_FD =
        hPlot2D("all particles", "1n", "FD", "#beta vs. P & q = 0", "#beta vs. P for all particles with q = 0", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_1n_Directory"], "02_Beta_vs_P_q_0_1n_FD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_neg_part_1n_CD =
        hPlot2D("all particles", "1n", "CD", "#beta vs. P & q = -1", "#beta vs. P for all particles with q = -1", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_1n_Directory"], "03_Beta_vs_P_q_m1_1n_CD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_neg_part_1n_FD =
        hPlot2D("all particles", "1n", "FD", "#beta vs. P & q = -1", "#beta vs. P for all particles with q = -1", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_1n_Directory"], "03_Beta_vs_P_q_m1_1n_FD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    // Beta vs. P (2p)

    // Beta vs. P for all particles (2p)
    hPlot2D hBeta_vs_P_2p_CD = hPlot2D("all particles", "2p", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_2p_Directory"],
                                       "01_Beta_vs_P_2p_All_Particles_CD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_2p_FD = hPlot2D("all particles", "2p", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_2p_Directory"],
                                       "01_Beta_vs_P_2p_All_Particles_FD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_2p_Electrons_Only_FD =
        hPlot2D("electrons only", "2p", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_2p_Directory"],
                "02_Beta_vs_P_2p_Electrons_Only_FD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_2p_Protons_Only_CD = hPlot2D("protons only", "2p", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_2p_Directory"],
                                                    "03_Beta_vs_P_2p_Protons_Only_CD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_2p_Protons_Only_FD = hPlot2D("protons only", "2p", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_2p_Directory"],
                                                    "03_Beta_vs_P_2p_Protons_Only_FD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    // Beta vs. P by charge (2p)
    hPlot2D hBeta_vs_P_positive_part_2p_CD =
        hPlot2D("all particles", "2p", "CD", "#beta vs. P & q = +1", "#beta vs. P for all particles with q = +1", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_2p_Directory"], "01_Beta_vs_P_q_p1_2p_CD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_positive_part_2p_FD =
        hPlot2D("all particles", "2p", "FD", "#beta vs. P & q = +1", "#beta vs. P for all particles with q = +1", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_2p_Directory"], "01_Beta_vs_P_q_p1_2p_FD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_neutral_part_2p_CD =
        hPlot2D("all particles", "2p", "CD", "#beta vs. P & q = 0", "#beta vs. P for all particles with q = 0", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_2p_Directory"], "02_Beta_vs_P_q_0_2p_CD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_neutral_part_2p_FD =
        hPlot2D("all particles", "2p", "FD", "#beta vs. P & q = 0", "#beta vs. P for all particles with q = 0", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_2p_Directory"], "02_Beta_vs_P_q_0_2p_FD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_negative_part_2p_CD =
        hPlot2D("all particles", "2p", "CD", "#beta vs. P & q = -1", "#beta vs. P for all particles with q = -1", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_2p_Directory"], "03_Beta_vs_P_q_m1_2p_CD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_negative_part_2p_FD =
        hPlot2D("all particles", "2p", "FD", "#beta vs. P & q = -1", "#beta vs. P for all particles with q = -1", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_2p_Directory"], "03_Beta_vs_P_q_m1_2p_FD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    // Beta vs. P (pFDpCD)

    // Beta vs. P for all particles (pFDpCD)
    hPlot2D hBeta_vs_P_pFDpCD_CD = hPlot2D("all particles", "pFDpCD", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_pFDpCD_Directory"],
                                           "01_Beta_vs_P_pFDpCD_All_Particles_CD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_pFDpCD_FD = hPlot2D("all particles", "pFDpCD", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_pFDpCD_Directory"],
                                           "01_Beta_vs_P_pFDpCD_All_Particles_FD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_pFDpCD_Electrons_Only_FD =
        hPlot2D("electrons only", "pFDpCD", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_pFDpCD_Directory"],
                "02_Beta_vs_P_pFDpCD_Electrons_Only_FD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_pFDpCD_Protons_Only_CD =
        hPlot2D("protons only", "pFDpCD", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_pFDpCD_Directory"],
                "03_Beta_vs_P_pFDpCD_Protons_Only_CD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_pFDpCD_Protons_Only_FD =
        hPlot2D("protons only", "pFDpCD", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_pFDpCD_Directory"],
                "03_Beta_vs_P_pFDpCD_Protons_Only_FD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_pFD_pFDpCD_Protons_Only_FD =
        hPlot2D("", "pFDpCD", "FD", "#beta vs. FD proton momentum", "#beta vs. FD proton momentum", "P_{pFD} [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_pFDpCD_Directory"],
                "04a_Beta_vs_P_pFD_pFDpCD_Protons_Only_CD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_pCD_pFDpCD_Protons_Only_CD =
        hPlot2D("", "pFDpCD", "CD", "#beta vs. CD proton momentum", "#beta vs. CD proton momentum", "P_{pCD} [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_pFDpCD_Directory"],
                "04b_Beta_vs_P_pCD_pFDpCD_Protons_Only_CD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    // Beta vs. P by charge (pFDpCD)
    hPlot2D hBeta_vs_P_positive_part_pFDpCD_CD = hPlot2D("all particles", "pFDpCD", "CD", "#beta vs. P & q = +1", "#beta vs. P for all particles with q = +1", "P [GeV/c]", "#beta",
                                                         directories.Beta_Directory_map["Beta_VS_P_by_charge_pFDpCD_Directory"], "01_Beta_vs_P_q_p1_pFDpCD_CD", 0, beamE * 1.1, 0, 1.5,
                                                         numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_positive_part_pFDpCD_FD = hPlot2D("all particles", "pFDpCD", "FD", "#beta vs. P & q = +1", "#beta vs. P for all particles with q = +1", "P [GeV/c]", "#beta",
                                                         directories.Beta_Directory_map["Beta_VS_P_by_charge_pFDpCD_Directory"], "01_Beta_vs_P_q_p1_pFDpCD_FD", 0, beamE * 1.1, 0, 1.5,
                                                         numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_neutral_part_pFDpCD_CD =
        hPlot2D("all particles", "pFDpCD", "CD", "#beta vs. P & q = 0", "#beta vs. P for all particles with q = 0", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_pFDpCD_Directory"], "02_Beta_vs_P_q_0_pFDpCD_CD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_neutral_part_pFDpCD_FD =
        hPlot2D("all particles", "pFDpCD", "FD", "#beta vs. P & q = 0", "#beta vs. P for all particles with q = 0", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_pFDpCD_Directory"], "02_Beta_vs_P_q_0_pFDpCD_FD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_negative_part_pFDpCD_CD = hPlot2D("all particles", "pFDpCD", "CD", "#beta vs. P & q = -1", "#beta vs. P for all particles with q = -1", "P [GeV/c]", "#beta",
                                                         directories.Beta_Directory_map["Beta_VS_P_by_charge_pFDpCD_Directory"], "03_Beta_vs_P_q_m1_pFDpCD_CD", 0, beamE * 1.1, 0, 1.5,
                                                         numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_negative_part_pFDpCD_FD = hPlot2D("all particles", "pFDpCD", "FD", "#beta vs. P & q = -1", "#beta vs. P for all particles with q = -1", "P [GeV/c]", "#beta",
                                                         directories.Beta_Directory_map["Beta_VS_P_by_charge_pFDpCD_Directory"], "03_Beta_vs_P_q_m1_pFDpCD_FD", 0, beamE * 1.1, 0, 1.5,
                                                         numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    // Beta vs. P (nFDpCD)

    // Beta vs. P for all particles (nFDpCD)
    hPlot2D hBeta_vs_P_nFDpCD_CD = hPlot2D("all particles", "nFDpCD", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_nFDpCD_Directory"],
                                           "00_Beta_vs_P_All_Particles_CD_nFDpCD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_nFDpCD_FD = hPlot2D("all particles", "nFDpCD", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_nFDpCD_Directory"],
                                           "00_Beta_vs_P_All_Particles_FD_nFDpCD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_nFDpCD_Electrons_Only_FD =
        hPlot2D("electrons only", "nFDpCD", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_nFDpCD_Directory"],
                "01_Beta_vs_P_Electrons_Only_FD_nFDpCD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_nFDpCD_Neutrons_Only_CD =
        hPlot2D("id. neutrons only", "nFDpCD", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_nFDpCD_Directory"],
                "02_Beta_vs_P_id_Neutrons_Only_CD_nFDpCD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_nFDpCD_Neutrons_Only_FD =
        hPlot2D("id. neutrons only", "nFDpCD", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_nFDpCD_Directory"],
                "02_Beta_vs_P_id_Neutrons_Only_FD_nFDpCD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_nFDpCD_Neutrons_Only_ZOOMOUT_FD =
        hPlot2D("id. neutrons only", "nFDpCD", "FD", "#beta vs. P - ZOOMOUT", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_nFDpCD_Directory"],
                "02_Beta_vs_P_id_Neutrons_Only_ZOOMOUT_FD_nFDpCD", 0, P_boundary, 0, 2, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_nFDpCD_Neutrons_Only_from_photons_FD =
        hPlot2D("id. neutrons", "nFDpCD", "FD", "#beta vs. P", " Cond. to id. neutron's #beta vs. P from 'photons'", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_nFDpCD_Directory"], "02a_Beta_vs_P_id_Neutrons_Only_from_potons_FD_nFDpCD", 0, P_boundary, 0.9, 1.15, numTH2Dbins_Beta_Plots,
                numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_nFDpCD_Photons_Only_CD =
        hPlot2D("id. photons only", "nFDpCD", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_nFDpCD_Directory"],
                "03_Beta_vs_P_id_Photons_Only_CD_nFDpCD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_nFDpCD_Photons_Only_FD =
        hPlot2D("id. photons only", "nFDpCD", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_nFDpCD_Directory"],
                "03_Beta_vs_P_id_Photons_Only_FD_nFDpCD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_nFDpCD_Protons_Only_CD =
        hPlot2D("id. protons only", "nFDpCD", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_nFDpCD_Directory"],
                "04_Beta_vs_P_id_Protons_Only_CD_nFDpCD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_nFDpCD_Protons_Only_FD =
        hPlot2D("id. protons only", "nFDpCD", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_nFDpCD_Directory"],
                "04_Beta_vs_P_id_Protons_Only_FD_nFDpCD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_nFDpCD_Piplus_Only_CD =
        hPlot2D("id. #pi^{+} only", "nFDpCD", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_nFDpCD_Directory"],
                "05_Beta_vs_P_id_piplus_Only_CD_nFDpCD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_nFDpCD_Piplus_Only_FD =
        hPlot2D("id. #pi^{+} only", "nFDpCD", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_nFDpCD_Directory"],
                "05_Beta_vs_P_id_piplus_Only_FD_nFDpCD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_nFDpCD_Piminus_Only_CD =
        hPlot2D("id. #pi^{-} only", "nFDpCD", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_nFDpCD_Directory"],
                "06_Beta_vs_P_id_piminus_Only_CD_nFDpCD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_nFDpCD_Piminus_Only_FD =
        hPlot2D("id. #pi^{-} only", "nFDpCD", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_nFDpCD_Directory"],
                "06_Beta_vs_P_id_piminus_Only_FD_nFDpCD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_nFDpCD_Kplus_Only_CD =
        hPlot2D("id. K^{+} only", "nFDpCD", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_nFDpCD_Directory"],
                "05_Beta_vs_P_id_Kplus_Only_CD_nFDpCD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_nFDpCD_Kplus_Only_FD =
        hPlot2D("id. K^{+} only", "nFDpCD", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_nFDpCD_Directory"],
                "05_Beta_vs_P_id_Kplus_Only_FD_nFDpCD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    hPlot2D hBeta_vs_P_nFDpCD_Kminus_Only_CD =
        hPlot2D("id. K^{-} only", "nFDpCD", "CD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_nFDpCD_Directory"],
                "06_Beta_vs_P_id_Kminus_Only_CD_nFDpCD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_nFDpCD_Kminus_Only_FD =
        hPlot2D("id. K^{-} only", "nFDpCD", "FD", "#beta vs. P", "#beta vs. P", "P [GeV/c]", "#beta", directories.Beta_Directory_map["Beta_VS_P_nFDpCD_Directory"],
                "06_Beta_vs_P_id_Kminus_Only_FD_nFDpCD", 0, P_boundary, 0, Beta_boundary, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    // Beta vs. P by charge (nFDpCD)
    hPlot2D hBeta_vs_P_pos_part_nFDpCD_CD = hPlot2D("all particles", "nFDpCD", "CD", "#beta vs. P & q = +1", "#beta vs. P for all particles with q = +1", "P [GeV/c]", "#beta",
                                                    directories.Beta_Directory_map["Beta_VS_P_by_charge_nFDpCD_Directory"], "01_Beta_vs_P_q_p1_nFDpCD_CD", 0, beamE * 1.1, 0, 1.5,
                                                    numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_pos_part_nFDpCD_FD = hPlot2D("all particles", "nFDpCD", "FD", "#beta vs. P & q = +1", "#beta vs. P for all particles with q = +1", "P [GeV/c]", "#beta",
                                                    directories.Beta_Directory_map["Beta_VS_P_by_charge_nFDpCD_Directory"], "01_Beta_vs_P_q_p1_nFDpCD_FD", 0, beamE * 1.1, 0, 1.5,
                                                    numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_neut_part_nFDpCD_CD =
        hPlot2D("all particles", "nFDpCD", "CD", "#beta vs. P & q = 0", "#beta vs. P for all particles with q = 0", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_nFDpCD_Directory"], "02_Beta_vs_P_q_0_nFDpCD_CD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_neut_part_nFDpCD_FD =
        hPlot2D("all particles", "nFDpCD", "FD", "#beta vs. P & q = 0", "#beta vs. P for all particles with q = 0", "P [GeV/c]", "#beta",
                directories.Beta_Directory_map["Beta_VS_P_by_charge_nFDpCD_Directory"], "02_Beta_vs_P_q_0_nFDpCD_FD", 0, beamE * 1.1, 0, 1.5, numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_neg_part_nFDpCD_CD = hPlot2D("all particles", "nFDpCD", "CD", "#beta vs. P & q = -1", "#beta vs. P for all particles with q = -1", "P [GeV/c]", "#beta",
                                                    directories.Beta_Directory_map["Beta_VS_P_by_charge_nFDpCD_Directory"], "03_Beta_vs_P_q_m1_nFDpCD_CD", 0, beamE * 1.1, 0, 1.5,
                                                    numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);
    hPlot2D hBeta_vs_P_neg_part_nFDpCD_FD = hPlot2D("all particles", "nFDpCD", "FD", "#beta vs. P & q = -1", "#beta vs. P for all particles with q = -1", "P [GeV/c]", "#beta",
                                                    directories.Beta_Directory_map["Beta_VS_P_by_charge_nFDpCD_Directory"], "03_Beta_vs_P_q_m1_nFDpCD_FD", 0, beamE * 1.1, 0, 1.5,
                                                    numTH2Dbins_Beta_Plots, numTH2Dbins_Beta_Plots);

    // ======================================================================================================================================================================
    // W histograms
    // ======================================================================================================================================================================

    // W histograms

    // W plots (1e cut, CD & FD)
    THStack *sW_1e_cut = new THStack("W distribution (All Int., 1e Cut)", "W distribution (1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];");
    TH1D *hW_All_Int_1e_cut = new TH1D("W distribution (All Int., 1e Cut)", "W distribution (All Int., 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];",
                                       numTH1Dbins_W_Plots, W_lboundary, W_uboundary);
    TH1D *hW_QEL_1e_cut = new TH1D("W distribution (QEL only, 1e Cut)", "W distribution (QEL only, 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots,
                                   W_lboundary, W_uboundary);
    TH1D *hW_MEC_1e_cut = new TH1D("W distribution (MEC only, 1e Cut)", "W distribution (MEC only, 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots,
                                   W_lboundary, W_uboundary);
    TH1D *hW_RES_1e_cut = new TH1D("W distribution (RES only, 1e Cut)", "W distribution (RES only, 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots,
                                   W_lboundary, W_uboundary);
    TH1D *hW_DIS_1e_cut = new TH1D("W distribution (DIS only, 1e Cut)", "W distribution (DIS only, 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots,
                                   W_lboundary, W_uboundary);
    string sW_1e_cut_Dir = directories.W_Directory_map["W_1e_cut_Directory"];
    string hW_All_Int_1e_cut_Dir = directories.W_Directory_map["W_1e_cut_Directory"];
    string hW_QEL_1e_cut_Dir = directories.W_Directory_map["W_1e_cut_Directory"];
    string hW_MEC_1e_cut_Dir = directories.W_Directory_map["W_1e_cut_Directory"];
    string hW_RES_1e_cut_Dir = directories.W_Directory_map["W_1e_cut_Directory"];
    string hW_DIS_1e_cut_Dir = directories.W_Directory_map["W_1e_cut_Directory"];

    TH2D *hW_VS_q_3v_1e_cut =
        new TH2D("W vs. |#font[62]{q}| (All Int., 1e Cut)", "W vs. |#font[62]{q}| (All Int., 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_QEL_1e_cut =
        new TH2D("W vs. |#font[62]{q}| (QE Only, 1e Cut)", "W vs. |#font[62]{q}| (QE Only, 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_MEC_1e_cut =
        new TH2D("W vs. |#font[62]{q}| (MEC Only, 1e Cut)", "W vs. |#font[62]{q}| (MEC Only, 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_RES_1e_cut =
        new TH2D("W vs. |#font[62]{q}| (RES Only, 1e Cut)", "W vs. |#font[62]{q}| (RES Only, 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_DIS_1e_cut =
        new TH2D("W vs. |#font[62]{q}| (DIS Only, 1e Cut)", "W vs. |#font[62]{q}| (DIS Only, 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    string hW_VS_q_3v_1e_cut_Dir = directories.W_Directory_map["W_1e_cut_Directory"];

    TH2D *hW_VS_omega_1e_cut = new TH2D("W vs. #omega (All Int., 1e Cut)", "W vs. #omega (All Int., 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                        numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_QEL_1e_cut = new TH2D("W vs. #omega (QE Only, 1e Cut)", "W vs. #omega (QE Only, 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                            numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_MEC_1e_cut = new TH2D("W vs. #omega (MEC Only, 1e Cut)", "W vs. #omega (MEC Only, 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                            numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_RES_1e_cut = new TH2D("W vs. #omega (RES Only, 1e Cut)", "W vs. #omega (RES Only, 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                            numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_DIS_1e_cut = new TH2D("W vs. #omega (DIS Only, 1e Cut)", "W vs. #omega (DIS Only, 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                            numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    string hW_VS_omega_1e_cut_Dir = directories.W_Directory_map["W_1e_cut_Directory"];

    // W plots (1p, CD & FD)
    THStack *sW_1p = new THStack("W distribution (All Int., 1p)", "W distribution (1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];");
    TH1D *hW_All_Int_1p =
        new TH1D("W distribution (All Int., 1p)", "W distribution (All Int., 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots, W_lboundary, W_uboundary);
    TH1D *hW_QEL_1p =
        new TH1D("W distribution (QEL only, 1p)", "W distribution (QEL only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots, W_lboundary, W_uboundary);
    TH1D *hW_MEC_1p =
        new TH1D("W distribution (MEC only, 1p)", "W distribution (MEC only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots, W_lboundary, W_uboundary);
    TH1D *hW_RES_1p =
        new TH1D("W distribution (RES only, 1p)", "W distribution (RES only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots, W_lboundary, W_uboundary);
    TH1D *hW_DIS_1p =
        new TH1D("W distribution (DIS only, 1p)", "W distribution (DIS only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots, W_lboundary, W_uboundary);
    string sW_1p_Dir = directories.W_Directory_map["W_1p_Directory"];
    string hW_All_Int_1p_Dir = directories.W_Directory_map["W_1p_Directory"];
    string hW_QEL_1p_Dir = directories.W_Directory_map["W_1p_Directory"];
    string hW_MEC_1p_Dir = directories.W_Directory_map["W_1p_Directory"];
    string hW_RES_1p_Dir = directories.W_Directory_map["W_1p_Directory"];
    string hW_DIS_1p_Dir = directories.W_Directory_map["W_1p_Directory"];

    TH2D *hW_VS_q_3v_1p = new TH2D("W vs. |#font[62]{q}| (All Int., 1p)", "W vs. |#font[62]{q}| (All Int., 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                                   numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_QEL_1p = new TH2D("W vs. |#font[62]{q}| (QE Only, 1p)", "W vs. |#font[62]{q}| (QE Only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                                       numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_MEC_1p = new TH2D("W vs. |#font[62]{q}| (MEC Only, 1p)", "W vs. |#font[62]{q}| (MEC Only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                                       numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_RES_1p = new TH2D("W vs. |#font[62]{q}| (RES Only, 1p)", "W vs. |#font[62]{q}| (RES Only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                                       numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_DIS_1p = new TH2D("W vs. |#font[62]{q}| (DIS Only, 1p)", "W vs. |#font[62]{q}| (DIS Only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                                       numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    string hW_VS_q_3v_1p_Dir = directories.W_Directory_map["W_1p_Directory"];

    TH2D *hW_VS_omega_1p = new TH2D("W vs. #omega (All Int., 1p)", "W vs. #omega (All Int., 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                    numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_QEL_1p = new TH2D("W vs. #omega (QE Only, 1p)", "W vs. #omega (QE Only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                        numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_MEC_1p = new TH2D("W vs. #omega (MEC Only, 1p)", "W vs. #omega (MEC Only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                        numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_RES_1p = new TH2D("W vs. #omega (RES Only, 1p)", "W vs. #omega (RES Only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                        numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_DIS_1p = new TH2D("W vs. #omega (DIS Only, 1p)", "W vs. #omega (DIS Only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                        numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    string hW_VS_omega_1p_Dir = directories.W_Directory_map["W_1p_Directory"];

    // W plots (1n, CD & FD)
    THStack *sW_1n = new THStack("W distribution (All Int., 1n)", "W distribution (1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];");
    TH1D *hW_All_Int_1n =
        new TH1D("W distribution (All Int., 1n)", "W distribution (All Int., 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots, W_lboundary, W_uboundary);
    TH1D *hW_QEL_1n =
        new TH1D("W distribution (QEL only, 1n)", "W distribution (QEL only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots, W_lboundary, W_uboundary);
    TH1D *hW_MEC_1n =
        new TH1D("W distribution (MEC only, 1n)", "W distribution (MEC only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots, W_lboundary, W_uboundary);
    TH1D *hW_RES_1n =
        new TH1D("W distribution (RES only, 1n)", "W distribution (RES only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots, W_lboundary, W_uboundary);
    TH1D *hW_DIS_1n =
        new TH1D("W distribution (DIS only, 1n)", "W distribution (DIS only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots, W_lboundary, W_uboundary);
    string sW_1n_Dir = directories.W_Directory_map["W_1n_Directory"];
    string hW_All_Int_1n_Dir = directories.W_Directory_map["W_1n_Directory"];
    string hW_QEL_1n_Dir = directories.W_Directory_map["W_1n_Directory"];
    string hW_MEC_1n_Dir = directories.W_Directory_map["W_1n_Directory"];
    string hW_RES_1n_Dir = directories.W_Directory_map["W_1n_Directory"];
    string hW_DIS_1n_Dir = directories.W_Directory_map["W_1n_Directory"];

    TH2D *hW_VS_q_3v_1n = new TH2D("W vs. |#font[62]{q}| (All Int., 1n)", "W vs. |#font[62]{q}| (All Int., 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                                   numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_QEL_1n = new TH2D("W vs. |#font[62]{q}| (QE Only, 1n)", "W vs. |#font[62]{q}| (QE Only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                                       numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_MEC_1n = new TH2D("W vs. |#font[62]{q}| (MEC Only, 1n)", "W vs. |#font[62]{q}| (MEC Only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                                       numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_RES_1n = new TH2D("W vs. |#font[62]{q}| (RES Only, 1n)", "W vs. |#font[62]{q}| (RES Only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                                       numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_DIS_1n = new TH2D("W vs. |#font[62]{q}| (DIS Only, 1n)", "W vs. |#font[62]{q}| (DIS Only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                                       numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    string hW_VS_q_3v_1n_Dir = directories.W_Directory_map["W_1n_Directory"];

    TH2D *hW_VS_omega_1n = new TH2D("W vs. #omega (All Int., 1n)", "W vs. #omega (All Int., 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                    numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_QEL_1n = new TH2D("W vs. #omega (QE Only, 1n)", "W vs. #omega (QE Only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                        numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_MEC_1n = new TH2D("W vs. #omega (MEC Only, 1n)", "W vs. #omega (MEC Only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                        numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_RES_1n = new TH2D("W vs. #omega (RES Only, 1n)", "W vs. #omega (RES Only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                        numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_DIS_1n = new TH2D("W vs. #omega (DIS Only, 1n)", "W vs. #omega (DIS Only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                        numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    string hW_VS_omega_1n_Dir = directories.W_Directory_map["W_1n_Directory"];

    // W plots (2p, CD & FD)
    THStack *sW_2p = new THStack("W distribution (All Int., 2p)", "W distribution (2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];");
    TH1D *hW_All_Int_2p =
        new TH1D("W distribution (All Int., 2p)", "W distribution (All Int., 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots, W_lboundary, W_uboundary);
    TH1D *hW_QEL_2p =
        new TH1D("W distribution (QEL only, 2p)", "W distribution (QEL only, 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots, W_lboundary, W_uboundary);
    TH1D *hW_MEC_2p =
        new TH1D("W distribution (MEC only, 2p)", "W distribution (MEC only, 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots, W_lboundary, W_uboundary);
    TH1D *hW_RES_2p =
        new TH1D("W distribution (RES only, 2p)", "W distribution (RES only, 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots, W_lboundary, W_uboundary);
    TH1D *hW_DIS_2p =
        new TH1D("W distribution (DIS only, 2p)", "W distribution (DIS only, 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots, W_lboundary, W_uboundary);
    string sW_2p_Dir = directories.W_Directory_map["W_2p_Directory"];
    string hW_All_Int_2p_Dir = directories.W_Directory_map["W_2p_Directory"];
    string hW_QEL_2p_Dir = directories.W_Directory_map["W_2p_Directory"];
    string hW_MEC_2p_Dir = directories.W_Directory_map["W_2p_Directory"];
    string hW_RES_2p_Dir = directories.W_Directory_map["W_2p_Directory"];
    string hW_DIS_2p_Dir = directories.W_Directory_map["W_2p_Directory"];

    TH2D *hW_VS_q_3v_2p = new TH2D("W vs. |#font[62]{q}| (All Int., 2p)", "W vs. |#font[62]{q}| (All Int., 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                                   numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_QEL_2p = new TH2D("W vs. |#font[62]{q}| (QE Only, 2p)", "W vs. |#font[62]{q}| (QE Only, 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                                       numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_MEC_2p = new TH2D("W vs. |#font[62]{q}| (MEC Only, 2p)", "W vs. |#font[62]{q}| (MEC Only, 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                                       numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_RES_2p = new TH2D("W vs. |#font[62]{q}| (RES Only, 2p)", "W vs. |#font[62]{q}| (RES Only, 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                                       numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_DIS_2p = new TH2D("W vs. |#font[62]{q}| (DIS Only, 2p)", "W vs. |#font[62]{q}| (DIS Only, 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                                       numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    string hW_VS_q_3v_2p_Dir = directories.W_Directory_map["W_2p_Directory"];

    TH2D *hW_VS_omega_2p = new TH2D("W vs. #omega (All Int., 2p)", "W vs. #omega (All Int., 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                    numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_QEL_2p = new TH2D("W vs. #omega (QE Only, 2p)", "W vs. #omega (QE Only, 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                        numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_MEC_2p = new TH2D("W vs. #omega (MEC Only, 2p)", "W vs. #omega (MEC Only, 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                        numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_RES_2p = new TH2D("W vs. #omega (RES Only, 2p)", "W vs. #omega (RES Only, 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                        numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_DIS_2p = new TH2D("W vs. #omega (DIS Only, 2p)", "W vs. #omega (DIS Only, 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                        numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    string hW_VS_omega_2p_Dir = directories.W_Directory_map["W_2p_Directory"];

    // W plots (pFDpCD, CD & FD)
    THStack *sW_pFDpCD = new THStack("W distribution (All Int., pFDpCD)", "W distribution (pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];");
    TH1D *hW_All_Int_pFDpCD = new TH1D("W distribution (All Int., pFDpCD)", "W distribution (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];",
                                       numTH1Dbins_W_Plots, W_lboundary, W_uboundary);
    TH1D *hW_QEL_pFDpCD = new TH1D("W distribution (QEL only, pFDpCD)", "W distribution (QEL only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots,
                                   W_lboundary, W_uboundary);
    TH1D *hW_MEC_pFDpCD = new TH1D("W distribution (MEC only, pFDpCD)", "W distribution (MEC only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots,
                                   W_lboundary, W_uboundary);
    TH1D *hW_RES_pFDpCD = new TH1D("W distribution (RES only, pFDpCD)", "W distribution (RES only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots,
                                   W_lboundary, W_uboundary);
    TH1D *hW_DIS_pFDpCD = new TH1D("W distribution (DIS only, pFDpCD)", "W distribution (DIS only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots,
                                   W_lboundary, W_uboundary);
    string sW_pFDpCD_Dir = directories.W_Directory_map["W_pFDpCD_Directory"];
    string hW_All_Int_pFDpCD_Dir = directories.W_Directory_map["W_pFDpCD_Directory"];
    string hW_QEL_pFDpCD_Dir = directories.W_Directory_map["W_pFDpCD_Directory"];
    string hW_MEC_pFDpCD_Dir = directories.W_Directory_map["W_pFDpCD_Directory"];
    string hW_RES_pFDpCD_Dir = directories.W_Directory_map["W_pFDpCD_Directory"];
    string hW_DIS_pFDpCD_Dir = directories.W_Directory_map["W_pFDpCD_Directory"];

    TH2D *hW_VS_q_3v_pFDpCD =
        new TH2D("W vs. |#font[62]{q}| (All Int., pFDpCD)", "W vs. |#font[62]{q}| (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_QEL_pFDpCD =
        new TH2D("W vs. |#font[62]{q}| (QE Only, pFDpCD)", "W vs. |#font[62]{q}| (QE Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_MEC_pFDpCD =
        new TH2D("W vs. |#font[62]{q}| (MEC Only, pFDpCD)", "W vs. |#font[62]{q}| (MEC Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_RES_pFDpCD =
        new TH2D("W vs. |#font[62]{q}| (RES Only, pFDpCD)", "W vs. |#font[62]{q}| (RES Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_DIS_pFDpCD =
        new TH2D("W vs. |#font[62]{q}| (DIS Only, pFDpCD)", "W vs. |#font[62]{q}| (DIS Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    string hW_VS_q_3v_pFDpCD_Dir = directories.W_Directory_map["W_pFDpCD_Directory"];

    TH2D *hW_VS_omega_pFDpCD = new TH2D("W vs. #omega (All Int., pFDpCD)", "W vs. #omega (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                        numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_QEL_pFDpCD = new TH2D("W vs. #omega (QE Only, pFDpCD)", "W vs. #omega (QE Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                            numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_MEC_pFDpCD = new TH2D("W vs. #omega (MEC Only, pFDpCD)", "W vs. #omega (MEC Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                            numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_RES_pFDpCD = new TH2D("W vs. #omega (RES Only, pFDpCD)", "W vs. #omega (RES Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                            numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_DIS_pFDpCD = new TH2D("W vs. #omega (DIS Only, pFDpCD)", "W vs. #omega (DIS Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                            numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    string hW_VS_omega_pFDpCD_Dir = directories.W_Directory_map["W_pFDpCD_Directory"];

    // W plots (nFDpCD, CD & FD)
    THStack *sW_nFDpCD = new THStack("W distribution (All Int., nFDpCD)", "W distribution (nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];");
    TH1D *hW_All_Int_nFDpCD = new TH1D("W distribution (All Int., nFDpCD)", "W distribution (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];",
                                       numTH1Dbins_W_Plots, W_lboundary, W_uboundary);
    TH1D *hW_QEL_nFDpCD = new TH1D("W distribution (QEL only, nFDpCD)", "W distribution (QEL only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots,
                                   W_lboundary, W_uboundary);
    TH1D *hW_MEC_nFDpCD = new TH1D("W distribution (MEC only, nFDpCD)", "W distribution (MEC only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots,
                                   W_lboundary, W_uboundary);
    TH1D *hW_RES_nFDpCD = new TH1D("W distribution (RES only, nFDpCD)", "W distribution (RES only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots,
                                   W_lboundary, W_uboundary);
    TH1D *hW_DIS_nFDpCD = new TH1D("W distribution (DIS only, nFDpCD)", "W distribution (DIS only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];", numTH1Dbins_W_Plots,
                                   W_lboundary, W_uboundary);
    string sW_nFDpCD_Dir = directories.W_Directory_map["W_nFDpCD_Directory"];
    string hW_All_Int_nFDpCD_Dir = directories.W_Directory_map["W_nFDpCD_Directory"];
    string hW_QEL_nFDpCD_Dir = directories.W_Directory_map["W_nFDpCD_Directory"];
    string hW_MEC_nFDpCD_Dir = directories.W_Directory_map["W_nFDpCD_Directory"];
    string hW_RES_nFDpCD_Dir = directories.W_Directory_map["W_nFDpCD_Directory"];
    string hW_DIS_nFDpCD_Dir = directories.W_Directory_map["W_nFDpCD_Directory"];

    TH2D *hW_VS_q_3v_nFDpCD =
        new TH2D("W vs. |#font[62]{q}| (All Int., nFDpCD)", "W vs. |#font[62]{q}| (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_QEL_nFDpCD =
        new TH2D("W vs. |#font[62]{q}| (QE Only, nFDpCD)", "W vs. |#font[62]{q}| (QE Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_MEC_nFDpCD =
        new TH2D("W vs. |#font[62]{q}| (MEC Only, nFDpCD)", "W vs. |#font[62]{q}| (MEC Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_RES_nFDpCD =
        new TH2D("W vs. |#font[62]{q}| (RES Only, nFDpCD)", "W vs. |#font[62]{q}| (RES Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_q_3v_DIS_nFDpCD =
        new TH2D("W vs. |#font[62]{q}| (DIS Only, nFDpCD)", "W vs. |#font[62]{q}| (DIS Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];q [GeV/c]",
                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    string hW_VS_q_3v_nFDpCD_Dir = directories.W_Directory_map["W_nFDpCD_Directory"];

    TH2D *hW_VS_omega_nFDpCD = new TH2D("W vs. #omega (All Int., nFDpCD)", "W vs. #omega (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                        numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_QEL_nFDpCD = new TH2D("W vs. #omega (QE Only, nFDpCD)", "W vs. #omega (QE Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                            numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_MEC_nFDpCD = new TH2D("W vs. #omega (MEC Only, nFDpCD)", "W vs. #omega (MEC Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                            numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_RES_nFDpCD = new TH2D("W vs. #omega (RES Only, nFDpCD)", "W vs. #omega (RES Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                            numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    TH2D *hW_VS_omega_DIS_nFDpCD = new TH2D("W vs. #omega (DIS Only, nFDpCD)", "W vs. #omega (DIS Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#omega [GeV]",
                                            numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, 0, beamE * 1.1);
    string hW_VS_omega_nFDpCD_Dir = directories.W_Directory_map["W_nFDpCD_Directory"];

    // ======================================================================================================================================================================
    // Angle histograms
    // ======================================================================================================================================================================

    // Angle histograms

    // Theta_e --------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_e histograms
    THStack *sTheta_e = new THStack("#theta_{e} (CD & FD)", "#theta_{e} of Outgoing Electron (no #(e) cut, CD & FD);#theta_{e} [#circ];");
    THStack *sTheta_e_1p_FD = new THStack("#theta_{e} (1p, FD)", "#theta_{e} of Outgoing Electron (1p, FD);#theta_{e} [#circ];");
    THStack *sTheta_e_1n_FD = new THStack("#theta_{e} (1n, FD)", "#theta_{e} of Outgoing Electron (1n, FD);#theta_{e} [#circ];");
    THStack *sTheta_e_2p_FD = new THStack("#theta_{e} (2p, FD)", "#theta_{e} of Outgoing Electron (2p, FD);#theta_{e} [#circ];");
    THStack *sTheta_e_pFDpCD_FD = new THStack("#theta_{e} (pFDpCD, FD)", "#theta_{e} of Outgoing Electron (pFDpCD, FD);#theta_{e} [#circ];");
    THStack *sTheta_e_nFDpCD_FD = new THStack("#theta_{e} (nFDpCD, FD)", "#theta_{e} of Outgoing Electron (nFDpCD, FD);#theta_{e} [#circ];");

    // Theta_e histograms (no #(e) cut)
    TH1D *hTheta_e_All_e_FD =
        new TH1D("#theta_{e} (no #(e) cut, FD)", "#theta_{e} of Outgoing Electron (no #(e) cut, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_e_All_e_FD_Dir = directories.Angle_Directory_map["Theta_e_All_e_Directory"];

    // Theta_e histograms (1e cut)
    TH1D *hTheta_e_1e_cut_FD =
        new TH1D("#theta_{e} (1e Cut, FD)", "#theta_{e} of Outgoing Electron (1e Cut, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_e_1e_cut_FD_Dir = directories.Angle_Directory_map["Theta_e_1e_cut_Directory"];

    // Theta_e histograms (1p)
    TH1D *hTheta_e_All_Int_1p_FD =
        new TH1D("#theta_{e} (All Int., 1p, FD)", "#theta_{e} of Outgoing Electron (All Int., 1p, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_QEL_1p_FD =
        new TH1D("#theta_{e} (QEL Only, 1p, FD)", "#theta_{e} of Outgoing Electron (QEL Only, 1p, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_MEC_1p_FD =
        new TH1D("#theta_{e} (MEC Only, 1p, FD)", "#theta_{e} of Outgoing Electron (MEC Only, 1p, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_RES_1p_FD =
        new TH1D("#theta_{e} (RES Only, 1p, FD)", "#theta_{e} of Outgoing Electron (RES Only, 1p, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_DIS_1p_FD =
        new TH1D("#theta_{e} (DIS Only, 1p, FD)", "#theta_{e} of Outgoing Electron (DIS Only, 1p, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_e_All_Int_1p_FD_Dir = directories.Angle_Directory_map["Theta_e_1p_Directory"];
    string hTheta_e_QEL_1p_FD_Dir = directories.Angle_Directory_map["Theta_e_1p_Directory"];
    string hTheta_e_MEC_1p_FD_Dir = directories.Angle_Directory_map["Theta_e_1p_Directory"];
    string hTheta_e_RES_1p_FD_Dir = directories.Angle_Directory_map["Theta_e_1p_Directory"];
    string hTheta_e_DIS_1p_FD_Dir = directories.Angle_Directory_map["Theta_e_1p_Directory"];

    TH2D *hTheta_e_VS_P_e_1p_FD = new TH2D("#theta_{e} vs. P_{e} (All Int., 1p)", "#theta_{e} vs. P_{e} (All Int., 1p);P_{e} [GeV/c];#theta_{e} [#circ]", numTH2Dbins_Ang_Plots, 0,
                                           beamE * 1.1, numTH2Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH2D *hTheta_e_VS_W_1p_FD = new TH2D("#theta_{e} vs. W (All Int., 1p)", "#theta_{e} vs. W (All Int., 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#theta_{e} [#circ]",
                                         numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_e_VS_P_e_1p_FD_Dir = directories.Angle_Directory_map["Theta_e_1p_Directory"];
    string hTheta_e_VS_W_1p_FD_Dir = directories.Angle_Directory_map["Theta_e_1p_Directory"];

    // Theta_e histograms (1n)
    TH1D *hTheta_e_All_Int_1n_FD =
        new TH1D("#theta_{e} (All Int., 1n, FD)", "#theta_{e} of Outgoing Electron (All Int., 1n, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_QEL_1n_FD =
        new TH1D("#theta_{e} (QEL Only, 1n, FD)", "#theta_{e} of Outgoing Electron (QEL Only, 1n, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_MEC_1n_FD =
        new TH1D("#theta_{e} (MEC Only, 1n, FD)", "#theta_{e} of Outgoing Electron (MEC Only, 1n, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_RES_1n_FD =
        new TH1D("#theta_{e} (RES Only, 1n, FD)", "#theta_{e} of Outgoing Electron (RES Only, 1n, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_DIS_1n_FD =
        new TH1D("#theta_{e} (DIS Only, 1n, FD)", "#theta_{e} of Outgoing Electron (DIS Only, 1n, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_e_All_Int_1n_FD_Dir = directories.Angle_Directory_map["Theta_e_1n_Directory"];
    string hTheta_e_QEL_1n_FD_Dir = directories.Angle_Directory_map["Theta_e_1n_Directory"];
    string hTheta_e_MEC_1n_FD_Dir = directories.Angle_Directory_map["Theta_e_1n_Directory"];
    string hTheta_e_RES_1n_FD_Dir = directories.Angle_Directory_map["Theta_e_1n_Directory"];
    string hTheta_e_DIS_1n_FD_Dir = directories.Angle_Directory_map["Theta_e_1n_Directory"];

    TH2D *hTheta_e_VS_P_e_1n_FD = new TH2D("#theta_{e} vs. P_{e} (All Int., 1n)", "#theta_{e} vs. P_{e} (All Int., 1n);P_{e} [GeV/c];#theta_{e} [#circ]", numTH2Dbins_Ang_Plots, 0,
                                           beamE * 1.1, numTH2Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH2D *hTheta_e_VS_W_1n_FD = new TH2D("#theta_{e} vs. W (All Int., 1n)", "#theta_{e} vs. W (All Int., 1n);W = #sqrt{(#omega + m_{n})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#theta_{e} [#circ]",
                                         numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_e_VS_P_e_1n_FD_Dir = directories.Angle_Directory_map["Theta_e_1n_Directory"];
    string hTheta_e_VS_W_1n_FD_Dir = directories.Angle_Directory_map["Theta_e_1n_Directory"];

    // Theta_e histograms (2p)
    TH1D *hTheta_e_All_Int_2p_FD =
        new TH1D("#theta_{e} (All Int., 2p, FD)", "#theta_{e} of Outgoing Electron (All Int., 2p, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_QEL_2p_FD =
        new TH1D("#theta_{e} (QEL Only, 2p, FD)", "#theta_{e} of Outgoing Electron (QEL Only, 2p, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_MEC_2p_FD =
        new TH1D("#theta_{e} (MEC Only, 2p, FD)", "#theta_{e} of Outgoing Electron (MEC Only, 2p, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_RES_2p_FD =
        new TH1D("#theta_{e} (RES Only, 2p, FD)", "#theta_{e} of Outgoing Electron (RES Only, 2p, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_DIS_2p_FD =
        new TH1D("#theta_{e} (DIS Only, 2p, FD)", "#theta_{e} of Outgoing Electron (DIS Only, 2p, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_e_All_Int_2p_FD_Dir = directories.Angle_Directory_map["Theta_e_2p_Directory"];
    string hTheta_e_QEL_2p_FD_Dir = directories.Angle_Directory_map["Theta_e_2p_Directory"];
    string hTheta_e_MEC_2p_FD_Dir = directories.Angle_Directory_map["Theta_e_2p_Directory"];
    string hTheta_e_RES_2p_FD_Dir = directories.Angle_Directory_map["Theta_e_2p_Directory"];
    string hTheta_e_DIS_2p_FD_Dir = directories.Angle_Directory_map["Theta_e_2p_Directory"];

    // Theta_e histograms (pFDpCD)
    TH1D *hTheta_e_All_Int_pFDpCD_FD = new TH1D("#theta_{e} (All Int., pFDpCD, FD)", "#theta_{e} of Outgoing Electron (All Int., pFDpCD, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots,
                                                Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_QEL_pFDpCD_FD = new TH1D("#theta_{e} (QEL Only, pFDpCD, FD)", "#theta_{e} of Outgoing Electron (QEL Only, pFDpCD, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots,
                                            Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_MEC_pFDpCD_FD = new TH1D("#theta_{e} (MEC Only, pFDpCD, FD)", "#theta_{e} of Outgoing Electron (MEC Only, pFDpCD, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots,
                                            Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_RES_pFDpCD_FD = new TH1D("#theta_{e} (RES Only, pFDpCD, FD)", "#theta_{e} of Outgoing Electron (RES Only, pFDpCD, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots,
                                            Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_DIS_pFDpCD_FD = new TH1D("#theta_{e} (DIS Only, pFDpCD, FD)", "#theta_{e} of Outgoing Electron (DIS Only, pFDpCD, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots,
                                            Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_e_All_Int_pFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_e_pFDpCD_Directory"];
    string hTheta_e_QEL_pFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_e_pFDpCD_Directory"];
    string hTheta_e_MEC_pFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_e_pFDpCD_Directory"];
    string hTheta_e_RES_pFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_e_pFDpCD_Directory"];
    string hTheta_e_DIS_pFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_e_pFDpCD_Directory"];

    TH2D *hTheta_e_VS_P_e_pFDpCD_FD = new TH2D("#theta_{e} vs. P_{e} (All Int., pFDpCD)", "#theta_{e} vs. P_{e} (All Int., pFDpCD);P_{e} [GeV/c];#theta_{e} [#circ]", numTH2Dbins_Ang_Plots,
                                               0, beamE * 1.1, numTH2Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH2D *hTheta_e_VS_W_pFDpCD_FD =
        new TH2D("#theta_{e} vs. W (All Int., pFDpCD)", "#theta_{e} vs. W (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#theta_{e} [#circ]",
                 numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_e_VS_P_e_pFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_e_pFDpCD_Directory"];
    string hTheta_e_VS_W_pFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_e_pFDpCD_Directory"];

    // Theta_e histograms (nFDpCD)
    TH1D *hTheta_e_All_Int_nFDpCD_FD = new TH1D("#theta_{e} (All Int., nFDpCD, FD)", "#theta_{e} of Outgoing Electron (All Int., nFDpCD, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots,
                                                Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_QEL_nFDpCD_FD = new TH1D("#theta_{e} (QEL Only, nFDpCD, FD)", "#theta_{e} of Outgoing Electron (QEL Only, nFDpCD, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots,
                                            Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_MEC_nFDpCD_FD = new TH1D("#theta_{e} (MEC Only, nFDpCD, FD)", "#theta_{e} of Outgoing Electron (MEC Only, nFDpCD, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots,
                                            Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_RES_nFDpCD_FD = new TH1D("#theta_{e} (RES Only, nFDpCD, FD)", "#theta_{e} of Outgoing Electron (RES Only, nFDpCD, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots,
                                            Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_e_DIS_nFDpCD_FD = new TH1D("#theta_{e} (DIS Only, nFDpCD, FD)", "#theta_{e} of Outgoing Electron (DIS Only, nFDpCD, FD);#theta_{e} [#circ];", numTH1Dbins_Ang_Plots,
                                            Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_e_All_Int_nFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_e_nFDpCD_Directory"];
    string hTheta_e_QEL_nFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_e_nFDpCD_Directory"];
    string hTheta_e_MEC_nFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_e_nFDpCD_Directory"];
    string hTheta_e_RES_nFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_e_nFDpCD_Directory"];
    string hTheta_e_DIS_nFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_e_nFDpCD_Directory"];

    TH2D *hTheta_e_VS_P_e_nFDpCD_FD = new TH2D("#theta_{e} vs. P_{e} (All Int., nFDpCD)", "#theta_{e} vs. P_{e} (All Int., nFDpCD);P_{e} [GeV/c];#theta_{e} [#circ]", numTH2Dbins_Ang_Plots,
                                               0, beamE * 1.1, numTH2Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH2D *hTheta_e_VS_W_nFDpCD_FD =
        new TH2D("#theta_{e} vs. W (All Int., nFDpCD)", "#theta_{e} vs. W (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#theta_{e} [#circ]",
                 numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_e_VS_P_e_nFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_e_nFDpCD_Directory"];
    string hTheta_e_VS_W_nFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_e_nFDpCD_Directory"];

    // Phi_e ----------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Phi_e histograms
    THStack *sPhi_e = new THStack("#phi_{e} stack (CD & FD)", "#phi_{e} of Outgoing Electron (no #(e) cut, CD & FD);#phi_{e} [#circ];");

    // Phi_e histograms (no #(e) cut)
    TH1D *hPhi_e_All_e_FD =
        new TH1D("#phi_{e} (no #(e) cut, FD)", "#phi_{e} of Outgoing Electron (All Int., no #(e) cut, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_e_All_e_FD_Dir = directories.Angle_Directory_map["Phi_e_All_e_Directory"];

    // Phi_e histograms (1e cut)
    TH1D *hPhi_e_1e_cut_FD = new TH1D("#phi_{e} (1e Cut, FD)", "#phi_{e} of Outgoing Electron (All Int., 1e Cut, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_e_1e_cut_FD_Dir = directories.Angle_Directory_map["Phi_e_1e_cut_Directory"];

    // Phi_e histograms (1p)
    TH1D *hPhi_e_All_Int_1p_FD =
        new TH1D("#phi_{e} 1p (All Int., FD)", "#phi_{e} of Outgoing Electron (All Int., 1p, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_QEL_1p_FD =
        new TH1D("#phi_{e} for 1p (QEL Only, FD)", "#phi_{e} of Outgoing Electron (QEL Only, 1p, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_MEC_1p_FD =
        new TH1D("#phi_{e} for 1p (MEC Only, FD)", "#phi_{e} of Outgoing Electron (MEC Only, 1p, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_RES_1p_FD =
        new TH1D("#phi_{e} for 1p (RES Only, FD)", "#phi_{e} of Outgoing Electron (RES Only, 1p, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_DIS_1p_FD =
        new TH1D("#phi_{e} for 1p (DIS Only, FD)", "#phi_{e} of Outgoing Electron (DIS Only, 1p, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_e_All_Int_1p_FD_Dir = directories.Angle_Directory_map["Phi_e_1p_Directory"];
    string hPhi_e_QEL_1p_FD_Dir = directories.Angle_Directory_map["Phi_e_1p_Directory"];
    string hPhi_e_MEC_1p_FD_Dir = directories.Angle_Directory_map["Phi_e_1p_Directory"];
    string hPhi_e_RES_1p_FD_Dir = directories.Angle_Directory_map["Phi_e_1p_Directory"];
    string hPhi_e_DIS_1p_FD_Dir = directories.Angle_Directory_map["Phi_e_1p_Directory"];

    TH2D *hPhi_e_VS_P_e_1p_FD = new TH2D("#phi_{e} vs. P_{e} (All Int., 1p)", "#phi_{e} vs. P_{e} (All Int., 1p);P_{e} [GeV/c];#phi_{e} [#circ]", numTH2Dbins_Ang_Plots, 0, beamE * 1.1,
                                         numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH2D *hPhi_e_VS_W_1p_FD = new TH2D("#phi_{e} vs. W (All Int., 1p)", "#phi_{e} vs. W (All Int., 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#phi_{e} [#circ]",
                                       numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_e_VS_P_e_1p_FD_Dir = directories.Angle_Directory_map["Phi_e_1p_Directory"];
    string hPhi_e_VS_W_1p_FD_Dir = directories.Angle_Directory_map["Phi_e_1p_Directory"];

    // Phi_e histograms (1n)
    TH1D *hPhi_e_All_Int_1n_FD =
        new TH1D("#phi_{e} 1n (All Int., FD)", "#phi_{e} of Outgoing Electron (All Int., 1n, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_QEL_1n_FD =
        new TH1D("#phi_{e} for 1n (QEL Only, FD)", "#phi_{e} of Outgoing Electron (QEL Only, 1n, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_MEC_1n_FD =
        new TH1D("#phi_{e} for 1n (MEC Only, FD)", "#phi_{e} of Outgoing Electron (MEC Only, 1n, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_RES_1n_FD =
        new TH1D("#phi_{e} for 1n (RES Only, FD)", "#phi_{e} of Outgoing Electron (RES Only, 1n, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_DIS_1n_FD =
        new TH1D("#phi_{e} for 1n (DIS Only, FD)", "#phi_{e} of Outgoing Electron (DIS Only, 1n, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_e_All_Int_1n_FD_Dir = directories.Angle_Directory_map["Phi_e_1n_Directory"];
    string hPhi_e_QEL_1n_FD_Dir = directories.Angle_Directory_map["Phi_e_1n_Directory"];
    string hPhi_e_MEC_1n_FD_Dir = directories.Angle_Directory_map["Phi_e_1n_Directory"];
    string hPhi_e_RES_1n_FD_Dir = directories.Angle_Directory_map["Phi_e_1n_Directory"];
    string hPhi_e_DIS_1n_FD_Dir = directories.Angle_Directory_map["Phi_e_1n_Directory"];

    TH2D *hPhi_e_VS_P_e_1n_FD = new TH2D("#phi_{e} vs. P_{e} (All Int., 1n)", "#phi_{e} vs. P_{e} (All Int., 1n);P_{e} [GeV/c];#phi_{e} [#circ]", numTH2Dbins_Ang_Plots, 0, beamE * 1.1,
                                         numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH2D *hPhi_e_VS_W_1n_FD = new TH2D("#phi_{e} vs. W (All Int., 1n)", "#phi_{e} vs. W (All Int., 1n);W = #sqrt{(#omega + m_{n})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#phi_{e} [#circ]",
                                       numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_e_VS_P_e_1n_FD_Dir = directories.Angle_Directory_map["Phi_e_1n_Directory"];
    string hPhi_e_VS_W_1n_FD_Dir = directories.Angle_Directory_map["Phi_e_1n_Directory"];

    // Phi_e histograms (2p)
    TH1D *hPhi_e_All_Int_2p_FD =
        new TH1D("#phi_{e} 2p (All Int., FD)", "#phi_{e} of Outgoing Electron (All Int., 2p, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_QEL_2p_FD =
        new TH1D("#phi_{e} for 2p (QEL Only, FD)", "#phi_{e} of Outgoing Electron (QEL Only, 2p, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_MEC_2p_FD =
        new TH1D("#phi_{e} for 2p (MEC Only, FD)", "#phi_{e} of Outgoing Electron (MEC Only, 2p, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_RES_2p_FD =
        new TH1D("#phi_{e} for 2p (RES Only, FD)", "#phi_{e} of Outgoing Electron (RES Only, 2p, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_DIS_2p_FD =
        new TH1D("#phi_{e} for 2p (DIS Only, FD)", "#phi_{e} of Outgoing Electron (DIS Only, 2p, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_e_All_Int_2p_FD_Dir = directories.Angle_Directory_map["Phi_e_2p_Directory"];
    string hPhi_e_QEL_2p_FD_Dir = directories.Angle_Directory_map["Phi_e_2p_Directory"];
    string hPhi_e_MEC_2p_FD_Dir = directories.Angle_Directory_map["Phi_e_2p_Directory"];
    string hPhi_e_RES_2p_FD_Dir = directories.Angle_Directory_map["Phi_e_2p_Directory"];
    string hPhi_e_DIS_2p_FD_Dir = directories.Angle_Directory_map["Phi_e_2p_Directory"];

    // Phi_e histograms (pFDpCD)
    TH1D *hPhi_e_All_Int_pFDpCD_FD =
        new TH1D("#phi_{e} pFDpCD (All Int., FD)", "#phi_{e} of Outgoing Electron (All Int., pFDpCD, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_QEL_pFDpCD_FD =
        new TH1D("#phi_{e} for pFDpCD (QEL Only, FD)", "#phi_{e} of Outgoing Electron (QEL Only, pFDpCD, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_MEC_pFDpCD_FD =
        new TH1D("#phi_{e} for pFDpCD (MEC Only, FD)", "#phi_{e} of Outgoing Electron (MEC Only, pFDpCD, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_RES_pFDpCD_FD =
        new TH1D("#phi_{e} for pFDpCD (RES Only, FD)", "#phi_{e} of Outgoing Electron (RES Only, pFDpCD, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_DIS_pFDpCD_FD =
        new TH1D("#phi_{e} for pFDpCD (DIS Only, FD)", "#phi_{e} of Outgoing Electron (DIS Only, pFDpCD, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_e_All_Int_pFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_e_pFDpCD_Directory"];
    string hPhi_e_QEL_pFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_e_pFDpCD_Directory"];
    string hPhi_e_MEC_pFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_e_pFDpCD_Directory"];
    string hPhi_e_RES_pFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_e_pFDpCD_Directory"];
    string hPhi_e_DIS_pFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_e_pFDpCD_Directory"];

    TH2D *hPhi_e_VS_P_e_pFDpCD_FD = new TH2D("#phi_{e} vs. P_{e} (All Int., pFDpCD)", "#phi_{e} vs. P_{e} (All Int., pFDpCD);P_{e} [GeV/c];#phi_{e} [#circ]", numTH2Dbins_Ang_Plots, 0,
                                             beamE * 1.1, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH2D *hPhi_e_VS_W_pFDpCD_FD =
        new TH2D("#phi_{e} vs. W (All Int., pFDpCD)", "#phi_{e} vs. W (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#phi_{e} [#circ]", numTH2Dbins_Ang_Plots,
                 W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_e_VS_P_e_pFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_e_pFDpCD_Directory"];
    string hPhi_e_VS_W_pFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_e_pFDpCD_Directory"];

    // Phi_e histograms (nFDpCD)
    TH1D *hPhi_e_All_Int_nFDpCD_FD =
        new TH1D("#phi_{e} nFDpCD (All Int., FD)", "#phi_{e} of Outgoing Electron (All Int., nFDpCD, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_QEL_nFDpCD_FD =
        new TH1D("#phi_{e} for nFDpCD (QEL Only, FD)", "#phi_{e} of Outgoing Electron (QEL Only, nFDpCD, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_MEC_nFDpCD_FD =
        new TH1D("#phi_{e} for nFDpCD (MEC Only, FD)", "#phi_{e} of Outgoing Electron (MEC Only, nFDpCD, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_RES_nFDpCD_FD =
        new TH1D("#phi_{e} for nFDpCD (RES Only, FD)", "#phi_{e} of Outgoing Electron (RES Only, nFDpCD, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_e_DIS_nFDpCD_FD =
        new TH1D("#phi_{e} for nFDpCD (DIS Only, FD)", "#phi_{e} of Outgoing Electron (DIS Only, nFDpCD, FD);#phi_{e} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_e_All_Int_nFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_e_nFDpCD_Directory"];
    string hPhi_e_QEL_nFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_e_nFDpCD_Directory"];
    string hPhi_e_MEC_nFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_e_nFDpCD_Directory"];
    string hPhi_e_RES_nFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_e_nFDpCD_Directory"];
    string hPhi_e_DIS_nFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_e_nFDpCD_Directory"];

    TH2D *hPhi_e_VS_P_e_nFDpCD_FD = new TH2D("#phi_{e} vs. P_{e} (All Int., nFDpCD)", "#phi_{e} vs. P_{e} (All Int., nFDpCD);P_{e} [GeV/c];#phi_{e} [#circ]", numTH2Dbins_Ang_Plots, 0,
                                             beamE * 1.1, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH2D *hPhi_e_VS_W_nFDpCD_FD =
        new TH2D("#phi_{e} vs. W (All Int., nFDpCD)", "#phi_{e} vs. W (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#phi_{e} [#circ]", numTH2Dbins_Ang_Plots,
                 W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_e_VS_P_e_nFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_e_nFDpCD_Directory"];
    string hPhi_e_VS_W_nFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_e_nFDpCD_Directory"];

    // Theta_e vs. Phi_e ----------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_e vs. Phi_e
    /* Theta_e vs. Phi_e histograms (no #(e) cut) */
    TH2D *hTheta_e_VS_Phi_e_All_e_FD = new TH2D("#theta_{e} vs. #phi_{e} (no #(e) cut, FD)", "#theta_{e} vs. #phi_{e}  (no #(e) cut, FD);#phi_{e} [#circ];#theta_{e} [#circ]",
                                                numTH2Dbins_Electron_Ang_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_Electron_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_e_VS_Phi_e_All_e_FD_Dir = directories.Angle_Directory_map["Theta_e_VS_Phi_e_All_e_Directory"];

    /* Theta_e vs. Phi_e histograms (1e cut) */
    TH2D *hTheta_e_VS_Phi_e_1e_cut_FD = new TH2D("#theta_{e} vs. #phi_{e} (1e Cut, FD)", "#theta_{e} vs. #phi_{e} (1e Cut, FD);#phi_{e} [#circ];#theta_{e} [#circ]",
                                                 numTH2Dbins_Electron_Ang_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_Electron_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_e_VS_Phi_e_1e_cut_FD_Dir = directories.Angle_Directory_map["Theta_e_VS_Phi_e_1e_cut_Directory"];

    /* Theta_e vs. Phi_e histograms (1p) */
    TH2D *hTheta_e_VS_Phi_e_1p_FD = new TH2D("#theta_{e} vs. #phi_{e} (All Int., 1p, FD)", "#theta_{e} vs. #phi_{e} (All Int., 1p, FD);#phi_{e} [#circ];#theta_{e} [#circ]",
                                             numTH2Dbins_Electron_Ang_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_Electron_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_e_VS_Phi_e_1p_FD_Dir = directories.Angle_Directory_map["Theta_e_VS_Phi_e_1p_Directory"];

    /* Theta_e vs. Phi_e histograms (1n) */
    TH2D *hTheta_e_VS_Phi_e_1n_FD = new TH2D("#theta_{e} vs. #phi_{e} (All Int., 1n, FD)", "#theta_{e} vs. #phi_{e} (All Int., 1n, FD);#phi_{e} [#circ];#theta_{e} [#circ]",
                                             numTH2Dbins_Electron_Ang_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_Electron_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_e_VS_Phi_e_1n_FD_Dir = directories.Angle_Directory_map["Theta_e_VS_Phi_e_1n_Directory"];

    /* Theta_e vs. Phi_e histograms (2p) */
    TH2D *hTheta_e_VS_Phi_e_2p_FD = new TH2D("#theta_{e} vs. #phi_{e} (All Int., 2p, FD)", "#theta_{e} vs. #phi_{e} (All Int., 2p, FD);#phi_{e} [#circ];#theta_{e} [#circ]",
                                             numTH2Dbins_Electron_Ang_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_Electron_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_e_VS_Phi_e_2p_FD_Dir = directories.Angle_Directory_map["Theta_e_VS_Phi_e_2p_Directory"];

    /* Theta_e vs. Phi_e histograms (pFDpCD) */
    TH2D *hTheta_e_VS_Phi_e_pFDpCD_FD = new TH2D("#theta_{e} vs. #phi_{e} (All Int., pFDpCD, FD)", "#theta_{e} vs. #phi_{e} (All Int., pFDpCD, FD);#phi_{e} [#circ];#theta_{e} [#circ]",
                                                 numTH2Dbins_Electron_Ang_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_Electron_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_e_VS_Phi_e_pFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_e_VS_Phi_e_pFDpCD_Directory"];

    /* Theta_e vs. Phi_e histograms (nFDpCD) */
    TH2D *hTheta_e_VS_Phi_e_nFDpCD_FD = new TH2D("#theta_{e} vs. #phi_{e} (All Int., nFDpCD, FD)", "#theta_{e} vs. #phi_{e} (All Int., nFDpCD, FD);#phi_{e} [#circ];#theta_{e} [#circ]",
                                                 numTH2Dbins_Electron_Ang_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_Electron_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_e_VS_Phi_e_nFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_e_VS_Phi_e_nFDpCD_Directory"];

    // Other angle plots ----------------------------------------------------------------------------------------------------------------------------------------------------

    // Other angle plots

    // Other angle plots (1e cut)

    // Neutron veto plots (1e cut)

    // CLAS12 neutrons and protons
    hPlot2D hdTheta_n_e_VS_dPhi_n_e_Electrons_BV_1e_cut =
        hPlot2D("1e cut", "FD", "#Delta#theta_{n,e} vs. #Delta#phi_{n,e} BV", "'Neutron Hits' vs. Electron Hits - Before Veto",
                "#Delta#phi_{n,e} = #phi_{n}^{ECAL} - #phi_{e}^{ECAL} [#circ]", "#Delta#theta_{n,e} = #theta_{n}^{ECAL} - #theta_{e}^{ECAL} [#circ]",
                directories.Angle_Directory_map["Neutron_veto_1e_cut_Directory"], "01_Neutron_hits_vs_electron_hits_BV_1e_cut", -180, 180, -50, 50, 100, 100);
    hPlot2D hdTheta_n_p_VS_dPhi_n_p_Protons_BV_1e_cut =
        hPlot2D("1e cut", "FD", "#Delta#theta_{n,p} vs. #Delta#phi_{n,p} BV", "'Neutron Hits' vs. Proton Hits - Before Veto", "#Delta#phi_{n,p} = #phi_{n}^{ECAL} - #phi_{p}^{ECAL} [#circ]",
                "#Delta#theta_{n,p} = #theta_{n}^{ECAL} - #theta_{p}^{ECAL} [#circ]", directories.Angle_Directory_map["Neutron_veto_1e_cut_Directory"],
                "02_Neutron_hits_vs_proton_hits_BV_1e_cut", -180, 180, -50, 50, 100, 100);

    // Electrons and redefined neutrons

    // Electrons and leading FD neutron
    hPlot2D hdTheta_LnFD_e_VS_dPhi_LnFD_e_Electrons_BV_1e_cut =
        hPlot2D("1e cut", "FD", "#Delta#theta_{LnFD,e} vs. #Delta#phi_{LnFD,e} BV", "'Leading Neutron Hits' vs. Electron Hits - Before Veto",
                "#Delta#phi_{LnFD,e} = #phi_{n}^{ECAL} - #phi_{e}^{ECAL} [#circ]", "#Delta#theta_{LnFD,e} = #theta_{n}^{ECAL} - #theta_{e}^{ECAL} [#circ]",
                directories.Angle_Directory_map["Neutron_veto_1e_cut_Directory"], "03_LnFD_Neutron_hits_vs_electron_hits_BV_1e_cut", -180, 180, -50, 50, 100, 100);
    hPlot2D hdTheta_LnFD_e_VS_dPhi_LnFD_e_Electrons_AV_1e_cut =
        hPlot2D("1e cut", "FD", "#Delta#theta_{LnFD,e} vs. #Delta#phi_{LnFD,e} AV", "'Leading Neutron Hits' vs. Electron Hits - After Veto",
                "#Delta#phi_{LnFD,e} = #phi_{n}^{ECAL} - #phi_{e}^{ECAL} [#circ]", "#Delta#theta_{LnFD,e} = #theta_{n}^{ECAL} - #theta_{e}^{ECAL} [#circ]",
                directories.Angle_Directory_map["Neutron_veto_1e_cut_Directory"], "04_LnFD_Neutron_hits_vs_electron_hits_AV_1e_cut", -180, 180, -50, 50, 100, 100);
    hPlot2D hdTheta_LnFD_e_VS_dPhi_LnFD_e_Electrons_Vetoed_1e_cut =
        hPlot2D("1e cut", "FD", "#Delta#theta_{LnFD,e} vs. #Delta#phi_{LnFD,e} Vetoed", "'Leading Neutron Hits' vs. Electron Hits - Vetoed Neutrons",
                "#Delta#phi_{LnFD,e} = #phi_{n}^{ECAL} - #phi_{e}^{ECAL} [#circ]", "#Delta#theta_{LnFD,e} = #theta_{n}^{ECAL} - #theta_{e}^{ECAL} [#circ]",
                directories.Angle_Directory_map["Neutron_veto_1e_cut_Directory"], "05_LnFD_Neutron_hits_vs_electron_hits_Vetoed_1e_cut", -180, 180, -50, 50, 100, 100);

    // Electrons and all FD neutrons
    hPlot2D hdTheta_nFD_e_VS_dPhi_nFD_e_Electrons_BV_1e_cut =
        hPlot2D("1e cut", "FD", "#Delta#theta_{nFD,e} vs. #Delta#phi_{nFD,e} BV", "'Neutron Hits' vs. Electron Hits - Before Veto",
                "#Delta#phi_{nFD,e} = #phi_{n}^{ECAL} - #phi_{e}^{ECAL} [#circ]", "#Delta#theta_{nFD,e} = #theta_{n}^{ECAL} - #theta_{e}^{ECAL} [#circ]",
                directories.Angle_Directory_map["Neutron_veto_1e_cut_Directory"], "06_nFD_Neutron_hits_vs_electron_hits_BV_1e_cut", -180, 180, -50, 50, 100, 100);
    hPlot2D hdTheta_nFD_e_VS_dPhi_nFD_e_Electrons_AV_1e_cut =
        hPlot2D("1e cut", "FD", "#Delta#theta_{nFD,e} vs. #Delta#phi_{nFD,e} AV", "'Neutron Hits' vs. Electron Hits - After Veto",
                "#Delta#phi_{nFD,e} = #phi_{n}^{ECAL} - #phi_{e}^{ECAL} [#circ]", "#Delta#theta_{nFD,e} = #theta_{n}^{ECAL} - #theta_{e}^{ECAL} [#circ]",
                directories.Angle_Directory_map["Neutron_veto_1e_cut_Directory"], "07_nFD_Neutron_hits_vs_electron_hits_AV_1e_cut", -180, 180, -50, 50, 100, 100);
    hPlot2D hdTheta_nFD_e_VS_dPhi_nFD_e_Electrons_Vetoed_1e_cut =
        hPlot2D("1e cut", "FD", "#Delta#theta_{nFD,e} vs. #Delta#phi_{nFD,e} Vetoed", "'Neutron Hits' vs. Electron Hits - Vetoed Neutrons",
                "#Delta#phi_{nFD,e} = #phi_{n}^{ECAL} - #phi_{e}^{ECAL} [#circ]", "#Delta#theta_{nFD,e} = #theta_{n}^{ECAL} - #theta_{e}^{ECAL} [#circ]",
                directories.Angle_Directory_map["Neutron_veto_1e_cut_Directory"], "08_nFD_Neutron_hits_vs_electron_hits_Vetoed_1e_cut", -180, 180, -50, 50, 100, 100);

    // Identified protons and redefined neutrons

    // Identified protons and leading FD neutron
    hPlot2D hdTheta_LnFD_p_VS_dPhi_LnFD_p_Protons_BV_1e_cut =
        hPlot2D("1e cut", "FD", "#Delta#theta_{LnFD,pFD} vs. #Delta#phi_{LnFD,pFD} BV", "'Leading Neutron Hits' vs. Proton Hits - Before Veto",
                "#Delta#phi_{LnFD,pFD} = #phi_{n}^{ECAL} - #phi_{pFD}^{ECAL} [#circ]", "#Delta#theta_{LnFD,pFD} = #theta_{n}^{ECAL} - #theta_{pFD}^{ECAL} [#circ]",
                directories.Angle_Directory_map["Neutron_veto_1e_cut_Directory"], "09_LnFD_Neutron_hits_vs_proton_hits_BV_1e_cut", -180, 180, -50, 50, 100, 100);
    hPlot2D hdTheta_LnFD_p_VS_dPhi_LnFD_p_Protons_AV_1e_cut =
        hPlot2D("1e cut", "FD", "#Delta#theta_{LnFD,pFD} vs. #Delta#phi_{LnFD,pFD} AV", "'Leading Neutron Hits' vs. Proton Hits - After Veto",
                "#Delta#phi_{LnFD,pFD} = #phi_{n}^{ECAL} - #phi_{pFD}^{ECAL} [#circ]", "#Delta#theta_{LnFD,pFD} = #theta_{n}^{ECAL} - #theta_{pFD}^{ECAL} [#circ]",
                directories.Angle_Directory_map["Neutron_veto_1e_cut_Directory"], "10_LnFD_Neutron_hits_vs_proton_hits_AV_1e_cut", -180, 180, -50, 50, 100, 100);
    hPlot2D hdTheta_LnFD_p_VS_dPhi_LnFD_p_Protons_Vetoed_1e_cut =
        hPlot2D("1e cut", "FD", "#Delta#theta_{LnFD,pFD} vs. #Delta#phi_{LnFD,pFD} Vetoed", "'Leading Neutron Hits' vs. Proton Hits - Vetoed Neutrons",
                "#Delta#phi_{LnFD,pFD} = #phi_{n}^{ECAL} - #phi_{pFD}^{ECAL} [#circ]", "#Delta#theta_{LnFD,pFD} = #theta_{n}^{ECAL} - #theta_{pFD}^{ECAL} [#circ]",
                directories.Angle_Directory_map["Neutron_veto_1e_cut_Directory"], "11_LnFD_Neutron_hits_vs_proton_hits_Vetoed_1e_cut", -180, 180, -50, 50, 100, 100);

    // Identified protons and all FD neutrons
    hPlot2D hdTheta_nFD_p_VS_dPhi_nFD_p_Protons_BV_1e_cut =
        hPlot2D("1e cut", "FD", "#Delta#theta_{nFD,pFD} vs. #Delta#phi_{nFD,pFD} BV", "'Neutron Hits' vs. Proton Hits - Before Veto",
                "#Delta#phi_{nFD,pFD} = #phi_{n}^{ECAL} - #phi_{pFD}^{ECAL} [#circ]", "#Delta#theta_{nFD,pFD} = #theta_{n}^{ECAL} - #theta_{pFD}^{ECAL} [#circ]",
                directories.Angle_Directory_map["Neutron_veto_1e_cut_Directory"], "12_nFD_Neutron_hits_vs_proton_hits_BV_1e_cut", -180, 180, -50, 50, 100, 100);
    hPlot2D hdTheta_nFD_p_VS_dPhi_nFD_p_Protons_AV_1e_cut =
        hPlot2D("1e cut", "FD", "#Delta#theta_{nFD,pFD} vs. #Delta#phi_{nFD,pFD} AV", "'Neutron Hits' vs. Proton Hits - After Veto",
                "#Delta#phi_{nFD,pFD} = #phi_{n}^{ECAL} - #phi_{pFD}^{ECAL} [#circ]", "#Delta#theta_{nFD,pFD} = #theta_{n}^{ECAL} - #theta_{pFD}^{ECAL} [#circ]",
                directories.Angle_Directory_map["Neutron_veto_1e_cut_Directory"], "13_nFD_Neutron_hits_vs_proton_hits_AV_1e_cut", -180, 180, -50, 50, 100, 100);
    hPlot2D hdTheta_nFD_p_VS_dPhi_nFD_p_Protons_Vetoed_1e_cut =
        hPlot2D("1e cut", "FD", "#Delta#theta_{nFD,pFD} vs. #Delta#phi_{nFD,pFD} Vetoed", "'Neutron Hits' vs. Proton Hits - Vetoed Neutrons",
                "#Delta#phi_{nFD,pFD} = #phi_{n}^{ECAL} - #phi_{pFD}^{ECAL} [#circ]", "#Delta#theta_{nFD,pFD} = #theta_{n}^{ECAL} - #theta_{pFD}^{ECAL} [#circ]",
                directories.Angle_Directory_map["Neutron_veto_1e_cut_Directory"], "14_nFD_Neutron_hits_vs_proton_hits_Vetoed_1e_cut", -180, 180, -50, 50, 100, 100);

    // Other angle plots (1p)

    // Theta_p (1p, FD only) ----------------------------------------------------------------------------------------------------------------------------------------

    // Theta_p (1p, FD only)
    THStack *sTheta_p_1p = new THStack("#theta_{p} (All Int., 1p, FD)", "#theta_{p} of Outgoing FD Proton (All Int., 1p, FD);#theta_{p} [#circ];");
    TH1D *hTheta_p_All_Int_1p =
        new TH1D("#theta_{p} (All Int., 1p, FD)", "#theta_{p} of Outgoing FD Proton (All Int., 1p, FD);#theta_{p} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_p_All_Int_1p_Dir = directories.Angle_Directory_map["Theta_p_1p_Directory"];

    TH2D *hTheta_p_VS_P_p_1p_FD = new TH2D("#theta_{p} vs. P_{p} (All Int., 1p, FD)", "#theta_{p} vs. P_{p} (All Int., 1p, FD);P_{p} [GeV/c];#theta_{p} [#circ]", numTH2Dbins_Ang_Plots, 0,
                                           beamE * 1.1, numTH2Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH2D *hTheta_p_VS_W_1p_FD =
        new TH2D("#theta_{p} vs. W (All Int., 1p, FD)", "#theta_{p} vs. W (All Int., 1p, FD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#theta_{p} [#circ]",
                 numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_p_VS_P_p_1p_FD_Dir = directories.Angle_Directory_map["Theta_p_1p_Directory"];
    string hTheta_p_VS_W_1p_FD_Dir = directories.Angle_Directory_map["Theta_p_1p_Directory"];

    // Phi_p (1p, FD only) ----------------------------------------------------------------------------------------------------------------------------------------

    // Phi_p (1p, FD only)
    THStack *sPhi_p_1p = new THStack("#phi_{p} (All Int., 1p, FD)", "#phi_{p} of Outgoing Proton (All Int., 1p, FD);#phi_{p} [#circ];");
    TH1D *hPhi_p_All_Int_1p =
        new TH1D("#phi_{p} (All Int., 1p, FD)", "#phi_{p} of Outgoing Proton (All Int., 1p, FD);#phi_{p} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_p_All_Int_1p_Dir = directories.Angle_Directory_map["Phi_p_1p_Directory"];

    // Theta_p vs. Phi_p ------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_p vs. Phi_p histograms
    TH2D *hTheta_p_VS_Phi_p_1p_FD = new TH2D("#theta_{p} vs. #phi_{p} of FD proton (All Int., 1p)", "#theta_{p} vs. #phi_{p} of FD proton (All Int., 1p);#phi_{p} [#circ];#theta_{p} [#circ]",
                                             numTH2Dbins_Nucleon_Ang_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_p_VS_Phi_p_1p_FD_Dir = directories.Angle_Directory_map["Theta_p_VS_Phi_p_1p_Directory"];

    // Theta_p_e_p_p (1p, FD only) ----------------------------------------------------------------------------------------------------------------------------------------

    // Theta_p_e_p_p (1p, FD only)
    THStack *sTheta_p_e_p_p_1p =
        new THStack("#theta_{#vec{P}_{e},#vec{P}_{p}} (All Int., 1p, FD)",
                    "#theta_{#vec{P}_{e},#vec{P}_{p}} - Opening Angle Between #vec{P}_{e} and #vec{P}_{p} (All Int., 1p, FD);#theta_{#vec{P}_{e},#vec{P}_{p}} [#circ];");
    TH1D *hTheta_p_e_p_p_1p = new TH1D("#theta_{#vec{P}_{e},#vec{P}_{p}} (All Int., 1p, FD)",
                                       "#theta_{#vec{P}_{e},#vec{P}_{p}} - Opening Angle Between #vec{P}_{e} and #vec{P}_{p} (All Int., 1p, FD);"
                                       "#theta_{#vec{P}_{e},#vec{P}_{p}} [#circ];",
                                       numTH1Dbins_Ang_Plots, 0, 180);
    string hTheta_p_e_p_p_1p_Dir = directories.Angle_Directory_map["Opening_angle_1p_Directory"];

    // Theta_q_p (1p, FD only) ----------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_q_p (1p, FD only)
    THStack *sTheta_q_p_p_1p = new THStack("#theta_{#vec{q},#vec{P}_{p}} (All Int., 1p, FD)",
                                           "#theta_{#vec{q},#vec{P}_{p}} - Opening Angle Between #vec{q} and #vec{P}_{p} (All Int., 1p, FD);#theta_{#vec{q},#vec{P}_{p}} [#circ];");
    TH1D *hTheta_q_p_p_1p = new TH1D("#theta_{#vec{q},#vec{P}_{p}} (All Int., 1p, FD)",
                                     "#theta_{#vec{q},#vec{P}_{p}} - Opening Angle Between #vec{q} and #vec{P}_{p} (All Int., 1p, FD);"
                                     "#theta_{#vec{q},#vec{P}_{p}} [#circ];",
                                     numTH1Dbins_Ang_Plots, 0, 180);
    string hTheta_q_p_p_1p_Dir = directories.Angle_Directory_map["Opening_angle_1p_Directory"];

    // Theta_q_p_p vs. |P_p|/|q| (1p, FD only) -------------------------------------------------------------------------------------------------------------------------------

    // Theta_q_p_p vs. |P_p|/|q| (1p, FD only)
    TH2D *hTheta_q_p_p_vs_p_p_q_1p = new TH2D("#theta_{#vec{q},#vec{P}_{p}} vs. r=|P_{p}|/|q| (All Int., 1p, FD)",
                                              "#theta_{#vec{q},#vec{P}_{p}} vs. r=|#vec{P_{p}}|/|#vec{q}| (All Int., 1p, FD);r;#theta_{#vec{q},#vec{P}_{p}}", numTH2Dbins_Ang_Plots, 0, 1.05,
                                              numTH2Dbins_Ang_Plots, 0, 180);
    string hTheta_q_p_p_vs_p_p_q_1p_Dir = directories.Angle_Directory_map["Opening_angle_1p_Directory"];

    // Theta_q_p_p vs. |p_N|/|q| (1p, FD only) -------------------------------------------------------------------------------------------------------------------------------

    // Theta_q_p_p vs. |p_N|/|q| (1p, FD only)
    TH2D *hTheta_q_p_p_vs_p_N_q_1p = new TH2D("#theta_{#vec{q},#vec{P}_{p}} vs. r=|P_{N}|/|q| (All Int., 1p, FD)",
                                              "#theta_{#vec{q},#vec{P}_{p}} vs. r=|#vec{P_{N}}|/|#vec{q}| (All Int., 1p, FD);r;#theta_{#vec{q},#vec{P}_{p}}", numTH2Dbins_Ang_Plots, 0, 1.05,
                                              numTH2Dbins_Ang_Plots, 0, 180);
    string hTheta_q_p_p_vs_p_N_q_1p_Dir = directories.Angle_Directory_map["Opening_angle_1p_Directory"];

    // Other angle plots (1n)

    // Theta_n (1n, FD only) ------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_n (1n, FD only)
    THStack *sTheta_n_1n = new THStack("#theta_{n} (All Int., 1n, FD)", "#theta_{n} of Outgoing FD Neutron (All Int., 1n, FD);#theta_{n} [#circ];");
    TH1D *hTheta_n_All_Int_1n =
        new TH1D("#theta_{n} (All Int., 1n, FD)", "#theta_{n} of Outgoing FD Neutron (All Int., 1n, FD);#theta_{n} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_n_All_Int_1n_Dir = directories.Angle_Directory_map["Theta_n_1n_Directory"];

    TH2D *hTheta_n_VS_P_n_1n_FD = new TH2D("#theta_{n} vs. P_{n} (All Int., 1n, FD)", "#theta_{n} vs. P_{n} (All Int., 1n, FD);P_{n} [GeV/c];#theta_{n} [#circ]", numTH2Dbins_Ang_Plots, 0,
                                           beamE * 1.1, numTH2Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH2D *hTheta_n_VS_W_1n_FD =
        new TH2D("#theta_{n} vs. W (All Int., 1n, FD)", "#theta_{n} vs. W (All Int., 1n, FD);W = #sqrt{(#omega + m_{n})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#theta_{n} [#circ]",
                 numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_n_VS_P_n_1n_FD_Dir = directories.Angle_Directory_map["Theta_n_1n_Directory"];
    string hTheta_n_VS_W_1n_FD_Dir = directories.Angle_Directory_map["Theta_n_1n_Directory"];

    // Phi_n (1n, FD only) --------------------------------------------------------------------------------------------------------------------------------------------------

    // Phi_n (1n, FD only)
    THStack *sPhi_n_1n = new THStack("#phi_{n} (All Int., 1n, FD)", "#phi_{n} of Outgoing Neutron (All Int., 1n, FD);#phi_{n} [#circ];");
    TH1D *hPhi_n_All_Int_1n =
        new TH1D("#phi_{n} (All Int., 1n, FD)", "#phi_{n} of Outgoing Neutron (All Int., 1n, FD);#phi_{n} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_n_All_Int_1n_Dir = directories.Angle_Directory_map["Phi_n_1n_Directory"];

    // Theta_n vs. Phi_n ------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_n vs. Phi_n histograms
    TH2D *hTheta_n_VS_Phi_n_1n_FD =
        new TH2D("#theta_{nFD} vs. #phi_{nFD} of FD neutron (All Int., 1n)", "#theta_{nFD} vs. #phi_{nFD} of FD neutron (All Int., 1n);#phi_{nFD} [#circ];#theta_{nFD} [#circ]",
                 numTH2Dbins_Nucleon_Ang_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_n_VS_Phi_n_1n_FD_Dir = directories.Angle_Directory_map["Theta_n_VS_Phi_n_1n_Directory"];

    // Theta_p_e_p_n (1n, FD only) ------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_p_e_p_n (1n, FD only)
    THStack *sTheta_p_e_p_n_1n =
        new THStack("#theta_{#vec{P}_{e},#vec{P}_{n}} (All Int., 1n, FD)",
                    "#theta_{#vec{P}_{e},#vec{P}_{n}} - Opening Angle Between #vec{P}_{e} and #vec{P}_{n} (All Int., 1n, FD);#theta_{#vec{P}_{e},#vec{P}_{n}} [#circ];");
    TH1D *hTheta_p_e_p_n_1n = new TH1D("#theta_{#vec{P}_{e},#vec{P}_{n}} (All Int., 1n, FD)",
                                       "#theta_{#vec{P}_{e},#vec{P}_{n}} - Opening Angle Between #vec{P}_{e} and #vec{P}_{n} (All Int., 1n, FD);"
                                       "#theta_{#vec{P}_{e},#vec{P}_{n}} [#circ];",
                                       numTH1Dbins_Ang_Plots, 0, 180);
    string hTheta_p_e_p_n_1n_Dir = directories.Angle_Directory_map["Opening_angle_1n_Directory"];

    // Theta_q_p_n (1n, FD only) --------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_q_p_n (1n, FD only)
    THStack *sTheta_q_p_n_1n = new THStack("#theta_{#vec{q},#vec{P}_{n}} (All Int., 1n, FD)",
                                           "#theta_{#vec{q},#vec{P}_{n}} - Opening Angle Between #vec{q} and #vec{P}_{n} (All Int., 1n, FD);#theta_{#vec{q},#vec{P}_{n}} [#circ];");
    TH1D *hTheta_q_p_n_1n = new TH1D("#theta_{#vec{q},#vec{P}_{n}} (All Int., 1n, FD)",
                                     "#theta_{#vec{q},#vec{P}_{n}} - Opening Angle Between #vec{q} and #vec{P}_{n} (All Int., 1n, FD);"
                                     "#theta_{#vec{q},#vec{P}_{n}} [#circ];",
                                     numTH1Dbins_Ang_Plots, 0, 180);
    string hTheta_q_p_n_1n_Dir = directories.Angle_Directory_map["Opening_angle_1n_Directory"];

    // Theta_q_p_n vs. |p_n|/|q| (1n, FD only) ------------------------------------------------------------------------------------------------------------------------------

    // Theta_q_p_n vs. |p_n|/|q| (1n, FD only)
    TH2D *hTheta_q_p_n_vs_p_n_q_1n = new TH2D("#theta_{#vec{q},#vec{P}_{n}} vs. r=|P_{n}|/|q| (All Int., 1n, FD)",
                                              "#theta_{#vec{q},#vec{P}_{n}} vs. r=|#vec{P}_{n}|/|#vec{q}| (All Int., 1n, FD);r;#theta_{#vec{q},#vec{P}_{n}}", numTH2Dbins_Ang_Plots, 0, 1.05,
                                              numTH2Dbins_Ang_Plots, 0, 180);
    string hTheta_q_p_n_vs_p_n_q_1n_Dir = directories.Angle_Directory_map["Opening_angle_1n_Directory"];

    // Theta_q_p_n vs. |p_N|/|q| (1n, FD only) ------------------------------------------------------------------------------------------------------------------------------

    // Theta_q_p_n vs. |p_N|/|q| (1n, FD only)
    TH2D *hTheta_q_p_n_vs_p_N_q_1n = new TH2D("#theta_{#vec{q},#vec{P}_{n}} vs. r=|P_{N}|/|q| (All Int., 1n, FD)",
                                              "#theta_{#vec{q},#vec{P}_{n}} vs. r=|#vec{P_{N}}|/|#vec{q}| (All Int., 1n, FD);r;#theta_{#vec{q},#vec{P}_{n}}", numTH2Dbins_Ang_Plots, 0, 1.05,
                                              numTH2Dbins_Ang_Plots, 0, 180);
    string hTheta_q_p_n_vs_p_N_q_1n_Dir = directories.Angle_Directory_map["Opening_angle_1n_Directory"];

    // Neutron veto plots (1n) ----------------------------------------------------------------------------------------------------------------------------------------------

    // Neutron veto plots (1n)
    hPlot2D hdTheta_n_e_VS_dPhi_n_e_Electrons_BV_1n =
        hPlot2D("1n", "FD", "#Delta#theta_{n,e} vs. #Delta#phi_{n,e} BV", "'Neutron Hits' vs. Electron Hits - Before Veto", "#Delta#phi_{n,e} = #phi_{n}^{ECAL} - #phi_{e}^{ECAL} [#circ]",
                "#Delta#theta_{n,e} = #theta_{n}^{ECAL} - #theta_{e}^{ECAL} [#circ]", directories.Angle_Directory_map["Neutron_veto_1n_Directory"], "01_Neutron_hits_vs_electron_hits_BV_1n",
                -180, 180, -50, 50, 65, 65);
    hPlot2D hdTheta_n_e_VS_dPhi_n_e_Electrons_AV_1n =
        hPlot2D("1n", "FD", "#Delta#theta_{n,e} vs. #Delta#phi_{n,e} AV", "'Neutron Hits' vs. Electron Hits - After Veto", "#Delta#phi_{n,e} = #phi_{n}^{ECAL} - #phi_{e}^{ECAL} [#circ]",
                "#Delta#theta_{n,e} = #theta_{n}^{ECAL} - #theta_{e}^{ECAL} [#circ]", directories.Angle_Directory_map["Neutron_veto_1n_Directory"], "02_Neutron_hits_vs_electron_hits_AV_1n",
                -180, 180, -50, 50, 65, 65);
    hPlot2D hdTheta_n_e_VS_dPhi_n_e_Electrons_Vetoed_Neutrons_1n =
        hPlot2D("1n", "FD", "#Delta#theta_{n,e} vs. #Delta#phi_{n,e}", "'Neutron Hits' vs. Electron Hits - Vetoed Neutrons", "#Delta#phi_{n,e} = #phi_{n}^{ECAL} - #phi_{e}^{ECAL} [#circ]",
                "#Delta#theta_{n,e} = #theta_{n}^{ECAL} - #theta_{e}^{ECAL} [#circ]", directories.Angle_Directory_map["Neutron_veto_1n_Directory"],
                "03_Neutron_hits_vs_electron_hits_Vetoed_1n", -180, 180, -50, 50, 65, 65);

    // Other angle plots (1e2pXy)

    // Phi of leading (p1) and recoil (p2) protons --------------------------------------------------------------------------------------------------------------------------

    // TODO: reorganize proprly

    // Phi of leading (p1) and recoil (p2) protons
    THStack *sPhi_Proton_1e2pXy = new THStack("#phi_{p} stack (1e2pXy, CD)", "#phi_{p} of Outgoing protons (1e2pXy, CD);#phi_{p} [#circ];");
    TH1D *hPhi_p1_1e2pXy_CD = new TH1D("#phi_{p_{1}} (1e2pXy, CD)", ";#phi_{p_{1}} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_p2_1e2pXy_CD = new TH1D("#phi_{p_{2}} (1e2pXy, CD)", ";#phi_{p_{2}} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_p1_1e2pXy_CD_Dir = directories.Angle_Directory_map["Phi_Proton_1e2pXy_Directory"];
    string hPhi_p2_1e2pXy_CD_Dir = directories.Angle_Directory_map["Phi_Proton_1e2pXy_Directory"];

    // Other angle plots (2p)

    // Theta_p_e_p_tot (2p, CD & FD) ----------------------------------------------------------------------------------------------------------------------------------------

    // Theta_p_e_p_tot (2p, CD & FD)
    THStack *sTheta_p_e_p_tot_2p = new THStack("#theta_{#vec{P}_{e},#vec{P}_{tot}} (All Int., 2p)",
                                               "#theta_{#vec{P}_{e},#vec{P}_{tot}} - Opening Angle Between #vec{P}_{e} and #vec{P}_{tot}=#vec{P}_{1}+#vec{P}_{2} (All Int., "
                                               "2p);#theta_{#vec{P}_{e},#vec{P}_{tot}} [#circ];");
    TH1D *hTheta_p_e_p_tot_2p = new TH1D("#theta_{#vec{P}_{e},#vec{P}_{tot}} (All Int., 2p)",
                                         "#theta_{#vec{P}_{e},#vec{P}_{tot}} - Opening Angle Between #vec{P}_{e} and #vec{P}_{tot}=#vec{P}_{1}+#vec{P}_{2} (All Int., 2p);"
                                         "#theta_{#vec{P}_{e},#vec{P}_{tot}} [#circ];",
                                         numTH1Dbins_Ang_Plots, 0, 180);
    string hTheta_p_e_p_tot_2p_Dir = directories.Angle_Directory_map["Opening_angle_2p_Directory"];

    // Theta_q_p (2p, CD & FD) ----------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_q_p (2p, CD & FD)

    // Theta_q_p_tot (CD & FD)
    THStack *sTheta_q_p_tot_2p =
        new THStack("#theta_{#vec{q},#vec{P}_{tot}} (All Int., 2p)",
                    "#theta_{#vec{q},#vec{P}_{tot}} - Opening Angle Between #vec{q} and #vec{P}_{tot}=#vec{P}_{1}+#vec{P}_{2} (All Int., 2p);#theta_{#vec{q},#vec{P}_{tot}} [#circ];");
    TH1D *hTheta_q_p_tot_2p = new TH1D("#theta_{#vec{q},#vec{P}_{tot}} (All Int., 2p)",
                                       "#theta_{#vec{q},#vec{P}_{tot}} - Opening Angle Between #vec{q} and #vec{P}_{tot}=#vec{P}_{1}+#vec{P}_{2} (All Int., 2p);"
                                       "#theta_{#vec{q},#vec{P}_{tot}} [#circ];",
                                       numTH1Dbins_Ang_Plots, 0, 180);
    string hTheta_q_p_tot_2p_Dir = directories.Angle_Directory_map["Opening_angle_2p_Directory"];

    // Theta_q_p_L and Theta_q_p_R (2p, CD & FD)
    THStack *sTheta_q_p_2p =
        new THStack("#theta_{#vec{q},#vec{P}} (All Int., 2p)", "#theta_{#vec{q},#vec{P}} - Opening Angle Between #vec{q} and #vec{P} (All Int., 2p);#theta_{#vec{q},#vec{P}} [#circ];");
    TH1D *hTheta_q_p_L_2p =
        new TH1D("#theta_{#vec{q},#vec{P}_{1}} (All Int., 2p)",
                 "#theta_{#vec{q},#vec{P}_{1}} - Opening Angle Between #vec{q} and leading proton #vec{P}_{1} (All Int., 2p);#theta_{#vec{q},#vec{P}_{1}}", numTH1Dbins_Ang_Plots, 0, 180);
    TH1D *hTheta_q_p_R_2p =
        new TH1D("#theta_{#vec{q},#vec{P}_{2}} (All Int., 2p)",
                 "#theta_{#vec{q},#vec{P}_{2}} - Opening Angle Between #vec{q} and recoil proton #vec{P}_{2} (All Int., 2p);#theta_{#vec{q},#vec{P}_{2}}", numTH1Dbins_Ang_Plots, 0, 180);
    string hTheta_q_p_L_2p_Dir = directories.Angle_Directory_map["Opening_angle_2p_Directory"];
    string hTheta_q_p_R_2p_Dir = directories.Angle_Directory_map["Opening_angle_2p_Directory"];

    // Theta_q_p_L vs |P_L|/|q| (2p, CD & FD) -------------------------------------------------------------------------------------------------------------------------------

    // Theta_q_p_tot (CD & FD)
    TH2D *hTheta_q_p_L_vs_p_L_q_2p =
        new TH2D("#theta_{#vec{q},#vec{P}_{1}} vs. r_{1} (All Int., 2p)", "#theta_{#vec{q},#vec{P}_{1}} vs. r_{1}=|#vec{P_{1}}|/|#vec{q}| (All Int., 2p);r_{1};#theta_{#vec{q},#vec{P}_{1}}",
                 numTH2Dbins_Ang_Plots, 0, 1.05, numTH2Dbins_Ang_Plots, 0, 180);
    string hTheta_q_p_L_vs_p_L_q_2p_Dir = directories.Angle_Directory_map["Opening_angle_2p_Directory"];

    // Theta_p1_p2 (2p, CD & FD) --------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_p1_p2 (CD & FD)
    THStack *sTheta_p1_p2_2p = new THStack("#theta_{p_{1},p_{2}} (All Int., stack, 2p)", "#theta_{p_{1},p_{2}} - Opening Angle Between Protons (2p);#theta_{p_{1},p_{2}} [#circ];");
    TH1D *hTheta_p1_p2_All_Int_2p =
        new TH1D("#theta_{p_{1},p_{2}} (All Int., 2p)", "#theta_{p_{1},p_{2}} - Opening Angle Between Protons (All Int., 2p);#theta_{p_{1},p_{2}} [#circ];", numTH1Dbins_Ang_Plots, 0, 180);
    TH1D *hTheta_p1_p2_QEL_2p =
        new TH1D("#theta_{p_{1},p_{2}} (QEL only, 2p)", "#theta_{p_{1},p_{2}} - Opening Angle Between Protons (QEL only, 2p);#theta_{p_{1},p_{2}} [#circ];", numTH1Dbins_Ang_Plots, 0, 180);
    TH1D *hTheta_p1_p2_MEC_2p =
        new TH1D("#theta_{p_{1},p_{2}} (MEC only, 2p)", "#theta_{p_{1},p_{2}} - Opening Angle Between Protons (MEC only, 2p);#theta_{p_{1},p_{2}} [#circ];", numTH1Dbins_Ang_Plots, 0, 180);
    TH1D *hTheta_p1_p2_RES_2p =
        new TH1D("#theta_{p_{1},p_{2}} (RES only, 2p)", "#theta_{p_{1},p_{2}} - Opening Angle Between Protons (RES only, 2p);#theta_{p_{1},p_{2}} [#circ];", numTH1Dbins_Ang_Plots, 0, 180);
    TH1D *hTheta_p1_p2_DIS_2p =
        new TH1D("#theta_{p_{1},p_{2}} (DIS only, 2p)", "#theta_{p_{1},p_{2}} - Opening Angle Between Protons (DIS only, 2p);#theta_{p_{1},p_{2}} [#circ];", numTH1Dbins_Ang_Plots, 0, 180);
    string sTheta_p1_p2_2p_Dir = directories.Angle_Directory_map["Opening_angle_2p_Directory"];
    string hTheta_p1_p2_All_Int_2p_Dir = directories.Angle_Directory_map["Opening_angle_by_interaction_2p_Directory"];
    string hTheta_p1_p2_QEL_2p_Dir = directories.Angle_Directory_map["Opening_angle_by_interaction_2p_Directory"];
    string hTheta_p1_p2_MEC_2p_Dir = directories.Angle_Directory_map["Opening_angle_by_interaction_2p_Directory"];
    string hTheta_p1_p2_RES_2p_Dir = directories.Angle_Directory_map["Opening_angle_by_interaction_2p_Directory"];
    string hTheta_p1_p2_DIS_2p_Dir = directories.Angle_Directory_map["Opening_angle_by_interaction_2p_Directory"];

    // Theta_p1_p2 vs. W (2p, CD & FD) --------------------------------------------------------------------------------------------------------------------------------------

    // Theta_p1_p2 vs. W (CD & FD)
    TH2D *hTheta_p1_p2_vs_W_2p = new TH2D("#theta_{p_{1},p_{2}} vs. W (All Int., 2p)",
                                          "#theta_{p_{1},p_{2}} vs. W (All Int., 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#theta_{p_{1},p_{2}} [#circ];",
                                          numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, 0, 180);
    string hTheta_p1_p2_vs_W_2p_Dir = directories.Angle_Directory_map["Opening_angle_2p_Directory"];

    // Theta_p1_vs_Theta_p2 for Theta_p1_p2 < 20 (2p, CD & FD) --------------------------------------------------------------------------------------------------------------

    // Theta_p1_vs_Theta_p2 for Theta_p1_p2 < 20 (CD & FD)
    TH2D *hTheta_p1_vs_theta_p2_for_Theta_p1_p2_20_2p = new TH2D("#theta_{p_{1}} vs. #theta_{p_{1}} for #theta_{p_{1},p_{2}}<20#circ (All Int., 2p)",
                                                                 "#theta_{p_{1}} vs. #theta_{p_{2}} for #theta_{p_{1},p_{2}}<20#circ (All Int., 2p);#theta_{p_{2}} [#circ];"
                                                                 "#theta_{p_{1}} [#circ];",
                                                                 numTH2Dbins_Ang_Plots, 30, 50, numTH2Dbins_Ang_Plots, 30, 50);
    string hTheta_p1_vs_theta_p2_for_Theta_p1_p2_20_2p_Dir = directories.Angle_Directory_map["Double_detection_2p_Directory"];

    // Theta_pFD_vs_Theta_pCD for Theta_pFD_pCD < 20 (2p, CD & FD) ----------------------------------------------------------------------------------------------------------

    // Theta_p1_vs_Theta_p2 for Theta_p1_p2 < 20 (CD & FD)
    TH2D *hTheta_pFD_vs_Theta_pCD_for_Theta_pFD_pCD_20_2p = new TH2D("#theta_{pFD} vs. #theta_{pCD} for #theta_{pFD,pCD}<20#circ (All Int., 2p)",
                                                                     "#theta_{pFD} vs. #theta_{pCD} for #theta_{pFD,pCD}<20#circ (All Int., 2p);#theta_{pCD} [#circ];"
                                                                     "#theta_{pFD} [#circ];",
                                                                     numTH2Dbins_Ang_Plots, 30, 50, numTH2Dbins_Ang_Plots, 30, 50);
    string hTheta_pFD_vs_Theta_pCD_for_Theta_pFD_pCD_20_2p_Dir = directories.Angle_Directory_map["Double_detection_2p_Directory"];

    // dPhi_p1_p2 for Theta_p1_p2 < 20 (2p, CD & FD) ------------------------------------------------------------------------------------------------------------------------

    // dPhi_p1_p2 for Theta_p1_p2 < 20 (CD & FD)
    TH1D *hdPhi_p1_p2_for_Theta_p1_p2_20_2p = new TH1D("#Delta#phi for #theta_{p_{1},p_{2}}<20#circ (All Int., 2p)",
                                                       "#Delta#phi for #theta_{p_{1},p_{2}}<20#circ (All Int., 2p);"
                                                       "#Delta#phi = #phi_{p,1} - #phi_{p,2} [#circ];",
                                                       numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hdPhi_p1_p2_for_Theta_p1_p2_20_2p_Dir = directories.Angle_Directory_map["Double_detection_2p_Directory"];

    TH1D *hdPhi_p1_p2_for_Theta_p1_p2_20_ZOOMIN_2p = new TH1D("#Delta#phi for #theta_{p_{1},p_{2}}<20#circ - ZOOMIN (All Int., 2p)",
                                                              "#Delta#phi for #theta_{p_{1},p_{2}}<20#circ - ZOOMIN (All Int., 2p);"
                                                              "#Delta#phi = #phi_{p,1} - #phi_{p,2} [#circ];",
                                                              numTH1Dbins_Ang_Plots, -25, 25);
    string hdPhi_p1_p2_for_Theta_p1_p2_20_ZOOMIN_2p_Dir = directories.Angle_Directory_map["Double_detection_2p_Directory"];

    // dPhi_pFD_pCD for Theta_pFD_pCD < 20 (2p, CD & FD) --------------------------------------------------------------------------------------------------------------------

    // dPhi_p1_p2 for Theta_pFD_pCD < 20 (CD & FD)
    TH1D *hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_2p = new TH1D("#Delta#phi for #theta_{pFD,pCD}<20#circ (All Int., 2p)",
                                                           "#Delta#phi for #theta_{pFD,pCD}<20#circ (All Int., 2p);"
                                                           "#Delta#phi = #phi_{pFD} - #phi_{pCD} [#circ];",
                                                           50, Phi_lboundary, Phi_uboundary);
    string hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_2p_Dir = directories.Angle_Directory_map["Double_detection_2p_Directory"];

    TH1D *hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_ZOOMIN_2p = new TH1D("#Delta#phi for #theta_{pFD,pCD}<20#circ - ZOOMIN (All Int., 2p)",
                                                                  "#Delta#phi for #theta_{pFD,pCD}<20#circ - ZOOMIN (All Int., 2p);"
                                                                  "#Delta#phi = #phi_{pFD} - #phi_{pCD} [#circ];",
                                                                  50, -40, 40);
    string hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_ZOOMIN_2p_Dir = directories.Angle_Directory_map["Double_detection_2p_Directory"];

    // Theta_p1_vs_Theta_p2 for every Theta_p1_p2 (2p, CD & FD) -------------------------------------------------------------------------------------------------------------

    // Theta_p1_vs_Theta_p2 for every Theta_p1_p2 (CD & FD)
    TH2D *hTheta_p1_vs_theta_p2_forall_Theta_p1_p2_2p = new TH2D("#theta_{p_{1}} vs. #theta_{p_{1}} #forall#theta_{p_{1},p_{2}} (All Int., 2p)",
                                                                 "#theta_{p_{1}} vs. #theta_{p_{2}} for every #theta_{p_{1},p_{2}} (All Int., 2p);#theta_{p_{2}} [#circ];"
                                                                 "#theta_{p_{1}} [#circ];",
                                                                 numTH2Dbins_Ang_Plots, 30, 50, numTH2Dbins_Ang_Plots, 30, 50);
    string hTheta_p1_vs_theta_p2_forall_Theta_p1_p2_2p_Dir = directories.Angle_Directory_map["Double_detection_2p_Directory"];

    // Theta_pFD_vs_Theta_pCD for every Theta_pFD_pCD (2p, CD & FD) ---------------------------------------------------------------------------------------------------------

    // Theta_pFD_vs_Theta_pCD for every Theta_pFD_pCD (CD & FD)
    TH2D *hTheta_pFD_vs_Theta_pCD_forall_Theta_pFD_pCD_2p = new TH2D("#theta_{pFD} vs. #theta_{pCD} #forall#theta_{pFD,pCD} (All Int., 2p)",
                                                                     "#theta_{pFD} vs. #theta_{pCD} #forall#theta_{pFD,pCD} (All Int., 2p);#theta_{pCD} [#circ];"
                                                                     "#theta_{pFD} [#circ];",
                                                                     numTH2Dbins_Ang_Plots, 30, 50, numTH2Dbins_Ang_Plots, 30, 50);
    string hTheta_pFD_vs_Theta_pCD_forall_Theta_pFD_pCD_2p_Dir = directories.Angle_Directory_map["Double_detection_2p_Directory"];

    // dPhi_p1_p2 for every Theta_p1_p2 (2p, CD & FD) -----------------------------------------------------------------------------------------------------------------------

    // dPhi_p1_p2 for every Theta_p1_p2 (CD & FD)
    TH1D *hdPhi_p1_p2_for_all_Theta_p1_p2_2p = new TH1D("#Delta#phi #forall#theta_{p_{1},p_{2}} (All Int., 2p)",
                                                        "#Delta#phi for every #theta_{p_{1},p_{2}} (All Int., 2p);"
                                                        "#Delta#phi = #phi_{p,1} - #phi_{p,2} [#circ];",
                                                        50, Phi_lboundary, Phi_uboundary);
    string hdPhi_p1_p2_for_all_Theta_p1_p2_2p_Dir = directories.Angle_Directory_map["Double_detection_2p_Directory"];

    TH1D *hdPhi_p1_p2_for_all_Theta_p1_p2_ZOOMIN_2p = new TH1D("#Delta#phi #forall#theta_{p_{1},p_{2}} - ZOOMIN (All Int., 2p)",
                                                               "#Delta#phi for every #theta_{p_{1},p_{2}} - ZOOMIN(All Int., 2p);"
                                                               "#Delta#phi = #phi_{p,1} - #phi_{p,2} [#circ];",
                                                               50, -40, 40);
    string hdPhi_p1_p2_for_all_Theta_p1_p2_ZOOMIN_2p_Dir = directories.Angle_Directory_map["Double_detection_2p_Directory"];

    TH1D *hdPhi_p1_p2_for_small_dTheta_2p = new TH1D("#Delta#phi for small #Delta#theta_{1/2} (All Int., 2p)",
                                                     "#Delta#phi for small #Delta#theta_{1/2} = |#theta_{1/2}-40#circ|;"
                                                     "#Delta#phi = #phi_{p,1} - #phi_{p,2} [#circ];",
                                                     50, Phi_lboundary, Phi_uboundary);
    string hdPhi_p1_p2_for_small_dTheta_2p_Dir = directories.Angle_Directory_map["Double_detection_2p_Directory"];

    TH1D *hdPhi_p1_p2_for_small_dTheta_ZOOMIN_2p = new TH1D("#Delta#phi for small #Delta#theta_{1/2} - ZOOMIN (All Int., 2p)",
                                                            "#Delta#phi for small #Delta#theta_{1/2} = |#theta_{1/2}-40#circ| - ZOOMIN;"
                                                            "#Delta#phi = #phi_{p,1} - #phi_{p,2} [#circ];",
                                                            50, -40, 40);
    string hdPhi_p1_p2_for_small_dTheta_ZOOMIN_2p_Dir = directories.Angle_Directory_map["Double_detection_2p_Directory"];

    // dPhi_pFD_pCD for every Theta_pFD_pCD (2p, CD & FD) --------------------------------------------------------------------------------------------------------------------

    // dPhi_pFD_pCD for every Theta_pFD_pCD (CD & FD)
    TH1D *hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_2p = new TH1D("#Delta#phi for #theta_{pFD,pCD} (All Int., 2p)",
                                                            "#Delta#phi for #theta_{pFD,pCD} (All Int., 2p);"
                                                            "#Delta#phi = #phi_{pFD} - #phi_{pCD} [#circ];",
                                                            50, Phi_lboundary, Phi_uboundary);
    string hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_2p_Dir = directories.Angle_Directory_map["Double_detection_2p_Directory"];

    TH1D *hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_ZOOMIN_2p = new TH1D("#Delta#phi for #theta_{pFD,pCD} - ZOOMIN (All Int., 2p)",
                                                                   "#Delta#phi for #theta_{pFD,pCD} - ZOOMIN (All Int., 2p);"
                                                                   "#Delta#phi = #phi_{pFD} - #phi_{pCD} [#circ];",
                                                                   50, -40, 40);
    string hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_ZOOMIN_2p_Dir = directories.Angle_Directory_map["Double_detection_2p_Directory"];

    TH1D *hdPhi_pFD_pCD_for_small_dTheta_2p = new TH1D("#Delta#phi for small #Delta#theta_{pFD/pCD} (All Int., 2p)",
                                                       "#Delta#phi for small #Delta#theta_{pFD/pCD} = |#theta_{pFD/pCD}-40#circ|;"
                                                       "#Delta#phi = #phi_{pFD} - #phi_{pCD} [#circ];",
                                                       50, Phi_lboundary, Phi_uboundary);
    string hdPhi_pFD_pCD_for_small_dTheta_2p_Dir = directories.Angle_Directory_map["Double_detection_2p_Directory"];

    TH1D *hdPhi_pFD_pCD_for_small_dTheta_ZOOMIN_2p = new TH1D("#Delta#phi for small #Delta#theta_{pFD/pCD} - ZOOMIN (All Int., 2p)",
                                                              "#Delta#phi for small #Delta#theta_{pFD/pCD} = |#theta_{pFD/pCD}-40#circ| - ZOOMIN;"
                                                              "#Delta#phi = #phi_{pFD} - #phi_{pCD} [#circ];",
                                                              50, -40, 40);
    string hdPhi_pFD_pCD_for_small_dTheta_ZOOMIN_2p_Dir = directories.Angle_Directory_map["Double_detection_2p_Directory"];

    // Ghost tracks handling (2p, CD only) ----------------------------------------------------------------------------------------------------------------------------------

    // Theta_p1_p2 vs. TOF1-TOF2 plots (2p)
    hPlot2D hTheta_p1_p2_VS_ToF1_ToF2_AC_2p =
        hPlot2D("2p", "CD-CTOF", "#theta_{p_{1},p_{2}} vs. ToF_{1}-ToF_{2} AC", "#theta_{p_{1},p_{2}} vs. ToF_{1}-ToF_{2} AC", "#theta_{p_{1},p_{2}} [#circ]", "ToF_{1}-ToF_{2} [ns]",
                directories.Angle_Directory_map["CToF_hits_2p_Directory"], "01_Theta_p1_p2_VS_ToF1-ToF2_AC_2p", 0, 180, -3, 3, numTH2Dbins_Ang_Plots, numTH2Dbins_Ang_Plots);

    // Theta_p1_p2 vs. position1-position2 plots (2p)
    hPlot2D hTheta_p1_p2_VS_Pos1_Pos2_AC_2p = hPlot2D("2p", "CD-CTOF", "#theta_{p_{1},p_{2}} vs. Position_{1}-Position_{2} AC", "#theta_{p_{1},p_{2}} vs. Position_{1}-Position_{2} AC",
                                                      "#theta_{p_{1},p_{2}} [#circ]", "Position_{1}-Position_{2} [cm]", directories.Angle_Directory_map["CToF_hits_2p_Directory"],
                                                      "02_Theta_p1_p2_VS_Pos1-Pos2_AC_2p", 0, 180, 0, 100, numTH2Dbins_Ang_Plots, numTH2Dbins_Ang_Plots);

    // Other angle plots (pFDpCD)

    // Nucleons' angles plots (pFDpCD)

    // Theta_pFD ------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_pFD histograms
    THStack *sTheta_pFD_pFDpCD_FD = new THStack("#theta_{pFD} (pFDpCD)", "#theta_{pFD} of FD proton (pFDpCD);#theta_{pFD} [#circ];");

    TH1D *hTheta_pFD_All_Int_pFDpCD_FD =
        new TH1D("#theta_{pFD} (All Int., pFDpCD)", "#theta_{pFD} of FD proton (All Int., pFDpCD);#theta_{pFD} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_pFD_QEL_pFDpCD_FD =
        new TH1D("#theta_{pFD} (QEL Only, pFDpCD)", "#theta_{pFD} of FD proton (QEL Only, pFDpCD);#theta_{pFD} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_pFD_MEC_pFDpCD_FD =
        new TH1D("#theta_{pFD} (MEC Only, pFDpCD)", "#theta_{pFD} of FD proton (MEC Only, pFDpCD);#theta_{pFD} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_pFD_RES_pFDpCD_FD =
        new TH1D("#theta_{pFD} (RES Only, pFDpCD)", "#theta_{pFD} of FD proton (RES Only, pFDpCD);#theta_{pFD} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_pFD_DIS_pFDpCD_FD =
        new TH1D("#theta_{pFD} (DIS Only, pFDpCD)", "#theta_{pFD} of FD proton (DIS Only, pFDpCD);#theta_{pFD} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_pFD_All_Int_pFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_pFD_pFDpCD_Directory"];
    string hTheta_pFD_QEL_pFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_pFD_pFDpCD_Directory"];
    string hTheta_pFD_MEC_pFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_pFD_pFDpCD_Directory"];
    string hTheta_pFD_RES_pFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_pFD_pFDpCD_Directory"];
    string hTheta_pFD_DIS_pFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_pFD_pFDpCD_Directory"];

    TH2D *hTheta_pFD_VS_P_pFD_pFDpCD_FD = new TH2D("#theta_{pFD} vs. P_{pFD} (All Int., pFDpCD, FD)", "#theta_{pFD} vs. P_{pFD} (All Int., pFDpCD, FD);P_{pFD} [GeV/c];#theta_{pFD} [#circ]",
                                                   numTH2Dbins_Ang_Plots, 0, beamE * 1.1, numTH2Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH2D *hTheta_pFD_VS_W_pFDpCD_FD =
        new TH2D("#theta_{pFD} vs. W (All Int., pFDpCD, FD)", "#theta_{pFD} vs. W (All Int., pFDpCD, FD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#theta_{pFD} [#circ]",
                 numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_pFD_VS_P_pFD_pFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_pFD_pFDpCD_Directory"];
    string hTheta_pFD_VS_W_pFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_pFD_pFDpCD_Directory"];

    // Phi_pFD --------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Phi_pFD histograms
    THStack *sPhi_pFD_pFDpCD_FD = new THStack("#phi_{pFD} (pFDpCD)", "#phi_{pFD} of FD proton (pFDpCD);#phi_{pFD} [#circ];");

    TH1D *hPhi_pFD_All_Int_pFDpCD_FD =
        new TH1D("#phi_{pFD} (All Int., pFDpCD)", "#phi_{pFD} of FD proton (All Int., pFDpCD);#phi_{pFD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_pFD_QEL_pFDpCD_FD =
        new TH1D("#phi_{pFD} (QEL Only, pFDpCD)", "#phi_{pFD} of FD proton (QEL Only, pFDpCD);#phi_{pFD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_pFD_MEC_pFDpCD_FD =
        new TH1D("#phi_{pFD} (MEC Only, pFDpCD)", "#phi_{pFD} of FD proton (MEC Only, pFDpCD);#phi_{pFD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_pFD_RES_pFDpCD_FD =
        new TH1D("#phi_{pFD} (RES Only, pFDpCD)", "#phi_{pFD} of FD proton (RES Only, pFDpCD);#phi_{pFD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_pFD_DIS_pFDpCD_FD =
        new TH1D("#phi_{pFD} (DIS Only, pFDpCD)", "#phi_{pFD} of FD proton (DIS Only, pFDpCD);#phi_{pFD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_pFD_All_Int_pFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_pFD_pFDpCD_Directory"];
    string hPhi_pFD_QEL_pFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_pFD_pFDpCD_Directory"];
    string hPhi_pFD_MEC_pFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_pFD_pFDpCD_Directory"];
    string hPhi_pFD_RES_pFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_pFD_pFDpCD_Directory"];
    string hPhi_pFD_DIS_pFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_pFD_pFDpCD_Directory"];

    TH2D *hPhi_pFD_VS_P_pFD_pFDpCD_FD = new TH2D("#phi_{pFD} vs. P_{pFD} (All Int., pFDpCD, FD)", "#phi_{pFD} vs. P_{pFD} (All Int., pFDpCD, FD);P_{pFD} [GeV/c];#phi_{pFD} [#circ]",
                                                 numTH2Dbins_Ang_Plots, 0, beamE * 1.1, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH2D *hPhi_pFD_VS_W_pFDpCD_FD = new TH2D("#phi_{pFD} vs. W (All Int., pFDpCD, FD)",
                                             "#phi_{pFD} vs. W (All Int., pFDpCD, FD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];"
                                             "#phi_{pFD} [#circ]",
                                             numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_pFD_VS_P_pFD_pFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_pFD_pFDpCD_Directory"];
    string hPhi_pFD_VS_W_pFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_pFD_pFDpCD_Directory"];

    // Theta_pFD vs. Phi_pFD ------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_pFD vs. Phi_pFD histograms
    TH2D *hTheta_pFD_VS_Phi_pFD_pFDpCD_FD =
        new TH2D("#theta_{pFD} vs. #phi_{pFD} of FD proton (All Int., pFDpCD)", "#theta_{pFD} vs. #phi_{pFD} of FD proton (All Int., pFDpCD);#phi_{pFD} [#circ];#theta_{pFD} [#circ]",
                 numTH2Dbins_Nucleon_Ang_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_pFD_VS_Phi_pFD_pFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_pFD_VS_Phi_pFD_pFDpCD_Directory"];

    // Theta_pCD ------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_pCD histograms
    THStack *sTheta_pCD_pFDpCD_CD = new THStack("#theta_{pCD} (pFDpCD)", "#theta_{pCD} of CD proton (pFDpCD);#theta_{pCD} [#circ];");

    TH1D *hTheta_pCD_All_Int_pFDpCD_CD = new TH1D("#theta_{pCD} (All Int., pFDpCD)", "#theta_{pCD} of CD proton (All Int., pFDpCD);#theta_{pCD} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    TH1D *hTheta_pCD_QEL_pFDpCD_CD = new TH1D("#theta_{pCD} (QEL Only, pFDpCD)", "#theta_{pCD} of CD proton (QEL Only, pFDpCD);#theta_{pCD} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    TH1D *hTheta_pCD_MEC_pFDpCD_CD = new TH1D("#theta_{pCD} (MEC Only, pFDpCD)", "#theta_{pCD} of CD proton (MEC Only, pFDpCD);#theta_{pCD} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    TH1D *hTheta_pCD_RES_pFDpCD_CD = new TH1D("#theta_{pCD} (RES Only, pFDpCD)", "#theta_{pCD} of CD proton (RES Only, pFDpCD);#theta_{pCD} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    TH1D *hTheta_pCD_DIS_pFDpCD_CD = new TH1D("#theta_{pCD} (DIS Only, pFDpCD)", "#theta_{pCD} of CD proton (DIS Only, pFDpCD);#theta_{pCD} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    string hTheta_pCD_All_Int_pFDpCD_CD_Dir = directories.Angle_Directory_map["Theta_pCD_pFDpCD_Directory"];
    string hTheta_pCD_QEL_pFDpCD_CD_Dir = directories.Angle_Directory_map["Theta_pCD_pFDpCD_Directory"];
    string hTheta_pCD_MEC_pFDpCD_CD_Dir = directories.Angle_Directory_map["Theta_pCD_pFDpCD_Directory"];
    string hTheta_pCD_RES_pFDpCD_CD_Dir = directories.Angle_Directory_map["Theta_pCD_pFDpCD_Directory"];
    string hTheta_pCD_DIS_pFDpCD_CD_Dir = directories.Angle_Directory_map["Theta_pCD_pFDpCD_Directory"];

    TH2D *hTheta_pCD_VS_P_pCD_pFDpCD_CD = new TH2D("#theta_{pCD} vs. P_{pCD} (All Int., pFDpCD, CD)", "#theta_{pCD} vs. P_{pCD} (All Int., pFDpCD, CD);P_{pCD} [GeV/c];#theta_{pCD} [#circ]",
                                                   numTH2Dbins_Ang_Plots, 0, beamE * 1.1, numTH2Dbins_Ang_Plots, 30, 155);
    TH2D *hTheta_pCD_VS_W_pFDpCD_CD =
        new TH2D("#theta_{pCD} vs. W (All Int., pFDpCD, CD)", "#theta_{pCD} vs. W (All Int., pFDpCD, CD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#theta_{pCD} [#circ]",
                 numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, 30, 155);
    string hTheta_pCD_VS_P_pCD_pFDpCD_CD_Dir = directories.Angle_Directory_map["Theta_pCD_pFDpCD_Directory"];
    string hTheta_pCD_VS_W_pFDpCD_CD_Dir = directories.Angle_Directory_map["Theta_pCD_pFDpCD_Directory"];

    // Phi_pCD --------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Phi_pCD histograms
    THStack *sPhi_pCD_pFDpCD_CD = new THStack("#phi_{pCD} (pFDpCD)", "#phi_{pCD} of CD proton (pFDpCD);#phi_{pCD} [#circ];");

    TH1D *hPhi_pCD_All_Int_pFDpCD_CD =
        new TH1D("#phi_{pCD} (All Int., pFDpCD)", "#phi_{pCD} of CD proton (All Int., pFDpCD);#phi_{pCD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_pCD_QEL_pFDpCD_CD =
        new TH1D("#phi_{pCD} (QEL Only, pFDpCD)", "#phi_{pCD} of CD proton (QEL Only, pFDpCD);#phi_{pCD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_pCD_MEC_pFDpCD_CD =
        new TH1D("#phi_{pCD} (MEC Only, pFDpCD)", "#phi_{pCD} of CD proton (MEC Only, pFDpCD);#phi_{pCD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_pCD_RES_pFDpCD_CD =
        new TH1D("#phi_{pCD} (RES Only, pFDpCD)", "#phi_{pCD} of CD proton (RES Only, pFDpCD);#phi_{pCD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_pCD_DIS_pFDpCD_CD =
        new TH1D("#phi_{pCD} (DIS Only, pFDpCD)", "#phi_{pCD} of CD proton (DIS Only, pFDpCD);#phi_{pCD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_pCD_All_Int_pFDpCD_CD_Dir = directories.Angle_Directory_map["Phi_pCD_pFDpCD_Directory"];
    string hPhi_pCD_QEL_pFDpCD_CD_Dir = directories.Angle_Directory_map["Phi_pCD_pFDpCD_Directory"];
    string hPhi_pCD_MEC_pFDpCD_CD_Dir = directories.Angle_Directory_map["Phi_pCD_pFDpCD_Directory"];
    string hPhi_pCD_RES_pFDpCD_CD_Dir = directories.Angle_Directory_map["Phi_pCD_pFDpCD_Directory"];
    string hPhi_pCD_DIS_pFDpCD_CD_Dir = directories.Angle_Directory_map["Phi_pCD_pFDpCD_Directory"];

    TH2D *hPhi_pCD_VS_P_pCD_pFDpCD_CD = new TH2D("#phi_{pCD} vs. P_{pCD} (All Int., pFDpCD, CD)", "#phi_{pCD} vs. P_{pCD} (All Int., pFDpCD, CD);P_{pCD} [GeV/c];#phi_{pCD} [#circ]",
                                                 numTH2Dbins_Ang_Plots, 0, beamE * 1.1, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH2D *hPhi_pCD_VS_W_pFDpCD_CD =
        new TH2D("#phi_{pCD} vs. W (All Int., pFDpCD, CD)", "#phi_{pCD} vs. W (All Int., pFDpCD, CD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#phi_{pCD} [#circ]",
                 numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_pCD_VS_P_pCD_pFDpCD_CD_Dir = directories.Angle_Directory_map["Phi_pCD_pFDpCD_Directory"];
    string hPhi_pCD_VS_W_pFDpCD_CD_Dir = directories.Angle_Directory_map["Phi_pCD_pFDpCD_Directory"];

    // Theta_pCD vs. Phi_pCD ------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_pCD vs. Phi_pCD histograms
    TH2D *hTheta_pCD_VS_Phi_pCD_pFDpCD_CD =
        new TH2D("#theta_{pCD} vs. #phi_{pCD} of CD proton (All Int., pFDpCD)", "#theta_{pCD} vs. #phi_{pCD} of CD proton (All Int., pFDpCD);#phi_{pCD} [#circ];#theta_{pCD} [#circ]",
                 numTH2Dbins_Nucleon_Ang_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_Ang_Plots, 30, 155);
    string hTheta_pCD_VS_Phi_pCD_pFDpCD_CD_Dir = directories.Angle_Directory_map["Theta_pCD_VS_Phi_pCD_pFDpCD_Directory"];

    // Theta_tot ------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_tot histograms
    THStack *sTheta_tot_pFDpCD = new THStack("#theta_{tot} (pFDpCD)", "#theta_{tot} of total 3-momentum (pFDpCD);#theta_{tot} [#circ];");

    TH1D *hTheta_tot_All_Int_pFDpCD = new TH1D("#theta_{tot} (All Int., pFDpCD)", "#theta_{tot} of total 3-momentum (All Int., pFDpCD);#theta_{tot} [#circ];", numTH1Dbins_Ang_Plots,
                                               Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    TH1D *hTheta_tot_QEL_pFDpCD = new TH1D("#theta_{tot} (QEL Only, pFDpCD)", "#theta_{tot} of total 3-momentum (QEL Only, pFDpCD);#theta_{tot} [#circ];", numTH1Dbins_Ang_Plots,
                                           Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    TH1D *hTheta_tot_MEC_pFDpCD = new TH1D("#theta_{tot} (MEC Only, pFDpCD)", "#theta_{tot} of total 3-momentum (MEC Only, pFDpCD);#theta_{tot} [#circ];", numTH1Dbins_Ang_Plots,
                                           Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    TH1D *hTheta_tot_RES_pFDpCD = new TH1D("#theta_{tot} (RES Only, pFDpCD)", "#theta_{tot} of total 3-momentum (RES Only, pFDpCD);#theta_{tot} [#circ];", numTH1Dbins_Ang_Plots,
                                           Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    TH1D *hTheta_tot_DIS_pFDpCD = new TH1D("#theta_{tot} (DIS Only, pFDpCD)", "#theta_{tot} of total 3-momentum (DIS Only, pFDpCD);#theta_{tot} [#circ];", numTH1Dbins_Ang_Plots,
                                           Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_tot_All_Int_pFDpCD_Dir = directories.Angle_Directory_map["Theta_tot_pFDpCD_Directory"];
    string hTheta_tot_QEL_pFDpCD_Dir = directories.Angle_Directory_map["Theta_tot_pFDpCD_Directory"];
    string hTheta_tot_MEC_pFDpCD_Dir = directories.Angle_Directory_map["Theta_tot_pFDpCD_Directory"];
    string hTheta_tot_RES_pFDpCD_Dir = directories.Angle_Directory_map["Theta_tot_pFDpCD_Directory"];
    string hTheta_tot_DIS_pFDpCD_Dir = directories.Angle_Directory_map["Theta_tot_pFDpCD_Directory"];

    TH2D *hTheta_tot_VS_P_tot_pFDpCD = new TH2D("#theta_{tot} vs. P_{tot} (All Int., pFDpCD, CD)", "#theta_{tot} vs. P_{tot} (All Int., pFDpCD, CD);P_{tot} [GeV/c];#theta_{tot} [#circ]",
                                                numTH2Dbins_Ang_Plots, 0, beamE * 1.1, numTH2Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    TH2D *hTheta_tot_VS_W_pFDpCD =
        new TH2D("#theta_{tot} vs. W (All Int., pFDpCD, CD)", "#theta_{tot} vs. W (All Int., pFDpCD, CD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#theta_{tot} [#circ]",
                 numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_tot_VS_P_tot_pFDpCD_Dir = directories.Angle_Directory_map["Theta_tot_pFDpCD_Directory"];
    string hTheta_tot_VS_W_pFDpCD_Dir = directories.Angle_Directory_map["Theta_tot_pFDpCD_Directory"];

    // Phi_tot --------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Phi_tot histograms
    THStack *sPhi_tot_pFDpCD = new THStack("#phi_{tot} (pFDpCD)", "#phi_{tot} of total 3-momentum (pFDpCD);#phi_{tot} [#circ];");

    TH1D *hPhi_tot_All_Int_pFDpCD =
        new TH1D("#phi_{tot} (All Int., pFDpCD)", "#phi_{tot} of total 3-momentum (All Int., pFDpCD);#phi_{tot} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_tot_QEL_pFDpCD =
        new TH1D("#phi_{tot} (QEL Only, pFDpCD)", "#phi_{tot} of total 3-momentum (QEL Only, pFDpCD);#phi_{tot} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_tot_MEC_pFDpCD =
        new TH1D("#phi_{tot} (MEC Only, pFDpCD)", "#phi_{tot} of total 3-momentum (MEC Only, pFDpCD);#phi_{tot} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_tot_RES_pFDpCD =
        new TH1D("#phi_{tot} (RES Only, pFDpCD)", "#phi_{tot} of total 3-momentum (RES Only, pFDpCD);#phi_{tot} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_tot_DIS_pFDpCD =
        new TH1D("#phi_{tot} (DIS Only, pFDpCD)", "#phi_{tot} of total 3-momentum (DIS Only, pFDpCD);#phi_{tot} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_tot_All_Int_pFDpCD_Dir = directories.Angle_Directory_map["Phi_tot_pFDpCD_Directory"];
    string hPhi_tot_QEL_pFDpCD_Dir = directories.Angle_Directory_map["Phi_tot_pFDpCD_Directory"];
    string hPhi_tot_MEC_pFDpCD_Dir = directories.Angle_Directory_map["Phi_tot_pFDpCD_Directory"];
    string hPhi_tot_RES_pFDpCD_Dir = directories.Angle_Directory_map["Phi_tot_pFDpCD_Directory"];
    string hPhi_tot_DIS_pFDpCD_Dir = directories.Angle_Directory_map["Phi_tot_pFDpCD_Directory"];

    TH2D *hPhi_tot_VS_P_tot_pFDpCD = new TH2D("#phi_{tot} vs. P_{tot} (All Int., pFDpCD, CD)", "#phi_{tot} vs. P_{tot} (All Int., pFDpCD, CD);P_{tot} [GeV/c];#phi_{tot} [#circ]",
                                              numTH2Dbins_Ang_Plots, 0, beamE * 1.1, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH2D *hPhi_tot_VS_W_pFDpCD =
        new TH2D("#phi_{tot} vs. W (All Int., pFDpCD, CD)", "#phi_{tot} vs. W (All Int., pFDpCD, CD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#phi_{tot} [#circ]",
                 numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_tot_VS_P_tot_pFDpCD_Dir = directories.Angle_Directory_map["Phi_tot_pFDpCD_Directory"];
    string hPhi_tot_VS_W_pFDpCD_Dir = directories.Angle_Directory_map["Phi_tot_pFDpCD_Directory"];

    // Theta_tot vs. Phi_tot ------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_tot vs. Phi_tot histograms
    TH2D *hTheta_tot_VS_Phi_tot_pFDpCD = new TH2D("#theta_{tot} vs. #phi_{tot} of total 3-momentum (All Int., pFDpCD)",
                                                  "#theta_{tot} vs. #phi_{tot} of total 3-momentum (All Int., pFDpCD);#phi_{tot} [#circ];#theta_{tot} [#circ]", numTH2Dbins_Nucleon_Ang_Plots,
                                                  Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_tot_VS_Phi_tot_pFDpCD_Dir = directories.Angle_Directory_map["Theta_tot_VS_Phi_tot_pFDpCD_Directory"];

    // Theta_rel ------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_rel histograms
    THStack *sTheta_rel_pFDpCD = new THStack("#theta_{rel} (pFDpCD)", "#theta_{rel} of relative 3-momentum (pFDpCD);#theta_{rel} [#circ];");

    TH1D *hTheta_rel_All_Int_pFDpCD =
        new TH1D("#theta_{rel} (All Int., pFDpCD)", "#theta_{rel} of relative 3-momentum (All Int., pFDpCD);#theta_{rel} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    TH1D *hTheta_rel_QEL_pFDpCD = new TH1D("#theta_{rel} (QEL Only, pFDpCD)", "#theta_{rel} of relative 3-momentum (QEL Only, pFDpCD);#theta_{rel} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    TH1D *hTheta_rel_MEC_pFDpCD = new TH1D("#theta_{rel} (MEC Only, pFDpCD)", "#theta_{rel} of relative 3-momentum (MEC Only, pFDpCD);#theta_{rel} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    TH1D *hTheta_rel_RES_pFDpCD = new TH1D("#theta_{rel} (RES Only, pFDpCD)", "#theta_{rel} of relative 3-momentum (RES Only, pFDpCD);#theta_{rel} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    TH1D *hTheta_rel_DIS_pFDpCD = new TH1D("#theta_{rel} (DIS Only, pFDpCD)", "#theta_{rel} of relative 3-momentum (DIS Only, pFDpCD);#theta_{rel} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    string hTheta_rel_All_Int_pFDpCD_Dir = directories.Angle_Directory_map["Theta_rel_pFDpCD_Directory"];
    string hTheta_rel_QEL_pFDpCD_Dir = directories.Angle_Directory_map["Theta_rel_pFDpCD_Directory"];
    string hTheta_rel_MEC_pFDpCD_Dir = directories.Angle_Directory_map["Theta_rel_pFDpCD_Directory"];
    string hTheta_rel_RES_pFDpCD_Dir = directories.Angle_Directory_map["Theta_rel_pFDpCD_Directory"];
    string hTheta_rel_DIS_pFDpCD_Dir = directories.Angle_Directory_map["Theta_rel_pFDpCD_Directory"];

    TH2D *hTheta_rel_VS_P_rel_pFDpCD = new TH2D("#theta_{rel} vs. P_{rel} (All Int., pFDpCD, CD)", "#theta_{rel} vs. P_{rel} (All Int., pFDpCD, CD);P_{rel} [GeV/c];#theta_{rel} [#circ]",
                                                numTH2Dbins_Ang_Plots, 0, beamE * 1.1, numTH2Dbins_Ang_Plots, 30, 155);
    TH2D *hTheta_rel_VS_W_pFDpCD =
        new TH2D("#theta_{rel} vs. W (All Int., pFDpCD, CD)", "#theta_{rel} vs. W (All Int., pFDpCD, CD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#theta_{rel} [#circ]",
                 numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, 30, 155);
    string hTheta_rel_VS_P_rel_pFDpCD_Dir = directories.Angle_Directory_map["Theta_rel_pFDpCD_Directory"];
    string hTheta_rel_VS_W_pFDpCD_Dir = directories.Angle_Directory_map["Theta_rel_pFDpCD_Directory"];

    // Phi_rel --------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Phi_rel histograms
    THStack *sPhi_rel_pFDpCD = new THStack("#phi_{rel} (pFDpCD)", "#phi_{rel} of relative 3-momentum (pFDpCD);#phi_{rel} [#circ];");

    TH1D *hPhi_rel_All_Int_pFDpCD =
        new TH1D("#phi_{rel} (All Int., pFDpCD)", "#phi_{rel} of relative 3-momentum (All Int., pFDpCD);#phi_{rel} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_rel_QEL_pFDpCD =
        new TH1D("#phi_{rel} (QEL Only, pFDpCD)", "#phi_{rel} of relative 3-momentum (QEL Only, pFDpCD);#phi_{rel} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_rel_MEC_pFDpCD =
        new TH1D("#phi_{rel} (MEC Only, pFDpCD)", "#phi_{rel} of relative 3-momentum (MEC Only, pFDpCD);#phi_{rel} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_rel_RES_pFDpCD =
        new TH1D("#phi_{rel} (RES Only, pFDpCD)", "#phi_{rel} of relative 3-momentum (RES Only, pFDpCD);#phi_{rel} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_rel_DIS_pFDpCD =
        new TH1D("#phi_{rel} (DIS Only, pFDpCD)", "#phi_{rel} of relative 3-momentum (DIS Only, pFDpCD);#phi_{rel} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_rel_All_Int_pFDpCD_Dir = directories.Angle_Directory_map["Phi_rel_pFDpCD_Directory"];
    string hPhi_rel_QEL_pFDpCD_Dir = directories.Angle_Directory_map["Phi_rel_pFDpCD_Directory"];
    string hPhi_rel_MEC_pFDpCD_Dir = directories.Angle_Directory_map["Phi_rel_pFDpCD_Directory"];
    string hPhi_rel_RES_pFDpCD_Dir = directories.Angle_Directory_map["Phi_rel_pFDpCD_Directory"];
    string hPhi_rel_DIS_pFDpCD_Dir = directories.Angle_Directory_map["Phi_rel_pFDpCD_Directory"];

    TH2D *hPhi_rel_VS_P_rel_pFDpCD = new TH2D("#phi_{rel} vs. P_{rel} (All Int., pFDpCD, CD)", "#phi_{rel} vs. P_{rel} (All Int., pFDpCD, CD);P_{rel} [GeV/c];#phi_{rel} [#circ]",
                                              numTH2Dbins_Ang_Plots, 0, beamE * 1.1, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH2D *hPhi_rel_VS_W_pFDpCD =
        new TH2D("#phi_{rel} vs. W (All Int., pFDpCD, CD)", "#phi_{rel} vs. W (All Int., pFDpCD, CD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#phi_{rel} [#circ]",
                 numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_rel_VS_P_rel_pFDpCD_Dir = directories.Angle_Directory_map["Phi_rel_pFDpCD_Directory"];
    string hPhi_rel_VS_W_pFDpCD_Dir = directories.Angle_Directory_map["Phi_rel_pFDpCD_Directory"];

    // Theta_rel vs. Phi_rel ------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_rel vs. Phi_rel histograms
    TH2D *hTheta_rel_VS_Phi_rel_pFDpCD = new TH2D("#theta_{rel} vs. #phi_{rel} of relative 3-momentum (All Int., pFDpCD)",
                                                  "#theta_{rel} vs. #phi_{rel} of relative 3-momentum (All Int., pFDpCD);#phi_{rel} [#circ];#theta_{rel} [#circ]",
                                                  numTH2Dbins_Nucleon_Ang_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_Ang_Plots, 30, 155);
    string hTheta_rel_VS_Phi_rel_pFDpCD_Dir = directories.Angle_Directory_map["Theta_rel_VS_Phi_rel_pFDpCD_Directory"];

    // Theta_p_e_p_tot (pFDpCD, CD & FD) ------------------------------------------------------------------------------------------------------------------------------------

    // Theta_p_e_p_tot (pFDpCD, CD & FD)
    THStack *sTheta_p_e_p_tot_pFDpCD = new THStack("#theta_{#vec{P}_{e},#vec{P}_{tot}} (All Int., pFDpCD)",
                                                   "#theta_{#vec{P}_{e},#vec{P}_{tot}} - Opening Angle Between #vec{P}_{e} and #vec{P}_{tot}=#vec{P}_{pFD}+#vec{P}_{pCD} "
                                                   "(All Int., pFDpCD);#theta_{#vec{P}_{e},#vec{P}_{tot}} [#circ];");
    TH1D *hTheta_p_e_p_tot_pFDpCD = new TH1D("#theta_{#vec{P}_{e},#vec{P}_{tot}} (All Int., pFDpCD)",
                                             "#theta_{#vec{P}_{e},#vec{P}_{tot}} - Opening Angle Between #vec{P}_{e} and #vec{P}_{tot}=#vec{P}_{pFD}+#vec{P}_{pCD} "
                                             "(All Int., pFDpCD);#theta_{#vec{P}_{e},#vec{P}_{tot}} [#circ];",
                                             numTH1Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_p_e_p_tot_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];

    // Theta_p_e_p_tot vs. W (pFDpCD, CD & FD) ------------------------------------------------------------------------------------------------------------------------------

    // Theta_p_e_p_tot vs. W (pFDpCD)
    TH2D *hTheta_p_e_p_tot_vs_W_pFDpCD = new TH2D("#theta_{#vec{P}_{e},#vec{P}_{tot}} vs. W (All Int., pFDpCD)",
                                                  "#theta_{#vec{P}_{e},#vec{P}_{tot}} vs. W (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];"
                                                  "#theta_{#vec{P}_{e},#vec{P}_{tot}} [#circ];",
                                                  numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_p_e_p_tot_vs_W_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];

    // Theta_q_p_tot (pFDpCD, CD & FD) --------------------------------------------------------------------------------------------------------------------------------------

    // Theta_q_p (pFDpCD, CD & FD)

    // Theta_q_p_tot (CD & FD)
    THStack *sTheta_q_p_tot_pFDpCD = new THStack("#theta_{#vec{q},#vec{P}_{tot}} (All Int., pFDpCD)",
                                                 "#theta_{#vec{q},#vec{P}_{tot}} - Opening Angle Between #vec{q} and #vec{P}_{tot}=#vec{P}_{pFD}+#vec{P}_{pCD} "
                                                 "(All Int., pFDpCD);#theta_{#vec{q},#vec{P}_{tot}} [#circ];");
    TH1D *hTheta_q_p_tot_pFDpCD = new TH1D("#theta_{#vec{q},#vec{P}_{tot}} (All Int., pFDpCD)",
                                           "#theta_{#vec{q},#vec{P}_{tot}} - Opening Angle Between #vec{q} and #vec{P}_{tot}=#vec{P}_{pFD}+#vec{P}_{pCD} "
                                           "(All Int., pFDpCD);#theta_{#vec{q},#vec{P}_{tot}} [#circ];",
                                           numTH1Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_q_p_tot_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];

    // Theta_q_p_max (CD & FD)
    TH1D *hTheta_q_p_max_pFDpCD = new TH1D("#theta_{#vec{q},#vec{P}_{max}} (All Int., pFDpCD)",
                                           "#theta_{#vec{q},#vec{P}_{max}} - Opening Angle Between #vec{q} and #vec{P}_{max} "
                                           "(All Int., pFDpCD);#theta_{#vec{q},#vec{P}_{max}} [#circ];",
                                           numTH1Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_q_p_max_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];

    // Theta_P_pL_minus_q_pR and Theta_q_p_R (pFDpCD, CD & FD)
    THStack *sTheta_P_pL_minus_q_pR_pFDpCD = new THStack("#theta_{#vec{P}_{pL}-#vec{q},#vec{P}_{pR}} (All Int., pFDpCD)",
                                                         "#theta_{#vec{P}_{pL}-#vec{q},#vec{P}_{pR}} - Opening Angle Between #vec{P}_{pL}-#vec{q} and #vec{P}_{pR} (All Int., pFDpCD);"
                                                         "#theta_{#vec{P}_{pL}-#vec{q},#vec{P}_{pR}} [#circ];");
    TH1D *hTheta_P_pL_minus_q_pR_pFDpCD = new TH1D("#theta_{#vec{P}_{pL}-#vec{q},#vec{P}_{pR}} (All Int., pFDpCD)",
                                                   "#theta_{#vec{P}_{pL}-#vec{q},#vec{P}_{pR}} - Opening Angle Between #vec{P}_{pL}-#vec{q} and #vec{P}_{pR} (All Int., pFDpCD)"
                                                   ";#theta_{#vec{P}_{pL}-#vec{q},#vec{P}_{pR}} [#circ]",
                                                   numTH1Dbins_Ang_Plots, Opening_Ang_wide_lboundary, Opening_Ang_wide_uboundary);
    string hTheta_P_pL_minus_q_pR_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];

    // Theta_q_p_L and Theta_q_p_R (pFDpCD, CD & FD)
    THStack *sTheta_q_p_L_R_pFDpCD = new THStack("#theta_{#vec{q},#vec{P}} (All Int., pFDpCD)",
                                                 "#theta_{#vec{q},#vec{P}} - Opening Angle Between #vec{q} and #vec{P} (All Int., pFDpCD);#theta_{#vec{q},#vec{P}} [#circ];");
    TH1D *hTheta_q_p_L_pFDpCD = new TH1D("#theta_{#vec{q},#vec{P}_{pL}} (All Int., pFDpCD)",
                                         "#theta_{#vec{q},#vec{P}_{pL}} - Opening Angle Between #vec{q} and Leading Proton #vec{P}_{pL} (All Int., pFDpCD)"
                                         ";#theta_{#vec{q},#vec{P}_{pL}} [#circ]",
                                         numTH1Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    TH1D *hTheta_q_p_R_pFDpCD = new TH1D("#theta_{#vec{q},#vec{P}_{pR}} (All Int., pFDpCD)",
                                         "#theta_{#vec{q},#vec{P}_{pR}} - Opening Angle Between #vec{q} and Recoil Proton #vec{P}_{pR} (All Int., pFDpCD)"
                                         ";#theta_{#vec{q},#vec{P}_{pR}} [#circ]",
                                         numTH1Dbins_Ang_Plots, 0, 180);
    string hTheta_q_p_L_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];
    string hTheta_q_p_R_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];

    // Theta_q_pFD and Theta_q_pCD (pFDpCD, CD & FD)
    THStack *sTheta_q_p_pFDpCD = new THStack("#theta_{#vec{q},#vec{P}} (All Int., pFDpCD)",
                                             "#theta_{#vec{q},#vec{P}} - Opening Angle Between #vec{q} and #vec{P} (All Int., pFDpCD);#theta_{#vec{q},#vec{P}} [#circ];");
    TH1D *hTheta_q_pFD_pFDpCD = new TH1D("#theta_{#vec{q},#vec{P}_{pFD}} (All Int., pFDpCD)",
                                         "#theta_{#vec{q},#vec{P}_{pFD}} - Opening Angle Between #vec{q} and FD Proton #vec{P}_{pFD} (All Int., pFDpCD)"
                                         ";#theta_{#vec{q},#vec{P}_{pFD}} [#circ]",
                                         numTH1Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    TH1D *hTheta_q_pCD_pFDpCD = new TH1D("#theta_{#vec{q},#vec{P}_{pCD}} (All Int., pFDpCD)",
                                         "#theta_{#vec{q},#vec{P}_{pCD}} - Opening Angle Between #vec{q} and CD Proton #vec{P}_{pCD} (All Int., pFDpCD)"
                                         ";#theta_{#vec{q},#vec{P}_{pCD}} [#circ]",
                                         numTH1Dbins_Ang_Plots, 0, 180);
    string hTheta_q_pFD_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];
    string hTheta_q_pCD_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];

    // Theta_q_p_tot vs. W (pFDpCD, CD & FD) --------------------------------------------------------------------------------------------------------------------------------

    // Theta_q_p_tot vs. W (CD & FD)
    TH2D *hTheta_q_p_tot_vs_W_pFDpCD = new TH2D("#theta_{#vec{q},#vec{P}_{tot}} vs. W (All Int., pFDpCD)",
                                                "#theta_{#vec{q},#vec{P}_{tot}} vs. W (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];"
                                                "#theta_{#vec{q},#vec{P}_{tot}} [#circ];",
                                                numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_q_p_tot_vs_W_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];

    // Theta_P_pL_minus_q_pR vs. W (CD & FD)
    TH2D *hTheta_P_pL_minus_q_pR_vs_W_pFDpCD = new TH2D("#theta_{#vec{P}_{pL}-#vec{q},#vec{P}_{pR}} vs. W (All Int., pFDpCD)",
                                                        "#theta_{#vec{P}_{pL}-#vec{q},#vec{P}_{pR}} vs. W (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];"
                                                        "#theta_{#vec{P}_{pL}-#vec{q},#vec{P}_{pR}} [#circ];",
                                                        numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Opening_Ang_wide_lboundary, Opening_Ang_wide_uboundary);
    string hTheta_P_pL_minus_q_pR_vs_W_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];

    // Theta_q_p_L vs. W (CD & FD)
    TH2D *hTheta_q_p_L_vs_W_pFDpCD = new TH2D("#theta_{#vec{q},#vec{P}_{pL}} vs. W (All Int., pFDpCD)",
                                              "#theta_{#vec{q},#vec{P}_{pL}} vs. W (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];"
                                              "#theta_{#vec{q},#vec{P}_{pL}} [#circ];",
                                              numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_q_p_L_vs_W_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];

    // Theta_q_p_R vs. W (CD & FD)
    TH2D *hTheta_q_p_R_vs_W_pFDpCD = new TH2D("#theta_{#vec{q},#vec{P}_{pR}} vs. W (All Int., pFDpCD)",
                                              "#theta_{#vec{q},#vec{P}_{pR}} vs. W (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];"
                                              "#theta_{#vec{q},#vec{P}_{pR}} [#circ];",
                                              numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, 0, 180);
    string hTheta_q_p_R_vs_W_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];

    // Theta_q_pFD vs. W (CD & FD)
    TH2D *hTheta_q_pFD_vs_W_pFDpCD = new TH2D("#theta_{#vec{q},#vec{P}_{pFD}} vs. W (All Int., pFDpCD)",
                                              "#theta_{#vec{q},#vec{P}_{pFD}} vs. W (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];"
                                              "#theta_{#vec{q},#vec{P}_{pFD}} [#circ];",
                                              numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_q_pFD_vs_W_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];

    // Theta_q_pCD vs. W (CD & FD)
    TH2D *hTheta_q_pCD_vs_W_pFDpCD = new TH2D("#theta_{#vec{q},#vec{P}_{pCD}} vs. W (All Int., pFDpCD)",
                                              "#theta_{#vec{q},#vec{P}_{pCD}} vs. W (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];"
                                              "#theta_{#vec{q},#vec{P}_{pCD}} [#circ];",
                                              numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, 0, 180);
    string hTheta_q_pCD_vs_W_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];

    // Theta_q_p vs |P_p|/|q| (pFDpCD, CD & FD) ---------------------------------------------------------------------------------------------------------------------------

    // Theta_q_p vs |P_p|/|q| (CD & FD)

    // Theta_q_p_L vs |P_p_L|/|q|
    TH2D *hTheta_q_p_L_vs_p_L_q_pFDpCD = new TH2D("#theta_{#vec{q},#vec{P}_{pL}} vs. r_{pL} (All Int., pFDpCD)",
                                                  "#theta_{#vec{q},#vec{P}_{pL}} vs. r_{pL}=|#vec{P}_{pL}|/|#vec{q}| (All Int., pFDpCD);"
                                                  "r_{pL};#theta_{#vec{q},#vec{P}_{pL}} [#circ]",
                                                  numTH2Dbins_Ang_Plots, 0, 1.05, numTH2Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_q_p_L_vs_p_L_q_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];

    // Theta_q_p vs Theta_q_p (pFDpCD, CD & FD) -------------------------------------------------------------------------------------------------------------------------

    // Theta_q_p_L vs Theta_q_p_R
    TH2D *hTheta_q_p_L_vs_Theta_q_p_R_pFDpCD = new TH2D("#theta_{#vec{q},#vec{P}_{pL}} vs. #theta_{#vec{q},#vec{P}_{pR}} (All Int., pFDpCD)",
                                                        "#theta_{#vec{q},#vec{P}_{pL}} vs. #theta_{#vec{q},#vec{P}_{pR}} (All Int., pFDpCD);"
                                                        "#theta_{#vec{q},#vec{P}_{pL}};#theta_{#vec{q},#vec{P}_{pR}} [#circ]",
                                                        numTH2Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary, numTH2Dbins_Ang_Plots, 0, 180);
    string hTheta_q_p_L_vs_Theta_q_p_R_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];

    // Theta_q_pFD vs Theta_q_pCD
    TH2D *hTheta_q_pFD_vs_Theta_q_pCD_pFDpCD = new TH2D("#theta_{#vec{q},#vec{P}_{pFD}} vs. #theta_{#vec{q},#vec{P}_{pCD}} (All Int., pFDpCD)",
                                                        "#theta_{#vec{q},#vec{P}_{pFD}} vs. #theta_{#vec{q},#vec{P}_{pCD}} (All Int., pFDpCD);"
                                                        "#theta_{#vec{q},#vec{P}_{pFD}} [#circ];#theta_{#vec{q},#vec{P}_{pCD}} [#circ]",
                                                        numTH2Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary, numTH2Dbins_Ang_Plots, 0, 180);
    string hTheta_q_pFD_vs_Theta_q_pCD_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];

    // Theta_pFD_pCD (pFDpCD, CD & FD) --------------------------------------------------------------------------------------------------------------------------------------

    // Theta_pFD_pCD (CD & FD)
    THStack *sTheta_pFD_pCD_pFDpCD = new THStack("#theta_{pFD,pCD} (All Int., pFDpCD)", "#theta_{pFD,pCD} - Opening Angle Between Protons (pFDpCD);#theta_{pFD,pCD} [#circ];");
    TH1D *hTheta_pFD_pCD_All_Int_pFDpCD =
        new TH1D("#theta_{pFD,pCD} (All Int., pFDpCD)", "#theta_{pFD,pCD} - Opening Angle Between Protons (All Int., pFDpCD);#theta_{pFD,pCD} [#circ];", numTH1Dbins_Ang_Plots, 0, 180);
    TH1D *hTheta_pFD_pCD_QEL_pFDpCD =
        new TH1D("#theta_{pFD,pCD} (QEL only, pFDpCD)", "#theta_{pFD,pCD} - Opening Angle Between Protons (QEL only, pFDpCD);#theta_{pFD,pCD} [#circ];", numTH1Dbins_Ang_Plots, 0, 180);
    TH1D *hTheta_pFD_pCD_MEC_pFDpCD =
        new TH1D("#theta_{pFD,pCD} (MEC only, pFDpCD)", "#theta_{pFD,pCD} - Opening Angle Between Protons (MEC only, pFDpCD);#theta_{pFD,pCD} [#circ];", numTH1Dbins_Ang_Plots, 0, 180);
    TH1D *hTheta_pFD_pCD_RES_pFDpCD =
        new TH1D("#theta_{pFD,pCD} (RES only, pFDpCD)", "#theta_{pFD,pCD} - Opening Angle Between Protons (RES only, pFDpCD);#theta_{pFD,pCD} [#circ];", numTH1Dbins_Ang_Plots, 0, 180);
    TH1D *hTheta_pFD_pCD_DIS_pFDpCD =
        new TH1D("#theta_{pFD,pCD} (DIS only, pFDpCD)", "#theta_{pFD,pCD} - Opening Angle Between Protons (DIS only, pFDpCD);#theta_{pFD,pCD} [#circ];", numTH1Dbins_Ang_Plots, 0, 180);
    string sTheta_pFD_pCD_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];
    string hTheta_pFD_pCD_All_Int_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_by_interaction_pFDpCD_Directory"];
    string hTheta_pFD_pCD_QEL_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_by_interaction_pFDpCD_Directory"];
    string hTheta_pFD_pCD_MEC_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_by_interaction_pFDpCD_Directory"];
    string hTheta_pFD_pCD_RES_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_by_interaction_pFDpCD_Directory"];
    string hTheta_pFD_pCD_DIS_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_by_interaction_pFDpCD_Directory"];

    // Theta_pFD_pCD vs. W (pFDpCD, CD & FD) --------------------------------------------------------------------------------------------------------------------------------

    // Theta_pFD_pCD vs. W (CD & FD)
    TH2D *hTheta_pFD_pCD_vs_W_pFDpCD = new TH2D("#theta_{pFD,pCD} vs. W (All Int., pFDpCD)",
                                                "#theta_{pFD,pCD} vs. W (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#theta_{pFD,pCD} [#circ];",
                                                numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, 0, 180);
    string hTheta_pFD_pCD_vs_W_pFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_pFDpCD_Directory"];

    // Theta_pFD_vs_Theta_pCD for Theta_pFD_pCD < 20 (CD & FD) ------------------------------------------------------------------------------------------------------

    // Theta_pFD_vs_Theta_pCD for Theta_pFD_pCD < 20 (CD & FD)
    TH2D *hTheta_pFD_vs_theta_pCD_for_Theta_pFD_pCD_20_pFDpCD = new TH2D("#theta_{pFD} vs. #theta_{pCD} for #theta_{pFD,pCD}<20#circ (All Int., pFDpCD)",
                                                                         "#theta_{pFD} vs. #theta_{pCD} for #theta_{pFD,pCD}<20#circ (All Int., pFDpCD);"
                                                                         "#theta_{pCD} [#circ];#theta_{pFD} [#circ];",
                                                                         numTH2Dbins_Ang_Plots, 30, 50, numTH2Dbins_Ang_Plots, 30, 50);
    string hTheta_pFD_vs_theta_pCD_for_Theta_pFD_pCD_20_pFDpCD_Dir = directories.Angle_Directory_map["Double_detection_pFDpCD_Directory"];

    // dPhi_pFD_pCD for Theta_pFD_pCD < 20 (pFDpCD, CD & FD) ----------------------------------------------------------------------------------------------------------------

    // dPhi_pFD_pCD for Theta_pFD_pCD < 20 (CD & FD)
    TH1D *hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_pFDpCD = new TH1D("#Delta#phi for #theta_{pFD,pCD}<20#circ (All Int., pFDpCD)",
                                                               "#Delta#phi for #theta_{pFD,pCD}<20#circ (All Int., pFDpCD);"
                                                               "#Delta#phi = #phi_{pFD} - #phi_{pCD} [#circ];",
                                                               50, Phi_lboundary, Phi_uboundary);
    string hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_pFDpCD_Dir = directories.Angle_Directory_map["Double_detection_pFDpCD_Directory"];

    TH1D *hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_ZOOMIN_pFDpCD = new TH1D("#Delta#phi for #theta_{pFD,pCD}<20#circ - ZOOMIN (All Int., pFDpCD)",
                                                                      "#Delta#phi for #theta_{pFD,pCD}<20#circ - ZOOMIN (All Int., pFDpCD);"
                                                                      "#Delta#phi = #phi_{pFD} - #phi_{pCD} [#circ];",
                                                                      50, -40, 40);
    string hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_ZOOMIN_pFDpCD_Dir = directories.Angle_Directory_map["Double_detection_pFDpCD_Directory"];

    // Theta_pFD_vs_Theta_pCD for every Theta_pFD_pCD (pFDpCD, CD & FD) -----------------------------------------------------------------------------------------------------

    // Theta_pFD_vs_Theta_pCD for every Theta_pFD_pCD (CD & FD)
    TH2D *hTheta_pFD_vs_theta_pCD_forall_Theta_pFD_pCD_pFDpCD = new TH2D("#theta_{pFD} vs. #theta_{pFD} #forall#theta_{pFD,pCD} (All Int., pFDpCD)",
                                                                         "#theta_{pFD} vs. #theta_{pCD} for every #theta_{pFD,pCD} (All Int., pFDpCD);"
                                                                         "#theta_{pCD} [#circ];#theta_{pFD} [#circ];",
                                                                         numTH2Dbins_Ang_Plots, 30, 50, numTH2Dbins_Ang_Plots, 30, 50);
    string hTheta_pFD_vs_theta_pCD_forall_Theta_pFD_pCD_pFDpCD_Dir = directories.Angle_Directory_map["Double_detection_pFDpCD_Directory"];

    // dPhi_pFD_pCD for every Theta_pFD_pCD (pFDpCD, CD & FD) ---------------------------------------------------------------------------------------------------------------

    // dPhi_pFD_pCD for every Theta_pFD_pCD (CD & FD)
    TH1D *hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_pFDpCD = new TH1D("#Delta#phi #forall#theta_{pFD,pCD} (All Int., pFDpCD)",
                                                                "#Delta#phi for every #theta_{pFD,pCD} (All Int., pFDpCD);"
                                                                "#Delta#phi = #phi_{pFD} - #phi_{pCD} [#circ];",
                                                                50, Phi_lboundary, Phi_uboundary);
    string hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_pFDpCD_Dir = directories.Angle_Directory_map["Double_detection_pFDpCD_Directory"];

    TH1D *hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_ZOOMIN_pFDpCD = new TH1D("#Delta#phi #forall#theta_{pFD,pCD} - ZOOMIN (All Int., pFDpCD)",
                                                                       "#Delta#phi for every #theta_{pFD,pCD} - ZOOMIN(All Int., pFDpCD);"
                                                                       "#Delta#phi = #phi_{pFD} - #phi_{pCD} [#circ];",
                                                                       50, -40, 40);
    string hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_ZOOMIN_pFDpCD_Dir = directories.Angle_Directory_map["Double_detection_pFDpCD_Directory"];

    TH1D *hdPhi_pFD_pCD_for_small_dTheta_pFDpCD = new TH1D("#Delta#phi for small #Delta#theta_{pFD/pCD} (All Int., pFDpCD)",
                                                           "#Delta#phi for small #Delta#theta_{pFD/pCD} = |#theta_{pFD/pCD}-40#circ|;"
                                                           "#Delta#phi = #phi_{pFD} - #phi_{pCD} [#circ];",
                                                           50, Phi_lboundary, Phi_uboundary);
    string hdPhi_pFD_pCD_for_small_dTheta_pFDpCD_Dir = directories.Angle_Directory_map["Double_detection_pFDpCD_Directory"];

    TH1D *hdPhi_pFD_pCD_for_small_dTheta_ZOOMIN_pFDpCD = new TH1D("#Delta#phi for small #Delta#theta_{pFD/pCD} - ZOOMIN (All Int., pFDpCD)",
                                                                  "#Delta#phi for small #Delta#theta_{pFD/pCD} = |#theta_{pFD/pCD}-40#circ| - ZOOMIN;"
                                                                  "#Delta#phi = #phi_{pFD} - #phi_{pCD} [#circ];",
                                                                  50, -40, 40);
    string hdPhi_pFD_pCD_for_small_dTheta_ZOOMIN_pFDpCD_Dir = directories.Angle_Directory_map["Double_detection_pFDpCD_Directory"];

    // Ghost tracks handling (CD only) --------------------------------------------------------------------------------------------------------------------------------------

    // Theta_pFD_pCD vs. TOFpFD-TOFpCD plots (pFDpCD)
    hPlot2D hTheta_pFD_pCD_VS_ToFpFD_ToFpCD_AC_pFDpCD =
        hPlot2D("pFDpCD", "CD-CTOF", "#theta_{pFD,pCD} vs. ToF_{pFD}-ToF_{pCD} AC", "#theta_{pFD,pCD} vs. ToF_{pFD}-ToF_{pCD} AC", "#theta_{pFD,pCD} [#circ]", "ToF_{pFD}-ToF_{pCD} [ns]",
                directories.Angle_Directory_map["CToF_hits_pFDpCD_Directory"], "01_Theta_pFD_pCD_VS_ToFpFD_ToFpCD_AC_pFDpCD", 0, 180, -3, 3, numTH2Dbins_Ang_Plots, numTH2Dbins_Ang_Plots);

    // Theta_pFD_pCD vs. positionpFD-positionpCD plots (pFDpCD)
    hPlot2D hTheta_pFD_pCD_VS_PospFD_PospCD_AC_pFDpCD =
        hPlot2D("pFDpCD", "CD-CTOF", "#theta_{pFD,pCD} vs. Position_{pFD}-Position_{pCD} AC", "#theta_{pFD,pCD} vs. Position_{pFD}-Position_{pCD} AC", "#theta_{pFD,pCD} [#circ]",
                "Position_{pFD}-Position_{pCD} [cm]", directories.Angle_Directory_map["CToF_hits_pFDpCD_Directory"], "02_Theta_p1_p2_VS_Pos1-Pos2_AC_pFDpCD", 0, 180, 0, 100,
                numTH2Dbins_Ang_Plots, numTH2Dbins_Ang_Plots);

    // Other angle plots (nFDpCD)

    // Nucleons' angles plots (nFDpCD)

    // Theta_nFD ------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_nFD histograms
    THStack *sTheta_nFD_nFDpCD_FD = new THStack("#theta_{nFD} (nFDpCD)", "#theta_{nFD} of FD neutron (nFDpCD);#theta_{nFD} [#circ];");

    TH1D *hTheta_nFD_All_Int_nFDpCD_FD =
        new TH1D("#theta_{nFD} (All Int., nFDpCD)", "#theta_{nFD} of FD neutron (All Int., nFDpCD);#theta_{nFD} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_nFD_QEL_nFDpCD_FD =
        new TH1D("#theta_{nFD} (QEL Only, nFDpCD)", "#theta_{nFD} of FD neutron (QEL Only, nFDpCD);#theta_{nFD} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_nFD_MEC_nFDpCD_FD =
        new TH1D("#theta_{nFD} (MEC Only, nFDpCD)", "#theta_{nFD} of FD neutron (MEC Only, nFDpCD);#theta_{nFD} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_nFD_RES_nFDpCD_FD =
        new TH1D("#theta_{nFD} (RES Only, nFDpCD)", "#theta_{nFD} of FD neutron (RES Only, nFDpCD);#theta_{nFD} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH1D *hTheta_nFD_DIS_nFDpCD_FD =
        new TH1D("#theta_{nFD} (DIS Only, nFDpCD)", "#theta_{nFD} of FD neutron (DIS Only, nFDpCD);#theta_{nFD} [#circ];", numTH1Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_nFD_All_Int_nFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_nFD_nFDpCD_Directory"];
    string hTheta_nFD_QEL_nFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_nFD_nFDpCD_Directory"];
    string hTheta_nFD_MEC_nFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_nFD_nFDpCD_Directory"];
    string hTheta_nFD_RES_nFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_nFD_nFDpCD_Directory"];
    string hTheta_nFD_DIS_nFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_nFD_nFDpCD_Directory"];

    TH2D *hTheta_nFD_VS_P_nFD_nFDpCD_FD = new TH2D("#theta_{nFD} vs. P_{nFD} (All Int., nFDpCD, FD)", "#theta_{nFD} vs. P_{nFD} (All Int., nFDpCD, FD);P_{nFD} [GeV/c];#theta_{nFD} [#circ]",
                                                   numTH2Dbins_Ang_Plots, 0, beamE * 1.1, numTH2Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    TH2D *hTheta_nFD_VS_W_nFDpCD_FD =
        new TH2D("#theta_{nFD} vs. W (All Int., nFDpCD, FD)", "#theta_{nFD} vs. W (All Int., nFDpCD, FD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#theta_{nFD} [#circ]",
                 numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_nFD_VS_P_nFD_nFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_nFD_nFDpCD_Directory"];
    string hTheta_nFD_VS_W_nFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_nFD_nFDpCD_Directory"];

    // Phi_nFD --------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Phi_nFD histograms
    THStack *sPhi_nFD_nFDpCD_FD = new THStack("#phi_{nFD} (nFDpCD)", "#phi_{nFD} of FD neutron (nFDpCD);#phi_{nFD} [#circ];");

    TH1D *hPhi_nFD_All_Int_nFDpCD_FD =
        new TH1D("#phi_{nFD} (All Int., nFDpCD)", "#phi_{nFD} of FD neutron (All Int., nFDpCD);#phi_{nFD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_nFD_QEL_nFDpCD_FD =
        new TH1D("#phi_{nFD} (QEL Only, nFDpCD)", "#phi_{nFD} of FD neutron (QEL Only, nFDpCD);#phi_{nFD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_nFD_MEC_nFDpCD_FD =
        new TH1D("#phi_{nFD} (MEC Only, nFDpCD)", "#phi_{nFD} of FD neutron (MEC Only, nFDpCD);#phi_{nFD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_nFD_RES_nFDpCD_FD =
        new TH1D("#phi_{nFD} (RES Only, nFDpCD)", "#phi_{nFD} of FD neutron (RES Only, nFDpCD);#phi_{nFD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_nFD_DIS_nFDpCD_FD =
        new TH1D("#phi_{nFD} (DIS Only, nFDpCD)", "#phi_{nFD} of FD neutron (DIS Only, nFDpCD);#phi_{nFD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_nFD_All_Int_nFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_nFD_nFDpCD_Directory"];
    string hPhi_nFD_QEL_nFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_nFD_nFDpCD_Directory"];
    string hPhi_nFD_MEC_nFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_nFD_nFDpCD_Directory"];
    string hPhi_nFD_RES_nFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_nFD_nFDpCD_Directory"];
    string hPhi_nFD_DIS_nFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_nFD_nFDpCD_Directory"];

    TH2D *hPhi_nFD_VS_P_nFD_nFDpCD_FD = new TH2D("#phi_{nFD} vs. P_{nFD} (All Int., nFDpCD, FD)", "#phi_{nFD} vs. P_{nFD} (All Int., nFDpCD, FD);P_{nFD} [GeV/c];#phi_{nFD} [#circ]",
                                                 numTH2Dbins_Ang_Plots, 0, beamE * 1.1, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH2D *hPhi_nFD_VS_W_nFDpCD_FD =
        new TH2D("#phi_{nFD} vs. W (All Int., nFDpCD, FD)", "#phi_{nFD} vs. W (All Int., nFDpCD, FD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#phi_{nFD} [#circ]",
                 numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_nFD_VS_P_nFD_nFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_nFD_nFDpCD_Directory"];
    string hPhi_nFD_VS_W_nFDpCD_FD_Dir = directories.Angle_Directory_map["Phi_nFD_nFDpCD_Directory"];

    // Theta_nFD vs. Phi_nFD ------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_nFD vs. Phi_nFD histograms
    TH2D *hTheta_nFD_VS_Phi_nFD_nFDpCD_FD =
        new TH2D("#theta_{nFD} vs. #phi_{nFD} of FD neutron (All Int., nFDpCD)", "#theta_{nFD} vs. #phi_{nFD} of FD neutron (All Int., nFDpCD);#phi_{nFD} [#circ];#theta_{nFD} [#circ]",
                 numTH2Dbins_Nucleon_Ang_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_Ang_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_nFD_VS_Phi_nFD_nFDpCD_FD_Dir = directories.Angle_Directory_map["Theta_nFD_VS_Phi_nFD_nFDpCD_Directory"];

    // Theta_pCD ------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_pCD histograms
    THStack *sTheta_pCD_nFDpCD_CD = new THStack("#theta_{pCD} (nFDpCD)", "#theta_{pCD} of CD proton (nFDpCD);#theta_{pCD} [#circ];");

    TH1D *hTheta_pCD_All_Int_nFDpCD_CD = new TH1D("#theta_{pCD} (All Int., nFDpCD)", "#theta_{pCD} of CD proton (All Int., nFDpCD);#theta_{pCD} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    TH1D *hTheta_pCD_QEL_nFDpCD_CD = new TH1D("#theta_{pCD} (QEL Only, nFDpCD)", "#theta_{pCD} of CD proton (QEL Only, nFDpCD);#theta_{pCD} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    TH1D *hTheta_pCD_MEC_nFDpCD_CD = new TH1D("#theta_{pCD} (MEC Only, nFDpCD)", "#theta_{pCD} of CD proton (MEC Only, nFDpCD);#theta_{pCD} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    TH1D *hTheta_pCD_RES_nFDpCD_CD = new TH1D("#theta_{pCD} (RES Only, nFDpCD)", "#theta_{pCD} of CD proton (RES Only, nFDpCD);#theta_{pCD} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    TH1D *hTheta_pCD_DIS_nFDpCD_CD = new TH1D("#theta_{pCD} (DIS Only, nFDpCD)", "#theta_{pCD} of CD proton (DIS Only, nFDpCD);#theta_{pCD} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    string hTheta_pCD_All_Int_nFDpCD_CD_Dir = directories.Angle_Directory_map["Theta_pCD_nFDpCD_Directory"];
    string hTheta_pCD_QEL_nFDpCD_CD_Dir = directories.Angle_Directory_map["Theta_pCD_nFDpCD_Directory"];
    string hTheta_pCD_MEC_nFDpCD_CD_Dir = directories.Angle_Directory_map["Theta_pCD_nFDpCD_Directory"];
    string hTheta_pCD_RES_nFDpCD_CD_Dir = directories.Angle_Directory_map["Theta_pCD_nFDpCD_Directory"];
    string hTheta_pCD_DIS_nFDpCD_CD_Dir = directories.Angle_Directory_map["Theta_pCD_nFDpCD_Directory"];

    TH2D *hTheta_pCD_VS_P_pCD_nFDpCD_CD = new TH2D("#theta_{pCD} vs. P_{pCD} (All Int., nFDpCD, CD)", "#theta_{pCD} vs. P_{pCD} (All Int., nFDpCD, CD);P_{pCD} [GeV/c];#theta_{pCD} [#circ]",
                                                   numTH2Dbins_Ang_Plots, 0, beamE * 1.1, numTH2Dbins_Ang_Plots, 30, 155);
    TH2D *hTheta_pCD_VS_W_nFDpCD_CD =
        new TH2D("#theta_{pCD} vs. W (All Int., nFDpCD, CD)", "#theta_{pCD} vs. W (All Int., nFDpCD, CD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#theta_{pCD} [#circ]",
                 numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, 30, 155);
    string hTheta_pCD_VS_P_pCD_nFDpCD_CD_Dir = directories.Angle_Directory_map["Theta_pCD_nFDpCD_Directory"];
    string hTheta_pCD_VS_W_nFDpCD_CD_Dir = directories.Angle_Directory_map["Theta_pCD_nFDpCD_Directory"];

    // Phi_pCD --------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Phi_pCD histograms
    THStack *sPhi_pCD_nFDpCD_CD = new THStack("#phi_{pCD} (nFDpCD)", "#phi_{pCD} of CD proton (nFDpCD);#phi_{pCD} [#circ];");

    TH1D *hPhi_pCD_All_Int_nFDpCD_CD =
        new TH1D("#phi_{pCD} (All Int., nFDpCD)", "#phi_{pCD} of CD proton (All Int., nFDpCD);#phi_{pCD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_pCD_QEL_nFDpCD_CD =
        new TH1D("#phi_{pCD} (QEL Only, nFDpCD)", "#phi_{pCD} of CD proton (QEL Only, nFDpCD);#phi_{pCD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_pCD_MEC_nFDpCD_CD =
        new TH1D("#phi_{pCD} (MEC Only, nFDpCD)", "#phi_{pCD} of CD proton (MEC Only, nFDpCD);#phi_{pCD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_pCD_RES_nFDpCD_CD =
        new TH1D("#phi_{pCD} (RES Only, nFDpCD)", "#phi_{pCD} of CD proton (RES Only, nFDpCD);#phi_{pCD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_pCD_DIS_nFDpCD_CD =
        new TH1D("#phi_{pCD} (DIS Only, nFDpCD)", "#phi_{pCD} of CD proton (DIS Only, nFDpCD);#phi_{pCD} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_pCD_All_Int_nFDpCD_CD_Dir = directories.Angle_Directory_map["Phi_pCD_nFDpCD_Directory"];
    string hPhi_pCD_QEL_nFDpCD_CD_Dir = directories.Angle_Directory_map["Phi_pCD_nFDpCD_Directory"];
    string hPhi_pCD_MEC_nFDpCD_CD_Dir = directories.Angle_Directory_map["Phi_pCD_nFDpCD_Directory"];
    string hPhi_pCD_RES_nFDpCD_CD_Dir = directories.Angle_Directory_map["Phi_pCD_nFDpCD_Directory"];
    string hPhi_pCD_DIS_nFDpCD_CD_Dir = directories.Angle_Directory_map["Phi_pCD_nFDpCD_Directory"];

    TH2D *hPhi_pCD_VS_P_pCD_nFDpCD_CD = new TH2D("#phi_{pCD} vs. P_{pCD} (All Int., nFDpCD, CD)", "#phi_{pCD} vs. P_{pCD} (All Int., nFDpCD, CD);P_{pCD} [GeV/c];#phi_{pCD} [#circ]",
                                                 numTH2Dbins_Ang_Plots, 0, beamE * 1.1, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH2D *hPhi_pCD_VS_W_nFDpCD_CD =
        new TH2D("#phi_{pCD} vs. W (All Int., nFDpCD, CD)", "#phi_{pCD} vs. W (All Int., nFDpCD, CD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#phi_{pCD} [#circ]",
                 numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_pCD_VS_P_pCD_nFDpCD_CD_Dir = directories.Angle_Directory_map["Phi_pCD_nFDpCD_Directory"];
    string hPhi_pCD_VS_W_nFDpCD_CD_Dir = directories.Angle_Directory_map["Phi_pCD_nFDpCD_Directory"];

    // Theta_pCD vs. Phi_pCD ------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_pCD vs. Phi_pCD histograms
    TH2D *hTheta_pCD_VS_Phi_pCD_nFDpCD_CD =
        new TH2D("#theta_{pCD} vs. #phi_{pCD} of CD proton (All Int., nFDpCD)", "#theta_{pCD} vs. #phi_{pCD} of CD proton (All Int., nFDpCD);#phi_{pCD} [#circ];#theta_{pCD} [#circ]",
                 numTH2Dbins_Nucleon_Ang_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_Ang_Plots, 30, 155);
    string hTheta_pCD_VS_Phi_pCD_nFDpCD_CD_Dir = directories.Angle_Directory_map["Theta_pCD_VS_Phi_pCD_nFDpCD_Directory"];

    // Theta_tot ------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_tot histograms
    THStack *sTheta_tot_nFDpCD = new THStack("#theta_{tot} (nFDpCD)", "#theta_{tot} of total 3-momentum (nFDpCD);#theta_{tot} [#circ];");

    TH1D *hTheta_tot_All_Int_nFDpCD = new TH1D("#theta_{tot} (All Int., nFDpCD)", "#theta_{tot} of total 3-momentum (All Int., nFDpCD);#theta_{tot} [#circ];", numTH1Dbins_Ang_Plots,
                                               Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    TH1D *hTheta_tot_QEL_nFDpCD = new TH1D("#theta_{tot} (QEL Only, nFDpCD)", "#theta_{tot} of total 3-momentum (QEL Only, nFDpCD);#theta_{tot} [#circ];", numTH1Dbins_Ang_Plots,
                                           Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    TH1D *hTheta_tot_MEC_nFDpCD = new TH1D("#theta_{tot} (MEC Only, nFDpCD)", "#theta_{tot} of total 3-momentum (MEC Only, nFDpCD);#theta_{tot} [#circ];", numTH1Dbins_Ang_Plots,
                                           Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    TH1D *hTheta_tot_RES_nFDpCD = new TH1D("#theta_{tot} (RES Only, nFDpCD)", "#theta_{tot} of total 3-momentum (RES Only, nFDpCD);#theta_{tot} [#circ];", numTH1Dbins_Ang_Plots,
                                           Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    TH1D *hTheta_tot_DIS_nFDpCD = new TH1D("#theta_{tot} (DIS Only, nFDpCD)", "#theta_{tot} of total 3-momentum (DIS Only, nFDpCD);#theta_{tot} [#circ];", numTH1Dbins_Ang_Plots,
                                           Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_tot_All_Int_nFDpCD_Dir = directories.Angle_Directory_map["Theta_tot_nFDpCD_Directory"];
    string hTheta_tot_QEL_nFDpCD_Dir = directories.Angle_Directory_map["Theta_tot_nFDpCD_Directory"];
    string hTheta_tot_MEC_nFDpCD_Dir = directories.Angle_Directory_map["Theta_tot_nFDpCD_Directory"];
    string hTheta_tot_RES_nFDpCD_Dir = directories.Angle_Directory_map["Theta_tot_nFDpCD_Directory"];
    string hTheta_tot_DIS_nFDpCD_Dir = directories.Angle_Directory_map["Theta_tot_nFDpCD_Directory"];

    TH2D *hTheta_tot_VS_P_tot_nFDpCD = new TH2D("#theta_{tot} vs. P_{tot} (All Int., nFDpCD, CD)", "#theta_{tot} vs. P_{tot} (All Int., nFDpCD, CD);P_{tot} [GeV/c];#theta_{tot} [#circ]",
                                                numTH2Dbins_Ang_Plots, 0, beamE * 1.1, numTH2Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    TH2D *hTheta_tot_VS_W_nFDpCD =
        new TH2D("#theta_{tot} vs. W (All Int., nFDpCD, CD)", "#theta_{tot} vs. W (All Int., nFDpCD, CD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#theta_{tot} [#circ]",
                 numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_tot_VS_P_tot_nFDpCD_Dir = directories.Angle_Directory_map["Theta_tot_nFDpCD_Directory"];
    string hTheta_tot_VS_W_nFDpCD_Dir = directories.Angle_Directory_map["Theta_tot_nFDpCD_Directory"];

    // Phi_tot --------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Phi_tot histograms
    THStack *sPhi_tot_nFDpCD = new THStack("#phi_{tot} (nFDpCD)", "#phi_{tot} of total 3-momentum (nFDpCD);#phi_{tot} [#circ];");

    TH1D *hPhi_tot_All_Int_nFDpCD =
        new TH1D("#phi_{tot} (All Int., nFDpCD)", "#phi_{tot} of total 3-momentum (All Int., nFDpCD);#phi_{tot} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_tot_QEL_nFDpCD =
        new TH1D("#phi_{tot} (QEL Only, nFDpCD)", "#phi_{tot} of total 3-momentum (QEL Only, nFDpCD);#phi_{tot} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_tot_MEC_nFDpCD =
        new TH1D("#phi_{tot} (MEC Only, nFDpCD)", "#phi_{tot} of total 3-momentum (MEC Only, nFDpCD);#phi_{tot} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_tot_RES_nFDpCD =
        new TH1D("#phi_{tot} (RES Only, nFDpCD)", "#phi_{tot} of total 3-momentum (RES Only, nFDpCD);#phi_{tot} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_tot_DIS_nFDpCD =
        new TH1D("#phi_{tot} (DIS Only, nFDpCD)", "#phi_{tot} of total 3-momentum (DIS Only, nFDpCD);#phi_{tot} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_tot_All_Int_nFDpCD_Dir = directories.Angle_Directory_map["Phi_tot_nFDpCD_Directory"];
    string hPhi_tot_QEL_nFDpCD_Dir = directories.Angle_Directory_map["Phi_tot_nFDpCD_Directory"];
    string hPhi_tot_MEC_nFDpCD_Dir = directories.Angle_Directory_map["Phi_tot_nFDpCD_Directory"];
    string hPhi_tot_RES_nFDpCD_Dir = directories.Angle_Directory_map["Phi_tot_nFDpCD_Directory"];
    string hPhi_tot_DIS_nFDpCD_Dir = directories.Angle_Directory_map["Phi_tot_nFDpCD_Directory"];

    TH2D *hPhi_tot_VS_P_tot_nFDpCD = new TH2D("#phi_{tot} vs. P_{tot} (All Int., nFDpCD, CD)", "#phi_{tot} vs. P_{tot} (All Int., nFDpCD, CD);P_{tot} [GeV/c];#phi_{tot} [#circ]",
                                              numTH2Dbins_Ang_Plots, 0, beamE * 1.1, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH2D *hPhi_tot_VS_W_nFDpCD =
        new TH2D("#phi_{tot} vs. W (All Int., nFDpCD, CD)", "#phi_{tot} vs. W (All Int., nFDpCD, CD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#phi_{tot} [#circ]",
                 numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_tot_VS_P_tot_nFDpCD_Dir = directories.Angle_Directory_map["Phi_tot_nFDpCD_Directory"];
    string hPhi_tot_VS_W_nFDpCD_Dir = directories.Angle_Directory_map["Phi_tot_nFDpCD_Directory"];

    // Theta_tot vs. Phi_tot ------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_tot vs. Phi_tot histograms
    TH2D *hTheta_tot_VS_Phi_tot_nFDpCD = new TH2D("#theta_{tot} vs. #phi_{tot} of total 3-momentum (All Int., nFDpCD)",
                                                  "#theta_{tot} vs. #phi_{tot} of total 3-momentum (All Int., nFDpCD);#phi_{tot} [#circ];#theta_{tot} [#circ]", numTH2Dbins_Nucleon_Ang_Plots,
                                                  Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_tot_VS_Phi_tot_nFDpCD_Dir = directories.Angle_Directory_map["Theta_tot_VS_Phi_tot_nFDpCD_Directory"];

    // Theta_rel ------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_rel histograms
    THStack *sTheta_rel_nFDpCD = new THStack("#theta_{rel} (nFDpCD)", "#theta_{rel} of relative 3-momentum (nFDpCD);#theta_{rel} [#circ];");

    TH1D *hTheta_rel_All_Int_nFDpCD =
        new TH1D("#theta_{rel} (All Int., nFDpCD)", "#theta_{rel} of relative 3-momentum (All Int., nFDpCD);#theta_{rel} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    TH1D *hTheta_rel_QEL_nFDpCD = new TH1D("#theta_{rel} (QEL Only, nFDpCD)", "#theta_{rel} of relative 3-momentum (QEL Only, nFDpCD);#theta_{rel} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    TH1D *hTheta_rel_MEC_nFDpCD = new TH1D("#theta_{rel} (MEC Only, nFDpCD)", "#theta_{rel} of relative 3-momentum (MEC Only, nFDpCD);#theta_{rel} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    TH1D *hTheta_rel_RES_nFDpCD = new TH1D("#theta_{rel} (RES Only, nFDpCD)", "#theta_{rel} of relative 3-momentum (RES Only, nFDpCD);#theta_{rel} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    TH1D *hTheta_rel_DIS_nFDpCD = new TH1D("#theta_{rel} (DIS Only, nFDpCD)", "#theta_{rel} of relative 3-momentum (DIS Only, nFDpCD);#theta_{rel} [#circ];", numTH1Dbins_Ang_Plots, 30, 155);
    string hTheta_rel_All_Int_nFDpCD_Dir = directories.Angle_Directory_map["Theta_rel_nFDpCD_Directory"];
    string hTheta_rel_QEL_nFDpCD_Dir = directories.Angle_Directory_map["Theta_rel_nFDpCD_Directory"];
    string hTheta_rel_MEC_nFDpCD_Dir = directories.Angle_Directory_map["Theta_rel_nFDpCD_Directory"];
    string hTheta_rel_RES_nFDpCD_Dir = directories.Angle_Directory_map["Theta_rel_nFDpCD_Directory"];
    string hTheta_rel_DIS_nFDpCD_Dir = directories.Angle_Directory_map["Theta_rel_nFDpCD_Directory"];

    TH2D *hTheta_rel_VS_P_rel_nFDpCD = new TH2D("#theta_{rel} vs. P_{rel} (All Int., nFDpCD, CD)", "#theta_{rel} vs. P_{rel} (All Int., nFDpCD, CD);P_{rel} [GeV/c];#theta_{rel} [#circ]",
                                                numTH2Dbins_Ang_Plots, 0, beamE * 1.1, numTH2Dbins_Ang_Plots, 30, 155);
    TH2D *hTheta_rel_VS_W_nFDpCD =
        new TH2D("#theta_{rel} vs. W (All Int., nFDpCD, CD)", "#theta_{rel} vs. W (All Int., nFDpCD, CD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#theta_{rel} [#circ]",
                 numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, 30, 155);
    string hTheta_rel_VS_P_rel_nFDpCD_Dir = directories.Angle_Directory_map["Theta_rel_nFDpCD_Directory"];
    string hTheta_rel_VS_W_nFDpCD_Dir = directories.Angle_Directory_map["Theta_rel_nFDpCD_Directory"];

    // Phi_rel --------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Phi_rel histograms
    THStack *sPhi_rel_nFDpCD = new THStack("#phi_{rel} (nFDpCD)", "#phi_{rel} of relative 3-momentum (nFDpCD);#phi_{rel} [#circ];");

    TH1D *hPhi_rel_All_Int_nFDpCD =
        new TH1D("#phi_{rel} (All Int., nFDpCD)", "#phi_{rel} of relative 3-momentum (All Int., nFDpCD);#phi_{rel} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_rel_QEL_nFDpCD =
        new TH1D("#phi_{rel} (QEL Only, nFDpCD)", "#phi_{rel} of relative 3-momentum (QEL Only, nFDpCD);#phi_{rel} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_rel_MEC_nFDpCD =
        new TH1D("#phi_{rel} (MEC Only, nFDpCD)", "#phi_{rel} of relative 3-momentum (MEC Only, nFDpCD);#phi_{rel} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_rel_RES_nFDpCD =
        new TH1D("#phi_{rel} (RES Only, nFDpCD)", "#phi_{rel} of relative 3-momentum (RES Only, nFDpCD);#phi_{rel} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH1D *hPhi_rel_DIS_nFDpCD =
        new TH1D("#phi_{rel} (DIS Only, nFDpCD)", "#phi_{rel} of relative 3-momentum (DIS Only, nFDpCD);#phi_{rel} [#circ];", numTH1Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_rel_All_Int_nFDpCD_Dir = directories.Angle_Directory_map["Phi_rel_nFDpCD_Directory"];
    string hPhi_rel_QEL_nFDpCD_Dir = directories.Angle_Directory_map["Phi_rel_nFDpCD_Directory"];
    string hPhi_rel_MEC_nFDpCD_Dir = directories.Angle_Directory_map["Phi_rel_nFDpCD_Directory"];
    string hPhi_rel_RES_nFDpCD_Dir = directories.Angle_Directory_map["Phi_rel_nFDpCD_Directory"];
    string hPhi_rel_DIS_nFDpCD_Dir = directories.Angle_Directory_map["Phi_rel_nFDpCD_Directory"];

    TH2D *hPhi_rel_VS_P_rel_nFDpCD = new TH2D("#phi_{rel} vs. P_{rel} (All Int., nFDpCD, CD)", "#phi_{rel} vs. P_{rel} (All Int., nFDpCD, CD);P_{rel} [GeV/c];#phi_{rel} [#circ]",
                                              numTH2Dbins_Ang_Plots, 0, beamE * 1.1, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    TH2D *hPhi_rel_VS_W_nFDpCD =
        new TH2D("#phi_{rel} vs. W (All Int., nFDpCD, CD)", "#phi_{rel} vs. W (All Int., nFDpCD, CD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#phi_{rel} [#circ]",
                 numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Phi_lboundary, Phi_uboundary);
    string hPhi_rel_VS_P_rel_nFDpCD_Dir = directories.Angle_Directory_map["Phi_rel_nFDpCD_Directory"];
    string hPhi_rel_VS_W_nFDpCD_Dir = directories.Angle_Directory_map["Phi_rel_nFDpCD_Directory"];

    // Theta_rel vs. Phi_rel ------------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_rel vs. Phi_rel histograms
    TH2D *hTheta_rel_VS_Phi_rel_nFDpCD = new TH2D("#theta_{rel} vs. #phi_{rel} of relative 3-momentum (All Int., nFDpCD)",
                                                  "#theta_{rel} vs. #phi_{rel} of relative 3-momentum (All Int., nFDpCD);#phi_{rel} [#circ];#theta_{rel} [#circ]",
                                                  numTH2Dbins_Nucleon_Ang_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_Ang_Plots, 30, 155);
    string hTheta_rel_VS_Phi_rel_nFDpCD_Dir = directories.Angle_Directory_map["Theta_rel_VS_Phi_rel_nFDpCD_Directory"];

    // Theta_p_e_p_tot (nFDpCD, CD & FD) ------------------------------------------------------------------------------------------------------------------------------------

    // Theta_p_e_p_tot (nFDpCD, CD & FD)
    THStack *sTheta_p_e_p_tot_nFDpCD = new THStack("#theta_{#vec{P}_{e},#vec{P}_{tot}} (All Int., nFDpCD)",
                                                   "#theta_{#vec{P}_{e},#vec{P}_{tot}} - Opening Angle Between #vec{P}_{e} and #vec{P}_{tot}=#vec{P}_{nFD}+#vec{P}_{pCD} "
                                                   "(All Int., nFDpCD);#theta_{#vec{P}_{e},#vec{P}_{tot}} [#circ];");
    TH1D *hTheta_p_e_p_tot_nFDpCD = new TH1D("#theta_{#vec{P}_{e},#vec{P}_{tot}} (All Int., nFDpCD)",
                                             "#theta_{#vec{P}_{e},#vec{P}_{tot}} - Opening Angle Between #vec{P}_{e} and #vec{P}_{tot}=#vec{P}_{nFD}+#vec{P}_{pCD} "
                                             "(All Int., nFDpCD);#theta_{#vec{P}_{e},#vec{P}_{tot}} [#circ];",
                                             numTH1Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_p_e_p_tot_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_nFDpCD_Directory"];

    // Theta_p_e_p_tot vs. W (nFDpCD, CD & FD) ------------------------------------------------------------------------------------------------------------------------------

    // Theta_p_e_p_tot vs. W (nFDpCD)
    TH2D *hTheta_p_e_p_tot_vs_W_nFDpCD = new TH2D("#theta_{#vec{P}_{e},#vec{P}_{tot}} vs. W (All Int., nFDpCD)",
                                                  "#theta_{#vec{P}_{e},#vec{P}_{tot}} vs. W (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];"
                                                  "#theta_{#vec{P}_{e},#vec{P}_{tot}} [#circ];",
                                                  numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_p_e_p_tot_vs_W_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_nFDpCD_Directory"];

    // Theta_q_p (nFDpCD, CD & FD) ------------------------------------------------------------------------------------------------------------------------------------------

    // Theta_q_p (nFDpCD, CD & FD)

    // Theta_q_p_tot (CD & FD)
    THStack *sTheta_q_p_tot_nFDpCD = new THStack("#theta_{#vec{q},#vec{P}_{tot}} (All Int., nFDpCD)",
                                                 "#theta_{#vec{q},#vec{P}_{tot}} - Opening Angle Between #vec{q} and #vec{P}_{tot}=#vec{P}_{nFD}+#vec{P}_{pCD} "
                                                 "(All Int., nFDpCD);#theta_{#vec{q},#vec{P}_{tot}} [#circ];");
    TH1D *hTheta_q_p_tot_nFDpCD = new TH1D("#theta_{#vec{q},#vec{P}_{tot}} (All Int., nFDpCD)",
                                           "#theta_{#vec{q},#vec{P}_{tot}} - Opening Angle Between #vec{q} and #vec{P}_{tot}=#vec{P}_{nFD}+#vec{P}_{pCD} "
                                           "(All Int., nFDpCD);#theta_{#vec{q},#vec{P}_{tot}} [#circ];",
                                           numTH1Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_q_p_tot_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_nFDpCD_Directory"];

    // Theta_P_nL_minus_q_nR and Theta_q_p_R (nFDpCD, CD & FD)
    THStack *sTheta_P_nL_minus_q_nR_nFDpCD = new THStack("#theta_{#vec{P}_{nL}-#vec{q},#vec{P}_{nR}} (All Int., nFDpCD)",
                                                         "#theta_{#vec{P}_{nL}-#vec{q},#vec{P}_{nR}} - Opening Angle Between #vec{P}_L-#vec{q} and #vec{P}_R (All Int., nFDpCD);"
                                                         "#theta_{#vec{P}_{nL}-#vec{q},#vec{P}_{nR}} [#circ];");
    TH1D *hTheta_P_nL_minus_q_nR_nFDpCD = new TH1D("#theta_{#vec{P}_{nL}-#vec{q},#vec{P}_{nR}} (All Int., nFDpCD)",
                                                   "#theta_{#vec{P}_{nL}-#vec{q},#vec{P}_{nR}} - Opening Angle Between #vec{q} and #vec{P}_{nL} (All Int., nFDpCD)"
                                                   ";#theta_{#vec{P}_{nL}-#vec{q},#vec{P}_{nR}} [#circ]",
                                                   numTH1Dbins_Ang_Plots, Opening_Ang_wide_lboundary, Opening_Ang_wide_uboundary);
    string hTheta_P_nL_minus_q_nR_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_nFDpCD_Directory"];

    // Theta_q_p_L and Theta_q_p_R (nFDpCD, CD & FD)
    THStack *sTheta_q_p_L_R_nFDpCD = new THStack("#theta_{#vec{q},#vec{P}} (All Int., nFDpCD)",
                                                 "#theta_{#vec{q},#vec{P}} - Opening Angle Between #vec{q} and #vec{P} (All Int., nFDpCD);#theta_{#vec{q},#vec{P}} [#circ];");
    TH1D *hTheta_q_p_L_nFDpCD = new TH1D("#theta_{#vec{q},#vec{P}_{nL}} (All Int., nFDpCD)",
                                         "#theta_{#vec{q},#vec{P}_{nL}} - Opening Angle Between #vec{q} and Leading Nucleon #vec{P}_{nL} (All Int., nFDpCD);"
                                         "#theta_{#vec{q},#vec{P}_{nL}} [#circ]",
                                         numTH1Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    TH1D *hTheta_q_p_R_nFDpCD = new TH1D("#theta_{#vec{q},#vec{P}_{nR}} (All Int., nFDpCD)",
                                         "#theta_{#vec{q},#vec{P}_{nR}} - Opening Angle Between #vec{q} and Recoil Nucleon #vec{P}_{nR} (All Int., nFDpCD);"
                                         "#theta_{#vec{q},#vec{P}_{nR}} [#circ]",
                                         numTH1Dbins_Ang_Plots, 0, 180);
    string hTheta_q_p_L_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_nFDpCD_Directory"];
    string hTheta_q_p_R_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_nFDpCD_Directory"];

    // Theta_q_nFD and Theta_q_pCD (nFDpCD, CD & FD)
    THStack *sTheta_q_p_nFDpCD = new THStack("#theta_{#vec{q},#vec{P}} (All Int., nFDpCD)",
                                             "#theta_{#vec{q},#vec{P}} - Opening Angle Between #vec{q} and #vec{P} (All Int., nFDpCD);#theta_{#vec{q},#vec{P}} [#circ];");
    TH1D *hTheta_q_nFD_nFDpCD = new TH1D("#theta_{#vec{q},#vec{P}_{nFD}} (All Int., nFDpCD)",
                                         "#theta_{#vec{q},#vec{P}_{nFD}} - Opening Angle Between #vec{q} and FD Neutron #vec{P}_{nFD} (All Int., nFDpCD);"
                                         "#theta_{#vec{q},#vec{P}_{nFD}} [#circ]",
                                         numTH1Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    TH1D *hTheta_q_pCD_nFDpCD = new TH1D("#theta_{#vec{q},#vec{P}_{pCD}} (All Int., nFDpCD)",
                                         "#theta_{#vec{q},#vec{P}_{pCD}} - Opening Angle Between #vec{q} and CD Proton #vec{P}_{pCD} (All Int., nFDpCD);"
                                         "#theta_{#vec{q},#vec{P}_{pCD}} [#circ]",
                                         numTH1Dbins_Ang_Plots, 0, 180);
    string hTheta_q_nFD_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_nFDpCD_Directory"];
    string hTheta_q_pCD_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_nFDpCD_Directory"];

    // Theta_q_p_tot vs. W (nFDpCD, CD & FD) --------------------------------------------------------------------------------------------------------------------------------

    // Theta_nFD_pCD vs. W (CD & FD)
    TH2D *hTheta_q_p_tot_vs_W_nFDpCD = new TH2D("#theta_{#vec{q},#vec{P}_{tot}} vs. W (All Int., nFDpCD)",
                                                "#theta_{#vec{q},#vec{P}_{tot}} vs. W (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];"
                                                "#theta_{#vec{q},#vec{P}_{tot}} [#circ];",
                                                numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_q_p_tot_vs_W_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_nFDpCD_Directory"];

    // Theta_P_nL_minus_q_nR vs. W (CD & FD)
    TH2D *hTheta_P_nL_minus_q_nR_vs_W_nFDpCD = new TH2D("#theta_{#vec{P}_{nL}-#vec{q},#vec{P}_{nR}} vs. W (All Int., nFDpCD)",
                                                        "#theta_{#vec{P}_{nL}-#vec{q},#vec{P}_{nR}} vs. W (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];"
                                                        "#theta_{#vec{P}_{nL}-#vec{q},#vec{P}_{nR}} [#circ];",
                                                        numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Opening_Ang_wide_lboundary, Opening_Ang_wide_uboundary);
    string hTheta_P_nL_minus_q_nR_vs_W_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_nFDpCD_Directory"];

    // Theta_q_p_L vs. W (CD & FD)
    TH2D *hTheta_q_p_L_vs_W_nFDpCD = new TH2D("#theta_{#vec{q},#vec{P}_{nL}} vs. W (All Int., nFDpCD)",
                                              "#theta_{#vec{q},#vec{P}_{nL}} vs. W (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];"
                                              "#theta_{#vec{q},#vec{P}_{nL}} [#circ];",
                                              numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_q_p_L_vs_W_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_nFDpCD_Directory"];

    // Theta_q_p_R vs. W (CD & FD)
    TH2D *hTheta_q_p_R_vs_W_nFDpCD = new TH2D("#theta_{#vec{q},#vec{P}_{nR}} vs. W (All Int., nFDpCD)",
                                              "#theta_{#vec{q},#vec{P}_{nR}} vs. W (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];"
                                              "#theta_{#vec{q},#vec{P}_{nR}} [#circ];",
                                              numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, 0, 180);
    string hTheta_q_p_R_vs_W_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_nFDpCD_Directory"];

    // Theta_q_nFD vs. W (CD & FD)
    TH2D *hTheta_q_nFD_vs_W_nFDpCD = new TH2D("#theta_{#vec{q},#vec{P}_{nFD}} vs. W (All Int., nFDpCD)",
                                              "#theta_{#vec{q},#vec{P}_{nFD}} vs. W (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];"
                                              "#theta_{#vec{q},#vec{P}_{nFD}} [#circ];",
                                              numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_q_nFD_vs_W_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_nFDpCD_Directory"];

    // Theta_q_pCD vs. W (CD & FD)
    TH2D *hTheta_q_pCD_vs_W_nFDpCD = new TH2D("#theta_{#vec{q},#vec{P}_{pCD}} vs. W (All Int., nFDpCD)",
                                              "#theta_{#vec{q},#vec{P}_{pCD}} vs. W (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];"
                                              "#theta_{#vec{q},#vec{P}_{pCD}} [#circ];",
                                              numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, 0, 180);
    string hTheta_q_pCD_vs_W_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_nFDpCD_Directory"];

    // Theta_q_p_L vs |P_L|/|q| (nFDpCD, CD & FD) ---------------------------------------------------------------------------------------------------------------------------

    // Theta_q_p vs |P_p|/|q| (CD & FD)
    TH2D *hTheta_q_p_L_vs_p_L_q_nFDpCD = new TH2D("#theta_{#vec{q},#vec{P}_{nL}} vs. r_{nL} (All Int., nFDpCD)",
                                                  "#theta_{#vec{q},#vec{P}_{nL}} vs. r_{nL}=|#vec{P}_{nL}|/|#vec{q}| (All Int., nFDpCD);"
                                                  "r_{nFD};#theta_{#vec{q},#vec{P}_{nFD}} [#circ]",
                                                  numTH2Dbins_Ang_Plots, 0, 1.05, numTH2Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary);
    string hTheta_q_p_L_vs_p_L_q_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_nFDpCD_Directory"];

    // Theta_q_p vs Theta_q_p (nFDpCD, CD & FD) -------------------------------------------------------------------------------------------------------------------------

    // Theta_q_p_L vs Theta_q_p_R
    TH2D *hTheta_q_p_L_vs_Theta_q_p_R_nFDpCD = new TH2D("#theta_{#vec{q},#vec{P}_{nL}} vs. #theta_{#vec{q},#vec{P}_{nR}} (All Int., nFDpCD)",
                                                        "#theta_{#vec{q},#vec{P}_{nL}} vs. #theta_{#vec{q},#vec{P}_{nR}} (All Int., nFDpCD);"
                                                        "#theta_{#vec{q},#vec{P}_{nL}};#theta_{#vec{q},#vec{P}_{nR}} [#circ]",
                                                        numTH2Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary, numTH2Dbins_Ang_Plots, 0, 180);
    string hTheta_q_p_L_vs_Theta_q_p_R_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_nFDpCD_Directory"];

    // Theta_q_nFD vs Theta_q_pCD
    TH2D *hTheta_q_nFD_vs_Theta_q_pCD_nFDpCD = new TH2D("#theta_{#vec{q},#vec{P}_{nFD}} vs. #theta_{#vec{q},#vec{P}_{pCD}} (All Int., nFDpCD)",
                                                        "#theta_{#vec{q},#vec{P}_{nFD}} vs. #theta_{#vec{q},#vec{P}_{pCD}} (All Int., nFDpCD);"
                                                        "#theta_{#vec{q},#vec{P}_{nFD}} [#circ];#theta_{#vec{q},#vec{P}_{pCD}} [#circ]",
                                                        numTH2Dbins_Ang_Plots, Opening_Ang_narrow_lboundary, Opening_Ang_narrow_uboundary, numTH2Dbins_Ang_Plots, 0, 180);
    string hTheta_q_nFD_vs_Theta_q_pCD_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_nFDpCD_Directory"];

    // Theta_nFD_pCD (nFDpCD, CD & FD) --------------------------------------------------------------------------------------------------------------------------------------

    // Theta_nFD_pCD (CD & FD)
    THStack *sTheta_nFD_pCD_nFDpCD = new THStack("#theta_{nFD,pCD} (All Int., nFDpCD)", "#theta_{nFD,pCD} - Opening Angle Between Protons (nFDpCD);#theta_{nFD,pCD} [#circ];");
    TH1D *hTheta_nFD_pCD_All_Int_nFDpCD =
        new TH1D("#theta_{nFD,pCD} (All Int., nFDpCD)", "#theta_{nFD,pCD} - Opening Angle Between Protons (All Int., nFDpCD);#theta_{nFD,pCD} [#circ];", numTH1Dbins_Ang_Plots, 0, 180);
    TH1D *hTheta_nFD_pCD_QEL_nFDpCD =
        new TH1D("#theta_{nFD,pCD} (QEL only, nFDpCD)", "#theta_{nFD,pCD} - Opening Angle Between Protons (QEL only, nFDpCD);#theta_{nFD,pCD} [#circ];", numTH1Dbins_Ang_Plots, 0, 180);
    TH1D *hTheta_nFD_pCD_MEC_nFDpCD =
        new TH1D("#theta_{nFD,pCD} (MEC only, nFDpCD)", "#theta_{nFD,pCD} - Opening Angle Between Protons (MEC only, nFDpCD);#theta_{nFD,pCD} [#circ];", numTH1Dbins_Ang_Plots, 0, 180);
    TH1D *hTheta_nFD_pCD_RES_nFDpCD =
        new TH1D("#theta_{nFD,pCD} (RES only, nFDpCD)", "#theta_{nFD,pCD} - Opening Angle Between Protons (RES only, nFDpCD);#theta_{nFD,pCD} [#circ];", numTH1Dbins_Ang_Plots, 0, 180);
    TH1D *hTheta_nFD_pCD_DIS_nFDpCD =
        new TH1D("#theta_{nFD,pCD} (DIS only, nFDpCD)", "#theta_{nFD,pCD} - Opening Angle Between Protons (DIS only, nFDpCD);#theta_{nFD,pCD} [#circ];", numTH1Dbins_Ang_Plots, 0, 180);
    string sTheta_nFD_pCD_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_by_interaction_nFDpCD_Directory"];
    string hTheta_nFD_pCD_All_Int_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_by_interaction_nFDpCD_Directory"];
    string hTheta_nFD_pCD_QEL_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_by_interaction_nFDpCD_Directory"];
    string hTheta_nFD_pCD_MEC_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_by_interaction_nFDpCD_Directory"];
    string hTheta_nFD_pCD_RES_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_by_interaction_nFDpCD_Directory"];
    string hTheta_nFD_pCD_DIS_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_by_interaction_nFDpCD_Directory"];

    // Theta_nFD_pCD vs. W (nFDpCD, CD & FD) --------------------------------------------------------------------------------------------------------------------------------

    // Theta_nFD_pCD vs. W (CD & FD)
    TH2D *hTheta_nFD_pCD_vs_W_nFDpCD = new TH2D("#theta_{nFD,pCD} vs. W (All Int., nFDpCD)",
                                                "#theta_{nFD,pCD} vs. W (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#theta_{nFD,pCD} [#circ];",
                                                numTH2Dbins_Ang_Plots, W_lboundary, W_uboundary, numTH2Dbins_Ang_Plots, 0, 180);
    string hTheta_nFD_pCD_vs_W_nFDpCD_Dir = directories.Angle_Directory_map["Opening_angles_nFDpCD_Directory"];

    // Theta_nFD_vs_theta_pCD for Theta_nFD_pCD < 20 (nFDpCD, CD & FD) ------------------------------------------------------------------------------------------------------

    // Theta_nFD_vs_theta_pCD for Theta_nFD_pCD < 20 (CD & FD)
    TH2D *hTheta_nFD_vs_theta_pCD_for_Theta_nFD_pCD_20_nFDpCD = new TH2D("#theta_{nFD} vs. #theta_{pCD} for #theta_{nFD,pCD}<20#circ (All Int., nFDpCD)",
                                                                         "#theta_{nFD} vs. #theta_{pCD} for #theta_{nFD,pCD}<20#circ (All Int., nFDpCD);"
                                                                         "#theta_{pCD} [#circ];#theta_{nFD} [#circ];",
                                                                         numTH2Dbins_Ang_Plots, 30, 50, numTH2Dbins_Ang_Plots, 30, 50);
    string hTheta_nFD_vs_theta_pCD_for_Theta_nFD_pCD_20_nFDpCD_Dir = directories.Angle_Directory_map["Double_detection_nFDpCD_Directory"];

    // dphi_nFD_pCD for Theta_nFD_pCD < 20 (nFDpCD, CD & FD) --------------------------------------------------------------------------------------------------------------

    // dphi_nFD_pCD for Theta_nFD_pCD < 20 (CD & FD)
    TH1D *hdphi_nFD_pCD_for_Theta_nFD_pCD_20_nFDpCD = new TH1D("#Delta#phi for #theta_{nFD,pCD}<20#circ (All Int., nFDpCD)",
                                                               "#Delta#phi for #theta_{nFD,pCD}<20#circ (All Int., nFDpCD);"
                                                               "#Delta#phi = #phi_{pFD} - #phi_{pCD} [#circ];",
                                                               50, Phi_lboundary, Phi_uboundary);
    string hdphi_nFD_pCD_for_Theta_nFD_pCD_20_nFDpCD_Dir = directories.Angle_Directory_map["Double_detection_nFDpCD_Directory"];

    TH1D *hdphi_nFD_pCD_for_Theta_nFD_pCD_20_ZOOMIN_nFDpCD = new TH1D("#Delta#phi for #theta_{nFD,pCD}<20#circ - ZOOMIN (All Int., nFDpCD)",
                                                                      "#Delta#phi for #theta_{nFD,pCD}<20#circ - ZOOMIN (All Int., nFDpCD);"
                                                                      "#Delta#phi = #phi_{pFD} - #phi_{pCD} [#circ];",
                                                                      50, -40, 40);
    string hdphi_nFD_pCD_for_Theta_nFD_pCD_20_ZOOMIN_nFDpCD_Dir = directories.Angle_Directory_map["Double_detection_nFDpCD_Directory"];

    // Theta_nFD_vs_theta_pCD for every Theta_nFD_pCD (nFDpCD, CD & FD)
    // -------------------------------------------------------------------------------------------------------------

    // Theta_nFD_vs_theta_pCD for Theta_nFD_pCD (CD & FD)
    TH2D *hTheta_nFD_vs_theta_pCD_forall_Theta_nFD_pCD_nFDpCD = new TH2D("#theta_{nFD} vs. #theta_{nFD} #forall#theta_{nFD,pCD} (All Int., nFDpCD)",
                                                                         "#theta_{nFD} vs. #theta_{pCD} for every #theta_{nFD,pCD} (All Int., nFDpCD);"
                                                                         "#theta_{pCD} [#circ];#theta_{nFD} [#circ];",
                                                                         numTH2Dbins_Ang_Plots, 30, 50, numTH2Dbins_Ang_Plots, 30, 50);
    string hTheta_nFD_vs_theta_pCD_forall_Theta_nFD_pCD_nFDpCD_Dir = directories.Angle_Directory_map["Double_detection_nFDpCD_Directory"];

    // dphi_nFD_pCD for every Theta_nFD_pCD (nFDpCD, CD & FD)
    // -----------------------------------------------------------------------------------------------------------------------

    // Theta_nFD_vs_theta_pCD for every Theta_nFD_pCD (CD & FD)
    TH1D *hdphi_nFD_pCD_for_all_Theta_nFD_pCD_nFDpCD = new TH1D("#Delta#phi #forall#theta_{nFD,pCD} (All Int., nFDpCD)",
                                                                "#Delta#phi for every #theta_{nFD,pCD} (All Int., nFDpCD);"
                                                                "#Delta#phi = #phi_{pFD} - #phi_{pCD} [#circ];",
                                                                50, Phi_lboundary, Phi_uboundary);
    string hdphi_nFD_pCD_for_all_Theta_nFD_pCD_nFDpCD_Dir = directories.Angle_Directory_map["Double_detection_nFDpCD_Directory"];

    TH1D *hdphi_nFD_pCD_for_all_Theta_nFD_pCD_ZOOMIN_nFDpCD = new TH1D("#Delta#phi #forall#theta_{nFD,pCD} - ZOOMIN (All Int., nFDpCD)",
                                                                       "#Delta#phi for every #theta_{nFD,pCD} - ZOOMIN(All Int., nFDpCD);"
                                                                       "#Delta#phi = #phi_{pFD} - #phi_{pCD} [#circ];",
                                                                       50, -40, 40);
    string hdphi_nFD_pCD_for_all_Theta_nFD_pCD_ZOOMIN_nFDpCD_Dir = directories.Angle_Directory_map["Double_detection_nFDpCD_Directory"];

    TH1D *hdphi_nFD_pCD_for_small_dTheta_nFDpCD = new TH1D("#Delta#phi for small #Delta#theta_{nFD/pCD} (All Int., nFDpCD)",
                                                           "#Delta#phi for small #Delta#theta_{nFD/pCD} = #theta_{nFD/pCD}-40#circ;"
                                                           "#Delta#phi = #phi_{pFD} - #phi_{pCD} [#circ];",
                                                           50, Phi_lboundary, Phi_uboundary);
    string hdphi_nFD_pCD_for_small_dTheta_nFDpCD_Dir = directories.Angle_Directory_map["Double_detection_nFDpCD_Directory"];

    TH1D *hdphi_nFD_pCD_for_small_dTheta_ZOOMIN_nFDpCD = new TH1D("#Delta#phi for small #Delta#theta_{nFD/pCD} - ZOOMIN (All Int., nFDpCD)",
                                                                  "#Delta#phi for small #Delta#theta_{nFD/pCD} = #theta_{nFD/pCD}-40#circ - ZOOMIN;"
                                                                  "#Delta#phi = #phi_{pFD} - #phi_{pCD} [#circ];",
                                                                  50, -50, 05);
    string hdphi_nFD_pCD_for_small_dTheta_ZOOMIN_nFDpCD_Dir = directories.Angle_Directory_map["Double_detection_nFDpCD_Directory"];

    // Neutron veto plots (nFDpCD) ----------------------------------------------------------------------------------------------------------------------------------------------

    // Neutron veto plots (nFDpCD)
    hPlot2D hdTheta_nFD_e_VS_dPhi_nFD_e_Electrons_BV_nFDpCD =
        hPlot2D("nFDpCD", "FD", "#Delta#theta_{nFD,e} vs. #Delta#phi_{nFD,e} BV", "'Neutron Hits' vs. Electron Hits - Before Veto",
                "#Delta#phi_{nFD,e} = #phi_{nFD}^{ECAL} - #phi_{e}^{ECAL} [#circ]", "#Delta#theta_{nFD,e} = #theta_{nFD}^{ECAL} - #theta_{e}^{ECAL} [#circ]",
                directories.Angle_Directory_map["Neutron_veto_nFDpCD_Directory"], "01_Neutron_hits_vs_electron_hits_BV_nFDpCD", -180, 180, -50, 50, 65, 65);

    hPlot2D hdTheta_nFD_e_VS_dPhi_nFD_e_Electrons_AV_nFDpCD =
        hPlot2D("nFDpCD", "FD", "#Delta#theta_{nFD,e} vs. #Delta#phi_{nFD,e} AV", "'Neutron Hits' vs. Electron Hits - After Veto",
                "#Delta#phi_{nFD,e} = #phi_{nFD}^{ECAL} - #phi_{e}^{ECAL} [#circ]", "#Delta#theta_{nFD,e} = #theta_{nFD}^{ECAL} - #theta_{e}^{ECAL} [#circ]",
                directories.Angle_Directory_map["Neutron_veto_nFDpCD_Directory"], "02_Neutron_hits_vs_electron_hits_AV_nFDpCD", -180, 180, -50, 50, 65, 65);

    hPlot2D hdTheta_nFD_e_VS_dPhi_nFD_e_Electrons_Vetoed_Neutrons_nFDpCD =
        hPlot2D("nFDpCD", "FD", "#Delta#theta_{nFD,e} vs. #Delta#phi_{nFD,e}", "'Neutron Hits' vs. Electron Hits - Vetoed Neutrons",
                "#Delta#phi_{nFD,e} = #phi_{nFD}^{ECAL} - #phi_{e}^{ECAL} [#circ]", "#Delta#theta_{nFD,e} = #theta_{nFD}^{ECAL} - #theta_{e}^{ECAL} [#circ]",
                directories.Angle_Directory_map["Neutron_veto_nFDpCD_Directory"], "03_Neutron_hits_vs_electron_hits_Vetoed_nFDpCD", -180, 180, -50, 50, 65, 65);

    // ======================================================================================================================================================================
    // Momentum transfer histograms
    // ======================================================================================================================================================================

    // Momentum transfer histograms

    // Momentum transfer histograms (no #(e) cut)
    THStack *sQ2_All_e = new THStack("Q^{2} (no #(e) cut, CD & FD)", "Q^{2} Histogram (no #(e) cut, CD & FD);Q^{2} [GeV^{2}/c^{2}];");
    TH1D *hQ2_All_e = new TH1D("Q^{2} (no #(e) cut, FD)", "Q^{2} (no #(e) cut, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_QEL_All_e =
        new TH1D("Q^{2} (QE Only, no #(e) cut, FD)", "Q^{2} (QE Only, no #(e) cut, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_MEC_All_e =
        new TH1D("Q^{2} (MEC Only, no #(e) cut, FD)", "Q^{2} (MEC Only, no #(e) cut, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_RES_All_e =
        new TH1D("Q^{2} (RES Only, no #(e) cut, FD)", "Q^{2} (RES Only, no #(e) cut, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_DIS_All_e =
        new TH1D("Q^{2} (DIS Only, no #(e) cut, FD)", "Q^{2} (DIS Only, no #(e) cut, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_All_e_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_All_e_Directory"];

    THStack *sq_3v_All_e = new THStack("q = |#font[62]{q}| (no #(e) cut, CD & FD)", "q = |#font[62]{q}| Histogram (no #(e) cut, CD & FD);q [GeV/c];");
    TH1D *hq_3v_All_e =
        new TH1D("q = |#font[62]{q}| (no #(e) cut, FD)", "q = |#font[62]{q}| (no #(e) cut, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_QEL_All_e = new TH1D("q = |#font[62]{q}| (QE Only, no #(e) cut, FD)", "q = |#font[62]{q}| (QE Only, no #(e) cut, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots,
                                     Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_MEC_All_e = new TH1D("q = |#font[62]{q}| (MEC Only, no #(e) cut, FD)", "q = |#font[62]{q}| (MEC Only, no #(e) cut, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots,
                                     Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_RES_All_e = new TH1D("q = |#font[62]{q}| (RES Only, no #(e) cut, FD)", "q = |#font[62]{q}| (RES Only, no #(e) cut, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots,
                                     Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_DIS_All_e = new TH1D("q = |#font[62]{q}| (DIS Only, no #(e) cut, FD)", "q = |#font[62]{q}| (DIS Only, no #(e) cut, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots,
                                     Q2_lboundary_FD, Q2_uboundary_FD);
    string hq_3v_All_e_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_All_e_Directory"];

    // Momentum transfer histograms (1e cut)
    THStack *sQ2_1e_cut = new THStack("Q^{2} (1e Cut ,CD & FD)", "Q^{2} Histogram (1e Cut, CD & FD);Q^{2} [GeV^{2}/c^{2}];");
    TH1D *hQ2_1e_cut = new TH1D("Q^{2} (1e Cut, FD)", "Q^{2} (1e Cut, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_QEL_1e_cut =
        new TH1D("Q^{2} (QE Only, 1e Cut, FD)", "Q^{2} (QE Only, 1e Cut, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_MEC_1e_cut =
        new TH1D("Q^{2} (MEC Only, 1e Cut, FD)", "Q^{2} (MEC Only, 1e Cut, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_RES_1e_cut =
        new TH1D("Q^{2} (RES Only, 1e Cut, FD)", "Q^{2} (RES Only, 1e Cut, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_DIS_1e_cut =
        new TH1D("Q^{2} (DIS Only, 1e Cut, FD)", "Q^{2} (DIS Only, 1e Cut, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_1e_cut_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_1e_cut_Directory"];

    THStack *sq_3v_1e_cut = new THStack("q = |#font[62]{q}| (1e Cut, CD & FD)", "q = |#font[62]{q}| Histogram (1e Cut, CD & FD);q [GeV/c];");
    TH1D *hq_3v_1e_cut = new TH1D("q = |#font[62]{q}| (1e Cut, FD)", "q = |#font[62]{q}| (1e Cut, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_QEL_1e_cut =
        new TH1D("q = |#font[62]{q}| (QE Only, 1e Cut, FD)", "q = |#font[62]{q}| (QE Only, 1e Cut, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_MEC_1e_cut =
        new TH1D("q = |#font[62]{q}| (MEC Only, 1e Cut, FD)", "q = |#font[62]{q}| (MEC Only, 1e Cut, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_RES_1e_cut =
        new TH1D("q = |#font[62]{q}| (RES Only, 1e Cut, FD)", "q = |#font[62]{q}| (RES Only, 1e Cut, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_DIS_1e_cut =
        new TH1D("q = |#font[62]{q}| (DIS Only, 1e Cut, FD)", "q = |#font[62]{q}| (DIS Only, 1e Cut, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hq_3v_1e_cut_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_1e_cut_Directory"];

    TH2D *hQ2_VS_W_1e_cut = new TH2D("Q^{2} vs. W (All Int., 1e Cut)", "Q^{2} vs. W (All Int., 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                     numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_QEL_1e_cut = new TH2D("Q^{2} vs. W (QE Only, 1e Cut)", "Q^{2} vs. W (QE Only, 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                         numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_MEC_1e_cut = new TH2D("Q^{2} vs. W (MEC Only, 1e Cut)", "Q^{2} vs. W (MEC Only, 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                         numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_RES_1e_cut = new TH2D("Q^{2} vs. W (RES Only, 1e Cut)", "Q^{2} vs. W (RES Only, 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                         numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_DIS_1e_cut = new TH2D("Q^{2} vs. W (DIS Only, 1e Cut)", "Q^{2} vs. W (DIS Only, 1e Cut);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                         numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_VS_W_1e_cut_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_1e_cut_Directory"];

    TH2D *hQ2_VS_q_3v_1e_cut = new TH2D("Q^{2} vs. |#font[62]{q}| (All Int., 1e Cut)", "Q^{2} vs. |#font[62]{q}| (All Int., 1e Cut);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                        numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_QEL_1e_cut = new TH2D("Q^{2} vs. |#font[62]{q}| (QE Only, 1e Cut)", "Q^{2} vs. |#font[62]{q}| (QE Only, 1e Cut);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                            numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_MEC_1e_cut = new TH2D("Q^{2} vs. |#font[62]{q}| (MEC Only, 1e Cut)", "Q^{2} vs. |#font[62]{q}| (MEC Only, 1e Cut);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                            numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_RES_1e_cut = new TH2D("Q^{2} vs. |#font[62]{q}| (RES Only, 1e Cut)", "Q^{2} vs. |#font[62]{q}| (RES Only, 1e Cut);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                            numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_DIS_1e_cut = new TH2D("Q^{2} vs. |#font[62]{q}| (DIS Only, 1e Cut)", "Q^{2} vs. |#font[62]{q}| (DIS Only, 1e Cut);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                            numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_VS_q_3v_1e_cut_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_1e_cut_Directory"];

    TH2D *hQ2_VS_omega_1e_cut = new TH2D("Q^{2} vs. #omega (All Int., 1e Cut)", "Q^{2} vs. #omega (All Int., 1e Cut);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                         Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_QEL_1e_cut = new TH2D("Q^{2} vs. #omega (QE Only, 1e Cut)", "Q^{2} vs. #omega (QE Only, 1e Cut);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]",
                                             numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_MEC_1e_cut = new TH2D("Q^{2} vs. #omega (MEC Only, 1e Cut)", "Q^{2} vs. #omega (MEC Only, 1e Cut);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]",
                                             numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_RES_1e_cut = new TH2D("Q^{2} vs. #omega (RES Only, 1e Cut)", "Q^{2} vs. #omega (RES Only, 1e Cut);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]",
                                             numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_DIS_1e_cut = new TH2D("Q^{2} vs. #omega (DIS Only, 1e Cut)", "Q^{2} vs. #omega (DIS Only, 1e Cut);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]",
                                             numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_VS_omega_1e_cut_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_1e_cut_Directory"];

    TH2D *hq_3v_VS_omega_1e_cut = new TH2D("|#font[62]{q}| vs. #omega (All Int., 1e Cut)", "|#font[62]{q}| vs. #omega (All Int., 1e Cut);#omega [GeV];q [GeV/c]",
                                           numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_QEL_1e_cut = new TH2D("|#font[62]{q}| vs. #omega (QE Only, 1e Cut)", "|#font[62]{q}| vs. #omega (QE Only, 1e Cut);#omega [GeV];q [GeV/c]",
                                               numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_MEC_1e_cut = new TH2D("|#font[62]{q}| vs. #omega (MEC Only, 1e Cut)", "|#font[62]{q}| vs. #omega (MEC Only, 1e Cut);#omega [GeV];q [GeV/c]",
                                               numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_RES_1e_cut = new TH2D("|#font[62]{q}| vs. #omega (RES Only, 1e Cut)", "|#font[62]{q}| vs. #omega (RES Only, 1e Cut);#omega [GeV];q [GeV/c]",
                                               numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_DIS_1e_cut = new TH2D("|#font[62]{q}| vs. #omega (DIS Only, 1e Cut)", "|#font[62]{q}| vs. #omega (DIS Only, 1e Cut);#omega [GeV];q [GeV/c]",
                                               numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hq_3v_VS_omega_1e_cut_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_1e_cut_Directory"];

    // Momentum transfer histograms (1p)
    THStack *sQ2_1p = new THStack("Q^{2} (1p, CD & FD)", "Q^{2} (1p, CD & FD);Q^{2} [GeV^{2}/c^{2}];");
    TH1D *hQ2_1p = new TH1D("Q^{2} (1p, FD)", "Q^{2} (1p, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_QEL_1p = new TH1D("Q^{2} (QE Only, 1p, FD)", "Q^{2} (QE Only, 1p, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_MEC_1p = new TH1D("Q^{2} (MEC Only, 1p, FD)", "Q^{2} (MEC Only, 1p, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_RES_1p = new TH1D("Q^{2} (RES Only, 1p, FD)", "Q^{2} (RES Only, 1p, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_DIS_1p = new TH1D("Q^{2} (DIS Only, 1p, FD)", "Q^{2} (DIS Only, 1p, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_1p_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_1p_Directory"];

    THStack *sq_3v_1p = new THStack("q = |#font[62]{q}| (1p, CD & FD)", "q = |#font[62]{q}| Histogram (1p, CD & FD);q [GeV/c];");
    TH1D *hq_3v_1p = new TH1D("q = |#font[62]{q}| (1p, FD)", "q = |#font[62]{q}| (1p, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_QEL_1p =
        new TH1D("q = |#font[62]{q}| (QE Only, 1p, FD)", "q = |#font[62]{q}| (QE Only, 1p, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_MEC_1p =
        new TH1D("q = |#font[62]{q}| (MEC Only, 1p, FD)", "q = |#font[62]{q}| (MEC Only, 1p, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_RES_1p =
        new TH1D("q = |#font[62]{q}| (RES Only, 1p, FD)", "q = |#font[62]{q}| (RES Only, 1p, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_DIS_1p =
        new TH1D("q = |#font[62]{q}| (DIS Only, 1p, FD)", "q = |#font[62]{q}| (DIS Only, 1p, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hq_3v_1p_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_1p_Directory"];

    TH2D *hQ2_VS_W_1p = new TH2D("Q^{2} vs. W (All Int., 1p)", "Q^{2} vs. W (All Int., 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_QEL_1p = new TH2D("Q^{2} vs. W (QE Only, 1p)", "Q^{2} vs. W (QE Only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                     numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_MEC_1p = new TH2D("Q^{2} vs. W (MEC Only, 1p)", "Q^{2} vs. W (MEC Only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                     numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_RES_1p = new TH2D("Q^{2} vs. W (RES Only, 1p)", "Q^{2} vs. W (RES Only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                     numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_DIS_1p = new TH2D("Q^{2} vs. W (DIS Only, 1p)", "Q^{2} vs. W (DIS Only, 1p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                     numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_VS_W_1p_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_1p_Directory"];

    TH2D *hQ2_VS_q_3v_1p = new TH2D("Q^{2} vs. |#font[62]{q}| (All Int., 1p)", "Q^{2} vs. |#font[62]{q}| (All Int., 1p);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                    Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_QEL_1p = new TH2D("Q^{2} vs. |#font[62]{q}| (QE Only, 1p)", "Q^{2} vs. |#font[62]{q}| (QE Only, 1p);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                        numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_MEC_1p = new TH2D("Q^{2} vs. |#font[62]{q}| (MEC Only, 1p)", "Q^{2} vs. |#font[62]{q}| (MEC Only, 1p);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                        numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_RES_1p = new TH2D("Q^{2} vs. |#font[62]{q}| (RES Only, 1p)", "Q^{2} vs. |#font[62]{q}| (RES Only, 1p);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                        numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_DIS_1p = new TH2D("Q^{2} vs. |#font[62]{q}| (DIS Only, 1p)", "Q^{2} vs. |#font[62]{q}| (DIS Only, 1p);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                        numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_VS_q_3v_1p_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_1p_Directory"];

    TH2D *hQ2_VS_omega_1p = new TH2D("Q^{2} vs. #omega (All Int., 1p)", "Q^{2} vs. #omega (All Int., 1p);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                     Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_QEL_1p = new TH2D("Q^{2} vs. #omega (QE Only, 1p)", "Q^{2} vs. #omega (QE Only, 1p);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                         Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_MEC_1p = new TH2D("Q^{2} vs. #omega (MEC Only, 1p)", "Q^{2} vs. #omega (MEC Only, 1p);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                         Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_RES_1p = new TH2D("Q^{2} vs. #omega (RES Only, 1p)", "Q^{2} vs. #omega (RES Only, 1p);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                         Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_DIS_1p = new TH2D("Q^{2} vs. #omega (DIS Only, 1p)", "Q^{2} vs. #omega (DIS Only, 1p);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                         Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_VS_omega_1p_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_1p_Directory"];

    TH2D *hq_3v_VS_omega_1p = new TH2D("|#font[62]{q}| vs. #omega (All Int., 1p)", "|#font[62]{q}| vs. #omega (All Int., 1p);#omega [GeV];q [GeV/c]", numTH2Dbins_Momentum_transfer_plots,
                                       Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_QEL_1p = new TH2D("|#font[62]{q}| vs. #omega (QE Only, 1p)", "|#font[62]{q}| vs. #omega (QE Only, 1p);#omega [GeV];q [GeV/c]", numTH2Dbins_Momentum_transfer_plots,
                                           Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_MEC_1p = new TH2D("|#font[62]{q}| vs. #omega (MEC Only, 1p)", "|#font[62]{q}| vs. #omega (MEC Only, 1p);#omega [GeV];q [GeV/c]", numTH2Dbins_Momentum_transfer_plots,
                                           Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_RES_1p = new TH2D("|#font[62]{q}| vs. #omega (RES Only, 1p)", "|#font[62]{q}| vs. #omega (RES Only, 1p);#omega [GeV];q [GeV/c]", numTH2Dbins_Momentum_transfer_plots,
                                           Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_DIS_1p = new TH2D("|#font[62]{q}| vs. #omega (DIS Only, 1p)", "|#font[62]{q}| vs. #omega (DIS Only, 1p);#omega [GeV];q [GeV/c]", numTH2Dbins_Momentum_transfer_plots,
                                           Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hq_3v_VS_omega_1p_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_1p_Directory"];

    // Momentum transfer histograms (1n)
    THStack *sQ2_1n = new THStack("Q^{2} (1n, CD & FD)", "Q^{2} (1n, CD & FD);Q^{2} [GeV^{2}/c^{2}];");
    TH1D *hQ2_1n = new TH1D("Q^{2} (1n, FD)", "Q^{2} (1n, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_QEL_1n = new TH1D("Q^{2} (QE Only, 1n, FD)", "Q^{2} (QE Only, 1n, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_MEC_1n = new TH1D("Q^{2} (MEC Only, 1n, FD)", "Q^{2} (MEC Only, 1n, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_RES_1n = new TH1D("Q^{2} (RES Only, 1n, FD)", "Q^{2} (RES Only, 1n, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_DIS_1n = new TH1D("Q^{2} (DIS Only, 1n, FD)", "Q^{2} (DIS Only, 1n, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_QEL_1n =
        new TH1D("q = |#font[62]{q}| (QE Only, 1n, FD)", "q = |#font[62]{q}| (QE Only, 1n, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_MEC_1n =
        new TH1D("q = |#font[62]{q}| (MEC Only, 1n, FD)", "q = |#font[62]{q}| (MEC Only, 1n, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_RES_1n =
        new TH1D("q = |#font[62]{q}| (RES Only, 1n, FD)", "q = |#font[62]{q}| (RES Only, 1n, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_DIS_1n =
        new TH1D("q = |#font[62]{q}| (DIS Only, 1n, FD)", "q = |#font[62]{q}| (DIS Only, 1n, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_1n_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_1n_Directory"];

    THStack *sq_3v_1n = new THStack("q = |#font[62]{q}| (1n, CD & FD)", "q = |#font[62]{q}| Histogram (1n, CD & FD);q [GeV/c];");
    TH1D *hq_3v_1n = new TH1D("q = |#font[62]{q}| (1n, FD)", "q = |#font[62]{q}| (1n, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hq_3v_1n_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_1n_Directory"];

    TH2D *hQ2_VS_W_1n = new TH2D("Q^{2} vs. W (All Int., 1n)", "Q^{2} vs. W (All Int., 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_QEL_1n = new TH2D("Q^{2} vs. W (QE Only, 1n)", "Q^{2} vs. W (QE Only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                     numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_MEC_1n = new TH2D("Q^{2} vs. W (MEC Only, 1n)", "Q^{2} vs. W (MEC Only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                     numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_RES_1n = new TH2D("Q^{2} vs. W (RES Only, 1n)", "Q^{2} vs. W (RES Only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                     numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_DIS_1n = new TH2D("Q^{2} vs. W (DIS Only, 1n)", "Q^{2} vs. W (DIS Only, 1n);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                     numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_VS_W_1n_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_1n_Directory"];

    TH2D *hQ2_VS_q_3v_1n = new TH2D("Q^{2} vs. |#font[62]{q}| (All Int., 1n)", "Q^{2} vs. |#font[62]{q}| (All Int., 1n);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                    Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_QEL_1n = new TH2D("Q^{2} vs. |#font[62]{q}| (QE Only, 1n)", "Q^{2} vs. |#font[62]{q}| (QE Only, 1n);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                        numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_MEC_1n = new TH2D("Q^{2} vs. |#font[62]{q}| (MEC Only, 1n)", "Q^{2} vs. |#font[62]{q}| (MEC Only, 1n);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                        numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_RES_1n = new TH2D("Q^{2} vs. |#font[62]{q}| (RES Only, 1n)", "Q^{2} vs. |#font[62]{q}| (RES Only, 1n);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                        numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_DIS_1n = new TH2D("Q^{2} vs. |#font[62]{q}| (DIS Only, 1n)", "Q^{2} vs. |#font[62]{q}| (DIS Only, 1n);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                        numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_VS_q_3v_1n_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_1n_Directory"];

    TH2D *hQ2_VS_omega_1n = new TH2D("Q^{2} vs. #omega (All Int., 1n)", "Q^{2} vs. #omega (All Int., 1n);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                     Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_QEL_1n = new TH2D("Q^{2} vs. #omega (QE Only, 1n)", "Q^{2} vs. #omega (QE Only, 1n);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                         Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_MEC_1n = new TH2D("Q^{2} vs. #omega (MEC Only, 1n)", "Q^{2} vs. #omega (MEC Only, 1n);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                         Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_RES_1n = new TH2D("Q^{2} vs. #omega (RES Only, 1n)", "Q^{2} vs. #omega (RES Only, 1n);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                         Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_DIS_1n = new TH2D("Q^{2} vs. #omega (DIS Only, 1n)", "Q^{2} vs. #omega (DIS Only, 1n);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                         Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_VS_omega_1n_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_1n_Directory"];

    TH2D *hq_3v_VS_omega_1n = new TH2D("|#font[62]{q}| vs. #omega (All Int., 1n)", "|#font[62]{q}| vs. #omega (All Int., 1n);#omega [GeV];q [GeV/c]", numTH2Dbins_Momentum_transfer_plots,
                                       Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_QEL_1n = new TH2D("|#font[62]{q}| vs. #omega (QE Only, 1n)", "|#font[62]{q}| vs. #omega (QE Only, 1n);#omega [GeV];q [GeV/c]", numTH2Dbins_Momentum_transfer_plots,
                                           Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_MEC_1n = new TH2D("|#font[62]{q}| vs. #omega (MEC Only, 1n)", "|#font[62]{q}| vs. #omega (MEC Only, 1n);#omega [GeV];q [GeV/c]", numTH2Dbins_Momentum_transfer_plots,
                                           Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_RES_1n = new TH2D("|#font[62]{q}| vs. #omega (RES Only, 1n)", "|#font[62]{q}| vs. #omega (RES Only, 1n);#omega [GeV];q [GeV/c]", numTH2Dbins_Momentum_transfer_plots,
                                           Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_DIS_1n = new TH2D("|#font[62]{q}| vs. #omega (DIS Only, 1n)", "|#font[62]{q}| vs. #omega (DIS Only, 1n);#omega [GeV];q [GeV/c]", numTH2Dbins_Momentum_transfer_plots,
                                           Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hq_3v_VS_omega_1n_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_1n_Directory"];

    // Momentum transfer histograms (2p)
    THStack *sQ2_2p = new THStack("Q^{2} (2p, CD & FD)", "Q^{2} (2p, CD & FD);Q^{2} [GeV^{2}/c^{2}];");
    TH1D *hQ2_2p = new TH1D("Q^{2} (2p, FD)", "Q^{2} (2p, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_QEL_2p = new TH1D("Q^{2} (QE Only, 2p, FD)", "Q^{2} (QE Only, 2p, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_MEC_2p = new TH1D("Q^{2} (MEC Only, 2p, FD)", "Q^{2} (MEC Only, 2p, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_RES_2p = new TH1D("Q^{2} (RES Only, 2p, FD)", "Q^{2} (RES Only, 2p, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_DIS_2p = new TH1D("Q^{2} (DIS Only, 2p, FD)", "Q^{2} (DIS Only, 2p, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_2p_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_2p_Directory"];

    THStack *sq_3v_2p = new THStack("q = |#font[62]{q}| (2p, CD & FD)", "q = |#font[62]{q}| Histogram (2p, CD & FD);q [GeV/c];");
    TH1D *hq_3v_2p = new TH1D("q = |#font[62]{q}| (2p, FD)", "q = |#font[62]{q}| (2p, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_QEL_2p =
        new TH1D("q = |#font[62]{q}| (QE Only, 2p, FD)", "q = |#font[62]{q}| (QE Only, 2p, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_MEC_2p =
        new TH1D("q = |#font[62]{q}| (MEC Only, 2p, FD)", "q = |#font[62]{q}| (MEC Only, 2p, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_RES_2p =
        new TH1D("q = |#font[62]{q}| (RES Only, 2p, FD)", "q = |#font[62]{q}| (RES Only, 2p, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_DIS_2p =
        new TH1D("q = |#font[62]{q}| (DIS Only, 2p, FD)", "q = |#font[62]{q}| (DIS Only, 2p, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hq_3v_2p_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_2p_Directory"];

    TH2D *hQ2_VS_W_2p = new TH2D("Q^{2} vs. W (All Int., 2p)", "Q^{2} vs. W (All Int., 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                 numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_QEL_2p = new TH2D("Q^{2} vs. W (QE Only, 2p)", "Q^{2} vs. W (QE Only, 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                     numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_MEC_2p = new TH2D("Q^{2} vs. W (MEC Only, 2p)", "Q^{2} vs. W (MEC Only, 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                     numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_RES_2p = new TH2D("Q^{2} vs. W (RES Only, 2p)", "Q^{2} vs. W (RES Only, 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                     numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_DIS_2p = new TH2D("Q^{2} vs. W (DIS Only, 2p)", "Q^{2} vs. W (DIS Only, 2p);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                     numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_VS_W_2p_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_2p_Directory"];

    TH2D *hQ2_VS_q_3v_2p = new TH2D("Q^{2} vs. |#font[62]{q}| (All Int., 2p)", "Q^{2} vs. |#font[62]{q}| (All Int., 2p);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                    Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_QEL_2p = new TH2D("Q^{2} vs. |#font[62]{q}| (QE Only, 2p)", "Q^{2} vs. |#font[62]{q}| (QE Only, 2p);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                        numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_MEC_2p = new TH2D("Q^{2} vs. |#font[62]{q}| (MEC Only, 2p)", "Q^{2} vs. |#font[62]{q}| (MEC Only, 2p);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                        numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_RES_2p = new TH2D("Q^{2} vs. |#font[62]{q}| (RES Only, 2p)", "Q^{2} vs. |#font[62]{q}| (RES Only, 2p);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                        numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_DIS_2p = new TH2D("Q^{2} vs. |#font[62]{q}| (DIS Only, 2p)", "Q^{2} vs. |#font[62]{q}| (DIS Only, 2p);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                        numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_VS_q_3v_2p_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_2p_Directory"];

    TH2D *hQ2_VS_omega_2p = new TH2D("Q^{2} vs. #omega (All Int., 2p)", "Q^{2} vs. #omega (All Int., 2p);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                     Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_QEL_2p = new TH2D("Q^{2} vs. #omega (QE Only, 2p)", "Q^{2} vs. #omega (QE Only, 2p);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                         Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_MEC_2p = new TH2D("Q^{2} vs. #omega (MEC Only, 2p)", "Q^{2} vs. #omega (MEC Only, 2p);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                         Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_RES_2p = new TH2D("Q^{2} vs. #omega (RES Only, 2p)", "Q^{2} vs. #omega (RES Only, 2p);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                         Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_DIS_2p = new TH2D("Q^{2} vs. #omega (DIS Only, 2p)", "Q^{2} vs. #omega (DIS Only, 2p);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                         Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_VS_omega_2p_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_2p_Directory"];

    TH2D *hq_3v_VS_omega_2p = new TH2D("|#font[62]{q}| vs. #omega (All Int., 2p)", "|#font[62]{q}| vs. #omega (All Int., 2p);#omega [GeV];q [GeV/c]", numTH2Dbins_Momentum_transfer_plots,
                                       Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_QEL_2p = new TH2D("|#font[62]{q}| vs. #omega (QE Only, 2p)", "|#font[62]{q}| vs. #omega (QE Only, 2p);#omega [GeV];q [GeV/c]", numTH2Dbins_Momentum_transfer_plots,
                                           Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_MEC_2p = new TH2D("|#font[62]{q}| vs. #omega (MEC Only, 2p)", "|#font[62]{q}| vs. #omega (MEC Only, 2p);#omega [GeV];q [GeV/c]", numTH2Dbins_Momentum_transfer_plots,
                                           Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_RES_2p = new TH2D("|#font[62]{q}| vs. #omega (RES Only, 2p)", "|#font[62]{q}| vs. #omega (RES Only, 2p);#omega [GeV];q [GeV/c]", numTH2Dbins_Momentum_transfer_plots,
                                           Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_DIS_2p = new TH2D("|#font[62]{q}| vs. #omega (DIS Only, 2p)", "|#font[62]{q}| vs. #omega (DIS Only, 2p);#omega [GeV];q [GeV/c]", numTH2Dbins_Momentum_transfer_plots,
                                           Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hq_3v_VS_omega_2p_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_2p_Directory"];

    // Momentum transfer histograms (pFDpCD)
    THStack *sQ2_pFDpCD = new THStack("Q^{2} (pFDpCD, CD & FD)", "Q^{2} (pFDpCD, CD & FD);Q^{2} [GeV^{2}/c^{2}];");
    TH1D *hQ2_pFDpCD = new TH1D("Q^{2} (pFDpCD, FD)", "Q^{2} (pFDpCD, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_QEL_pFDpCD =
        new TH1D("Q^{2} (QE Only, pFDpCD, FD)", "Q^{2} (QE Only, pFDpCD, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_MEC_pFDpCD =
        new TH1D("Q^{2} (MEC Only, pFDpCD, FD)", "Q^{2} (MEC Only, pFDpCD, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_RES_pFDpCD =
        new TH1D("Q^{2} (RES Only, pFDpCD, FD)", "Q^{2} (RES Only, pFDpCD, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_DIS_pFDpCD =
        new TH1D("Q^{2} (DIS Only, pFDpCD, FD)", "Q^{2} (DIS Only, pFDpCD, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_pFDpCD_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_pFDpCD_Directory"];

    THStack *sq_3v_pFDpCD = new THStack("q = |#font[62]{q}| (pFDpCD, CD & FD)", "q = |#font[62]{q}| Histogram (pFDpCD, CD & FD);q [GeV/c];");
    TH1D *hq_3v_pFDpCD = new TH1D("q = |#font[62]{q}| (pFDpCD, FD)", "q = |#font[62]{q}| (pFDpCD, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_QEL_pFDpCD =
        new TH1D("q = |#font[62]{q}| (QE Only, pFDpCD, FD)", "q = |#font[62]{q}| (QE Only, pFDpCD, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_MEC_pFDpCD =
        new TH1D("q = |#font[62]{q}| (MEC Only, pFDpCD, FD)", "q = |#font[62]{q}| (MEC Only, pFDpCD, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_RES_pFDpCD =
        new TH1D("q = |#font[62]{q}| (RES Only, pFDpCD, FD)", "q = |#font[62]{q}| (RES Only, pFDpCD, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_DIS_pFDpCD =
        new TH1D("q = |#font[62]{q}| (DIS Only, pFDpCD, FD)", "q = |#font[62]{q}| (DIS Only, pFDpCD, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hq_3v_pFDpCD_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_pFDpCD_Directory"];

    TH2D *hQ2_VS_W_pFDpCD = new TH2D("Q^{2} vs. W (All Int., pFDpCD)", "Q^{2} vs. W (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                     numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_QEL_pFDpCD = new TH2D("Q^{2} vs. W (QE Only, pFDpCD)", "Q^{2} vs. W (QE Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                         numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_MEC_pFDpCD = new TH2D("Q^{2} vs. W (MEC Only, pFDpCD)", "Q^{2} vs. W (MEC Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                         numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_RES_pFDpCD = new TH2D("Q^{2} vs. W (RES Only, pFDpCD)", "Q^{2} vs. W (RES Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                         numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_DIS_pFDpCD = new TH2D("Q^{2} vs. W (DIS Only, pFDpCD)", "Q^{2} vs. W (DIS Only, pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                         numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_VS_W_pFDpCD_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_pFDpCD_Directory"];

    TH2D *hQ2_VS_q_3v_pFDpCD = new TH2D("Q^{2} vs. |#font[62]{q}| (All Int., pFDpCD)", "Q^{2} vs. |#font[62]{q}| (All Int., pFDpCD);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                        numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_QEL_pFDpCD = new TH2D("Q^{2} vs. |#font[62]{q}| (QE Only, pFDpCD)", "Q^{2} vs. |#font[62]{q}| (QE Only, pFDpCD);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                            numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_MEC_pFDpCD = new TH2D("Q^{2} vs. |#font[62]{q}| (MEC Only, pFDpCD)", "Q^{2} vs. |#font[62]{q}| (MEC Only, pFDpCD);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                            numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_RES_pFDpCD = new TH2D("Q^{2} vs. |#font[62]{q}| (RES Only, pFDpCD)", "Q^{2} vs. |#font[62]{q}| (RES Only, pFDpCD);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                            numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_DIS_pFDpCD = new TH2D("Q^{2} vs. |#font[62]{q}| (DIS Only, pFDpCD)", "Q^{2} vs. |#font[62]{q}| (DIS Only, pFDpCD);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                            numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_VS_q_3v_pFDpCD_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_pFDpCD_Directory"];

    TH2D *hQ2_VS_omega_pFDpCD = new TH2D("Q^{2} vs. #omega (All Int., pFDpCD)", "Q^{2} vs. #omega (All Int., pFDpCD);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                         Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_QEL_pFDpCD = new TH2D("Q^{2} vs. #omega (QE Only, pFDpCD)", "Q^{2} vs. #omega (QE Only, pFDpCD);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]",
                                             numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_MEC_pFDpCD = new TH2D("Q^{2} vs. #omega (MEC Only, pFDpCD)", "Q^{2} vs. #omega (MEC Only, pFDpCD);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]",
                                             numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_RES_pFDpCD = new TH2D("Q^{2} vs. #omega (RES Only, pFDpCD)", "Q^{2} vs. #omega (RES Only, pFDpCD);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]",
                                             numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_DIS_pFDpCD = new TH2D("Q^{2} vs. #omega (DIS Only, pFDpCD)", "Q^{2} vs. #omega (DIS Only, pFDpCD);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]",
                                             numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_VS_omega_pFDpCD_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_pFDpCD_Directory"];

    TH2D *hq_3v_VS_omega_pFDpCD = new TH2D("|#font[62]{q}| vs. #omega (All Int., pFDpCD)", "|#font[62]{q}| vs. #omega (All Int., pFDpCD);#omega [GeV];q [GeV/c]",
                                           numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_QEL_pFDpCD = new TH2D("|#font[62]{q}| vs. #omega (QE Only, pFDpCD)", "|#font[62]{q}| vs. #omega (QE Only, pFDpCD);#omega [GeV];q [GeV/c]",
                                               numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_MEC_pFDpCD = new TH2D("|#font[62]{q}| vs. #omega (MEC Only, pFDpCD)", "|#font[62]{q}| vs. #omega (MEC Only, pFDpCD);#omega [GeV];q [GeV/c]",
                                               numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_RES_pFDpCD = new TH2D("|#font[62]{q}| vs. #omega (RES Only, pFDpCD)", "|#font[62]{q}| vs. #omega (RES Only, pFDpCD);#omega [GeV];q [GeV/c]",
                                               numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_DIS_pFDpCD = new TH2D("|#font[62]{q}| vs. #omega (DIS Only, pFDpCD)", "|#font[62]{q}| vs. #omega (DIS Only, pFDpCD);#omega [GeV];q [GeV/c]",
                                               numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hq_3v_VS_omega_pFDpCD_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_pFDpCD_Directory"];

    // Momentum transfer histograms (nFDpCD)
    THStack *sQ2_nFDpCD = new THStack("Q^{2} (nFDpCD, CD & FD)", "Q^{2} (nFDpCD, CD & FD);Q^{2} [GeV^{2}/c^{2}];");
    TH1D *hQ2_nFDpCD = new TH1D("Q^{2} (nFDpCD, FD)", "Q^{2} (nFDpCD, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_QEL_nFDpCD =
        new TH1D("Q^{2} (QE Only, nFDpCD, FD)", "Q^{2} (QE Only, nFDpCD, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_MEC_nFDpCD =
        new TH1D("Q^{2} (MEC Only, nFDpCD, FD)", "Q^{2} (MEC Only, nFDpCD, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_RES_nFDpCD =
        new TH1D("Q^{2} (RES Only, nFDpCD, FD)", "Q^{2} (RES Only, nFDpCD, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hQ2_DIS_nFDpCD =
        new TH1D("Q^{2} (DIS Only, nFDpCD, FD)", "Q^{2} (DIS Only, nFDpCD, FD);Q^{2} [GeV^{2}/c^{2}];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_nFDpCD_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_nFDpCD_Directory"];

    THStack *sq_3v_nFDpCD = new THStack("q = |#font[62]{q}| (nFDpCD, CD & FD)", "q = |#font[62]{q}| Histogram (nFDpCD, CD & FD);q [GeV/c];");
    TH1D *hq_3v_nFDpCD = new TH1D("q = |#font[62]{q}| (nFDpCD, FD)", "q = |#font[62]{q}| (nFDpCD, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_QEL_nFDpCD =
        new TH1D("q = |#font[62]{q}| (QE Only, nFDpCD, FD)", "q = |#font[62]{q}| (QE Only, nFDpCD, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_MEC_nFDpCD =
        new TH1D("q = |#font[62]{q}| (MEC Only, nFDpCD, FD)", "q = |#font[62]{q}| (MEC Only, nFDpCD, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_RES_nFDpCD =
        new TH1D("q = |#font[62]{q}| (RES Only, nFDpCD, FD)", "q = |#font[62]{q}| (RES Only, nFDpCD, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH1D *hq_3v_DIS_nFDpCD =
        new TH1D("q = |#font[62]{q}| (DIS Only, nFDpCD, FD)", "q = |#font[62]{q}| (DIS Only, nFDpCD, FD);q [GeV/c];", numTH1Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hq_3v_nFDpCD_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_nFDpCD_Directory"];

    TH2D *hQ2_VS_W_nFDpCD = new TH2D("Q^{2} vs. W (All Int., nFDpCD)", "Q^{2} vs. W (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                     numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_QEL_nFDpCD = new TH2D("Q^{2} vs. W (QE Only, nFDpCD)", "Q^{2} vs. W (QE Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                         numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_MEC_nFDpCD = new TH2D("Q^{2} vs. W (MEC Only, nFDpCD)", "Q^{2} vs. W (MEC Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                         numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_RES_nFDpCD = new TH2D("Q^{2} vs. W (RES Only, nFDpCD)", "Q^{2} vs. W (RES Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                         numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_W_DIS_nFDpCD = new TH2D("Q^{2} vs. W (DIS Only, nFDpCD)", "Q^{2} vs. W (DIS Only, nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];Q^{2} [GeV^{2}/c^{2}]",
                                         numTH2Dbins_Momentum_transfer_plots, W_lboundary, W_uboundary, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_VS_W_nFDpCD_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_nFDpCD_Directory"];

    TH2D *hQ2_VS_q_3v_nFDpCD = new TH2D("Q^{2} vs. |#font[62]{q}| (All Int., nFDpCD)", "Q^{2} vs. |#font[62]{q}| (All Int., nFDpCD);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                        numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_QEL_nFDpCD = new TH2D("Q^{2} vs. |#font[62]{q}| (QE Only, nFDpCD)", "Q^{2} vs. |#font[62]{q}| (QE Only, nFDpCD);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                            numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_MEC_nFDpCD = new TH2D("Q^{2} vs. |#font[62]{q}| (MEC Only, nFDpCD)", "Q^{2} vs. |#font[62]{q}| (MEC Only, nFDpCD);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                            numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_RES_nFDpCD = new TH2D("Q^{2} vs. |#font[62]{q}| (RES Only, nFDpCD)", "Q^{2} vs. |#font[62]{q}| (RES Only, nFDpCD);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                            numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_q_3v_DIS_nFDpCD = new TH2D("Q^{2} vs. |#font[62]{q}| (DIS Only, nFDpCD)", "Q^{2} vs. |#font[62]{q}| (DIS Only, nFDpCD);q [GeV/c];Q^{2} [GeV^{2}/c^{2}]",
                                            numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_VS_q_3v_nFDpCD_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_nFDpCD_Directory"];

    TH2D *hQ2_VS_omega_nFDpCD = new TH2D("Q^{2} vs. #omega (All Int., nFDpCD)", "Q^{2} vs. #omega (All Int., nFDpCD);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]", numTH2Dbins_Momentum_transfer_plots,
                                         Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_QEL_nFDpCD = new TH2D("Q^{2} vs. #omega (QE Only, nFDpCD)", "Q^{2} vs. #omega (QE Only, nFDpCD);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]",
                                             numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_MEC_nFDpCD = new TH2D("Q^{2} vs. #omega (MEC Only, nFDpCD)", "Q^{2} vs. #omega (MEC Only, nFDpCD);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]",
                                             numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_RES_nFDpCD = new TH2D("Q^{2} vs. #omega (RES Only, nFDpCD)", "Q^{2} vs. #omega (RES Only, nFDpCD);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]",
                                             numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hQ2_VS_omega_DIS_nFDpCD = new TH2D("Q^{2} vs. #omega (DIS Only, nFDpCD)", "Q^{2} vs. #omega (DIS Only, nFDpCD);#omega [GeV];Q^{2} [GeV^{2}/c^{2}]",
                                             numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hQ2_VS_omega_nFDpCD_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_nFDpCD_Directory"];

    TH2D *hq_3v_VS_omega_nFDpCD = new TH2D("|#font[62]{q}| vs. #omega (All Int., nFDpCD)", "|#font[62]{q}| vs. #omega (All Int., nFDpCD);#omega [GeV];q [GeV/c]",
                                           numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_QEL_nFDpCD = new TH2D("|#font[62]{q}| vs. #omega (QE Only, nFDpCD)", "|#font[62]{q}| vs. #omega (QE Only, nFDpCD);#omega [GeV];q [GeV/c]",
                                               numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_MEC_nFDpCD = new TH2D("|#font[62]{q}| vs. #omega (MEC Only, nFDpCD)", "|#font[62]{q}| vs. #omega (MEC Only, nFDpCD);#omega [GeV];q [GeV/c]",
                                               numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_RES_nFDpCD = new TH2D("|#font[62]{q}| vs. #omega (RES Only, nFDpCD)", "|#font[62]{q}| vs. #omega (RES Only, nFDpCD);#omega [GeV];q [GeV/c]",
                                               numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    TH2D *hq_3v_VS_omega_DIS_nFDpCD = new TH2D("|#font[62]{q}| vs. #omega (DIS Only, nFDpCD)", "|#font[62]{q}| vs. #omega (DIS Only, nFDpCD);#omega [GeV];q [GeV/c]",
                                               numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD, numTH2Dbins_Momentum_transfer_plots, Q2_lboundary_FD, Q2_uboundary_FD);
    string hq_3v_VS_omega_nFDpCD_Dir = directories.Momentum_transfer_Directory_map["Momentum_transfer_nFDpCD_Directory"];

    // ======================================================================================================================================================================
    // Energy (E_e) histograms
    // ======================================================================================================================================================================

    // Energy (E_e) histograms

    // E_e plots (1e cut)
    /* Energy (E_e) histograms (1e cut, CD & FD) */
    THStack *sE_e_1e_cut = new THStack("E_{e} (1e Cut)", "E_{e} Histogram (1e Cut);E_{e} [GeV]");
    string sE_e_1e_cut_Dir = directories.E_e_Directory_map["E_e_All_Int_1e_cut_stack_Directory"];

    TH1D *hE_e_All_Int_1e_cut_FD = new TH1D("E_{e} (1e Cut)", "E_{e} Histogram (All Int., 1e Cut);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_QEL_1e_cut_FD = new TH1D("E_{e} (QEL Only, 1e cut)", "E_{e} Histogram (QEL Only, 1e cut);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_MEC_1e_cut_FD = new TH1D("E_{e} (MEC Only, 1e cut)", "E_{e} Histogram (MEC Only, 1e cut);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_RES_1e_cut_FD = new TH1D("E_{e} (RES Only, 1e cut)", "E_{e} Histogram (RES Only, 1e cut);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_DIS_1e_cut_FD = new TH1D("E_{e} (DIS Only, 1e cut)", "E_{e} Histogram (DIS Only, 1e cut);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    string hE_e_All_Int_1e_cut_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_1e_cut_Directory"];
    string hE_e_QEL_1e_cut_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_1e_cut_Directory"];
    string hE_e_MEC_1e_cut_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_1e_cut_Directory"];
    string hE_e_RES_1e_cut_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_1e_cut_Directory"];
    string hE_e_DIS_1e_cut_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_1e_cut_Directory"];

    TH2D *hE_e_VS_Theta_e_All_Int_1e_cut_FD = new TH2D("E_{e} vs. #theta_{e} (All Int., 1e Cut)", "E_{e} vs. #theta_{e} (All Int., 1e Cut);#theta_{e} [#circ];E_{e} [GeV]",
                                                       numTH2Dbins_E_e_Plots, 0, 50, numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_QEL_1e_cut_FD = new TH2D("E_{e} vs. #theta_{e} (QEL Only, 1e cut)", "E_{e} vs. #theta_{e} (QEL Only, 1e cut);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots,
                                                   0, 50, numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_MEC_1e_cut_FD = new TH2D("E_{e} vs. #theta_{e} (MEC Only, 1e cut)", "E_{e} vs. #theta_{e} (MEC Only, 1e cut);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots,
                                                   0, 50, numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_RES_1e_cut_FD = new TH2D("E_{e} vs. #theta_{e} (RES Only, 1e cut)", "E_{e} vs. #theta_{e} (RES Only, 1e cut);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots,
                                                   0, 50, numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_DIS_1e_cut_FD = new TH2D("E_{e} vs. #theta_{e} (DIS Only, 1e cut)", "E_{e} vs. #theta_{e} (DIS Only, 1e cut);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots,
                                                   0, 50, numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    string hE_e_VS_Theta_e_All_Int_1e_cut_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_1e_cut_Directory"];
    string hE_e_VS_Theta_e_QEL_1e_cut_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_1e_cut_Directory"];
    string hE_e_VS_Theta_e_MEC_1e_cut_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_1e_cut_Directory"];
    string hE_e_VS_Theta_e_RES_1e_cut_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_1e_cut_Directory"];
    string hE_e_VS_Theta_e_DIS_1e_cut_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_1e_cut_Directory"];

    // E_e plots (1p)
    /* Energy (E_e) histograms (1p, CD & FD) */
    THStack *sE_e_1p_FD = new THStack("E_{e} (1p)", "E_{e} Histogram (1p);E_{e} [GeV]");
    string sE_e_1p_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_1p_stack_Directory"];

    TH1D *hE_e_All_Int_1p_FD = new TH1D("E_{e} (All Int., 1p)", "E_{e} Histogram (All Int., 1p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_QEL_1p_FD = new TH1D("E_{e} (QEL Only, 1p)", "E_{e} Histogram (QEL Only, 1p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_MEC_1p_FD = new TH1D("E_{e} (MEC Only, 1p)", "E_{e} Histogram (MEC Only, 1p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_RES_1p_FD = new TH1D("E_{e} (RES Only, 1p)", "E_{e} Histogram (RES Only, 1p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_DIS_1p_FD = new TH1D("E_{e} (DIS Only, 1p)", "E_{e} Histogram (DIS Only, 1p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    string hE_e_All_Int_1p_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_1p_Directory"];
    string hE_e_QEL_1p_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_1p_Directory"];
    string hE_e_MEC_1p_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_1p_Directory"];
    string hE_e_RES_1p_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_1p_Directory"];
    string hE_e_DIS_1p_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_1p_Directory"];

    /* E_e vs. Theta_e (1p, CD & FD) */
    TH2D *hE_e_VS_Theta_e_All_Int_1p_FD = new TH2D("E_{e} vs. #theta_{e} (All Int., 1p)", "E_{e} vs. #theta_{e} (All Int., 1p);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots, 0, 50,
                                                   numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_QEL_1p_FD = new TH2D("E_{e} vs. #theta_{e} (QEL Only, 1p)", "E_{e} vs. #theta_{e} (QEL Only, 1p);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots, 0, 50,
                                               numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_MEC_1p_FD = new TH2D("E_{e} vs. #theta_{e} (MEC Only, 1p)", "E_{e} vs. #theta_{e} (MEC Only, 1p);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots, 0, 50,
                                               numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_RES_1p_FD = new TH2D("E_{e} vs. #theta_{e} (RES Only, 1p)", "E_{e} vs. #theta_{e} (RES Only, 1p);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots, 0, 50,
                                               numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_DIS_1p_FD = new TH2D("E_{e} vs. #theta_{e} (DIS Only, 1p)", "E_{e} vs. #theta_{e} (DIS Only, 1p);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots, 0, 50,
                                               numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    string hE_e_VS_Theta_e_All_Int_1p_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_1p_Directory"];
    string hE_e_VS_Theta_e_QEL_1p_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_1p_Directory"];
    string hE_e_VS_Theta_e_MEC_1p_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_1p_Directory"];
    string hE_e_VS_Theta_e_RES_1p_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_1p_Directory"];
    string hE_e_VS_Theta_e_DIS_1p_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_1p_Directory"];

    /* Energy (E_e) histograms around theta_e = 15 (1p, CD & FD) */
    THStack *sE_e_15_1p_FD = new THStack("E_{e} (1p)", "E_{e} Histogram (1p);E_{e} [GeV]");
    string sE_e_15_1p_CD_Dir = directories.E_e_Directory_map["E_e_All_Int_1p_stack_Directory"];
    string sE_e_15_1p_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_1p_stack_Directory"];

    TH1D *hE_e_15_All_Int_1p_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (All Int., 1p)", "E_{e} around #theta_{e} = 15#circ (All Int., 1p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_QEL_1p_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (QEL Only, 1p)", "E_{e} around #theta_{e} = 15#circ (QEL Only, 1p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_MEC_1p_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (MEC Only, 1p)", "E_{e} around #theta_{e} = 15#circ (MEC Only, 1p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_RES_1p_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (RES Only, 1p)", "E_{e} around #theta_{e} = 15#circ (RES Only, 1p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_DIS_1p_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (DIS Only, 1p)", "E_{e} around #theta_{e} = 15#circ (DIS Only, 1p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    string hE_e_15_All_Int_1p_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_1p_Directory"];
    string hE_e_15_QEL_1p_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_1p_Directory"];
    string hE_e_15_MEC_1p_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_1p_Directory"];
    string hE_e_15_RES_1p_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_1p_Directory"];
    string hE_e_15_DIS_1p_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_1p_Directory"];

    // E_e plots (1n)
    /* Energy (E_e) histograms (1n, CD & FD) */
    THStack *sE_e_1n_FD = new THStack("E_{e} (1n)", "E_{e} Histogram (1n);E_{e} [GeV]");
    string sE_e_1n_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_1n_stack_Directory"];

    TH1D *hE_e_All_Int_1n_FD = new TH1D("E_{e} (All Int., 1n)", "E_{e} Histogram (All Int., 1n);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_QEL_1n_FD = new TH1D("E_{e} (QEL Only, 1n)", "E_{e} Histogram (QEL Only, 1n);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_MEC_1n_FD = new TH1D("E_{e} (MEC Only, 1n)", "E_{e} Histogram (MEC Only, 1n);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_RES_1n_FD = new TH1D("E_{e} (RES Only, 1n)", "E_{e} Histogram (RES Only, 1n);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_DIS_1n_FD = new TH1D("E_{e} (DIS Only, 1n)", "E_{e} Histogram (DIS Only, 1n);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    string hE_e_All_Int_1n_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_1n_Directory"];
    string hE_e_QEL_1n_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_1n_Directory"];
    string hE_e_MEC_1n_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_1n_Directory"];
    string hE_e_RES_1n_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_1n_Directory"];
    string hE_e_DIS_1n_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_1n_Directory"];

    /* E_e vs. Theta_e (1n, CD & FD) */
    TH2D *hE_e_VS_Theta_e_All_Int_1n_FD = new TH2D("E_{e} vs. #theta_{e} (All Int., 1n)", "E_{e} vs. #theta_{e} (All Int., 1n);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots, 0, 50,
                                                   numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_QEL_1n_FD = new TH2D("E_{e} vs. #theta_{e} (QEL Only, 1n)", "E_{e} vs. #theta_{e} (QEL Only, 1n);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots, 0, 50,
                                               numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_MEC_1n_FD = new TH2D("E_{e} vs. #theta_{e} (MEC Only, 1n)", "E_{e} vs. #theta_{e} (MEC Only, 1n);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots, 0, 50,
                                               numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_RES_1n_FD = new TH2D("E_{e} vs. #theta_{e} (RES Only, 1n)", "E_{e} vs. #theta_{e} (RES Only, 1n);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots, 0, 50,
                                               numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_DIS_1n_FD = new TH2D("E_{e} vs. #theta_{e} (DIS Only, 1n)", "E_{e} vs. #theta_{e} (DIS Only, 1n);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots, 0, 50,
                                               numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    string hE_e_VS_Theta_e_All_Int_1n_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_1n_Directory"];
    string hE_e_VS_Theta_e_QEL_1n_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_1n_Directory"];
    string hE_e_VS_Theta_e_MEC_1n_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_1n_Directory"];
    string hE_e_VS_Theta_e_RES_1n_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_1n_Directory"];
    string hE_e_VS_Theta_e_DIS_1n_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_1n_Directory"];

    /* Energy (E_e) histograms around theta_e = 15 (1n, CD & FD) */
    THStack *sE_e_15_1n_FD = new THStack("E_{e} (1n)", "E_{e} Histogram (1n);E_{e} [GeV]");
    string sE_e_15_1n_CD_Dir = directories.E_e_Directory_map["E_e_All_Int_1n_stack_Directory"];
    string sE_e_15_1n_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_1n_stack_Directory"];

    TH1D *hE_e_15_All_Int_1n_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (All Int., 1n)", "E_{e} around #theta_{e} = 15#circ (All Int., 1n);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_QEL_1n_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (QEL Only, 1n)", "E_{e} around #theta_{e} = 15#circ (QEL Only, 1n);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_MEC_1n_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (MEC Only, 1n)", "E_{e} around #theta_{e} = 15#circ (MEC Only, 1n);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_RES_1n_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (RES Only, 1n)", "E_{e} around #theta_{e} = 15#circ (RES Only, 1n);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_DIS_1n_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (DIS Only, 1n)", "E_{e} around #theta_{e} = 15#circ (DIS Only, 1n);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    string hE_e_15_All_Int_1n_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_1n_Directory"];
    string hE_e_15_QEL_1n_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_1n_Directory"];
    string hE_e_15_MEC_1n_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_1n_Directory"];
    string hE_e_15_RES_1n_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_1n_Directory"];
    string hE_e_15_DIS_1n_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_1n_Directory"];

    // E_e plots (2p)
    /* Energy (E_e) histograms (2p, CD & FD) */
    THStack *sE_e_2p_FD = new THStack("E_{e} (2p)", "E_{e} Histogram (2p);E_{e} [GeV]");
    string sE_e_2p_CD_Dir = directories.E_e_Directory_map["E_e_All_Int_2p_stack_Directory"];
    string sE_e_2p_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_2p_stack_Directory"];

    TH1D *hE_e_All_Int_2p_FD = new TH1D("E_{e} (All Int., 2p)", "E_{e} Histogram (All Int., 2p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_QEL_2p_FD = new TH1D("E_{e} (QEL Only, 2p)", "E_{e} Histogram (QEL Only, 2p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_MEC_2p_FD = new TH1D("E_{e} (MEC Only, 2p)", "E_{e} Histogram (MEC Only, 2p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_RES_2p_FD = new TH1D("E_{e} (RES Only, 2p)", "E_{e} Histogram (RES Only, 2p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_DIS_2p_FD = new TH1D("E_{e} (DIS Only, 2p)", "E_{e} Histogram (DIS Only, 2p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    string hE_e_All_Int_2p_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_2p_Directory"];
    string hE_e_QEL_2p_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_2p_Directory"];
    string hE_e_MEC_2p_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_2p_Directory"];
    string hE_e_RES_2p_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_2p_Directory"];
    string hE_e_DIS_2p_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_2p_Directory"];

    /* E_e vs. Theta_e (2p, CD & FD) */
    TH2D *hE_e_VS_Theta_e_All_Int_2p_FD = new TH2D("E_{e} vs. #theta_{e} (All Int., 2p)", "E_{e} vs. #theta_{e} (All Int., 2p);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots, 0, 50,
                                                   numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_QEL_2p_FD = new TH2D("E_{e} vs. #theta_{e} (QEL Only, 2p)", "E_{e} vs. #theta_{e} (QEL Only, 2p);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots, 0, 50,
                                               numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_MEC_2p_FD = new TH2D("E_{e} vs. #theta_{e} (MEC Only, 2p)", "E_{e} vs. #theta_{e} (MEC Only, 2p);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots, 0, 50,
                                               numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_RES_2p_FD = new TH2D("E_{e} vs. #theta_{e} (RES Only, 2p)", "E_{e} vs. #theta_{e} (RES Only, 2p);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots, 0, 50,
                                               numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_DIS_2p_FD = new TH2D("E_{e} vs. #theta_{e} (DIS Only, 2p)", "E_{e} vs. #theta_{e} (DIS Only, 2p);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots, 0, 50,
                                               numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    string hE_e_VS_Theta_e_All_Int_2p_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_2p_Directory"];
    string hE_e_VS_Theta_e_QEL_2p_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_2p_Directory"];
    string hE_e_VS_Theta_e_MEC_2p_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_2p_Directory"];
    string hE_e_VS_Theta_e_RES_2p_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_2p_Directory"];
    string hE_e_VS_Theta_e_DIS_2p_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_2p_Directory"];

    /* Energy (E_e) histograms around theta_e = 15 (2p, CD & FD) */
    THStack *sE_e_15_2p_FD = new THStack("E_{e} (2p)", "E_{e} Histogram (2p);E_{e} [GeV]");
    string sE_e_15_2p_CD_Dir = directories.E_e_Directory_map["E_e_All_Int_2p_stack_Directory"];
    string sE_e_15_2p_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_2p_stack_Directory"];

    TH1D *hE_e_15_All_Int_2p_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (All Int., 2p)", "E_{e} around #theta_{e} = 15#circ (All Int., 2p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_QEL_2p_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (QEL Only, 2p)", "E_{e} around #theta_{e} = 15#circ (QEL Only, 2p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_MEC_2p_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (MEC Only, 2p)", "E_{e} around #theta_{e} = 15#circ (MEC Only, 2p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_RES_2p_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (RES Only, 2p)", "E_{e} around #theta_{e} = 15#circ (RES Only, 2p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_DIS_2p_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (DIS Only, 2p)", "E_{e} around #theta_{e} = 15#circ (DIS Only, 2p);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    string hE_e_15_All_Int_2p_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_2p_Directory"];
    string hE_e_15_QEL_2p_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_2p_Directory"];
    string hE_e_15_MEC_2p_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_2p_Directory"];
    string hE_e_15_RES_2p_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_2p_Directory"];
    string hE_e_15_DIS_2p_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_2p_Directory"];

    // E_e plots (pFDpCD)
    /* Energy (E_e) histograms (pFDpCD, CD & FD) */
    THStack *sE_e_pFDpCD_FD = new THStack("E_{e} (pFDpCD)", "E_{e} Histogram (pFDpCD);E_{e} [GeV]");
    string sE_e_pFDpCD_CD_Dir = directories.E_e_Directory_map["E_e_All_Int_pFDpCD_stack_Directory"];
    string sE_e_pFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_pFDpCD_stack_Directory"];

    TH1D *hE_e_All_Int_pFDpCD_FD = new TH1D("E_{e} (All Int., pFDpCD)", "E_{e} Histogram (All Int., pFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_QEL_pFDpCD_FD = new TH1D("E_{e} (QEL Only, pFDpCD)", "E_{e} Histogram (QEL Only, pFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_MEC_pFDpCD_FD = new TH1D("E_{e} (MEC Only, pFDpCD)", "E_{e} Histogram (MEC Only, pFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_RES_pFDpCD_FD = new TH1D("E_{e} (RES Only, pFDpCD)", "E_{e} Histogram (RES Only, pFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_DIS_pFDpCD_FD = new TH1D("E_{e} (DIS Only, pFDpCD)", "E_{e} Histogram (DIS Only, pFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    string hE_e_All_Int_pFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_pFDpCD_Directory"];
    string hE_e_QEL_pFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_pFDpCD_Directory"];
    string hE_e_MEC_pFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_pFDpCD_Directory"];
    string hE_e_RES_pFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_pFDpCD_Directory"];
    string hE_e_DIS_pFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_pFDpCD_Directory"];

    /* E_e vs. Theta_e (pFDpCD, CD & FD) */
    TH2D *hE_e_VS_Theta_e_All_Int_pFDpCD_FD = new TH2D("E_{e} vs. #theta_{e} (All Int., pFDpCD)", "E_{e} vs. #theta_{e} (All Int., pFDpCD);#theta_{e} [#circ];E_{e} [GeV]",
                                                       numTH2Dbins_E_e_Plots, 0, 50, numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_QEL_pFDpCD_FD = new TH2D("E_{e} vs. #theta_{e} (QEL Only, pFDpCD)", "E_{e} vs. #theta_{e} (QEL Only, pFDpCD);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots,
                                                   0, 50, numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_MEC_pFDpCD_FD = new TH2D("E_{e} vs. #theta_{e} (MEC Only, pFDpCD)", "E_{e} vs. #theta_{e} (MEC Only, pFDpCD);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots,
                                                   0, 50, numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_RES_pFDpCD_FD = new TH2D("E_{e} vs. #theta_{e} (RES Only, pFDpCD)", "E_{e} vs. #theta_{e} (RES Only, pFDpCD);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots,
                                                   0, 50, numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_DIS_pFDpCD_FD = new TH2D("E_{e} vs. #theta_{e} (DIS Only, pFDpCD)", "E_{e} vs. #theta_{e} (DIS Only, pFDpCD);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots,
                                                   0, 50, numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    string hE_e_VS_Theta_e_All_Int_pFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_pFDpCD_Directory"];
    string hE_e_VS_Theta_e_QEL_pFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_pFDpCD_Directory"];
    string hE_e_VS_Theta_e_MEC_pFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_pFDpCD_Directory"];
    string hE_e_VS_Theta_e_RES_pFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_pFDpCD_Directory"];
    string hE_e_VS_Theta_e_DIS_pFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_pFDpCD_Directory"];

    /* Energy (E_e) histograms around theta_e = 15 (pFDpCD, CD & FD) */
    THStack *sE_e_15_pFDpCD_FD = new THStack("E_{e} (pFDpCD)", "E_{e} Histogram (pFDpCD);E_{e} [GeV]");
    string sE_e_15_pFDpCD_CD_Dir = directories.E_e_Directory_map["E_e_All_Int_pFDpCD_stack_Directory"];
    string sE_e_15_pFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_pFDpCD_stack_Directory"];

    TH1D *hE_e_15_All_Int_pFDpCD_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (All Int., pFDpCD)", "E_{e} around #theta_{e} = 15#circ (All Int., pFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_QEL_pFDpCD_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (QEL Only, pFDpCD)", "E_{e} around #theta_{e} = 15#circ (QEL Only, pFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_MEC_pFDpCD_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (MEC Only, pFDpCD)", "E_{e} around #theta_{e} = 15#circ (MEC Only, pFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_RES_pFDpCD_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (RES Only, pFDpCD)", "E_{e} around #theta_{e} = 15#circ (RES Only, pFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_DIS_pFDpCD_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (DIS Only, pFDpCD)", "E_{e} around #theta_{e} = 15#circ (DIS Only, pFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    string hE_e_15_All_Int_pFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_pFDpCD_Directory"];
    string hE_e_15_QEL_pFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_pFDpCD_Directory"];
    string hE_e_15_MEC_pFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_pFDpCD_Directory"];
    string hE_e_15_RES_pFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_pFDpCD_Directory"];
    string hE_e_15_DIS_pFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_pFDpCD_Directory"];

    // E_e plots (nFDpCD)
    /* Energy (E_e) histograms (nFDpCD, CD & FD) */
    THStack *sE_e_nFDpCD_FD = new THStack("E_{e} (nFDpCD)", "E_{e} Histogram (nFDpCD);E_{e} [GeV]");
    string sE_e_nFDpCD_CD_Dir = directories.E_e_Directory_map["E_e_All_Int_nFDpCD_stack_Directory"];
    string sE_e_nFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_nFDpCD_stack_Directory"];

    TH1D *hE_e_All_Int_nFDpCD_FD = new TH1D("E_{e} (All Int., nFDpCD)", "E_{e} Histogram (All Int., nFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_QEL_nFDpCD_FD = new TH1D("E_{e} (QEL Only, nFDpCD)", "E_{e} Histogram (QEL Only, nFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_MEC_nFDpCD_FD = new TH1D("E_{e} (MEC Only, nFDpCD)", "E_{e} Histogram (MEC Only, nFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_RES_nFDpCD_FD = new TH1D("E_{e} (RES Only, nFDpCD)", "E_{e} Histogram (RES Only, nFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_DIS_nFDpCD_FD = new TH1D("E_{e} (DIS Only, nFDpCD)", "E_{e} Histogram (DIS Only, nFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    string hE_e_All_Int_nFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_nFDpCD_Directory"];
    string hE_e_QEL_nFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_nFDpCD_Directory"];
    string hE_e_MEC_nFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_nFDpCD_Directory"];
    string hE_e_RES_nFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_nFDpCD_Directory"];
    string hE_e_DIS_nFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_nFDpCD_Directory"];

    /* E_e vs. Theta_e (nFDpCD, CD & FD) */
    TH2D *hE_e_VS_Theta_e_All_Int_nFDpCD_FD = new TH2D("E_{e} vs. #theta_{e} (All Int., nFDpCD)", "E_{e} vs. #theta_{e} (All Int., nFDpCD);#theta_{e} [#circ];E_{e} [GeV]",
                                                       numTH2Dbins_E_e_Plots, 0, 50, numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_QEL_nFDpCD_FD = new TH2D("E_{e} vs. #theta_{e} (QEL Only, nFDpCD)", "E_{e} vs. #theta_{e} (QEL Only, nFDpCD);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots,
                                                   0, 50, numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_MEC_nFDpCD_FD = new TH2D("E_{e} vs. #theta_{e} (MEC Only, nFDpCD)", "E_{e} vs. #theta_{e} (MEC Only, nFDpCD);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots,
                                                   0, 50, numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_RES_nFDpCD_FD = new TH2D("E_{e} vs. #theta_{e} (RES Only, nFDpCD)", "E_{e} vs. #theta_{e} (RES Only, nFDpCD);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots,
                                                   0, 50, numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    TH2D *hE_e_VS_Theta_e_DIS_nFDpCD_FD = new TH2D("E_{e} vs. #theta_{e} (DIS Only, nFDpCD)", "E_{e} vs. #theta_{e} (DIS Only, nFDpCD);#theta_{e} [#circ];E_{e} [GeV]", numTH2Dbins_E_e_Plots,
                                                   0, 50, numTH2Dbins_E_e_Plots, 0, beamE * 1.1);
    string hE_e_VS_Theta_e_All_Int_nFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_nFDpCD_Directory"];
    string hE_e_VS_Theta_e_QEL_nFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_nFDpCD_Directory"];
    string hE_e_VS_Theta_e_MEC_nFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_nFDpCD_Directory"];
    string hE_e_VS_Theta_e_RES_nFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_nFDpCD_Directory"];
    string hE_e_VS_Theta_e_DIS_nFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_VS_Theta_e_All_Int_nFDpCD_Directory"];

    /* Energy (E_e) histograms around theta_e = 15 (nFDpCD, CD & FD) */
    THStack *sE_e_15_nFDpCD_FD = new THStack("E_{e} (nFDpCD)", "E_{e} Histogram (nFDpCD);E_{e} [GeV]");
    string sE_e_15_nFDpCD_CD_Dir = directories.E_e_Directory_map["E_e_All_Int_nFDpCD_stack_Directory"];
    string sE_e_15_nFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_All_Int_nFDpCD_stack_Directory"];

    TH1D *hE_e_15_All_Int_nFDpCD_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (All Int., nFDpCD)", "E_{e} around #theta_{e} = 15#circ (All Int., nFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_QEL_nFDpCD_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (QEL Only, nFDpCD)", "E_{e} around #theta_{e} = 15#circ (QEL Only, nFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_MEC_nFDpCD_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (MEC Only, nFDpCD)", "E_{e} around #theta_{e} = 15#circ (MEC Only, nFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_RES_nFDpCD_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (RES Only, nFDpCD)", "E_{e} around #theta_{e} = 15#circ (RES Only, nFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    TH1D *hE_e_15_DIS_nFDpCD_FD =
        new TH1D("E_{e} around #theta_{e} = 15#circ (DIS Only, nFDpCD)", "E_{e} around #theta_{e} = 15#circ (DIS Only, nFDpCD);E_{e} [GeV]", numTH1Dbins_E_e_Plots, 0, beamE * 1.1);
    string hE_e_15_All_Int_nFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_nFDpCD_Directory"];
    string hE_e_15_QEL_nFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_nFDpCD_Directory"];
    string hE_e_15_MEC_nFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_nFDpCD_Directory"];
    string hE_e_15_RES_nFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_nFDpCD_Directory"];
    string hE_e_15_DIS_nFDpCD_FD_Dir = directories.E_e_Directory_map["E_e_15_All_Int_nFDpCD_Directory"];

    // ======================================================================================================================================================================
    // Energy Transfer (ET) histograms
    // ======================================================================================================================================================================

    // Energy Transfer (ET) histograms
    string tET_All_Ang = "Energy transfer #omega for every #theta_{e}", tET15 = "Energy transfer #omega Around #theta_{e} = 15#circ";

    // ET for every theta_e (1p)
    THStack *sET_All_Ang_All_Int_1p_FD = new THStack("#omega for all #theta_{e} (1p)", "Energy transfer #omega for all #theta_{e} (1p);#omega = E_{beam}-E_{e} [GeV]");
    string sET_All_Ang_All_Int_1p_FD_Dir = directories.ETrans_Directory_map["ETrans_All_Ang_stack_1p_Directory"];

    TH1D *hET_All_Ang_All_Int_1p_FD =
        new TH1D("#omega for all #theta_{e} (All Int., 1p)", "Energy transfer #omega for all #theta_{e} (All Int., 1p);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_QEL_1p_FD = new TH1D("#omega for all #theta_{e} (QEL Only, 1p, FD)", "Energy transfer #omega for all #theta_{e} (QEL Only, 1p);#omega = E_{beam}-E_{e} [GeV]",
                                           numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_MEC_1p_FD = new TH1D("#omega for all #theta_{e} (MEC Only, 1p, FD)", "Energy transfer #omega for all #theta_{e} (MEC Only, 1p);#omega = E_{beam}-E_{e} [GeV]",
                                           numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_RES_1p_FD = new TH1D("#omega for all #theta_{e} (RES Only, 1p, FD)", "Energy transfer #omega for all #theta_{e} (RES Only, 1p);#omega = E_{beam}-E_{e} [GeV]",
                                           numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_DIS_1p_FD = new TH1D("#omega for all #theta_{e} (DIS Only, 1p, FD)", "Energy transfer #omega for all #theta_{e} (DIS Only, 1p);#omega = E_{beam}-E_{e} [GeV]",
                                           numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    string hET_All_Ang_All_Int_1p_FD_Dir = directories.ETrans_Directory_map["ETrans_All_Int_All_Ang_1p_Directory"];
    string hET_All_Ang_QEL_1p_FD_Dir = directories.ETrans_Directory_map["ETrans_QEL_All_Ang_1p_Directory"];
    string hET_All_Ang_MEC_1p_FD_Dir = directories.ETrans_Directory_map["ETrans_MEC_All_Ang_1p_Directory"];
    string hET_All_Ang_RES_1p_FD_Dir = directories.ETrans_Directory_map["ETrans_RES_All_Ang_1p_Directory"];
    string hET_All_Ang_DIS_1p_FD_Dir = directories.ETrans_Directory_map["ETrans_DIS_All_Ang_1p_Directory"];

    // ET for every theta_e (1n)
    THStack *sET_All_Ang_All_Int_1n_FD = new THStack("#omega for all #theta_{e} (1n)", "Energy transfer #omega for all #theta_{e} (1n);#omega = E_{beam}-E_{e} [GeV]");
    string sET_All_Ang_All_Int_1n_FD_Dir = directories.ETrans_Directory_map["ETrans_All_Ang_stack_1n_Directory"];

    TH1D *hET_All_Ang_All_Int_1n_FD =
        new TH1D("#omega for all #theta_{e} (All Int., 1n)", "Energy transfer #omega for all #theta_{e} (All Int., 1n);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_QEL_1n_FD = new TH1D("#omega for all #theta_{e} (QEL Only, 1n, FD)", "Energy transfer #omega for all #theta_{e} (QEL Only, 1n);#omega = E_{beam}-E_{e} [GeV]",
                                           numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_MEC_1n_FD = new TH1D("#omega for all #theta_{e} (MEC Only, 1n, FD)", "Energy transfer #omega for all #theta_{e} (MEC Only, 1n);#omega = E_{beam}-E_{e} [GeV]",
                                           numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_RES_1n_FD = new TH1D("#omega for all #theta_{e} (RES Only, 1n, FD)", "Energy transfer #omega for all #theta_{e} (RES Only, 1n);#omega = E_{beam}-E_{e} [GeV]",
                                           numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_DIS_1n_FD = new TH1D("#omega for all #theta_{e} (DIS Only, 1n, FD)", "Energy transfer #omega for all #theta_{e} (DIS Only, 1n);#omega = E_{beam}-E_{e} [GeV]",
                                           numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    string hET_All_Ang_All_Int_1n_FD_Dir = directories.ETrans_Directory_map["ETrans_All_Int_All_Ang_1n_Directory"];
    string hET_All_Ang_QEL_1n_FD_Dir = directories.ETrans_Directory_map["ETrans_QEL_All_Ang_1n_Directory"];
    string hET_All_Ang_MEC_1n_FD_Dir = directories.ETrans_Directory_map["ETrans_MEC_All_Ang_1n_Directory"];
    string hET_All_Ang_RES_1n_FD_Dir = directories.ETrans_Directory_map["ETrans_RES_All_Ang_1n_Directory"];
    string hET_All_Ang_DIS_1n_FD_Dir = directories.ETrans_Directory_map["ETrans_DIS_All_Ang_1n_Directory"];

    // ET for every theta_e (2p)
    THStack *sET_All_Ang_All_Int_2p_FD = new THStack("#omega for all #theta_{e} (2p)", "Energy transfer #omega for all #theta_{e} (2p);#omega = E_{beam}-E_{e} [GeV]");
    string sET_All_Ang_All_Int_2p_FD_Dir = directories.ETrans_Directory_map["ETrans_All_Ang_stack_2p_Directory"];

    TH1D *hET_All_Ang_All_Int_2p_FD =
        new TH1D("#omega for all #theta_{e} (All Int., 2p)", "Energy transfer #omega for all #theta_{e} (All Int., 2p);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_QEL_2p_FD = new TH1D("#omega for all #theta_{e} (QEL Only, 2p, FD)", "Energy transfer #omega for all #theta_{e} (QEL Only, 2p);#omega = E_{beam}-E_{e} [GeV]",
                                           numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_MEC_2p_FD = new TH1D("#omega for all #theta_{e} (MEC Only, 2p, FD)", "Energy transfer #omega for all #theta_{e} (MEC Only, 2p);#omega = E_{beam}-E_{e} [GeV]",
                                           numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_RES_2p_FD = new TH1D("#omega for all #theta_{e} (RES Only, 2p, FD)", "Energy transfer #omega for all #theta_{e} (RES Only, 2p);#omega = E_{beam}-E_{e} [GeV]",
                                           numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_DIS_2p_FD = new TH1D("#omega for all #theta_{e} (DIS Only, 2p, FD)", "Energy transfer #omega for all #theta_{e} (DIS Only, 2p);#omega = E_{beam}-E_{e} [GeV]",
                                           numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    string hET_All_Ang_All_Int_2p_FD_Dir = directories.ETrans_Directory_map["ETrans_All_Int_All_Ang_2p_Directory"];
    string hET_All_Ang_QEL_2p_FD_Dir = directories.ETrans_Directory_map["ETrans_QEL_All_Ang_2p_Directory"];
    string hET_All_Ang_MEC_2p_FD_Dir = directories.ETrans_Directory_map["ETrans_MEC_All_Ang_2p_Directory"];
    string hET_All_Ang_RES_2p_FD_Dir = directories.ETrans_Directory_map["ETrans_RES_All_Ang_2p_Directory"];
    string hET_All_Ang_DIS_2p_FD_Dir = directories.ETrans_Directory_map["ETrans_DIS_All_Ang_2p_Directory"];

    // ET for every theta_e (pFDpCD)
    THStack *sET_All_Ang_All_Int_pFDpCD_FD = new THStack("#omega for all #theta_{e} (pFDpCD)", "Energy transfer #omega for all #theta_{e} (pFDpCD);#omega = E_{beam}-E_{e} [GeV]");
    string sET_All_Ang_All_Int_pFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_All_Ang_stack_pFDpCD_Directory"];

    TH1D *hET_All_Ang_All_Int_pFDpCD_FD = new TH1D("#omega for all #theta_{e} (All Int., pFDpCD)",
                                                   "Energy transfer #omega for all #theta_{e} (All Int., pFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_QEL_pFDpCD_FD = new TH1D("#omega for all #theta_{e} (QEL Only, pFDpCD, FD)",
                                               "Energy transfer #omega for all #theta_{e} (QEL Only, pFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_MEC_pFDpCD_FD = new TH1D("#omega for all #theta_{e} (MEC Only, pFDpCD, FD)",
                                               "Energy transfer #omega for all #theta_{e} (MEC Only, pFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_RES_pFDpCD_FD = new TH1D("#omega for all #theta_{e} (RES Only, pFDpCD, FD)",
                                               "Energy transfer #omega for all #theta_{e} (RES Only, pFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_DIS_pFDpCD_FD = new TH1D("#omega for all #theta_{e} (DIS Only, pFDpCD, FD)",
                                               "Energy transfer #omega for all #theta_{e} (DIS Only, pFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    string hET_All_Ang_All_Int_pFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_All_Int_All_Ang_pFDpCD_Directory"];
    string hET_All_Ang_QEL_pFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_QEL_All_Ang_pFDpCD_Directory"];
    string hET_All_Ang_MEC_pFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_MEC_All_Ang_pFDpCD_Directory"];
    string hET_All_Ang_RES_pFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_RES_All_Ang_pFDpCD_Directory"];
    string hET_All_Ang_DIS_pFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_DIS_All_Ang_pFDpCD_Directory"];

    // ET for every theta_e (nFDpCD)
    THStack *sET_All_Ang_All_Int_nFDpCD_FD = new THStack("#omega for all #theta_{e} (nFDpCD)", "Energy transfer #omega for all #theta_{e} (nFDpCD);#omega = E_{beam}-E_{e} [GeV]");
    string sET_All_Ang_All_Int_nFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_All_Ang_stack_nFDpCD_Directory"];

    TH1D *hET_All_Ang_All_Int_nFDpCD_FD = new TH1D("#omega for all #theta_{e} (All Int., nFDpCD)",
                                                   "Energy transfer #omega for all #theta_{e} (All Int., nFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_QEL_nFDpCD_FD = new TH1D("#omega for all #theta_{e} (QEL Only, nFDpCD, FD)",
                                               "Energy transfer #omega for all #theta_{e} (QEL Only, nFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_MEC_nFDpCD_FD = new TH1D("#omega for all #theta_{e} (MEC Only, nFDpCD, FD)",
                                               "Energy transfer #omega for all #theta_{e} (MEC Only, nFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_RES_nFDpCD_FD = new TH1D("#omega for all #theta_{e} (RES Only, nFDpCD, FD)",
                                               "Energy transfer #omega for all #theta_{e} (RES Only, nFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET_All_Ang_DIS_nFDpCD_FD = new TH1D("#omega for all #theta_{e} (DIS Only, nFDpCD, FD)",
                                               "Energy transfer #omega for all #theta_{e} (DIS Only, nFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    string hET_All_Ang_All_Int_nFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_All_Int_All_Ang_nFDpCD_Directory"];
    string hET_All_Ang_QEL_nFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_QEL_All_Ang_nFDpCD_Directory"];
    string hET_All_Ang_MEC_nFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_MEC_All_Ang_nFDpCD_Directory"];
    string hET_All_Ang_RES_nFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_RES_All_Ang_nFDpCD_Directory"];
    string hET_All_Ang_DIS_nFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_DIS_All_Ang_nFDpCD_Directory"];

    // ET around 15 Deg (1p)
    /* ET around 15 Deg */
    THStack *sET15_All_Int_1p_FD = new THStack("ET around #theta_{e} = 15#circ (1p)", "Energy transfer #omega Around #theta_{e} = 15#circ (1p);#omega = E_{beam}-E_{e} [GeV]");
    string sET15_All_Int_1p_FD_Dir = directories.ETrans_Directory_map["ETrans_15_stack_1p_Directory"];

    TH1D *hET15_All_Int_1p_FD = new TH1D("ET around #theta_{e} = 15#circ (All Int., 1p)", "Energy transfer #omega Around #theta_{e} = 15#circ (All Int., 1p);#omega = E_{beam}-E_{e} [GeV]",
                                         numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_QEL_1p_FD = new TH1D("ET around #theta_{e} = 15#circ (QEL Only, 1p, FD)", "Energy transfer #omega Around #theta_{e} = 15#circ (QEL Only, 1p);#omega = E_{beam}-E_{e} [GeV]",
                                     numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_MEC_1p_FD = new TH1D("ET around #theta_{e} = 15#circ (MEC Only, 1p, FD)", "Energy transfer #omega Around #theta_{e} = 15#circ (MEC Only, 1p);#omega = E_{beam}-E_{e} [GeV]",
                                     numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_RES_1p_FD = new TH1D("ET around #theta_{e} = 15#circ (RES Only, 1p, FD)", "Energy transfer #omega Around #theta_{e} = 15#circ (RES Only, 1p);#omega = E_{beam}-E_{e} [GeV]",
                                     numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_DIS_1p_FD = new TH1D("ET around #theta_{e} = 15#circ (DIS Only, 1p, FD)", "Energy transfer #omega Around #theta_{e} = 15#circ (DIS Only, 1p);#omega = E_{beam}-E_{e} [GeV]",
                                     numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    string hET15_All_Int_1p_FD_Dir = directories.ETrans_Directory_map["ETrans_All_Int_15_1p_Directory"];
    string hET15_QEL_1p_FD_Dir = directories.ETrans_Directory_map["ETrans_QEL_15_1p_Directory"];
    string hET15_MEC_1p_FD_Dir = directories.ETrans_Directory_map["ETrans_MEC_15_1p_Directory"];
    string hET15_RES_1p_FD_Dir = directories.ETrans_Directory_map["ETrans_RES_15_1p_Directory"];
    string hET15_DIS_1p_FD_Dir = directories.ETrans_Directory_map["ETrans_DIS_15_1p_Directory"];

    // ET around 15 Deg (1n)
    /* ET around 15 Deg */
    THStack *sET15_All_Int_1n_FD = new THStack("ET around #theta_{e} = 15#circ (1n)", "Energy transfer #omega Around #theta_{e} = 15#circ (1n);#omega = E_{beam}-E_{e} [GeV]");
    string sET15_All_Int_1n_FD_Dir = directories.ETrans_Directory_map["ETrans_15_stack_1n_Directory"];

    TH1D *hET15_All_Int_1n_FD = new TH1D("ET around #theta_{e} = 15#circ (All Int., 1n)", "Energy transfer #omega Around #theta_{e} = 15#circ (All Int., 1n);#omega = E_{beam}-E_{e} [GeV]",
                                         numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_QEL_1n_FD = new TH1D("ET around #theta_{e} = 15#circ (QEL Only, 1n, FD)", "Energy transfer #omega Around #theta_{e} = 15#circ (QEL Only, 1n);#omega = E_{beam}-E_{e} [GeV]",
                                     numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_MEC_1n_FD = new TH1D("ET around #theta_{e} = 15#circ (MEC Only, 1n, FD)", "Energy transfer #omega Around #theta_{e} = 15#circ (MEC Only, 1n);#omega = E_{beam}-E_{e} [GeV]",
                                     numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_RES_1n_FD = new TH1D("ET around #theta_{e} = 15#circ (RES Only, 1n, FD)", "Energy transfer #omega Around #theta_{e} = 15#circ (RES Only, 1n);#omega = E_{beam}-E_{e} [GeV]",
                                     numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_DIS_1n_FD = new TH1D("ET around #theta_{e} = 15#circ (DIS Only, 1n, FD)", "Energy transfer #omega Around #theta_{e} = 15#circ (DIS Only, 1n);#omega = E_{beam}-E_{e} [GeV]",
                                     numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    string hET15_All_Int_1n_FD_Dir = directories.ETrans_Directory_map["ETrans_All_Int_15_1n_Directory"];
    string hET15_QEL_1n_FD_Dir = directories.ETrans_Directory_map["ETrans_QEL_15_1n_Directory"];
    string hET15_MEC_1n_FD_Dir = directories.ETrans_Directory_map["ETrans_MEC_15_1n_Directory"];
    string hET15_RES_1n_FD_Dir = directories.ETrans_Directory_map["ETrans_RES_15_1n_Directory"];
    string hET15_DIS_1n_FD_Dir = directories.ETrans_Directory_map["ETrans_DIS_15_1n_Directory"];

    // ET around 15 Deg (2p)
    /* ET around 15 Deg */
    THStack *sET15_All_Int_2p_FD = new THStack("#omega around #theta_{e} = 15#circ (2p)", "Energy transfer #omega Around #theta_{e} = 15#circ (2p);#omega = E_{beam}-E_{e} [GeV]");
    string sET15_All_Int_2p_FD_Dir = directories.ETrans_Directory_map["ETrans_15_stack_2p_Directory"];

    TH1D *hET15_All_Int_2p_FD = new TH1D("#omega around #theta_{e} = 15#circ (All Int., 2p)",
                                         "Energy transfer #omega Around #theta_{e} = 15#circ (All Int., 2p);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_QEL_2p_FD = new TH1D("#omega around #theta_{e} = 15#circ (QEL Only, 2p, FD)",
                                     "Energy transfer #omega Around #theta_{e} = 15#circ (QEL Only, 2p);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_MEC_2p_FD = new TH1D("#omega around #theta_{e} = 15#circ (MEC Only, 2p, FD)",
                                     "Energy transfer #omega Around #theta_{e} = 15#circ (MEC Only, 2p);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_RES_2p_FD = new TH1D("#omega around #theta_{e} = 15#circ (RES Only, 2p, FD)",
                                     "Energy transfer #omega Around #theta_{e} = 15#circ (RES Only, 2p);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_DIS_2p_FD = new TH1D("#omega around #theta_{e} = 15#circ (DIS Only, 2p, FD)",
                                     "Energy transfer #omega Around #theta_{e} = 15#circ (DIS Only, 2p);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    string hET15_All_Int_2p_FD_Dir = directories.ETrans_Directory_map["ETrans_All_Int_15_2p_Directory"];
    string hET15_QEL_2p_FD_Dir = directories.ETrans_Directory_map["ETrans_QEL_15_2p_Directory"];
    string hET15_MEC_2p_FD_Dir = directories.ETrans_Directory_map["ETrans_MEC_15_2p_Directory"];
    string hET15_RES_2p_FD_Dir = directories.ETrans_Directory_map["ETrans_RES_15_2p_Directory"];
    string hET15_DIS_2p_FD_Dir = directories.ETrans_Directory_map["ETrans_DIS_15_2p_Directory"];

    // ET around 15 Deg (pFDpCD)
    /* ET around 15 Deg */
    THStack *sET15_All_Int_pFDpCD_FD =
        new THStack("#omega around #theta_{e} = 15#circ (pFDpCD)", "Energy transfer #omega Around #theta_{e} = 15#circ (pFDpCD);#omega = E_{beam}-E_{e} [GeV]");
    string sET15_All_Int_pFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_15_stack_pFDpCD_Directory"];

    TH1D *hET15_All_Int_pFDpCD_FD = new TH1D("#omega around #theta_{e} = 15#circ (All Int., pFDpCD)",
                                             "Energy transfer #omega Around #theta_{e} = 15#circ (All Int., pFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_QEL_pFDpCD_FD = new TH1D("#omega around #theta_{e} = 15#circ (QEL Only, pFDpCD, FD)",
                                         "Energy transfer #omega Around #theta_{e} = 15#circ (QEL Only, pFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_MEC_pFDpCD_FD = new TH1D("#omega around #theta_{e} = 15#circ (MEC Only, pFDpCD, FD)",
                                         "Energy transfer #omega Around #theta_{e} = 15#circ (MEC Only, pFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_RES_pFDpCD_FD = new TH1D("#omega around #theta_{e} = 15#circ (RES Only, pFDpCD, FD)",
                                         "Energy transfer #omega Around #theta_{e} = 15#circ (RES Only, pFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_DIS_pFDpCD_FD = new TH1D("#omega around #theta_{e} = 15#circ (DIS Only, pFDpCD, FD)",
                                         "Energy transfer #omega Around #theta_{e} = 15#circ (DIS Only, pFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    string hET15_All_Int_pFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_All_Int_15_pFDpCD_Directory"];
    string hET15_QEL_pFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_QEL_15_pFDpCD_Directory"];
    string hET15_MEC_pFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_MEC_15_pFDpCD_Directory"];
    string hET15_RES_pFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_RES_15_pFDpCD_Directory"];
    string hET15_DIS_pFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_DIS_15_pFDpCD_Directory"];

    // ET around 15 Deg (nFDpCD)
    /* ET around 15 Deg */
    THStack *sET15_All_Int_nFDpCD_FD =
        new THStack("#omega around #theta_{e} = 15#circ (nFDpCD)", "Energy transfer #omega Around #theta_{e} = 15#circ (nFDpCD);#omega = E_{beam}-E_{e} [GeV]");
    string sET15_All_Int_nFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_15_stack_nFDpCD_Directory"];

    TH1D *hET15_All_Int_nFDpCD_FD = new TH1D("#omega around #theta_{e} = 15#circ (All Int., nFDpCD)",
                                             "Energy transfer #omega Around #theta_{e} = 15#circ (All Int., nFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_QEL_nFDpCD_FD = new TH1D("#omega around #theta_{e} = 15#circ (QEL Only, nFDpCD, FD)",
                                         "Energy transfer #omega Around #theta_{e} = 15#circ (QEL Only, nFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_MEC_nFDpCD_FD = new TH1D("#omega around #theta_{e} = 15#circ (MEC Only, nFDpCD, FD)",
                                         "Energy transfer #omega Around #theta_{e} = 15#circ (MEC Only, nFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_RES_nFDpCD_FD = new TH1D("#omega around #theta_{e} = 15#circ (RES Only, nFDpCD, FD)",
                                         "Energy transfer #omega Around #theta_{e} = 15#circ (RES Only, nFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    TH1D *hET15_DIS_nFDpCD_FD = new TH1D("#omega around #theta_{e} = 15#circ (DIS Only, nFDpCD, FD)",
                                         "Energy transfer #omega Around #theta_{e} = 15#circ (DIS Only, nFDpCD);#omega = E_{beam}-E_{e} [GeV]", numTH1Dbins_ET_Plots, 0, beamE * 1.1);
    string hET15_All_Int_nFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_All_Int_15_nFDpCD_Directory"];
    string hET15_QEL_nFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_QEL_15_nFDpCD_Directory"];
    string hET15_MEC_nFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_MEC_15_nFDpCD_Directory"];
    string hET15_RES_nFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_RES_15_nFDpCD_Directory"];
    string hET15_DIS_nFDpCD_FD_Dir = directories.ETrans_Directory_map["ETrans_DIS_15_nFDpCD_Directory"];

    // ======================================================================================================================================================================
    // Ecal reconstruction histograms
    // ======================================================================================================================================================================

    // Ecal reconstruction histograms

    // Ecal reconstruction histograms (1p)

    // Ecal plots (1p)
    THStack *sEcal_1p = new THStack("E_{cal} Reconstruction (1p)", "E_{cal} Reconstruction (1p);E_{cal} = E_{e} + T_{p} [GeV]");
    string sEcal_1p_Dir = directories.Ecal_Directory_map["Ecal_stack_1p_Directory"];

    TH1D *hEcal_All_Int_1p = new TH1D("E_{cal} reco. (All Int., 1p)", "E_{cal} Reconstruction (All Int., 1p);E_{cal} = E_{e} + T_{p} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_QEL_1p = new TH1D("E_{cal} reco. (QEL only, 1p)", "E_{cal} Reconstruction (QEL only, 1p);E_{cal} = E_{e} + T_{p} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_MEC_1p = new TH1D("E_{cal} reco. (MEC only, 1p)", "E_{cal} Reconstruction (MEC only, 1p);E_{cal} = E_{e} + T_{p} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_RES_1p = new TH1D("E_{cal} reco. (RES only, 1p)", "E_{cal} Reconstruction (RES only, 1p);E_{cal} = E_{e} + T_{p} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_DIS_1p = new TH1D("E_{cal} reco. (DIS only, 1p)", "E_{cal} Reconstruction (DIS only, 1p);E_{cal} = E_{e} + T_{p} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_All_Int_1p_Dir = directories.Ecal_Directory_map["Ecal_All_Int_1p_Directory"];
    string hEcal_QEL_1p_Dir = directories.Ecal_Directory_map["Ecal_QEL_1p_Directory"];
    string hEcal_MEC_1p_Dir = directories.Ecal_Directory_map["Ecal_MEC_1p_Directory"];
    string hEcal_RES_1p_Dir = directories.Ecal_Directory_map["Ecal_RES_1p_Directory"];
    string hEcal_DIS_1p_Dir = directories.Ecal_Directory_map["Ecal_DIS_1p_Directory"];

    // Ecal vs. momentum (1p)
    TH2D *hEcal_vs_P_e_1p = new TH2D("E_{cal} vs. P_{e} (All Int., 1p)", "E_{cal} vs. P_{e} (All Int., 1p);P_{e} [GeV/c];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots, Momentum_lboundary,
                                     Momentum_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_P_e_test_1p = new TH2D("E_{cal} vs. P_{e} for E_{cal}>E_{beam} (All Int., 1p)", "E_{cal} vs. P_{e} for E_{cal}>E_{beam} (All Int., 1p);P_{e} [GeV/c];E_{cal} [GeV];",
                                          numTH2Dbins_E_cal_Plots, Momentum_lboundary, Momentum_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_P_e_1p_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Mom_1p_Directory"];

    TH2D *hEcal_vs_P_p_1p = new TH2D("E_{cal} vs. P_{p} (All Int., 1p)", "E_{cal} vs. P_{p} (All Int., 1p);P_{p} [GeV/c];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots, P_nucFD_lboundary,
                                     P_nucFD_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_P_p_test_1p = new TH2D("E_{cal} vs. P_{p} for E_{cal}>E_{beam} (All Int., 1p)", "E_{cal} vs. P_{p} for E_{cal}>E_{beam} (All Int., 1p);P_{p} [GeV/c];E_{cal} [GeV];",
                                          numTH2Dbins_E_cal_Plots, P_nucFD_lboundary, P_nucFD_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_P_p_1p_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Mom_1p_Directory"];

    // Ecal vs. angles (1p)
    TH2D *hEcal_vs_Theta_e_1p = new TH2D("E_{cal} vs. #theta_{e} (All Int., 1p)", "E_{cal} vs. #theta_{e} (All Int., 1p);#theta_{e} [#circ];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots,
                                         Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_e_1p = new TH2D("E_{cal} vs. #phi_{e} (All Int., 1p)", "E_{cal} vs. #phi_{e} (All Int., 1p);#phi_{e} [#circ];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots, Phi_lboundary,
                                       Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Theta_e_test_1p =
        new TH2D("E_{cal} vs. #theta_{e} for E_{cal}>E_{beam} (All Int., 1p)", "E_{cal} vs. #theta_{e} for E_{cal}>E_{beam} (All Int., 1p);#theta_{e} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_e_test_1p =
        new TH2D("E_{cal} vs. #phi_{e} for E_{cal}>E_{beam} (All Int., 1p)", "E_{cal} vs. #phi_{e} for E_{cal}>E_{beam} (All Int., 1p);#phi_{e} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_Theta_e_1p_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_1p_Directory"];
    string hEcal_vs_Phi_e_1p_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_1p_Directory"];

    TH2D *hEcal_vs_Theta_p_1p = new TH2D("E_{cal} vs. #theta_{p} (All Int., 1p)", "E_{cal} vs. #theta_{p} (All Int., 1p);#theta_{p} [#circ];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots,
                                         Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_p_1p = new TH2D("E_{cal} vs. #phi_{p} (All Int., 1p)", "E_{cal} vs. #phi_{p} (All Int., 1p);#phi_{p} [#circ];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots, Phi_lboundary,
                                       Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Theta_p_test_1p =
        new TH2D("E_{cal} vs. #theta_{p} for E_{cal}>E_{beam} (All Int., 1p)", "E_{cal} vs. #theta_{p} for E_{cal}>E_{beam} (All Int., 1p);#theta_{p} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_p_test_1p =
        new TH2D("E_{cal} vs. #phi_{p} for E_{cal}>E_{beam} (All Int., 1p)", "E_{cal} vs. #phi_{p} for E_{cal}>E_{beam} (All Int., 1p);#phi_{p} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_Theta_p_1p_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_1p_Directory"];
    string hEcal_vs_Phi_p_1p_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_1p_Directory"];

    // Ecal vs. dAlpha_T (1p)
    TH2D *hEcal_vs_dAlpha_T_1p = new TH2D("E_{cal} vs. #delta#alpha_{T} (All Int., 1p)", "E_{cal} vs. #delta#alpha_{T} (All Int., 1p);#delta#alpha_{T} [#circ];E_{cal} [GeV];",
                                          numTH2Dbins_E_cal_Plots, 0, 180, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_dAlpha_T_1p_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_TKI_1p_Directory"];

    // Ecal vs. dP_T (1p)
    TH2D *hEcal_vs_dP_T_1p = new TH2D("E_{cal} vs. #deltaP_{T} (All Int., 1p)", "E_{cal} vs. #deltaP_{T} (All Int., 1p);#deltaP_{T} [GeV/c];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots, 0,
                                      dP_T_boundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_dP_T_1p_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_TKI_1p_Directory"];

    // Ecal reconstruction histograms (1n)

    // Ecal plots (1n)
    THStack *sEcal_1n = new THStack("E_{cal} Reconstruction (1n)", "E_{cal} Reconstruction (1n);E_{cal} = E_{e} + T_{n} [GeV]");
    string sEcal_1n_Dir = directories.Ecal_Directory_map["Ecal_stack_1n_Directory"];

    TH1D *hEcal_All_Int_1n = new TH1D("E_{cal} reco. (All Int., 1n)", "E_{cal} Reconstruction (All Int., 1n);E_{cal} = E_{e} + T_{n} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_QEL_1n = new TH1D("E_{cal} reco. (QEL only, 1n)", "E_{cal} Reconstruction (QEL only, 1n);E_{cal} = E_{e} + T_{n} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_MEC_1n = new TH1D("E_{cal} reco. (MEC only, 1n)", "E_{cal} Reconstruction (MEC only, 1n);E_{cal} = E_{e} + T_{n} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_RES_1n = new TH1D("E_{cal} reco. (RES only, 1n)", "E_{cal} Reconstruction (RES only, 1n);E_{cal} = E_{e} + T_{n} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_DIS_1n = new TH1D("E_{cal} reco. (DIS only, 1n)", "E_{cal} Reconstruction (DIS only, 1n);E_{cal} = E_{e} + T_{n} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_All_Int_1n_Dir = directories.Ecal_Directory_map["Ecal_All_Int_1n_Directory"];
    string hEcal_QEL_1n_Dir = directories.Ecal_Directory_map["Ecal_QEL_1n_Directory"];
    string hEcal_MEC_1n_Dir = directories.Ecal_Directory_map["Ecal_MEC_1n_Directory"];
    string hEcal_RES_1n_Dir = directories.Ecal_Directory_map["Ecal_RES_1n_Directory"];
    string hEcal_DIS_1n_Dir = directories.Ecal_Directory_map["Ecal_DIS_1n_Directory"];

    // Ecal vs. momentum (1n)
    TH2D *hEcal_vs_P_e_1n = new TH2D("E_{cal} vs. P_{e} (All Int., 1n)", "E_{cal} vs. P_{e} (All Int., 1n);P_{e} [GeV/c];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots, Momentum_lboundary,
                                     Momentum_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_P_e_test_1n = new TH2D("E_{cal} vs. P_{e} for E_{cal}>E_{beam} (All Int., 1n)", "E_{cal} vs. P_{e} for E_{cal}>E_{beam} (All Int., 1n);P_{e} [GeV/c];E_{cal} [GeV];",
                                          numTH2Dbins_E_cal_Plots, Momentum_lboundary, Momentum_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_P_e_1n_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Mom_1n_Directory"];

    TH2D *hEcal_vs_P_n_1n = new TH2D("E_{cal} vs. P_{n} (All Int., 1n)", "E_{cal} vs. P_{n} (All Int., 1n);P_{n} [GeV/c];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots, P_nucFD_lboundary,
                                     P_nucFD_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_P_n_test_1n = new TH2D("E_{cal} vs. P_{n} for E_{cal}>E_{beam} (All Int., 1n)", "E_{cal} vs. P_{n} for E_{cal}>E_{beam} (All Int., 1n);P_{n} [GeV/c];E_{cal} [GeV];",
                                          numTH2Dbins_E_cal_Plots, P_nucFD_lboundary, P_nucFD_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_P_n_1n_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Mom_1n_Directory"];

    // Ecal vs. angles (1n)
    TH2D *hEcal_vs_Theta_e_1n = new TH2D("E_{cal} vs. #theta_{e} (All Int., 1n)", "E_{cal} vs. #theta_{e} (All Int., 1n);#theta_{e} [#circ];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots,
                                         Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_e_1n = new TH2D("E_{cal} vs. #phi_{e} (All Int., 1n)", "E_{cal} vs. #phi_{e} (All Int., 1n);#phi_{e} [#circ];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots, Phi_lboundary,
                                       Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Theta_e_test_1n =
        new TH2D("E_{cal} vs. #theta_{e} for E_{cal}>E_{beam} (All Int., 1n)", "E_{cal} vs. #theta_{e} for E_{cal}>E_{beam} (All Int., 1n);#theta_{e} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_e_test_1n =
        new TH2D("E_{cal} vs. #phi_{e} for E_{cal}>E_{beam} (All Int., 1n)", "E_{cal} vs. #phi_{e} for E_{cal}>E_{beam} (All Int., 1n);#phi_{e} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_Theta_e_1n_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_1n_Directory"];
    string hEcal_vs_Phi_e_1n_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_1n_Directory"];

    TH2D *hEcal_vs_Theta_n_1n = new TH2D("E_{cal} vs. #theta_{n} (All Int., 1n)", "E_{cal} vs. #theta_{n} (All Int., 1n);#theta_{n} [#circ];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots,
                                         Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_n_1n = new TH2D("E_{cal} vs. #phi_{n} (All Int., 1n)", "E_{cal} vs. #phi_{n} (All Int., 1n);#phi_{n} [#circ];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots, Phi_lboundary,
                                       Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Theta_n_test_1n =
        new TH2D("E_{cal} vs. #theta_{n} for E_{cal}>E_{beam} (All Int., 1n)", "E_{cal} vs. #theta_{n} for E_{cal}>E_{beam} (All Int., 1n);#theta_{n} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_n_test_1n =
        new TH2D("E_{cal} vs. #phi_{n} for E_{cal}>E_{beam} (All Int., 1n)", "E_{cal} vs. #phi_{n} for E_{cal}>E_{beam} (All Int., 1n);#phi_{n} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_Theta_n_1n_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_1n_Directory"];
    string hEcal_vs_Phi_n_1n_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_1n_Directory"];

    // Ecal vs. dAlpha_T (1n)
    TH2D *hEcal_vs_dAlpha_T_1n = new TH2D("E_{cal} vs. #delta#alpha_{T} (All Int., 1n)", "E_{cal} vs. #delta#alpha_{T} (All Int., 1n);#delta#alpha_{T} [#circ];E_{cal} [GeV];",
                                          numTH2Dbins_E_cal_Plots, 0, 180, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_dAlpha_T_1n_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_TKI_1n_Directory"];

    // Ecal vs. dP_T (1n)
    TH2D *hEcal_vs_dP_T_1n = new TH2D("E_{cal} vs. #deltaP_{T} (All Int., 1n)", "E_{cal} vs. #deltaP_{T} (All Int., 1n);#deltaP_{T} [GeV/c];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots, 0,
                                      dP_T_boundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_dP_T_1n_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_TKI_1n_Directory"];

    // Ecal reconstruction histograms (2p)

    // Ecal plots (2p)
    THStack *sEcal_2p = new THStack("E_{cal} Reconstruction (2p)", "E_{cal} Reconstruction (2p);E_{cal} = E_{e} + T_{p_{1}} + T_{p_{2}} [GeV]");
    string sEcal_2p_Dir = directories.Ecal_Directory_map["Ecal_stack_2p_Directory"];

    TH1D *hEcal_All_Int_2p =
        new TH1D("E_{cal} reco. (All Int., 2p)", "E_{cal} Reconstruction (All Int., 2p);E_{cal} = E_{e} + T_{p_{1}} + T_{p_{2}} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_QEL_2p =
        new TH1D("E_{cal} reco. (QEL only, 2p)", "E_{cal} Reconstruction (QEL only, 2p);E_{cal} = E_{e} + T_{p_{1}} + T_{p_{2}} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_MEC_2p =
        new TH1D("E_{cal} reco. (MEC only, 2p)", "E_{cal} Reconstruction (MEC only, 2p);E_{cal} = E_{e} + T_{p_{1}} + T_{p_{2}} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_RES_2p =
        new TH1D("E_{cal} reco. (RES only, 2p)", "E_{cal} Reconstruction (RES only, 2p);E_{cal} = E_{e} + T_{p_{1}} + T_{p_{2}} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_DIS_2p =
        new TH1D("E_{cal} reco. (DIS only, 2p)", "E_{cal} Reconstruction (DIS only, 2p);E_{cal} = E_{e} + T_{p_{1}} + T_{p_{2}} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_All_Int_2p_Dir = directories.Ecal_Directory_map["Ecal_All_Int_2p_Directory"];
    string hEcal_QEL_2p_Dir = directories.Ecal_Directory_map["Ecal_QEL_2p_Directory"];
    string hEcal_MEC_2p_Dir = directories.Ecal_Directory_map["Ecal_MEC_2p_Directory"];
    string hEcal_RES_2p_Dir = directories.Ecal_Directory_map["Ecal_RES_2p_Directory"];
    string hEcal_DIS_2p_Dir = directories.Ecal_Directory_map["Ecal_DIS_2p_Directory"];

    // Ecal vs. dAlpha_T (2p)
    TH2D *hEcal_vs_dAlpha_T_L_2p = new TH2D("E_{cal} vs. #delta#alpha_{T,L} (All Int., 2p)", "E_{cal} vs. #delta#alpha_{T,L} (All Int., 2p);#delta#alpha_{T,L} [#circ];E_{cal} [GeV];",
                                            numTH2Dbins_E_cal_Plots, 0, 180, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dAlpha_T_tot_2p =
        new TH2D("E_{cal} vs. #delta#alpha_{T,tot} (All Int., 2p)", "E_{cal} vs. #delta#alpha_{T,tot} (All Int., 2p);#delta#alpha_{T,tot} [#circ];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots, 0,
                 180, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_dAlpha_T_L_2p_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_TKI_2p_Directory"];
    string hEcal_vs_dAlpha_T_tot_2p_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_TKI_2p_Directory"];

    // Ecal vs. dP_T (2p)
    TH2D *hEcal_vs_dP_T_L_2p = new TH2D("E_{cal} vs. #deltaP_{T,L} (All Int., 2p)", "E_{cal} vs. #deltaP_{T,L} (All Int., 2p);#deltaP_{T,L} [GeV/c];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots,
                                        0, dP_T_boundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dP_T_tot_2p = new TH2D("E_{cal} vs. #deltaP_{T,tot} (All Int., 2p)", "E_{cal} vs. #deltaP_{T,tot} (All Int., 2p);#deltaP_{T,tot} [GeV/c];E_{cal} [GeV];",
                                          numTH2Dbins_E_cal_Plots, 0, dP_T_boundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_dP_T_L_2p_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_TKI_2p_Directory"];
    string hEcal_vs_dP_T_tot_2p_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_TKI_2p_Directory"];

    // Ecal reconstruction histograms (pFDpCD)

    // Ecal plots (pFDpCD)
    THStack *sEcal_pFDpCD = new THStack("E_{cal} Reconstruction (pFDpCD)", "E_{cal} Reconstruction (pFDpCD);E_{cal} = E_{e} + T_{pFD} + T_{pCD} [GeV]");
    string sEcal_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_stack_pFDpCD_Directory"];

    TH1D *hEcal_All_Int_pFDpCD =
        new TH1D("E_{cal} reco. (All Int., pFDpCD)", "E_{cal} Reconstruction (All Int., pFDpCD);E_{cal} = E_{e} + T_{pFD} + T_{pCD} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_QEL_pFDpCD =
        new TH1D("E_{cal} reco. (QEL only, pFDpCD)", "E_{cal} Reconstruction (QEL only, pFDpCD);E_{cal} = E_{e} + T_{pFD} + T_{pCD} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_MEC_pFDpCD =
        new TH1D("E_{cal} reco. (MEC only, pFDpCD)", "E_{cal} Reconstruction (MEC only, pFDpCD);E_{cal} = E_{e} + T_{pFD} + T_{pCD} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_RES_pFDpCD =
        new TH1D("E_{cal} reco. (RES only, pFDpCD)", "E_{cal} Reconstruction (RES only, pFDpCD);E_{cal} = E_{e} + T_{pFD} + T_{pCD} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_DIS_pFDpCD =
        new TH1D("E_{cal} reco. (DIS only, pFDpCD)", "E_{cal} Reconstruction (DIS only, pFDpCD);E_{cal} = E_{e} + T_{pFD} + T_{pCD} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_All_Int_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_All_Int_pFDpCD_Directory"];
    string hEcal_QEL_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_QEL_pFDpCD_Directory"];
    string hEcal_MEC_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_MEC_pFDpCD_Directory"];
    string hEcal_RES_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_RES_pFDpCD_Directory"];
    string hEcal_DIS_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_DIS_pFDpCD_Directory"];

    // Ecal vs. momentum (pFDpCD)
    TH2D *hEcal_vs_P_e_pFDpCD = new TH2D("E_{cal} vs. P_{e} (All Int., pFDpCD)", "E_{cal} vs. P_{e} (All Int., pFDpCD);P_{e} [GeV/c];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots,
                                         Momentum_lboundary, Momentum_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_P_e_test_pFDpCD =
        new TH2D("E_{cal} vs. P_{e} for E_{cal}>E_{beam} (All Int., pFDpCD)", "E_{cal} vs. P_{e} for E_{cal}>E_{beam} (All Int., pFDpCD);P_{e} [GeV/c];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Momentum_lboundary, Momentum_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_P_e_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Mom_pFDpCD_Directory"];

    TH2D *hEcal_vs_P_pFD_pFDpCD = new TH2D("E_{cal} vs. P_{pFD} (All Int., pFDpCD)", "E_{cal} vs. P_{pFD} (All Int., pFDpCD);P_{pFD} [GeV/c];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots,
                                           P_nucFD_lboundary, P_nucFD_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_P_pCD_pFDpCD = new TH2D("E_{cal} vs. P_{pCD} (All Int., pFDpCD)", "E_{cal} vs. P_{pCD} (All Int., pFDpCD);P_{pCD} [GeV/c];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots,
                                           P_nucCD_lboundary, P_nucCD_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_P_pFD_test_pFDpCD =
        new TH2D("E_{cal} vs. P_{pFD} for E_{cal}>E_{beam} (All Int., pFDpCD)", "E_{cal} vs. P_{pFD} for E_{cal}>E_{beam} (All Int., pFDpCD);P_{pFD} [GeV/c];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, P_nucFD_lboundary, P_nucFD_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_P_pCD_test_pFDpCD =
        new TH2D("E_{cal} vs. P_{pCD} for E_{cal}>E_{beam} (All Int., pFDpCD)", "E_{cal} vs. P_{pCD} for E_{cal}>E_{beam} (All Int., pFDpCD);P_{pCD} [GeV/c];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, P_nucCD_lboundary, P_nucCD_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_P_pFD_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Mom_pFDpCD_Directory"];
    string hEcal_vs_P_pCD_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Mom_pFDpCD_Directory"];

    // Ecal vs. angles (pFDpCD)
    TH2D *hEcal_vs_Theta_e_pFDpCD = new TH2D("E_{cal} vs. #theta_{e} (All Int., pFDpCD)", "E_{cal} vs. #theta_{e} (All Int., pFDpCD);#theta_{e} [#circ];E_{cal} [GeV];",
                                             numTH2Dbins_E_cal_Plots, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_e_pFDpCD = new TH2D("E_{cal} vs. #phi_{e} (All Int., pFDpCD)", "E_{cal} vs. #phi_{e} (All Int., pFDpCD);#phi_{e} [#circ];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots,
                                           Phi_lboundary, Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Theta_e_test_pFDpCD =
        new TH2D("E_{cal} vs. #theta_{e} for E_{cal}>E_{beam} (All Int., pFDpCD)", "E_{cal} vs. #theta_{e} for E_{cal}>E_{beam} (All Int., pFDpCD);#theta_{e} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_e_test_pFDpCD =
        new TH2D("E_{cal} vs. #phi_{e} for E_{cal}>E_{beam} (All Int., pFDpCD)", "E_{cal} vs. #phi_{e} for E_{cal}>E_{beam} (All Int., pFDpCD);#phi_{e} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_Theta_e_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_pFDpCD_Directory"];
    string hEcal_vs_Phi_e_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_pFDpCD_Directory"];

    TH2D *hEcal_vs_Theta_pFD_pFDpCD = new TH2D("E_{cal} vs. #theta_{pFD} (All Int., pFDpCD)", "E_{cal} vs. #theta_{pFD} (All Int., pFDpCD);#theta_{pFD} [#circ];E_{cal} [GeV];",
                                               numTH2Dbins_E_cal_Plots, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_pFD_pFDpCD = new TH2D("E_{cal} vs. #phi_{pFD} (All Int., pFDpCD)", "E_{cal} vs. #phi_{pFD} (All Int., pFDpCD);#phi_{pFD} [#circ];E_{cal} [GeV];",
                                             numTH2Dbins_E_cal_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Theta_pFD_test_pFDpCD =
        new TH2D("E_{cal} vs. #theta_{pFD} for E_{cal}>E_{beam} (All Int., pFDpCD)", "E_{cal} vs. #theta_{pFD} for E_{cal}>E_{beam} (All Int., pFDpCD);#theta_{pFD} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_pFD_test_pFDpCD =
        new TH2D("E_{cal} vs. #phi_{pFD} for E_{cal}>E_{beam} (All Int., pFDpCD)", "E_{cal} vs. #phi_{pFD} for E_{cal}>E_{beam} (All Int., pFDpCD);#phi_{pFD} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_Theta_pFD_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_pFDpCD_Directory"];
    string hEcal_vs_Phi_pFD_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_pFDpCD_Directory"];

    TH2D *hEcal_vs_Theta_pCD_pFDpCD = new TH2D("E_{cal} vs. #theta_{pCD} (All Int., pFDpCD)", "E_{cal} vs. #theta_{pCD} (All Int., pFDpCD);#theta_{pCD} [#circ];E_{cal} [GeV];",
                                               numTH2Dbins_E_cal_Plots, Theta_lboundary_CD, Theta_uboundary_CD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_pCD_pFDpCD = new TH2D("E_{cal} vs. #phi_{pCD} (All Int., pFDpCD)", "E_{cal} vs. #phi_{pCD} (All Int., pFDpCD);#phi_{pCD} [#circ];E_{cal} [GeV];",
                                             numTH2Dbins_E_cal_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Theta_pCD_test_pFDpCD =
        new TH2D("E_{cal} vs. #theta_{pCD} for E_{cal}>E_{beam} (All Int., pFDpCD)", "E_{cal} vs. #theta_{pCD} for E_{cal}>E_{beam} (All Int., pFDpCD);#theta_{pCD} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Theta_lboundary_CD, Theta_uboundary_CD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_pCD_test_pFDpCD =
        new TH2D("E_{cal} vs. #phi_{pCD} for E_{cal}>E_{beam} (All Int., pFDpCD)", "E_{cal} vs. #phi_{pCD} for E_{cal}>E_{beam} (All Int., pFDpCD);#phi_{pCD} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_Theta_pCD_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_pFDpCD_Directory"];
    string hEcal_vs_Phi_pCD_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_pFDpCD_Directory"];

    // Ecal vs. dAlpha_T (pFDpCD)
    TH2D *hEcal_vs_dAlpha_T_L_pFDpCD =
        new TH2D("E_{cal} vs. #delta#alpha_{T,L} (All Int., pFDpCD)", "E_{cal} vs. #delta#alpha_{T,L} (All Int., pFDpCD);#delta#alpha_{T,L} [#circ];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots,
                 0, 180, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dAlpha_T_tot_pFDpCD =
        new TH2D("E_{cal} vs. #delta#alpha_{T,tot} (All Int., pFDpCD)", "E_{cal} vs. #delta#alpha_{T,tot} (All Int., pFDpCD);#delta#alpha_{T,tot} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, 0, 180, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dAlpha_T_tot_QEL_Only_pFDpCD =
        new TH2D("E_{cal} vs. #delta#alpha_{T,tot} (QE Only, pFDpCD)", "E_{cal} vs. #delta#alpha_{T,tot} (QE Only, pFDpCD);#delta#alpha_{T,tot} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, 0, 180, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dAlpha_T_tot_MEC_Only_pFDpCD =
        new TH2D("E_{cal} vs. #delta#alpha_{T,tot} (MEC Only, pFDpCD)", "E_{cal} vs. #delta#alpha_{T,tot} (MEC Only, pFDpCD);#delta#alpha_{T,tot} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, 0, 180, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dAlpha_T_tot_RES_Only_pFDpCD =
        new TH2D("E_{cal} vs. #delta#alpha_{T,tot} (RES Only, pFDpCD)", "E_{cal} vs. #delta#alpha_{T,tot} (RES Only, pFDpCD);#delta#alpha_{T,tot} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, 0, 180, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dAlpha_T_tot_DIS_Only_pFDpCD =
        new TH2D("E_{cal} vs. #delta#alpha_{T,tot} (DIS Only, pFDpCD)", "E_{cal} vs. #delta#alpha_{T,tot} (DIS Only, pFDpCD);#delta#alpha_{T,tot} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, 0, 180, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_dAlpha_T_L_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_TKI_pFDpCD_Directory"];
    string hEcal_vs_dAlpha_T_tot_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_TKI_pFDpCD_Directory"];

    // Ecal vs. dP_T (pFDpCD)
    TH2D *hEcal_vs_dP_T_L_pFDpCD = new TH2D("E_{cal} vs. #deltaP_{T,L} (All Int., pFDpCD)", "E_{cal} vs. #deltaP_{T,L} (All Int., pFDpCD);#deltaP_{T,L} [GeV];E_{cal} [GeV];",
                                            numTH2Dbins_E_cal_Plots, 0, dP_T_boundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dP_T_tot_pFDpCD = new TH2D("E_{cal} vs. #deltaP_{T,tot} (All Int., pFDpCD)", "E_{cal} vs. #deltaP_{T,tot} (All Int., pFDpCD);#deltaP_{T,tot} [GeV];E_{cal} [GeV];",
                                              numTH2Dbins_E_cal_Plots, 0, dP_T_boundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dP_T_tot_QEL_Only_pFDpCD = new TH2D("E_{cal} vs. #deltaP_{T,tot} (QE Only, pFDpCD)", "E_{cal} vs. #deltaP_{T,tot} (QE Only, pFDpCD);#deltaP_{T,tot} [GeV];E_{cal} [GeV];",
                                                       numTH2Dbins_E_cal_Plots, 0, dP_T_boundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dP_T_tot_MEC_Only_pFDpCD =
        new TH2D("E_{cal} vs. #deltaP_{T,tot} (MEC Only, pFDpCD)", "E_{cal} vs. #deltaP_{T,tot} (MEC Only, pFDpCD);#deltaP_{T,tot} [GeV];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots, 0,
                 dP_T_boundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dP_T_tot_RES_Only_pFDpCD =
        new TH2D("E_{cal} vs. #deltaP_{T,tot} (RES Only, pFDpCD)", "E_{cal} vs. #deltaP_{T,tot} (RES Only, pFDpCD);#deltaP_{T,tot} [GeV];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots, 0,
                 dP_T_boundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dP_T_tot_DIS_Only_pFDpCD =
        new TH2D("E_{cal} vs. #deltaP_{T,tot} (DIS Only, pFDpCD)", "E_{cal} vs. #deltaP_{T,tot} (DIS Only, pFDpCD);#deltaP_{T,tot} [GeV];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots, 0,
                 dP_T_boundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_dP_T_L_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_TKI_pFDpCD_Directory"];
    string hEcal_vs_dP_T_tot_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_TKI_pFDpCD_Directory"];

    // Ecal vs. W (pFDpCD)
    TH2D *hEcal_vs_W_pFDpCD =
        new TH2D("E_{cal} vs. W (All Int., pFDpCD)", "E_{cal} vs. W (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];E_{cal} = E_{e} + T_{pFD} + T_{pCD} [GeV];",
                 numTH2Dbins_E_cal_Plots, W_lboundary, W_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_W_pFDpCD_Dir = directories.Ecal_Directory_map["Ecal_stack_pFDpCD_Directory"];

    // Ecal reconstruction histograms (nFDpCD)

    // Ecal plots (nFDpCD)
    THStack *sEcal_nFDpCD = new THStack("E_{cal} Reconstruction (nFDpCD)", "E_{cal} Reconstruction (nFDpCD);E_{cal} = E_{e} + T_{nFD} + T_{pCD} [GeV]");
    string sEcal_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_stack_nFDpCD_Directory"];

    TH1D *hEcal_All_Int_nFDpCD =
        new TH1D("E_{cal} reco. (All Int., nFDpCD)", "E_{cal} Reconstruction (All Int., nFDpCD);E_{cal} = E_{e} + T_{nFD} + T_{pCD} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_QEL_nFDpCD =
        new TH1D("E_{cal} reco. (QEL only, nFDpCD)", "E_{cal} Reconstruction (QEL only, nFDpCD);E_{cal} = E_{e} + T_{nFD} + T_{pCD} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_MEC_nFDpCD =
        new TH1D("E_{cal} reco. (MEC only, nFDpCD)", "E_{cal} Reconstruction (MEC only, nFDpCD);E_{cal} = E_{e} + T_{nFD} + T_{pCD} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_RES_nFDpCD =
        new TH1D("E_{cal} reco. (RES only, nFDpCD)", "E_{cal} Reconstruction (RES only, nFDpCD);E_{cal} = E_{e} + T_{nFD} + T_{pCD} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH1D *hEcal_DIS_nFDpCD =
        new TH1D("E_{cal} reco. (DIS only, nFDpCD)", "E_{cal} Reconstruction (DIS only, nFDpCD);E_{cal} = E_{e} + T_{nFD} + T_{pCD} [GeV]", numTH1Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_All_Int_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_All_Int_nFDpCD_Directory"];
    string hEcal_QEL_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_QEL_nFDpCD_Directory"];
    string hEcal_MEC_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_MEC_nFDpCD_Directory"];
    string hEcal_RES_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_RES_nFDpCD_Directory"];
    string hEcal_DIS_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_DIS_nFDpCD_Directory"];

    // Ecal vs. momentum (nFDpCD)
    TH2D *hEcal_vs_P_e_nFDpCD = new TH2D("E_{cal} vs. P_{e} (All Int., nFDpCD)", "E_{cal} vs. P_{e} (All Int., nFDpCD);P_{e} [GeV/c];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots,
                                         Momentum_lboundary, Momentum_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_P_e_test_nFDpCD =
        new TH2D("E_{cal} vs. P_{e} for E_{cal}>E_{beam} (All Int., nFDpCD)", "E_{cal} vs. P_{e} for E_{cal}>E_{beam} (All Int., nFDpCD);P_{e} [GeV/c];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Momentum_lboundary, Momentum_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_P_e_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Mom_nFDpCD_Directory"];

    TH2D *hEcal_vs_P_nFD_nFDpCD = new TH2D("E_{cal} vs. P_{nFD} (All Int., nFDpCD)", "E_{cal} vs. P_{nFD} (All Int., nFDpCD);P_{nFD} [GeV/c];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots,
                                           P_nucFD_lboundary, P_nucFD_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_P_pCD_nFDpCD = new TH2D("E_{cal} vs. P_{pCD} (All Int., nFDpCD)", "E_{cal} vs. P_{pCD} (All Int., nFDpCD);P_{pCD} [GeV/c];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots,
                                           P_nucCD_lboundary, P_nucCD_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_P_nFD_test_nFDpCD =
        new TH2D("E_{cal} vs. P_{nFD} for E_{cal}>E_{beam} (All Int., nFDpCD)", "E_{cal} vs. P_{nFD} for E_{cal}>E_{beam} (All Int., nFDpCD);P_{nFD} [GeV/c];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, P_nucFD_lboundary, P_nucFD_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_P_pCD_test_nFDpCD =
        new TH2D("E_{cal} vs. P_{pCD} for E_{cal}>E_{beam} (All Int., nFDpCD)", "E_{cal} vs. P_{pCD} for E_{cal}>E_{beam} (All Int., nFDpCD);P_{pCD} [GeV/c];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, P_nucCD_lboundary, P_nucCD_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_P_nFD_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Mom_nFDpCD_Directory"];
    string hEcal_vs_P_pCD_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Mom_nFDpCD_Directory"];

    // Ecal vs. angles (nFDpCD)
    TH2D *hEcal_vs_Theta_e_nFDpCD = new TH2D("E_{cal} vs. #theta_{e} (All Int., nFDpCD)", "E_{cal} vs. #theta_{e} (All Int., nFDpCD);#theta_{e} [#circ];E_{cal} [GeV];",
                                             numTH2Dbins_E_cal_Plots, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_e_nFDpCD = new TH2D("E_{cal} vs. #phi_{e} (All Int., nFDpCD)", "E_{cal} vs. #phi_{e} (All Int., nFDpCD);#phi_{e} [#circ];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots,
                                           Phi_lboundary, Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Theta_e_test_nFDpCD =
        new TH2D("E_{cal} vs. #theta_{e} for E_{cal}>E_{beam} (All Int., nFDpCD)", "E_{cal} vs. #theta_{e} for E_{cal}>E_{beam} (All Int., nFDpCD);#theta_{e} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_e_test_nFDpCD =
        new TH2D("E_{cal} vs. #phi_{e} for E_{cal}>E_{beam} (All Int., nFDpCD)", "E_{cal} vs. #phi_{e} for E_{cal}>E_{beam} (All Int., nFDpCD);#phi_{e} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_Theta_e_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_nFDpCD_Directory"];
    string hEcal_vs_Phi_e_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_nFDpCD_Directory"];

    TH2D *hEcal_vs_Theta_nFD_nFDpCD = new TH2D("E_{cal} vs. #theta_{nFD} (All Int., nFDpCD)", "E_{cal} vs. #theta_{nFD} (All Int., nFDpCD);#theta_{nFD} [#circ];E_{cal} [GeV];",
                                               numTH2Dbins_E_cal_Plots, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_nFD_nFDpCD = new TH2D("E_{cal} vs. #phi_{nFD} (All Int., nFDpCD)", "E_{cal} vs. #phi_{nFD} (All Int., nFDpCD);#phi_{nFD} [#circ];E_{cal} [GeV];",
                                             numTH2Dbins_E_cal_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Theta_nFD_test_nFDpCD =
        new TH2D("E_{cal} vs. #theta_{nFD} for E_{cal}>E_{beam} (All Int., nFDpCD)", "E_{cal} vs. #theta_{nFD} for E_{cal}>E_{beam} (All Int., nFDpCD);#theta_{nFD} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_nFD_test_nFDpCD =
        new TH2D("E_{cal} vs. #phi_{nFD} for E_{cal}>E_{beam} (All Int., nFDpCD)", "E_{cal} vs. #phi_{nFD} for E_{cal}>E_{beam} (All Int., nFDpCD);#phi_{nFD} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_Theta_nFD_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_nFDpCD_Directory"];
    string hEcal_vs_Phi_nFD_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_nFDpCD_Directory"];

    TH2D *hEcal_vs_Theta_pCD_nFDpCD = new TH2D("E_{cal} vs. #theta_{pCD} (All Int., nFDpCD)", "E_{cal} vs. #theta_{pCD} (All Int., nFDpCD);#theta_{pCD} [#circ];E_{cal} [GeV];",
                                               numTH2Dbins_E_cal_Plots, Theta_lboundary_CD, Theta_uboundary_CD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_pCD_nFDpCD = new TH2D("E_{cal} vs. #phi_{pCD} (All Int., nFDpCD)", "E_{cal} vs. #phi_{pCD} (All Int., nFDpCD);#phi_{pCD} [#circ];E_{cal} [GeV];",
                                             numTH2Dbins_E_cal_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Theta_pCD_test_nFDpCD =
        new TH2D("E_{cal} vs. #theta_{pCD} for E_{cal}>E_{beam} (All Int., nFDpCD)", "E_{cal} vs. #theta_{pCD} for E_{cal}>E_{beam} (All Int., nFDpCD);#theta_{pCD} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Theta_lboundary_CD, Theta_uboundary_CD, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_Phi_pCD_test_nFDpCD =
        new TH2D("E_{cal} vs. #phi_{pCD} for E_{cal}>E_{beam} (All Int., nFDpCD)", "E_{cal} vs. #phi_{pCD} for E_{cal}>E_{beam} (All Int., nFDpCD);#phi_{pCD} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_Theta_pCD_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_nFDpCD_Directory"];
    string hEcal_vs_Phi_pCD_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_Ang_nFDpCD_Directory"];

    // Ecal vs. dAlpha_T (nFDpCD)
    TH2D *hEcal_vs_dAlpha_T_L_nFDpCD =
        new TH2D("E_{cal} vs. #delta#alpha_{T,L} (All Int., nFDpCD)", "E_{cal} vs. #delta#alpha_{T,L} (All Int., nFDpCD);#delta#alpha_{T,L} [#circ];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots,
                 0, 180, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dAlpha_T_tot_nFDpCD =
        new TH2D("E_{cal} vs. #delta#alpha_{T,tot} (All Int., nFDpCD)", "E_{cal} vs. #delta#alpha_{T,tot} (All Int., nFDpCD);#delta#alpha_{T,tot} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, 0, 180, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dAlpha_T_tot_QEL_Only_nFDpCD =
        new TH2D("E_{cal} vs. #delta#alpha_{T,tot} (QE Only, nFDpCD)", "E_{cal} vs. #delta#alpha_{T,tot} (QE Only, nFDpCD);#delta#alpha_{T,tot} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, 0, 180, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dAlpha_T_tot_MEC_Only_nFDpCD =
        new TH2D("E_{cal} vs. #delta#alpha_{T,tot} (MEC Only, nFDpCD)", "E_{cal} vs. #delta#alpha_{T,tot} (MEC Only, nFDpCD);#delta#alpha_{T,tot} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, 0, 180, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dAlpha_T_tot_RES_Only_nFDpCD =
        new TH2D("E_{cal} vs. #delta#alpha_{T,tot} (RES Only, nFDpCD)", "E_{cal} vs. #delta#alpha_{T,tot} (RES Only, nFDpCD);#delta#alpha_{T,tot} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, 0, 180, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dAlpha_T_tot_DIS_Only_nFDpCD =
        new TH2D("E_{cal} vs. #delta#alpha_{T,tot} (DIS Only, nFDpCD)", "E_{cal} vs. #delta#alpha_{T,tot} (DIS Only, nFDpCD);#delta#alpha_{T,tot} [#circ];E_{cal} [GeV];",
                 numTH2Dbins_E_cal_Plots, 0, 180, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_dAlpha_T_L_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_TKI_nFDpCD_Directory"];
    string hEcal_vs_dAlpha_T_tot_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_TKI_nFDpCD_Directory"];

    // Ecal vs. dP_T (nFDpCD)
    TH2D *hEcal_vs_dP_T_L_nFDpCD = new TH2D("E_{cal} vs. #deltaP_{T,L} (All Int., nFDpCD)", "E_{cal} vs. #deltaP_{T,L} (All Int., nFDpCD);#deltaP_{T,L} [GeV];E_{cal} [GeV];",
                                            numTH2Dbins_E_cal_Plots, 0, dP_T_boundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dP_T_tot_nFDpCD = new TH2D("E_{cal} vs. #deltaP_{T,tot} (All Int., nFDpCD)", "E_{cal} vs. #deltaP_{T,tot} (All Int., nFDpCD);#deltaP_{T,tot} [GeV];E_{cal} [GeV];",
                                              numTH2Dbins_E_cal_Plots, 0, dP_T_boundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dP_T_tot_QEL_Only_nFDpCD = new TH2D("E_{cal} vs. #deltaP_{T,tot} (QE Only, nFDpCD)", "E_{cal} vs. #deltaP_{T,tot} (QE Only, nFDpCD);#deltaP_{T,tot} [GeV];E_{cal} [GeV];",
                                                       numTH2Dbins_E_cal_Plots, 0, dP_T_boundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dP_T_tot_MEC_Only_nFDpCD =
        new TH2D("E_{cal} vs. #deltaP_{T,tot} (MEC Only, nFDpCD)", "E_{cal} vs. #deltaP_{T,tot} (MEC Only, nFDpCD);#deltaP_{T,tot} [GeV];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots, 0,
                 dP_T_boundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dP_T_tot_RES_Only_nFDpCD =
        new TH2D("E_{cal} vs. #deltaP_{T,tot} (RES Only, nFDpCD)", "E_{cal} vs. #deltaP_{T,tot} (RES Only, nFDpCD);#deltaP_{T,tot} [GeV];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots, 0,
                 dP_T_boundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    TH2D *hEcal_vs_dP_T_tot_DIS_Only_nFDpCD =
        new TH2D("E_{cal} vs. #deltaP_{T,tot} (DIS Only, nFDpCD)", "E_{cal} vs. #deltaP_{T,tot} (DIS Only, nFDpCD);#deltaP_{T,tot} [GeV];E_{cal} [GeV];", numTH2Dbins_E_cal_Plots, 0,
                 dP_T_boundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_dP_T_L_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_TKI_nFDpCD_Directory"];
    string hEcal_vs_dP_T_tot_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_rec_vs_TKI_nFDpCD_Directory"];

    // Ecal vs. W (nFDpCD)
    TH2D *hEcal_vs_W_nFDpCD =
        new TH2D("E_{cal} vs. W (All Int., nFDpCD)", "E_{cal} vs. W (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];E_{cal} = E_{e} + T_{nFD} + T_{pCD} [GeV];",
                 numTH2Dbins_E_cal_Plots, W_lboundary, W_uboundary, numTH2Dbins_E_cal_Plots, 0, beamE * 1.35);
    string hEcal_vs_W_nFDpCD_Dir = directories.Ecal_Directory_map["Ecal_stack_nFDpCD_Directory"];

    // ======================================================================================================================================================================
    // TKI histograms
    // ======================================================================================================================================================================

    // TKI histograms

    // TKI histograms (1p)
    THStack *sdP_T_1p = new THStack("#deltaP_{T} vs. #deltaP_{T,tot} (1p)", "#deltaP_{T,L} vs. #deltaP_{T,tot} (1p);#deltaP_{T} [GeV/c]");
    TH1D *hdP_T_1p = new TH1D("#deltaP_{T} (1p)", "#deltaP_{T} histogram (1p);#deltaP_{T} = |#vec{p}_{T,e} + #vec{p}_{T,p}| [GeV/c]", numTH1Dbins_TKI_dP_T_Plots, 0, dP_T_boundary);
    string hdP_T_1p_Dir = directories.TKI_Directory_map["dP_T_1p_Directory"];

    THStack *sdAlpha_T_1p = new THStack("#delta#alpha_{T} & #delta#alpha_{T,tot} (1p)", "#delta#alpha_{T,L} vs. #delta#alpha_{T,tot} (1p);#delta#alpha_{T} [#circ]");
    TH1D *hdAlpha_T_1p = new TH1D("#delta#alpha_{T} (1p)", "#delta#alpha_{T} histogram (1p);#delta#alpha_{T} [#circ]", numTH1Dbins_TKI_dAlpha_T_Plots, 0, 180);
    string hdAlpha_T_1p_Dir = directories.TKI_Directory_map["dAlpha_T_1p_Directory"];

    THStack *sdPhi_T_1p = new THStack("#delta#phi_{T} & #delta#phi_{T,tot} (1p)", "#delta#phi_{T,L} vs. #delta#phi_{T,tot} (1p);#delta#phi_{T} [#circ]");
    TH1D *hdPhi_T_1p = new TH1D("#delta#phi_{T} (1p)", "#delta#phi_{T} histogram (1p);#delta#phi_{T} [#circ]", numTH1Dbins_TKI_dP_T_Plots, 0, 180);
    string hdPhi_T_1p_Dir = directories.TKI_Directory_map["dPhi_T_1p_Directory"];

    TH2D *hdP_T_vs_dAlpha_T_1p = new TH2D("#deltaP_{T} vs. #delta#alpha_{T} (All Int., 1p)", "#deltaP_{T} vs. #delta#alpha_{T} (All Int., 1p);#delta#alpha_{T} [#circ];#deltaP_{T} [GeV/c];",
                                          numTH2Dbins_TKI_Plots, 0, 180, numTH2Dbins_TKI_Plots, 0, dP_T_boundary);
    string hdP_T_vs_dAlpha_T_1p_Dir = directories.TKI_Directory_map["dP_T_vs_dAlpha_T_1p_Directory"];

    // TKI histograms (1n)
    THStack *sdP_T_1n = new THStack("#deltaP_{T} vs. #deltaP_{T,tot} (1n)", "#deltaP_{T,L} vs. #deltaP_{T,tot} (1n);#deltaP_{T} [GeV/c]");
    TH1D *hdP_T_1n = new TH1D("#deltaP_{T} (1n)", "#deltaP_{T} histogram (1n);#deltaP_{T} = |#vec{p}_{T,e} + #vec{p}_{T,n}| [GeV/c]", numTH1Dbins_TKI_dP_T_Plots, 0, dP_T_boundary);
    string hdP_T_1n_Dir = directories.TKI_Directory_map["dP_T_1n_Directory"];

    THStack *sdAlpha_T_1n = new THStack("#delta#alpha_{T} & #delta#alpha_{T,tot} (1n)", "#delta#alpha_{T,L} vs. #delta#alpha_{T,tot} (1n);#delta#alpha_{T} [#circ]");
    TH1D *hdAlpha_T_1n = new TH1D("#delta#alpha_{T} (1n)", "#delta#alpha_{T} histogram (1n);#delta#alpha_{T} [#circ]", numTH1Dbins_TKI_dAlpha_T_Plots, 0, 180);
    string hdAlpha_T_1n_Dir = directories.TKI_Directory_map["dAlpha_T_1n_Directory"];

    THStack *sdPhi_T_1n = new THStack("#delta#phi_{T} & #delta#phi_{T,tot} (1n)", "#delta#phi_{T,L} vs. #delta#phi_{T,tot} (1n);#delta#phi_{T} [#circ]");
    TH1D *hdPhi_T_1n = new TH1D("#delta#phi_{T} (1n)", "#delta#phi_{T} histogram (1n);#delta#phi_{T} [#circ]", numTH1Dbins_TKI_dP_T_Plots, 0, 180);
    string hdPhi_T_1n_Dir = directories.TKI_Directory_map["dPhi_T_1n_Directory"];

    TH2D *hdP_T_vs_dAlpha_T_1n = new TH2D("#deltaP_{T} vs. #delta#alpha_{T} (All Int., 1n)", "#deltaP_{T} vs. #delta#alpha_{T} (All Int., 1n);#delta#alpha_{T} [#circ];#deltaP_{T} [GeV/c];",
                                          numTH2Dbins_TKI_Plots, 0, 180, numTH2Dbins_TKI_Plots, 0, dP_T_boundary);
    string hdP_T_vs_dAlpha_T_1n_Dir = directories.TKI_Directory_map["dP_T_vs_dAlpha_T_1n_Directory"];

    // TKI histograms (2p)
    THStack *sdP_T_2p = new THStack("#deltaP_{T,L} & #deltaP_{T,tot} (2p)", "#deltaP_{T,L} vs. #deltaP_{T,tot} (2p);#deltaP_{T} [GeV/c]");
    TH1D *hdP_T_L_2p =
        new TH1D("#deltaP_{T,L} (2p)", "#deltaP_{T,L} by Leading Proton (2p);#deltaP_{T,L} = |#vec{p}_{T,e} + #vec{p}_{T,1}| [GeV/c]", numTH1Dbins_TKI_dP_T_Plots, 0, dP_T_boundary);
    TH1D *hdP_T_tot_2p = new TH1D("#deltaP_{T,tot} (2p)", "#deltaP_{T,tot} by Momentum Sum (2p);#deltaP_{T,tot} = |#vec{p}_{T,e} + #vec{p}_{T,1} + #vec{p}_{T,2}| [GeV/c]",
                                  numTH1Dbins_TKI_dP_T_Plots, 0, dP_T_boundary);
    string hdP_T_L_2p_Dir = directories.TKI_Directory_map["dP_T_2p_Directory"];
    string hdP_T_tot_2p_Dir = directories.TKI_Directory_map["dP_T_2p_Directory"];

    THStack *sdAlpha_T_2p = new THStack("#delta#alpha_{T,L} & #delta#alpha_{T,tot} (2p)", "#delta#alpha_{T,L} vs. #delta#alpha_{T,tot} (2p);#delta#alpha_{T} [#circ]");
    TH1D *hdAlpha_T_L_2p = new TH1D("#delta#alpha_{T,L} (2p)", "#delta#alpha_{T,L} by Leading Proton (2p);#delta#alpha_{T,L} [#circ]", numTH1Dbins_TKI_dAlpha_T_Plots, 0, 180);
    TH1D *hdAlpha_T_tot_2p = new TH1D("#delta#alpha_{T,tot} (2p)", "#delta#alpha_{T,tot} by Momentum Sum (2p);#delta#alpha_{T,tot} [#circ]", numTH1Dbins_TKI_dAlpha_T_Plots, 0, 180);
    string hdAlpha_T_L_2p_Dir = directories.TKI_Directory_map["dAlpha_T_2p_Directory"];
    string hdAlpha_T_tot_2p_Dir = directories.TKI_Directory_map["dAlpha_T_2p_Directory"];

    THStack *sdPhi_T_2p = new THStack("#delta#phi_{T,L} & #delta#phi_{T,tot} (2p)", "#delta#phi_{T,L} vs. #delta#phi_{T,tot} (2p);#delta#phi_{T} [#circ]");
    TH1D *hdPhi_T_L_2p = new TH1D("#delta#phi_{T,L} (2p)", "#delta#phi_{T,L} by Leading Proton (2p);#delta#phi_{T,L} [#circ]", numTH1Dbins_TKI_dP_T_Plots, 0, 180);
    TH1D *hdPhi_T_tot_2p = new TH1D("#delta#phi_{T,tot} (2p)", "#delta#phi_{T,tot} by Momentum Sum (2p);#delta#phi_{T,tot} [#circ]", numTH1Dbins_TKI_dP_T_Plots, 0, 180);
    string hdPhi_T_L_2p_Dir = directories.TKI_Directory_map["dPhi_T_2p_Directory"];
    string hdPhi_T_tot_2p_Dir = directories.TKI_Directory_map["dPhi_T_2p_Directory"];

    TH2D *hdP_T_L_vs_dAlpha_T_L_2p =
        new TH2D("#deltaP_{T,L} vs. #delta#alpha_{T,L} (All Int., 2p)", "#deltaP_{T,L} vs. #delta#alpha_{T,L} (All Int., 2p);#delta#alpha_{T,L} [#circ];#deltaP_{T,L} [GeV/c];",
                 numTH2Dbins_TKI_Plots, 0, 180, numTH2Dbins_TKI_Plots, 0, dP_T_boundary);
    TH2D *hdP_T_tot_vs_dAlpha_T_tot_2p =
        new TH2D("#deltaP_{T,tot} vs. #delta#alpha_{T,tot} (All Int., 2p)", "#deltaP_{T,tot} vs. #delta#alpha_{T,tot} (All Int., 2p);#delta#alpha_{T,tot} [#circ];#deltaP_{T,tot} [GeV/c];",
                 numTH2Dbins_TKI_Plots, 0, 180, numTH2Dbins_TKI_Plots, 0, dP_T_boundary);
    string hdP_T_L_vs_dAlpha_T_L_2p_Dir = directories.TKI_Directory_map["dP_T_vs_dAlpha_T_2p_Directory"];
    string hdP_T_tot_vs_dAlpha_T_tot_2p_Dir = directories.TKI_Directory_map["dP_T_vs_dAlpha_T_2p_Directory"];

    // TKI histograms (pFDpCD)

    // TKI plots (pFDpCD)
    THStack *sdP_T_pFDpCD = new THStack("#deltaP_{T,L} & #deltaP_{T,tot} (pFDpCD)", "#deltaP_{T,L} vs. #deltaP_{T,tot} (pFDpCD);#deltaP_{T} [GeV/c]");
    THStack *sdP_T_tot_pFDpCD = new THStack("#deltaP_{T,tot} stack (pFDpCD)", "#deltaP_{T,tot} stack (pFDpCD);#deltaP_{T,tot} [GeV/c]");
    TH1D *hdP_T_L_pFDpCD =
        new TH1D("#deltaP_{T,L} (pFDpCD)", "#deltaP_{T,L} by leading proton (pFDpCD);#deltaP_{T,L} = |#vec{p}_{T,e} + #vec{p}_{T,pL}| [GeV/c]", numTH1Dbins_TKI_dP_T_Plots, 0, dP_T_boundary);
    TH1D *hdP_T_tot_pFDpCD = new TH1D("#deltaP_{T,tot} (pFDpCD)", "#deltaP_{T,tot} by Momentum Sum (pFDpCD);#deltaP_{T,tot} = |#vec{p}_{T,e} + #vec{p}_{T,pFD} + #vec{p}_{T,pCD}| [GeV/c]",
                                      numTH1Dbins_TKI_dP_T_Plots, 0, dP_T_boundary);
    TH1D *hdP_T_tot_QEL_Only_pFDpCD =
        new TH1D("#deltaP_{T,tot} (QE Only, pFDpCD)", "#deltaP_{T,tot} by Momentum Sum (QE Only, pFDpCD);#deltaP_{T,tot} = |#vec{p}_{T,e} + #vec{p}_{T,pFD} + #vec{p}_{T,pCD}| [GeV/c]",
                 numTH1Dbins_TKI_dP_T_Plots, 0, dP_T_boundary);
    TH1D *hdP_T_tot_MEC_Only_pFDpCD =
        new TH1D("#deltaP_{T,tot} (MEC Only, pFDpCD)", "#deltaP_{T,tot} by Momentum Sum (MEC Only, pFDpCD);#deltaP_{T,tot} = |#vec{p}_{T,e} + #vec{p}_{T,pFD} + #vec{p}_{T,pCD}| [GeV/c]",
                 numTH1Dbins_TKI_dP_T_Plots, 0, dP_T_boundary);
    TH1D *hdP_T_tot_RES_Only_pFDpCD =
        new TH1D("#deltaP_{T,tot} (RES Only, pFDpCD)", "#deltaP_{T,tot} by Momentum Sum (RES Only, pFDpCD);#deltaP_{T,tot} = |#vec{p}_{T,e} + #vec{p}_{T,pFD} + #vec{p}_{T,pCD}| [GeV/c]",
                 numTH1Dbins_TKI_dP_T_Plots, 0, dP_T_boundary);
    TH1D *hdP_T_tot_DIS_Only_pFDpCD =
        new TH1D("#deltaP_{T,tot} (DIS Only, pFDpCD)", "#deltaP_{T,tot} by Momentum Sum (DIS Only, pFDpCD);#deltaP_{T,tot} = |#vec{p}_{T,e} + #vec{p}_{T,pFD} + #vec{p}_{T,pCD}| [GeV/c]",
                 numTH1Dbins_TKI_dP_T_Plots, 0, dP_T_boundary);
    string hdP_T_L_pFDpCD_Dir = directories.TKI_Directory_map["dP_T_pFDpCD_Directory"];
    string hdP_T_tot_pFDpCD_Dir = directories.TKI_Directory_map["dP_T_pFDpCD_Directory"];

    THStack *sdAlpha_T_pFDpCD = new THStack("#delta#alpha_{T,L} & #delta#alpha_{T,tot} (pFDpCD)", "#delta#alpha_{T,L} vs. #delta#alpha_{T,tot} (pFDpCD);#delta#alpha_{T} [#circ]");
    THStack *sdAlpha_T_tot_pFDpCD = new THStack("#delta#alpha_{T,tot} stack (pFDpCD)", "#delta#alpha_{T,tot} stack (pFDpCD);#delta#alpha_{T,tot} [#circ]");
    TH1D *hdAlpha_T_L_pFDpCD = new TH1D("#delta#alpha_{T,L} (pFDpCD)", "#delta#alpha_{T,L} by leading proton (pFDpCD);#delta#alpha_{T,L} [#circ]", numTH1Dbins_TKI_dAlpha_T_Plots, 0, 180);
    TH1D *hdAlpha_T_tot_pFDpCD =
        new TH1D("#delta#alpha_{T,tot} (pFDpCD)", "#delta#alpha_{T,tot} by Momentum Sum (pFDpCD);#delta#alpha_{T,tot} [#circ]", numTH1Dbins_TKI_dAlpha_T_Plots, 0, 180);
    TH1D *hdAlpha_T_tot_QEL_Only_pFDpCD =
        new TH1D("#delta#alpha_{T,tot} (QE Only, pFDpCD)", "#delta#alpha_{T,tot} by Momentum Sum (QE Only, pFDpCD);#delta#alpha_{T,tot} [#circ]", numTH1Dbins_TKI_dP_T_Plots, 0, 180);
    TH1D *hdAlpha_T_tot_MEC_Only_pFDpCD =
        new TH1D("#delta#alpha_{T,tot} (MEC Only, pFDpCD)", "#delta#alpha_{T,tot} by Momentum Sum (MEC Only, pFDpCD);#delta#alpha_{T,tot} [#circ]", numTH1Dbins_TKI_dP_T_Plots, 0, 180);
    TH1D *hdAlpha_T_tot_RES_Only_pFDpCD =
        new TH1D("#delta#alpha_{T,tot} (RES Only, pFDpCD)", "#delta#alpha_{T,tot} by Momentum Sum (RES Only, pFDpCD);#delta#alpha_{T,tot} [#circ]", numTH1Dbins_TKI_dP_T_Plots, 0, 180);
    TH1D *hdAlpha_T_tot_DIS_Only_pFDpCD =
        new TH1D("#delta#alpha_{T,tot} (DIS Only, pFDpCD)", "#delta#alpha_{T,tot} by Momentum Sum (DIS Only, pFDpCD);#delta#alpha_{T,tot} [#circ]", numTH1Dbins_TKI_dP_T_Plots, 0, 180);
    string hdAlpha_T_L_pFDpCD_Dir = directories.TKI_Directory_map["dAlpha_T_pFDpCD_Directory"];
    string hdAlpha_T_tot_pFDpCD_Dir = directories.TKI_Directory_map["dAlpha_T_pFDpCD_Directory"];

    THStack *sdPhi_T_pFDpCD = new THStack("#delta#phi_{T,L} & #delta#phi_{T,tot} (pFDpCD)", "#delta#phi_{T,L} vs. #delta#phi_{T,tot} (pFDpCD);#delta#phi_{T} [#circ]");
    TH1D *hdPhi_T_L_pFDpCD = new TH1D("#delta#phi_{T,L} (pFDpCD)", "#delta#phi_{T,L} by leading proton (pFDpCD);#delta#phi_{T,L} [#circ]", numTH1Dbins_TKI_dP_T_Plots, 0, 180);
    TH1D *hdPhi_T_tot_pFDpCD = new TH1D("#delta#phi_{T,tot} (pFDpCD)", "#delta#phi_{T,tot} by Momentum Sum (pFDpCD);#delta#phi_{T,tot} [#circ]", numTH1Dbins_TKI_dP_T_Plots, 0, 180);
    string hdPhi_T_L_pFDpCD_Dir = directories.TKI_Directory_map["dPhi_T_pFDpCD_Directory"];
    string hdPhi_T_tot_pFDpCD_Dir = directories.TKI_Directory_map["dPhi_T_pFDpCD_Directory"];

    TH2D *hdP_T_L_vs_dAlpha_T_L_pFDpCD =
        new TH2D("#deltaP_{T,L} vs. #delta#alpha_{T,L} (All Int., pFDpCD)", "#deltaP_{T,L} vs. #delta#alpha_{T,L} (All Int., pFDpCD);#delta#alpha_{T,L} [#circ];#deltaP_{T,L} [GeV/c];",
                 numTH2Dbins_TKI_Plots, 0, 180, numTH2Dbins_TKI_Plots, 0, dP_T_boundary);
    TH2D *hdP_T_tot_vs_dAlpha_T_tot_pFDpCD = new TH2D("#deltaP_{T,tot} vs. #delta#alpha_{T,tot} (All Int., pFDpCD)",
                                                      "#deltaP_{T,tot} vs. #delta#alpha_{T,tot} (All Int., pFDpCD);#delta#alpha_{T,tot} [#circ];#deltaP_{T,tot} [GeV/c];",
                                                      numTH2Dbins_TKI_Plots, 0, 180, numTH2Dbins_TKI_Plots, 0, dP_T_boundary);
    string hdP_T_L_vs_dAlpha_T_L_pFDpCD_Dir = directories.TKI_Directory_map["dP_T_vs_dAlpha_T_pFDpCD_Directory"];
    string hdP_T_tot_vs_dAlpha_T_tot_pFDpCD_Dir = directories.TKI_Directory_map["dP_T_vs_dAlpha_T_pFDpCD_Directory"];

    // TKI vs. W (pFDpCD)
    TH2D *hdP_T_L_vs_W_pFDpCD = new TH2D("#deltaP_{T,L} vs. W (All Int., pFDpCD)",
                                         "#deltaP_{T,L} vs. W (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];"
                                         "#deltaP_{T,L} = |#vec{p}_{T,e} + #vec{p}_{T,pL}| [GeV/c];",
                                         numTH2Dbins_TKI_Plots, W_lboundary, W_uboundary, numTH2Dbins_TKI_Plots, 0, dP_T_boundary);
    TH2D *hdP_T_tot_vs_W_pFDpCD = new TH2D("#deltaP_{T,tot} vs. W (All Int., pFDpCD)",
                                           "#deltaP_{T,tot} vs. W (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];"
                                           "#deltaP_{T,tot} = |#vec{p}_{T,e} + #vec{p}_{T,pFD} + #vec{p}_{T,pCD}| [GeV/c];",
                                           numTH2Dbins_TKI_Plots, W_lboundary, W_uboundary, numTH2Dbins_TKI_Plots, 0, dP_T_boundary);
    string hdP_T_L_vs_W_pFDpCD_Dir = directories.TKI_Directory_map["dP_T_pFDpCD_Directory"];
    string hdP_T_tot_vs_W_pFDpCD_Dir = directories.TKI_Directory_map["dP_T_pFDpCD_Directory"];

    TH2D *hdAlpha_T_L_vs_W_pFDpCD = new TH2D("#delta#alpha_{T,L} vs. W (All Int., pFDpCD)",
                                             "#delta#alpha_{T,L} vs. W (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#delta#alpha_{T,L} [#circ];",
                                             numTH2Dbins_TKI_Plots, W_lboundary, W_uboundary, numTH2Dbins_TKI_Plots, 0, 180);
    TH2D *hdAlpha_T_tot_vs_W_pFDpCD = new TH2D("#delta#alpha_{T,tot} vs. W (All Int., pFDpCD)",
                                               "#delta#alpha_{T,tot} vs. W (All Int., pFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#delta#alpha_{T,tot} [#circ];",
                                               numTH2Dbins_TKI_Plots, W_lboundary, W_uboundary, numTH2Dbins_TKI_Plots, 0, 180);
    string hdAlpha_T_L_vs_W_pFDpCD_Dir = directories.TKI_Directory_map["dAlpha_T_pFDpCD_Directory"];
    string hdAlpha_T_tot_vs_W_pFDpCD_Dir = directories.TKI_Directory_map["dAlpha_T_pFDpCD_Directory"];

    // TKI histograms (nFDpCD)

    // TKI plots (nFDpCD)
    THStack *sdP_T_nFDpCD = new THStack("#deltaP_{T,L} & #deltaP_{T,tot} (nFDpCD)", "#deltaP_{T,L} vs. #deltaP_{T,tot} (nFDpCD);#deltaP_{T} [GeV/c]");
    THStack *sdP_T_tot_nFDpCD = new THStack("#deltaP_{T,tot} stack (nFDpCD)", "#deltaP_{T,tot} stack (nFDpCD);#deltaP_{T,tot} [GeV/c]");
    TH1D *hdP_T_L_nFDpCD = new TH1D("#deltaP_{T,L} (nFDpCD)", "#deltaP_{T,L} by leading nucleon (nFDpCD);#deltaP_{T,L} = |#vec{p}_{T,e} + #vec{p}_{T,nL}| [GeV/c]",
                                    numTH1Dbins_TKI_dP_T_Plots, 0, dP_T_boundary);
    TH1D *hdP_T_tot_nFDpCD = new TH1D("#deltaP_{T,tot} (nFDpCD)", "#deltaP_{T,tot} by Momentum Sum (nFDpCD);#deltaP_{T,tot} = |#vec{p}_{T,e} + #vec{p}_{T,nFD} + #vec{p}_{T,pCD}| [GeV/c]",
                                      numTH1Dbins_TKI_dP_T_Plots, 0, dP_T_boundary);
    TH1D *hdP_T_tot_QEL_Only_nFDpCD =
        new TH1D("#deltaP_{T,tot} (QE Only, nFDpCD)", "#deltaP_{T,tot} by Momentum Sum (QE Only, nFDpCD);#deltaP_{T,tot} = |#vec{p}_{T,e} + #vec{p}_{T,pFD} + #vec{p}_{T,pCD}| [GeV/c]",
                 numTH1Dbins_TKI_dP_T_Plots, 0, dP_T_boundary);
    TH1D *hdP_T_tot_MEC_Only_nFDpCD =
        new TH1D("#deltaP_{T,tot} (MEC Only, nFDpCD)", "#deltaP_{T,tot} by Momentum Sum (MEC Only, nFDpCD);#deltaP_{T,tot} = |#vec{p}_{T,e} + #vec{p}_{T,pFD} + #vec{p}_{T,pCD}| [GeV/c]",
                 numTH1Dbins_TKI_dP_T_Plots, 0, dP_T_boundary);
    TH1D *hdP_T_tot_RES_Only_nFDpCD =
        new TH1D("#deltaP_{T,tot} (RES Only, nFDpCD)", "#deltaP_{T,tot} by Momentum Sum (RES Only, nFDpCD);#deltaP_{T,tot} = |#vec{p}_{T,e} + #vec{p}_{T,pFD} + #vec{p}_{T,pCD}| [GeV/c]",
                 numTH1Dbins_TKI_dP_T_Plots, 0, dP_T_boundary);
    TH1D *hdP_T_tot_DIS_Only_nFDpCD =
        new TH1D("#deltaP_{T,tot} (DIS Only, nFDpCD)", "#deltaP_{T,tot} by Momentum Sum (DIS Only, nFDpCD);#deltaP_{T,tot} = |#vec{p}_{T,e} + #vec{p}_{T,pFD} + #vec{p}_{T,pCD}| [GeV/c]",
                 numTH1Dbins_TKI_dP_T_Plots, 0, dP_T_boundary);
    string hdP_T_L_nFDpCD_Dir = directories.TKI_Directory_map["dP_T_nFDpCD_Directory"];
    string hdP_T_tot_nFDpCD_Dir = directories.TKI_Directory_map["dP_T_nFDpCD_Directory"];

    THStack *sdAlpha_T_nFDpCD = new THStack("#delta#alpha_{T,L} & #delta#alpha_{T,tot} (nFDpCD)", "#delta#alpha_{T,L} vs. #delta#alpha_{T,tot} (nFDpCD);#delta#alpha_{T} [#circ]");
    THStack *sdAlpha_T_tot_nFDpCD = new THStack("#delta#alpha_{T,tot} stack (nFDpCD)", "#delta#alpha_{T,tot} stack (nFDpCD);#delta#alpha_{T,tot} [#circ]");
    TH1D *hdAlpha_T_L_nFDpCD = new TH1D("#delta#alpha_{T,L} (nFDpCD)", "#delta#alpha_{T,L} by leading nucleon (nFDpCD);#delta#alpha_{T,L} [#circ]", numTH1Dbins_TKI_dAlpha_T_Plots, 0, 180);
    TH1D *hdAlpha_T_tot_nFDpCD =
        new TH1D("#delta#alpha_{T,tot} (nFDpCD)", "#delta#alpha_{T,tot} by Momentum Sum (nFDpCD);#delta#alpha_{T,tot} [#circ]", numTH1Dbins_TKI_dAlpha_T_Plots, 0, 180);
    TH1D *hdAlpha_T_tot_QEL_Only_nFDpCD =
        new TH1D("#delta#alpha_{T,tot} (QE Only, nFDpCD)", "#delta#alpha_{T,tot} by Momentum Sum (QE Only, nFDpCD);#delta#alpha_{T,tot} [#circ]", numTH1Dbins_TKI_dP_T_Plots, 0, 180);
    TH1D *hdAlpha_T_tot_MEC_Only_nFDpCD =
        new TH1D("#delta#alpha_{T,tot} (MEC Only, nFDpCD)", "#delta#alpha_{T,tot} by Momentum Sum (MEC Only, nFDpCD);#delta#alpha_{T,tot} [#circ]", numTH1Dbins_TKI_dP_T_Plots, 0, 180);
    TH1D *hdAlpha_T_tot_RES_Only_nFDpCD =
        new TH1D("#delta#alpha_{T,tot} (RES Only, nFDpCD)", "#delta#alpha_{T,tot} by Momentum Sum (RES Only, nFDpCD);#delta#alpha_{T,tot} [#circ]", numTH1Dbins_TKI_dP_T_Plots, 0, 180);
    TH1D *hdAlpha_T_tot_DIS_Only_nFDpCD =
        new TH1D("#delta#alpha_{T,tot} (DIS Only, nFDpCD)", "#delta#alpha_{T,tot} by Momentum Sum (DIS Only, nFDpCD);#delta#alpha_{T,tot} [#circ]", numTH1Dbins_TKI_dP_T_Plots, 0, 180);
    string hdAlpha_T_L_nFDpCD_Dir = directories.TKI_Directory_map["dAlpha_T_nFDpCD_Directory"];
    string hdAlpha_T_tot_nFDpCD_Dir = directories.TKI_Directory_map["dAlpha_T_nFDpCD_Directory"];

    THStack *sdPhi_T_nFDpCD = new THStack("#delta#phi_{T,L} & #delta#phi_{T,tot} (nFDpCD)", "#delta#phi_{T,L} vs. #delta#phi_{T,tot} (nFDpCD);#delta#phi_{T} [#circ]");
    TH1D *hdPhi_T_L_nFDpCD = new TH1D("#delta#phi_{T,L} (nFDpCD)", "#delta#phi_{T,L} by leading nucleon (nFDpCD);#delta#phi_{T,L} [#circ]", numTH1Dbins_TKI_dP_T_Plots, 0, 180);
    TH1D *hdPhi_T_tot_nFDpCD = new TH1D("#delta#phi_{T,tot} (nFDpCD)", "#delta#phi_{T,tot} by Momentum Sum (nFDpCD);#delta#phi_{T,tot} [#circ]", numTH1Dbins_TKI_dP_T_Plots, 0, 180);
    string hdPhi_T_L_nFDpCD_Dir = directories.TKI_Directory_map["dPhi_T_nFDpCD_Directory"];
    string hdPhi_T_tot_nFDpCD_Dir = directories.TKI_Directory_map["dPhi_T_nFDpCD_Directory"];

    TH2D *hdP_T_L_vs_dAlpha_T_L_nFDpCD =
        new TH2D("#deltaP_{T,L} vs. #delta#alpha_{T,L} (All Int., nFDpCD)", "#deltaP_{T,L} vs. #delta#alpha_{T,L} (All Int., nFDpCD);#delta#alpha_{T,L} [#circ];#deltaP_{T,L} [GeV/c];",
                 numTH2Dbins_TKI_Plots, 0, 180, numTH2Dbins_TKI_Plots, 0, dP_T_boundary);
    TH2D *hdP_T_tot_vs_dAlpha_T_tot_nFDpCD = new TH2D("#deltaP_{T,tot} vs. #delta#alpha_{T,tot} (All Int., nFDpCD)",
                                                      "#deltaP_{T,tot} vs. #delta#alpha_{T,tot} (All Int., nFDpCD);#delta#alpha_{T,tot} [#circ];#deltaP_{T,tot} [GeV/c];",
                                                      numTH2Dbins_TKI_Plots, 0, 180, numTH2Dbins_TKI_Plots, 0, dP_T_boundary);
    string hdP_T_L_vs_dAlpha_T_L_nFDpCD_Dir = directories.TKI_Directory_map["dP_T_vs_dAlpha_T_nFDpCD_Directory"];
    string hdP_T_tot_vs_dAlpha_T_tot_nFDpCD_Dir = directories.TKI_Directory_map["dP_T_vs_dAlpha_T_nFDpCD_Directory"];

    // TKI vs. W (nFDpCD)
    TH2D *hdP_T_L_vs_W_nFDpCD = new TH2D("#deltaP_{T,L} vs. W (All Int., nFDpCD)",
                                         "#deltaP_{T,L} vs. W (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];"
                                         "#deltaP_{T,L} = |#vec{p}_{T,e} + #vec{p}_{T,nL}| [GeV/c];",
                                         numTH2Dbins_TKI_Plots, W_lboundary, W_uboundary, numTH2Dbins_TKI_Plots, 0, dP_T_boundary);
    TH2D *hdP_T_tot_vs_W_nFDpCD = new TH2D("#deltaP_{T,tot} vs. W (All Int., nFDpCD)",
                                           "#deltaP_{T,tot} vs. W (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];"
                                           "#deltaP_{T,tot} = |#vec{p}_{T,e} + #vec{p}_{T,nFD} + #vec{p}_{T,pCD}| [GeV/c];",
                                           numTH2Dbins_TKI_Plots, W_lboundary, W_uboundary, numTH2Dbins_TKI_Plots, 0, dP_T_boundary);
    string hdP_T_L_vs_W_nFDpCD_Dir = directories.TKI_Directory_map["dP_T_nFDpCD_Directory"];
    string hdP_T_tot_vs_W_nFDpCD_Dir = directories.TKI_Directory_map["dP_T_nFDpCD_Directory"];

    TH2D *hdAlpha_T_L_vs_W_nFDpCD = new TH2D("#delta#alpha_{T,L} vs. W (All Int., nFDpCD)",
                                             "#delta#alpha_{T,L} vs. W (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#delta#alpha_{T,L} [#circ];",
                                             numTH2Dbins_TKI_Plots, W_lboundary, W_uboundary, numTH2Dbins_TKI_Plots, 0, 180);
    TH2D *hdAlpha_T_tot_vs_W_nFDpCD = new TH2D("#delta#alpha_{T,tot} vs. W (All Int., nFDpCD)",
                                               "#delta#alpha_{T,tot} vs. W (All Int., nFDpCD);W = #sqrt{(#omega + m_{p})^{2} - #vec{q}^{2}}  [GeV/c^{2}];#delta#alpha_{T,tot} [#circ];",
                                               numTH2Dbins_TKI_Plots, W_lboundary, W_uboundary, numTH2Dbins_TKI_Plots, 0, 180);
    string hdAlpha_T_L_vs_W_nFDpCD_Dir = directories.TKI_Directory_map["dAlpha_T_nFDpCD_Directory"];
    string hdAlpha_T_tot_vs_W_nFDpCD_Dir = directories.TKI_Directory_map["dAlpha_T_nFDpCD_Directory"];

    // ======================================================================================================================================================================
    // Efficiency histograms
    // ======================================================================================================================================================================

    // Efficiency histograms

    // Efficiency plots (1e cut)

    // Truth level momentum plots (1e cut)
    hPlot1D hP_e_AC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL Electron momentum AC", "Electron momentum P^{truth}_{e} AC", "P^{truth}_{e} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1e_cut_Directory"], "01_P_e_AC_truth_1e_cut", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_e_BC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL Electron momentum BC", "Electron momentum P^{truth}_{e} BC", "P^{truth}_{e} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1e_cut_Directory"], "01_P_e_BC_truth_1e_cut", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_n_AC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL Neutron momentum AC", "Neutron momentum P^{truth}_{n} AC", "P^{truth}_{n} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1e_cut_Directory"], "02_P_n_AC_truth_1e_cut", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_n_BC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL Neutron momentum BC", "Neutron momentum P^{truth}_{n} BC", "P^{truth}_{n} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1e_cut_Directory"], "02_P_n_BC_truth_1e_cut", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_p_AC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL Proton momentum AC", "Proton momentum P^{truth}_{p} AC", "P^{truth}_{p} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1e_cut_Directory"], "03_P_p_AC_truth_1e_cut", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_p_BC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL Proton momentum BC", "Proton momentum P^{truth}_{p} BC", "P^{truth}_{p} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1e_cut_Directory"], "03_P_p_BC_truth_1e_cut", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_pip_AC_truth_1e_cut = hPlot1D("1e cut", "", "TL #pi^{+} momentum AC", "#pi^{+} momentum P^{truth}_{#pi^{+}} AC", "P^{truth}_{#pi^{+}} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1e_cut_Directory"], "04_P_piplus_AC_truth_1e_cut", Momentum_lboundary,
                                             Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pip_BC_truth_1e_cut = hPlot1D("1e cut", "", "TL #pi^{+} momentum BC", "#pi^{+} momentum P^{truth}_{#pi^{+}} BC", "P^{truth}_{#pi^{+}} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1e_cut_Directory"], "04_P_piplus_BC_truth_1e_cut", Momentum_lboundary,
                                             Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_pim_AC_truth_1e_cut = hPlot1D("1e cut", "", "TL #pi^{-} momentum AC", "#pi^{-} momentum P^{truth}_{#pi^{-}} AC", "P^{truth}_{#pi^{-}} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1e_cut_Directory"], "05_P_piminus_AC_truth_1e_cut", Momentum_lboundary,
                                             Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pim_BC_truth_1e_cut = hPlot1D("1e cut", "", "TL #pi^{-} momentum BC", "#pi^{-} momentum P^{truth}_{#pi^{-}} BC", "P^{truth}_{#pi^{-}} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1e_cut_Directory"], "05_P_piminus_BC_truth_1e_cut", Momentum_lboundary,
                                             Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_pi0_AC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL #pi^{0} momentum AC", "#pi^{0} momentum P^{truth}_{#pi^{0}} AC", "P^{truth}_{#pi^{0}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1e_cut_Directory"], "06_P_pi0_AC_truth_1e_cut", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pi0_BC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL #pi^{0} momentum BC", "#pi^{0} momentum P^{truth}_{#pi^{0}} BC", "P^{truth}_{#pi^{0}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1e_cut_Directory"], "06_P_pi0_BC_truth_1e_cut", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_ph_AC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL #gamma momentum AC", "#gamma momentum P^{truth}_{#gamma} AC", "P^{truth}_{#gamma} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1e_cut_Directory"], "07_P_ph_AC_truth_1e_cut", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_ph_BC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL #gamma momentum BC", "#gamma momentum P^{truth}_{#gamma} BC", "P^{truth}_{#gamma} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1e_cut_Directory"], "07_P_ph_BC_truth_1e_cut", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_Kp_AC_truth_1e_cut = hPlot1D("1e cut", "", "TL K^{+} momentum AC", "K^{+} momentum P^{truth}_{K^{+}} AC", "P^{truth}_{K^{+}} [GeV/c]",
                                            directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1e_cut_Directory"], "04_P_Kplus_AC_truth_1e_cut", Momentum_lboundary,
                                            Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_Kp_BC_truth_1e_cut = hPlot1D("1e cut", "", "TL K^{+} momentum BC", "K^{+} momentum P^{truth}_{K^{+}} BC", "P^{truth}_{K^{+}} [GeV/c]",
                                            directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1e_cut_Directory"], "04_P_Kplus_BC_truth_1e_cut", Momentum_lboundary,
                                            Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    // TL momentum plots for momentum thresholds (1e cut)
    hPlot1D hP_e_truth_1e_cut_FD =
        hPlot1D("1e cut", "FD", "TL FD Electron momentum", "FD Electron momentum P^{truth}_{e}", "P^{truth}_{e} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "01a_P_e_truth_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_e_truth_1e_cut_FD_ZOOMIN =
        hPlot1D("1e cut", "FD", "TL FD Electron momentum - ZOOMIN", "FD Electron momentum P^{truth}_{e} - ZOOMIN", "P^{truth}_{e} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "01a_P_e_truth_1e_cut_FD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_p_truth_1e_cut_FD =
        hPlot1D("1e cut", "FD", "TL FD Proton momentum", "FD Proton momentum P^{truth}_{p}", "P^{truth}_{p} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "02a_P_p_truth_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_p_truth_1e_cut_CD =
        hPlot1D("1e cut", "CD", "TL CD Proton momentum", "CD Proton momentum P^{truth}_{p}", "P^{truth}_{p} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "02b_P_p_truth_1e_cut_CD", CDMomentum_lboundary, CDMomentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_p_truth_1e_cut_FD_ZOOMIN =
        hPlot1D("1e cut", "FD", "TL FD Proton momentum - ZOOMIN", "FD Proton momentum P^{truth}_{p} - ZOOMIN", "P^{truth}_{p} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "02a_P_p_truth_1e_cut_FD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_p_truth_1e_cut_CD_ZOOMIN =
        hPlot1D("1e cut", "CD", "TL CD Proton momentum - ZOOMIN", "CD Proton momentum P^{truth}_{p} - ZOOMIN", "P^{truth}_{p} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "02b_P_p_truth_1e_cut_CD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_LnFD_truth_1e_cut_FD = hPlot1D("1e cut", "FD", "TL leading FD neutron momentum", "Leading FD neutron momentum P^{truth}_{n}", "P^{truth}_{n} [GeV/c]",
                                              directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "03a_P_LnFD_truth_1e_cut_FD", Momentum_lboundary,
                                              Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);  // leading nFD!
    hPlot1D hP_LnFD_truth_1e_cut_FD_ZOOMIN =
        hPlot1D("1e cut", "FD", "TL leading FD neutron momentum - ZOOMIN", "Leading FD neutron momentum P^{truth}_{n} - ZOOMIN", "P^{truth}_{n} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "03a_P_LnFD_truth_1e_cut_FD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);  // leading nFD!
    hPlot1D hP_nFD_truth_1e_cut_FD = hPlot1D("1e cut", "FD", "TL FD neutrons momentum", "FD neutrons momentum P^{truth}_{n}", "P^{truth}_{n} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "03b_P_nFD_truth_1e_cut_FD", Momentum_lboundary, Momentum_uboundary,
                                             numTH1Dbins_Mom_eff_Plots);  // all nFD!
    hPlot1D hP_nFD_truth_1e_cut_FD_ZOOMIN = hPlot1D("1e cut", "FD", "TL FD neutrons momentum - ZOOMIN", "FD neutrons momentum P^{truth}_{n} - ZOOMIN", "P^{truth}_{n} [GeV/c]",
                                                    directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "03b_P_nFD_truth_1e_cut_FD_ZOOMIN", 0, 1,
                                                    numTH1Dbins_Mom_eff_Plots);  // all nFD!

    hPlot1D hP_piplus_truth_1e_cut =
        hPlot1D("1e cut", "CD & FD", "TL #pi^{+} momentum", "#pi^{+} momentum P^{truth}_{#pi^{+}}", "P^{truth}_{#pi^{+}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "04_P_piplus_truth_1e_cut", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piplus_truth_1e_cut_ZOOMIN =
        hPlot1D("1e cut", "CD & FD", "TL #pi^{+} momentum - ZOOMIN", "#pi^{+} momentum P^{truth}_{#pi^{+}} - ZOOMIN", "P^{truth}_{#pi^{+}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "04_P_piplus_truth_1e_cut_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piplus_truth_1e_cut_FD = hPlot1D("1e cut", "FD", "TL FD #pi^{+} momentum", "FD #pi^{+} momentum P^{truth}_{#pi^{+}}", "P^{truth}_{#pi^{+}} [GeV/c]",
                                                directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "04a_P_piplus_truth_1e_cut_FD", Momentum_lboundary,
                                                Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piplus_truth_1e_cut_CD = hPlot1D("1e cut", "CD", "TL CD #pi^{+} momentum", "CD #pi^{+} momentum P^{truth}_{#pi^{+}}", "P^{truth}_{#pi^{+}} [GeV/c]",
                                                directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "04b_P_piplus_truth_1e_cut_CD", CDMomentum_lboundary,
                                                CDMomentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piplus_truth_1e_cut_FD_ZOOMIN =
        hPlot1D("1e cut", "FD", "TL FD #pi^{+} momentum - ZOOMIN", "FD #pi^{+} momentum P^{truth}_{#pi^{+}} - ZOOMIN", "P^{truth}_{#pi^{+}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "04a_P_piplus_truth_1e_cut_FD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piplus_truth_1e_cut_CD_ZOOMIN =
        hPlot1D("1e cut", "CD", "TL CD #pi^{+} momentum - ZOOMIN", "CD #pi^{+} momentum P^{truth}_{#pi^{+}} - ZOOMIN", "P^{truth}_{#pi^{+}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "04b_P_piplus_truth_1e_cut_CD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_piminus_truth_1e_cut =
        hPlot1D("1e cut", "CD & FD", "TL #pi^{-} momentum", "#pi^{-} momentum P^{truth}_{#pi^{-}}", "P^{truth}_{#pi^{-}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "05_P_piminus_truth_1e_cut", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piminus_truth_1e_cut_ZOOMIN =
        hPlot1D("1e cut", "CD & FD", "TL #pi^{-} momentum - ZOOMIN", "#pi^{-} momentum P^{truth}_{#pi^{-}} - ZOOMIN", "P^{truth}_{#pi^{-}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "05_P_piminus_truth_1e_cut_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piminus_truth_1e_cut_FD = hPlot1D("1e cut", "FD", "TL FD #pi^{-} momentum", "FD #pi^{-} momentum P^{truth}_{#pi^{-}}", "P^{truth}_{#pi^{-}} [GeV/c]",
                                                 directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "05a_P_piminus_truth_1e_cut_FD", Momentum_lboundary,
                                                 Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piminus_truth_1e_cut_CD = hPlot1D("1e cut", "CD", "TL CD #pi^{-} momentum", "CD #pi^{-} momentum P^{truth}_{#pi^{-}}", "P^{truth}_{#pi^{-}} [GeV/c]",
                                                 directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "05b_P_piminus_truth_1e_cut_CD", CDMomentum_lboundary,
                                                 CDMomentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piminus_truth_1e_cut_FD_ZOOMIN =
        hPlot1D("1e cut", "FD", "TL FD #pi^{-} momentum - ZOOMIN", "FD #pi^{-} momentum P^{truth}_{#pi^{-}} - ZOOMIN", "P^{truth}_{#pi^{-}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "05a_P_piminus_truth_1e_cut_FD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_piminus_truth_1e_cut_CD_ZOOMIN =
        hPlot1D("1e cut", "CD", "TL CD #pi^{-} momentum - ZOOMIN", "CD #pi^{-} momentum P^{truth}_{#pi^{-}} - ZOOMIN", "P^{truth}_{#pi^{-}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "05b_P_piminus_truth_1e_cut_CD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_ph_truth_1e_cut_FD =
        hPlot1D("1e cut", "FD", "TL FD #gamma momentum", "FD #gamma momentum P^{truth}_{#gamma}", "P^{truth}_{#gamma} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "09a_P_ph_truth_1e_cut_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_ph_truth_1e_cut_FD_ZOOMIN =
        hPlot1D("1e cut", "FD", "TL FD #gamma momentum - ZOOMIN", "FD #gamma momentum P^{truth}_{#gamma} - ZOOMIN", "P^{truth}_{#gamma} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Momentum_th_TL_1e_cut_Directory"], "09a_P_ph_truth_1e_cut_FD_ZOOMIN", 0, 1, numTH1Dbins_Mom_eff_Plots);

    // Truth level theta plots (1e cut)
    hPlot1D hTheta_e_AC_truth_1e_cut = hPlot1D("1e cut", "", "TL #theta^{truth}_{e} AC", "#theta^{truth}_{e} of Outgoing Electron AC", "#theta^{truth}_{e} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1e_cut_Directory"], "01_Theta_e_AC_truth_1e_cut", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_e_BC_truth_1e_cut = hPlot1D("1e cut", "", "TL #theta^{truth}_{e} BC", "#theta^{truth}_{e} of Outgoing Electron BC", "#theta^{truth}_{e} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1e_cut_Directory"], "01_Theta_e_BC_truth_1e_cut", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_n_AC_truth_1e_cut = hPlot1D("1e cut", "", "TL #theta^{truth}_{n} AC", "#theta^{truth}_{n} of Outgoing Neutron AC", "#theta^{truth}_{n} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1e_cut_Directory"], "02_Theta_n_AC_truth_1e_cut", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_n_BC_truth_1e_cut = hPlot1D("1e cut", "", "TL #theta^{truth}_{n} BC", "#theta^{truth}_{n} of Outgoing Neutron BC", "#theta^{truth}_{n} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1e_cut_Directory"], "02_Theta_n_BC_truth_1e_cut", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_p_AC_truth_1e_cut = hPlot1D("1e cut", "", "TL #theta^{truth}_{p} AC", "#theta^{truth}_{p} of Outgoing Proton AC", "#theta^{truth}_{p} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1e_cut_Directory"], "03_Theta_p_AC_truth_1e_cut", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_p_BC_truth_1e_cut = hPlot1D("1e cut", "", "TL #theta^{truth}_{p} BC", "#theta^{truth}_{p} of Outgoing Proton BC", "#theta^{truth}_{p} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1e_cut_Directory"], "03_Theta_p_BC_truth_1e_cut", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_pip_AC_truth_1e_cut = hPlot1D("1e cut", "", "TL #theta^{truth}_{#pi^{+}} AC", "#theta^{truth}_{#pi^{+}} of Outgoing #pi^{+} AC", "#theta^{truth}_{#pi^{+}} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1e_cut_Directory"], "04_Theta_piplus_AC_truth_1e_cut", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pip_BC_truth_1e_cut = hPlot1D("1e cut", "", "TL #theta^{truth}_{#pi^{+}} BC", "#theta^{truth}_{#pi^{+}} of Outgoing #pi^{+} BC", "#theta^{truth}_{#pi^{+}} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1e_cut_Directory"], "04_Theta_piplus_BC_truth_1e_cut", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_pim_AC_truth_1e_cut = hPlot1D("1e cut", "", "TL #theta^{truth}_{#pi^{-}} AC", "#theta^{truth}_{#pi^{-}} of Outgoing #pi^{-} AC", "#theta^{truth}_{#pi^{-}} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1e_cut_Directory"], "05_Theta_piminus_AC_truth_1e_cut", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pim_BC_truth_1e_cut = hPlot1D("1e cut", "", "TL #theta^{truth}_{#pi^{-}} BC", "#theta^{truth}_{#pi^{-}} of Outgoing #pi^{-} BC", "#theta^{truth}_{#pi^{-}} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1e_cut_Directory"], "05_Theta_piminus_BC_truth_1e_cut", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_pi0_AC_truth_1e_cut = hPlot1D("1e cut", "", "TL #theta^{truth}_{#pi^{0}} AC", "#theta^{truth}_{#pi^{0}} of Outgoing #pi^{0} AC", "#theta^{truth}_{#pi^{0}} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1e_cut_Directory"], "06_Theta_pi0_AC_truth_1e_cut", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pi0_BC_truth_1e_cut = hPlot1D("1e cut", "", "TL #theta^{truth}_{#pi^{0}} BC", "#theta^{truth}_{#pi^{0}} of Outgoing #pi^{0} BC", "#theta^{truth}_{#pi^{0}} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1e_cut_Directory"], "06_Theta_pi0_BC_truth_1e_cut", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_ph_AC_truth_1e_cut = hPlot1D("1e cut", "", "TL #theta^{truth}_{#gamma} AC", "#theta^{truth}_{#gamma} of Outgoing #gamma AC", "#theta^{truth}_{#gamma} [#circ]",
                                                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1e_cut_Directory"], "07_Theta_ph_AC_truth_1e_cut", Theta_lboundary_FD,
                                                Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_ph_BC_truth_1e_cut = hPlot1D("1e cut", "", "TL #theta^{truth}_{#gamma} BC", "#theta^{truth}_{#gamma} of Outgoing #gamma BC", "#theta^{truth}_{#gamma} [#circ]",
                                                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1e_cut_Directory"], "07_Theta_ph_BC_truth_1e_cut", Theta_lboundary_FD,
                                                Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    // Truth level phi plots (1e cut)
    hPlot1D hPhi_e_AC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL #phi^{truth}_{e} AC", "#phi^{truth}_{e} of Outgoing Electron AC", "#phi^{truth}_{e} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1e_cut_Directory"], "01_Phi_e_AC_truth_1e_cut", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_e_BC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL #phi^{truth}_{e} BC", "#phi^{truth}_{e} of Outgoing Electron BC", "#phi^{truth}_{e} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1e_cut_Directory"], "01_Phi_e_BC_truth_1e_cut", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_n_AC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL #phi^{truth}_{n} AC", "#phi^{truth}_{n} of Outgoing Neutron AC", "#phi^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1e_cut_Directory"], "02_Phi_n_AC_truth_1e_cut", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_n_BC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL #phi^{truth}_{n} BC", "#phi^{truth}_{n} of Outgoing Neutron BC", "#phi^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1e_cut_Directory"], "02_Phi_n_BC_truth_1e_cut", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_p_AC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL #phi^{truth}_{p} AC", "#phi^{truth}_{n} of Outgoing Proton AC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1e_cut_Directory"], "03_Phi_p_AC_truth_1e_cut", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_p_BC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL #phi^{truth}_{p} BC", "#phi^{truth}_{n} of Outgoing Proton BC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1e_cut_Directory"], "03_Phi_p_BC_truth_1e_cut", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_pip_AC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL #phi^{truth}_{#pi^{+}} AC", "#phi^{truth}_{#pi^{+}} of Outgoing #pi^{+} AC", "#phi^{truth}_{#pi^{+}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1e_cut_Directory"], "04_Phi_piplus_AC_truth_1e_cut", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pip_BC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL #phi^{truth}_{#pi^{+}} BC", "#phi^{truth}_{#pi^{+}} of Outgoing #pi^{+} BC", "#phi^{truth}_{#pi^{+}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1e_cut_Directory"], "04_Phi_piplus_BC_truth_1e_cut", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_pim_AC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL #phi^{truth}_{#pi^{-}} AC", "#phi^{truth}_{#pi^{-}} of Outgoing #pi^{-} AC", "#phi^{truth}_{#pi^{-}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1e_cut_Directory"], "05_Phi_piminus_AC_truth_1e_cut", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pim_BC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL #phi^{truth}_{#pi^{-}} BC", "#phi^{truth}_{#pi^{-}} of Outgoing #pi^{-} BC", "#phi^{truth}_{#pi^{-}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1e_cut_Directory"], "05_Phi_piminus_BC_truth_1e_cut", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_pi0_AC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL #phi^{truth}_{#pi^{0}} AC", "#phi^{truth}_{#pi^{0}} of Outgoing #pi^{0} AC", "#phi^{truth}_{#pi^{0}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1e_cut_Directory"], "06_Phi_pi0_AC_truth_1e_cut", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pi0_BC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL #phi^{truth}_{#pi^{0}} BC", "#phi^{truth}_{#pi^{0}} of Outgoing #pi^{0} BC", "#phi^{truth}_{#pi^{0}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1e_cut_Directory"], "06_Phi_pi0_BC_truth_1e_cut", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_ph_AC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL #phi^{truth}_{#gamma} AC", "#phi^{truth}_{#gamma} of Outgoing #gamma AC", "#phi^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1e_cut_Directory"], "07_Phi_ph_AC_truth_1e_cut", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_ph_BC_truth_1e_cut =
        hPlot1D("1e cut", "", "TL #phi^{truth}_{#gamma} BC", "#phi^{truth}_{#gamma} of Outgoing #gamma BC", "#phi^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1e_cut_Directory"], "07_Phi_ph_BC_truth_1e_cut", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    // Truth level theta vs. phi plots (1e cut)
    hPlot2D hTheta_e_vs_Phi_e_truth_1e_cut = hPlot2D("1e cut", "", "TL #theta_{e} vs. #phi_{e}", "TL #theta_{e} vs. #phi_{e}", "#phi_{e} [#circ]", "#theta_{e} [#circ]",
                                                     directories.Eff_and_ACorr_Directory_map["TL_Acceptance_Maps_1e_cut_Directory"], "01_Theta_e_vs_Phi_e_truth_1e_cut", Phi_lboundary,
                                                     Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Electron_Ang_eff_Plots, numTH2Dbins_Electron_Ang_eff_Plots);

    hPlot2D hTheta_nFD_vs_Phi_nFD_truth_1e_cut =
        hPlot2D("1e cut", "FD", "TL #theta_{nFD} vs. #phi_{nFD}", "TL #theta_{nFD} vs. #phi_{nFD}", "#phi_{nFD} [#circ]", "#theta_{nFD} [#circ]",
                directories.Eff_and_ACorr_Directory_map["TL_Acceptance_Maps_1e_cut_Directory"], "02_Theta_nFD_vs_Phi_nFD_truth_1e_cut", Phi_lboundary, Phi_uboundary, Theta_lboundary_FD,
                Theta_uboundary_FD, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);

    hPlot2D hTheta_pFD_vs_Phi_pFD_truth_1e_cut =
        hPlot2D("1e cut", "FD", "TL #theta_{pFD} vs. #phi_{pFD}", "TL #theta_{pFD} vs. #phi_{pFD}", "#phi_{pFD} [#circ]", "#theta_{pFD} [#circ]",
                directories.Eff_and_ACorr_Directory_map["TL_Acceptance_Maps_1e_cut_Directory"], "03_Theta_pFD_vs_Phi_pFD_truth_1e_cut", Phi_lboundary, Phi_uboundary, Theta_lboundary_FD,
                Theta_uboundary_FD, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);

    // Efficiency plots (1p)

    // Truth level momentum plots (1p)
    hPlot1D hP_e_AC_truth_1p =
        hPlot1D("1p", "", "TL Electron momentum AC", "Electron momentum P^{truth}_{e} AC", "P^{truth}_{e} [GeV/c]", directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1p_Directory"],
                "01_P_e_AC_truth_1p", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_e_BC_truth_1p =
        hPlot1D("1p", "", "TL Electron momentum BC", "Electron momentum P^{truth}_{e} BC", "P^{truth}_{e} [GeV/c]", directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1p_Directory"],
                "01_P_e_BC_truth_1p", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_n_AC_truth_1p =
        hPlot1D("1p", "", "TL Neutron momentum AC", "Neutron momentum P^{truth}_{n} AC", "P^{truth}_{n} [GeV/c]", directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1p_Directory"],
                "02_P_n_AC_truth_1p", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_n_BC_truth_1p =
        hPlot1D("1p", "", "TL Neutron momentum BC", "Neutron momentum P^{truth}_{n} BC", "P^{truth}_{n} [GeV/c]", directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1p_Directory"],
                "02_P_n_BC_truth_1p", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_p_AC_truth_1p =
        hPlot1D("1p", "", "TL Proton momentum AC", "Proton momentum P^{truth}_{p} AC", "P^{truth}_{p} [GeV/c]", directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1p_Directory"],
                "03a_P_p_AC_truth_1p", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_p_BC_truth_1p =
        hPlot1D("1p", "", "TL Proton momentum BC", "Proton momentum P^{truth}_{p} BC", "P^{truth}_{p} [GeV/c]", directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1p_Directory"],
                "03a_P_p_BC_truth_1p", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pFD_AC_truth_1p =
        hPlot1D("1p", "FD", "FD TL Proton momentum AC", "FD Proton momentum P^{truth}_{p} AC", "P^{truth}_{p} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1p_Directory"], "03b_P_pFD_AC_truth_1p", FDMomentum_lboundary, FDMomentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pFD_BC_truth_1p =
        hPlot1D("1p", "FD", "FD TL Proton momentum BC", "FD Proton momentum P^{truth}_{p} BC", "P^{truth}_{p} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1p_Directory"], "03b_P_pFD_BC_truth_1p", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_pip_AC_truth_1p =
        hPlot1D("1p", "", "TL #pi^{+} momentum AC", "#pi^{+} momentum P^{truth}_{#pi^{+}} AC", "P^{truth}_{#pi^{+}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1p_Directory"], "04_P_piplus_AC_truth_1p", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pip_BC_truth_1p =
        hPlot1D("1p", "", "TL #pi^{+} momentum BC", "#pi^{+} momentum P^{truth}_{#pi^{+}} BC", "P^{truth}_{#pi^{+}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1p_Directory"], "04_P_piplus_BC_truth_1p", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_pim_AC_truth_1p =
        hPlot1D("1p", "", "TL #pi^{-} momentum AC", "#pi^{-} momentum P^{truth}_{#pi^{-}} AC", "P^{truth}_{#pi^{-}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1p_Directory"], "05_P_piminus_AC_truth_1p", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pim_BC_truth_1p =
        hPlot1D("1p", "", "TL #pi^{-} momentum BC", "#pi^{-} momentum P^{truth}_{#pi^{-}} BC", "P^{truth}_{#pi^{-}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1p_Directory"], "05_P_piminus_BC_truth_1p", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_pi0_AC_truth_1p =
        hPlot1D("1p", "", "TL #pi^{0} momentum AC", "#pi^{0} momentum P^{truth}_{#pi^{0}} AC", "P^{truth}_{#pi^{0}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1p_Directory"], "06_P_pi0_AC_truth_1p", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pi0_BC_truth_1p =
        hPlot1D("1p", "", "TL #pi^{0} momentum BC", "#pi^{0} momentum P^{truth}_{#pi^{0}} BC", "P^{truth}_{#pi^{0}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1p_Directory"], "06_P_pi0_BC_truth_1p", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_ph_AC_truth_1p =
        hPlot1D("1p", "", "TL #gamma momentum AC", "#gamma momentum P^{truth}_{#gamma} AC", "P^{truth}_{#gamma} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1p_Directory"], "07a_P_ph_AC_truth_1p", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_ph_BC_truth_1p =
        hPlot1D("1p", "", "TL #gamma momentum BC", "#gamma momentum P^{truth}_{#gamma} BC", "P^{truth}_{#gamma} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1p_Directory"], "07a_P_ph_BC_truth_1p", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_ph_AC_truth_1p_FD =
        hPlot1D("1p", "FD", "FD TL #gamma momentum AC", "FD #gamma momentum P^{truth}_{#gamma} AC", "P^{truth}_{#gamma} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1p_Directory"], "07b_P_ph_AC_truth_1p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_ph_BC_truth_1p_FD =
        hPlot1D("1p", "FD", "FD TL #gamma momentum BC", "FD #gamma momentum P^{truth}_{#gamma} BC", "P^{truth}_{#gamma} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1p_Directory"], "07b_P_ph_BC_truth_1p_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    // Truth level theta plots (1p)
    hPlot1D hTheta_e_AC_truth_1p =
        hPlot1D("1p", "", "TL #theta^{truth}_{e} AC", "#theta^{truth}_{e} of Outgoing Electron AC", "#theta^{truth}_{e} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1p_Directory"], "01_Theta_e_AC_truth_1p", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_e_BC_truth_1p =
        hPlot1D("1p", "", "TL #theta^{truth}_{e} BC", "#theta^{truth}_{e} of Outgoing Electron BC", "#theta^{truth}_{e} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1p_Directory"], "01_Theta_e_BC_truth_1p", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_n_AC_truth_1p =
        hPlot1D("1p", "", "TL #theta^{truth}_{n} AC", "#theta^{truth}_{n} of Outgoing Neutron AC", "#theta^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1p_Directory"], "02_Theta_n_AC_truth_1p", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_n_BC_truth_1p =
        hPlot1D("1p", "", "TL #theta^{truth}_{n} BC", "#theta^{truth}_{n} of Outgoing Neutron BC", "#theta^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1p_Directory"], "02_Theta_n_BC_truth_1p", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_p_AC_truth_1p =
        hPlot1D("1p", "", "TL #theta^{truth}_{p} AC", "#theta^{truth}_{p} of Outgoing Proton AC", "#theta^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1p_Directory"], "03a_Theta_p_AC_truth_1p", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_p_BC_truth_1p =
        hPlot1D("1p", "", "TL #theta^{truth}_{p} BC", "#theta^{truth}_{p} of Outgoing Proton BC", "#theta^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1p_Directory"], "03a_Theta_p_BC_truth_1p", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pFD_AC_truth_1p =
        hPlot1D("1p", "FD", "FD TL #theta^{truth}_{p} AC", "#theta^{truth}_{p} of Outgoing FD Proton AC", "#theta^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1p_Directory"], "03b_Theta_pFD_AC_truth_1p", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pFD_BC_truth_1p =
        hPlot1D("1p", "FD", "FD TL #theta^{truth}_{p} BC", "#theta^{truth}_{p} of Outgoing FD Proton BC", "#theta^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1p_Directory"], "03b_Theta_pFD_BC_truth_1p", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_pip_AC_truth_1p = hPlot1D("1p", "", "TL #theta^{truth}_{#pi^{+}} AC", "#theta^{truth}_{#pi^{+}} of Outgoing #pi^{+} AC", "#theta^{truth}_{#pi^{+}} [#circ]",
                                             directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1p_Directory"], "04_Theta_piplus_AC_truth_1p", Theta_lboundary_FD,
                                             Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pip_BC_truth_1p = hPlot1D("1p", "", "TL #theta^{truth}_{#pi^{+}} BC", "#theta^{truth}_{#pi^{+}} of Outgoing #pi^{+} BC", "#theta^{truth}_{#pi^{+}} [#circ]",
                                             directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1p_Directory"], "04_Theta_piplus_BC_truth_1p", Theta_lboundary_FD,
                                             Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_pim_AC_truth_1p = hPlot1D("1p", "", "TL #theta^{truth}_{#pi^{-}} AC", "#theta^{truth}_{#pi^{-}} of Outgoing #pi^{-} AC", "#theta^{truth}_{#pi^{-}} [#circ]",
                                             directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1p_Directory"], "05_Theta_piminus_AC_truth_1p", Theta_lboundary_FD,
                                             Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pim_BC_truth_1p = hPlot1D("1p", "", "TL #theta^{truth}_{#pi^{-}} BC", "#theta^{truth}_{#pi^{-}} of Outgoing #pi^{-} BC", "#theta^{truth}_{#pi^{-}} [#circ]",
                                             directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1p_Directory"], "05_Theta_piminus_BC_truth_1p", Theta_lboundary_FD,
                                             Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_pi0_AC_truth_1p =
        hPlot1D("1p", "", "TL #theta^{truth}_{#pi^{0}} AC", "#theta^{truth}_{#pi^{0}} of Outgoing #pi^{0} AC", "#theta^{truth}_{#pi^{0}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1p_Directory"], "06_Theta_pi0_AC_truth_1p", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pi0_BC_truth_1p =
        hPlot1D("1p", "", "TL #theta^{truth}_{#pi^{0}} BC", "#theta^{truth}_{#pi^{0}} of Outgoing #pi^{0} BC", "#theta^{truth}_{#pi^{0}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1p_Directory"], "06_Theta_pi0_BC_truth_1p", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_ph_AC_truth_1p =
        hPlot1D("1p", "", "TL #theta^{truth}_{#gamma} AC", "#theta^{truth}_{#gamma} of Outgoing #gamma AC", "#theta^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1p_Directory"], "07a_Theta_ph_AC_truth_1p", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_ph_BC_truth_1p =
        hPlot1D("1p", "", "TL #theta^{truth}_{#gamma} BC", "#theta^{truth}_{#gamma} of Outgoing #gamma BC", "#theta^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1p_Directory"], "07a_Theta_ph_BC_truth_1p", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_ph_AC_truth_1p_FD = hPlot1D("1p", "FD", "FD TL #theta^{truth}_{#gamma} AC", "#theta^{truth}_{#gamma} of FD Outgoing #gamma AC", "#theta^{truth}_{#gamma} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1p_Directory"], "07b_Theta_ph_AC_truth_1p_FD", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_ph_BC_truth_1p_FD = hPlot1D("1p", "FD", "FD TL #theta^{truth}_{#gamma} BC", "#theta^{truth}_{#gamma} of FD Outgoing #gamma BC", "#theta^{truth}_{#gamma} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1p_Directory"], "07b_Theta_ph_BC_truth_1p_FD", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    // Truth level phi plots (1p)
    hPlot1D hPhi_e_AC_truth_1p =
        hPlot1D("1p", "", "TL #phi^{truth}_{e} AC", "#phi^{truth}_{e} of Outgoing Electron AC", "#phi^{truth}_{e} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1p_Directory"], "01_Phi_e_AC_truth_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_e_BC_truth_1p =
        hPlot1D("1p", "", "TL #phi^{truth}_{e} BC", "#phi^{truth}_{e} of Outgoing Electron BC", "#phi^{truth}_{e} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1p_Directory"], "01_Phi_e_BC_truth_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_n_AC_truth_1p =
        hPlot1D("1p", "", "TL #phi^{truth}_{n} AC", "#phi^{truth}_{n} of Outgoing Neutron AC", "#phi^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1p_Directory"], "02_Phi_n_AC_truth_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_n_BC_truth_1p =
        hPlot1D("1p", "", "TL #phi^{truth}_{n} BC", "#phi^{truth}_{n} of Outgoing Neutron BC", "#phi^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1p_Directory"], "02_Phi_n_BC_truth_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_p_AC_truth_1p =
        hPlot1D("1p", "", "TL #phi^{truth}_{p} AC", "#phi^{truth}_{n} of Outgoing Proton AC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1p_Directory"], "03a_Phi_p_AC_truth_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_p_BC_truth_1p =
        hPlot1D("1p", "", "TL #phi^{truth}_{p} BC", "#phi^{truth}_{n} of Outgoing Proton BC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1p_Directory"], "03a_Phi_p_BC_truth_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pFD_AC_truth_1p =
        hPlot1D("1p", "FD", "FD TL #phi^{truth}_{p} AC", "#phi^{truth}_{n} of FD Outgoing Proton AC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1p_Directory"], "03b_Phi_pFD_AC_truth_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pFD_BC_truth_1p =
        hPlot1D("1p", "FD", "FD TL #phi^{truth}_{p} BC", "#phi^{truth}_{n} of FD Outgoing Proton BC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1p_Directory"], "03b_Phi_pFD_BC_truth_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_pip_AC_truth_1p =
        hPlot1D("1p", "", "TL #phi^{truth}_{#pi^{+}} AC", "#phi^{truth}_{#pi^{+}} of Outgoing #pi^{+} AC", "#phi^{truth}_{#pi^{+}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1p_Directory"], "04_Phi_piplus_AC_truth_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pip_BC_truth_1p =
        hPlot1D("1p", "", "TL #phi^{truth}_{#pi^{+}} BC", "#phi^{truth}_{#pi^{+}} of Outgoing #pi^{+} BC", "#phi^{truth}_{#pi^{+}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1p_Directory"], "04_Phi_piplus_BC_truth_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_pim_AC_truth_1p =
        hPlot1D("1p", "", "TL #phi^{truth}_{#pi^{-}} AC", "#phi^{truth}_{#pi^{-}} of Outgoing #pi^{-} AC", "#phi^{truth}_{#pi^{-}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1p_Directory"], "05_Phi_piminus_AC_truth_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pim_BC_truth_1p =
        hPlot1D("1p", "", "TL #phi^{truth}_{#pi^{-}} BC", "#phi^{truth}_{#pi^{-}} of Outgoing #pi^{-} BC", "#phi^{truth}_{#pi^{-}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1p_Directory"], "05_Phi_piminus_BC_truth_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_pi0_AC_truth_1p =
        hPlot1D("1p", "", "TL #phi^{truth}_{#pi^{0}} AC", "#phi^{truth}_{#pi^{0}} of Outgoing #pi^{0} AC", "#phi^{truth}_{#pi^{0}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1p_Directory"], "06_Phi_pi0_AC_truth_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pi0_BC_truth_1p =
        hPlot1D("1p", "", "TL #phi^{truth}_{#pi^{0}} BC", "#phi^{truth}_{#pi^{0}} of Outgoing #pi^{0} BC", "#phi^{truth}_{#pi^{0}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1p_Directory"], "06_Phi_pi0_BC_truth_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_ph_AC_truth_1p =
        hPlot1D("1p", "", "TL #phi^{truth}_{#gamma} AC", "#phi^{truth}_{#gamma} of Outgoing #gamma AC", "#phi^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1p_Directory"], "07a_Phi_ph_AC_truth_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_ph_BC_truth_1p =
        hPlot1D("1p", "", "TL #phi^{truth}_{#gamma} BC", "#phi^{truth}_{#gamma} of Outgoing #gamma BC", "#phi^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1p_Directory"], "07a_Phi_ph_BC_truth_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_ph_AC_truth_1p_FD =
        hPlot1D("1p", "FD", "FD TL #phi^{truth}_{#gamma} AC", "#phi^{truth}_{#gamma} of FD Outgoing #gamma AC", "#phi^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1p_Directory"], "07b_Phi_ph_AC_truth_1p_FD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_ph_BC_truth_1p_FD =
        hPlot1D("1p", "FD", "FD TL #phi^{truth}_{#gamma} BC", "#phi^{truth}_{#gamma} of FD Outgoing #gamma BC", "#phi^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1p_Directory"], "07b_Phi_ph_BC_truth_1p_FD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    // TL fiducial cuts (1p)
    hPlot2D hpFD_Hit_map_1p_BEC =
        hPlot2D("1p", "FD", "FD proton hit map BEC", "FD proton hit map BEC", "x_{pFD}", "y_{pFD}", directories.Eff_and_ACorr_Directory_map["Proton_FD_Hit_map_1p_Directory"],
                "01a_Proton_FD_Hit_map_BEC_1p", -1.1, 1.1, -1.1, 1.1, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);
    hPlot2D hpFD_Hit_map_1p_AEC =
        hPlot2D("1p", "FD", "FD proton hit map AEC", "FD proton hit map AEC", "x_{pFD}", "y_{pFD}", directories.Eff_and_ACorr_Directory_map["Proton_FD_Hit_map_1p_Directory"],
                "01b_Proton_FD_Hit_map_AEC_1p", -1.1, 1.1, -1.1, 1.1, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);

    hPlot2D hTheta_pFD_vs_Phi_pFD_1p_BEC = hPlot2D("1p", "FD", "#theta_{pFD} vs. #phi_{pFD} BEC", "TL #theta_{pFD} vs. #phi_{pFD} BEC", "#phi_{pFD} [#circ]", "#theta_{pFD} [#circ]",
                                                   directories.Eff_and_ACorr_Directory_map["Proton_FD_Hit_map_1p_Directory"], "02a_Theta_pFD_vs_Phi_pFD_BEC_1p", Phi_lboundary, Phi_uboundary,
                                                   Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);
    hPlot2D hTheta_pFD_vs_Phi_pFD_1p_AEC = hPlot2D("1p", "FD", "#theta_{pFD} vs. #phi_{pFD} AEC", "TL #theta_{pFD} vs. #phi_{pFD} AEC", "#phi_{pFD} [#circ]", "#theta_{pFD} [#circ]",
                                                   directories.Eff_and_ACorr_Directory_map["Proton_FD_Hit_map_1p_Directory"], "02b_Theta_pFD_vs_Phi_pFD_AEC_1p", Phi_lboundary, Phi_uboundary,
                                                   Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);

    // Truth level theta vs. phi plots (1p)
    hPlot2D hTheta_e_vs_Phi_e_truth_1p = hPlot2D("1p", "", "TL #theta_{e} vs. #phi_{e}", "TL #theta_{e} vs. #phi_{e}", "#phi_{e} [#circ]", "#theta_{e} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Proton_FD_Hit_map_1p_Directory"], "01_Theta_e_vs_Phi_e_truth_1p", Phi_lboundary, Phi_uboundary,
                                                 Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Electron_Ang_eff_Plots, numTH2Dbins_Electron_Ang_eff_Plots);

    hPlot2D hTheta_pFD_vs_Phi_pFD_truth_1p = hPlot2D("1p", "FD", "TL #theta_{pFD} vs. #phi_{pFD}", "TL #theta_{pFD} vs. #phi_{pFD}", "#phi_{pFD} [#circ]", "#theta_{pFD} [#circ]",
                                                     directories.Eff_and_ACorr_Directory_map["Proton_FD_Hit_map_1p_Directory"], "02_Theta_pFD_vs_Phi_pFD_truth_1p", Phi_lboundary,
                                                     Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);

    // Efficiency plots (1n)

    // Truth level momentum plots (1n)
    hPlot1D hP_e_AC_truth_1n =
        hPlot1D("1n", "", "TL Electron momentum AC", "Electron momentum P^{truth}_{e} AC", "P^{truth}_{e} [GeV/c]", directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"],
                "01_P_e_AC_truth_1n", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_e_BC_truth_1n =
        hPlot1D("1n", "", "TL Electron momentum BC", "Electron momentum P^{truth}_{e} BC", "P^{truth}_{e} [GeV/c]", directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"],
                "01_P_e_BC_truth_1n", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_n_AC_truth_1n =
        hPlot1D("1n", "", "TL Neutron momentum AC", "Neutron momentum P^{truth}_{n} AC", "P^{truth}_{n} [GeV/c]", directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"],
                "02a_P_n_AC_truth_1n", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_n_BC_truth_1n =
        hPlot1D("1n", "", "TL Neutron momentum BC", "Neutron momentum P^{truth}_{n} BC", "P^{truth}_{n} [GeV/c]", directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"],
                "02a_P_n_BC_truth_1n", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_nFD_AC_truth_1n =
        hPlot1D("1n", "FD", "FD TL Neutron momentum AC", "FD Neutron momentum P^{truth}_{n} AC", "P^{truth}_{n} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "02b_P_nFD_AC_truth_1n", FDMomentum_lboundary, FDMomentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_nFD_BC_truth_1n =
        hPlot1D("1n", "FD", "CD TL Neutron momentum BC", "FD Neutron momentum P^{truth}_{n} BC", "P^{truth}_{n} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "02b_P_nFD_BC_truth_1n", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_p_AC_truth_1n =
        hPlot1D("1n", "", "TL Proton momentum AC", "Proton momentum P^{truth}_{p} AC", "P^{truth}_{p} [GeV/c]", directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"],
                "03_P_p_AC_truth_1n", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_p_BC_truth_1n =
        hPlot1D("1n", "", "TL Proton momentum BC", "Proton momentum P^{truth}_{p} BC", "P^{truth}_{p} [GeV/c]", directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"],
                "03_P_p_BC_truth_1n", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_p_AC_truth_1n_FD =
        hPlot1D("1n", "FD", "TL FD Proton momentum AC", "FD Proton momentum P^{truth}_{p} AC", "P^{truth}_{p} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "03FD_P_p_AC_truth_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_p_BC_truth_1n_FD =
        hPlot1D("1n", "FD", "TL FD Proton momentum BC", "FD Proton momentum P^{truth}_{p} BC", "P^{truth}_{p} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "03FD_P_p_BC_truth_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_p_AC_truth_1n_CD =
        hPlot1D("1n", "CD", "TL CD Proton momentum AC", "CD Proton momentum P^{truth}_{p} AC", "P^{truth}_{p} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "03CD_P_p_AC_truth_1n_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_p_BC_truth_1n_CD =
        hPlot1D("1n", "CD", "TL CD Proton momentum BC", "CD Proton momentum P^{truth}_{p} BC", "P^{truth}_{p} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "03CD_P_p_BC_truth_1n_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_p_AC_truth_1n_undet = hPlot1D("1n", "undet", "TL undet Proton momentum AC", "undet Proton momentum P^{truth}_{p} AC", "P^{truth}_{p} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "03undet_P_p_AC_truth_1n_undet", Momentum_lboundary,
                                             Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_p_BC_truth_1n_undet = hPlot1D("1n", "undet", "TL undet Proton momentum BC", "undet Proton momentum P^{truth}_{p} BC", "P^{truth}_{p} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "03undet_P_p_BC_truth_1n_undet", Momentum_lboundary,
                                             Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_pip_AC_truth_1n =
        hPlot1D("1n", "", "TL #pi^{+} momentum AC", "#pi^{+} momentum P^{truth}_{#pi^{+}} AC", "P^{truth}_{#pi^{+}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "04_P_piplus_AC_truth_1n", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pip_BC_truth_1n =
        hPlot1D("1n", "", "TL #pi^{+} momentum BC", "#pi^{+} momentum P^{truth}_{#pi^{+}} BC", "P^{truth}_{#pi^{+}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "04_P_piplus_BC_truth_1n", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pip_AC_truth_1n_FD =
        hPlot1D("1n", "FD", "TL FD #pi^{+} momentum AC", "FD #pi^{+} momentum P^{truth}_{#pi^{+}} AC", "P^{truth}_{#pi^{+}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "04FD_P_pip_AC_truth_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pip_BC_truth_1n_FD =
        hPlot1D("1n", "FD", "TL FD #pi^{+} momentum BC", "FD #pi^{+} momentum P^{truth}_{#pi^{+}} BC", "P^{truth}_{#pi^{+}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "04FD_P_pip_BC_truth_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pip_AC_truth_1n_CD =
        hPlot1D("1n", "CD", "TL CD #pi^{+} momentum AC", "CD #pi^{+} momentum P^{truth}_{#pi^{+}} AC", "P^{truth}_{#pi^{+}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "04CD_P_pip_AC_truth_1n_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pip_BC_truth_1n_CD =
        hPlot1D("1n", "CD", "TL CD #pi^{+} momentum BC", "CD #pi^{+} momentum P^{truth}_{#pi^{+}} BC", "P^{truth}_{#pi^{+}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "04CD_P_pip_BC_truth_1n_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pip_AC_truth_1n_undet = hPlot1D("1n", "undet", "TL undet #pi^{+} momentum AC", "undet #pi^{+} momentum P^{truth}_{#pi^{+}} AC", "P^{truth}_{#pi^{+}} [GeV/c]",
                                               directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "04undet_P_pip_AC_truth_1n_undet", Momentum_lboundary,
                                               Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pip_BC_truth_1n_undet = hPlot1D("1n", "undet", "TL undet #pi^{+} momentum BC", "undet #pi^{+} momentum P^{truth}_{#pi^{+}} BC", "P^{truth}_{#pi^{+}} [GeV/c]",
                                               directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "04undet_P_pip_BC_truth_1n_undet", Momentum_lboundary,
                                               Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_pim_AC_truth_1n =
        hPlot1D("1n", "", "TL #pi^{-} momentum AC", "#pi^{-} momentum P^{truth}_{#pi^{-}} AC", "P^{truth}_{#pi^{-}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "05_P_piminus_AC_truth_1n", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pim_BC_truth_1n =
        hPlot1D("1n", "", "TL #pi^{-} momentum BC", "#pi^{-} momentum P^{truth}_{#pi^{-}} BC", "P^{truth}_{#pi^{-}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "05_P_piminus_BC_truth_1n", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pim_AC_truth_1n_FD =
        hPlot1D("1n", "FD", "TL FD #pi^{-} momentum AC", "FD #pi^{-} momentum P^{truth}_{#pi^{-}} AC", "P^{truth}_{#pi^{-}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "05FD_P_pim_AC_truth_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pim_BC_truth_1n_FD =
        hPlot1D("1n", "FD", "TL FD #pi^{-} momentum BC", "FD #pi^{-} momentum P^{truth}_{#pi^{-}} BC", "P^{truth}_{#pi^{-}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "05FD_P_pim_BC_truth_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pim_AC_truth_1n_CD =
        hPlot1D("1n", "CD", "TL CD #pi^{-} momentum AC", "CD #pi^{-} momentum P^{truth}_{#pi^{-}} AC", "P^{truth}_{#pi^{-}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "05CD_P_pim_AC_truth_1n_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pim_BC_truth_1n_CD =
        hPlot1D("1n", "CD", "TL CD #pi^{-} momentum BC", "CD #pi^{-} momentum P^{truth}_{#pi^{-}} BC", "P^{truth}_{#pi^{-}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "05CD_P_pim_BC_truth_1n_CD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pim_AC_truth_1n_undet = hPlot1D("1n", "undet", "TL undet #pi^{-} momentum AC", "undet #pi^{-} momentum P^{truth}_{#pi^{-}} AC", "P^{truth}_{#pi^{-}} [GeV/c]",
                                               directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "05undet_P_pim_AC_truth_1n_undet", Momentum_lboundary,
                                               Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pim_BC_truth_1n_undet = hPlot1D("1n", "undet", "TL undet #pi^{-} momentum BC", "undet #pi^{-} momentum P^{truth}_{#pi^{-}} BC", "P^{truth}_{#pi^{-}} [GeV/c]",
                                               directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "05undet_P_pim_BC_truth_1n_undet", Momentum_lboundary,
                                               Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_pi0_AC_truth_1n =
        hPlot1D("1n", "", "TL #pi^{0} momentum AC", "#pi^{0} momentum P^{truth}_{#pi^{0}} AC", "P^{truth}_{#pi^{0}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "06_P_pi0_AC_truth_1n", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pi0_BC_truth_1n =
        hPlot1D("1n", "", "TL #pi^{0} momentum BC", "#pi^{0} momentum P^{truth}_{#pi^{0}} BC", "P^{truth}_{#pi^{0}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "06_P_pi0_BC_truth_1n", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_ph_AC_truth_1n =
        hPlot1D("1n", "", "TL #gamma momentum AC", "#gamma momentum P^{truth}_{#gamma} AC", "P^{truth}_{#gamma} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "07a_P_ph_AC_truth_1n", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_ph_BC_truth_1n =
        hPlot1D("1n", "", "TL #gamma momentum BC", "#gamma momentum P^{truth}_{#gamma} BC", "P^{truth}_{#gamma} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "07a_P_ph_BC_truth_1n", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_ph_AC_truth_1n_FD =
        hPlot1D("1n", "FD", "FD TL #gamma momentum AC", "FD #gamma momentum P^{truth}_{#gamma} AC", "P^{truth}_{#gamma} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "07b_P_ph_AC_truth_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_ph_BC_truth_1n_FD =
        hPlot1D("1n", "FD", "FD TL #gamma momentum BC", "FD #gamma momentum P^{truth}_{#gamma} BC", "P^{truth}_{#gamma} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_1n_Directory"], "07b_P_ph_BC_truth_1n_FD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    // Truth level theta plots (1n)
    hPlot1D hTheta_e_AC_truth_1n =
        hPlot1D("1n", "", "TL #theta^{truth}_{e} AC", "#theta^{truth}_{e} of Outgoing Electron AC", "#theta^{truth}_{e} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "01_Theta_e_AC_truth_1n", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_e_BC_truth_1n =
        hPlot1D("1n", "", "TL #theta^{truth}_{e} BC", "#theta^{truth}_{e} of Outgoing Electron BC", "#theta^{truth}_{e} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "01_Theta_e_BC_truth_1n", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_n_AC_truth_1n =
        hPlot1D("1n", "", "TL #theta^{truth}_{n} AC", "#theta^{truth}_{n} of Outgoing Neutron AC", "#theta^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "02a_Theta_n_AC_truth_1n", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_n_BC_truth_1n =
        hPlot1D("1n", "", "TL #theta^{truth}_{n} BC", "#theta^{truth}_{n} of Outgoing Neutron BC", "#theta^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "02a_Theta_n_BC_truth_1n", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_nFD_AC_truth_1n =
        hPlot1D("1n", "FD", "FD TL #theta^{truth}_{n} AC", "#theta^{truth}_{n} of Outgoing FD Neutron AC", "#theta^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "02b_Theta_nFD_AC_truth_1n", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_nFD_BC_truth_1n =
        hPlot1D("1n", "FD", "FD TL #theta^{truth}_{n} BC", "#theta^{truth}_{n} of Outgoing FD Neutron BC", "#theta^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "02b_Theta_nFD_BC_truth_1n", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_p_AC_truth_1n =
        hPlot1D("1n", "", "TL #theta^{truth}_{p} AC", "#theta^{truth}_{p} of Outgoing Proton AC", "#theta^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "03_Theta_p_AC_truth_1n", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_p_BC_truth_1n =
        hPlot1D("1n", "", "TL #theta^{truth}_{p} BC", "#theta^{truth}_{p} of Outgoing Proton BC", "#theta^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "03_Theta_p_BC_truth_1n", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_p_AC_truth_1n_FD = hPlot1D("1n", "FD", "TL FD #theta^{truth}_{p} AC", "FD #theta^{truth}_{p} of Outgoing Proton AC", "#theta^{truth}_{p} [#circ]",
                                              directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "03FD_Theta_p_AC_truth_1n_FD", Theta_lboundary_FD,
                                              Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_p_BC_truth_1n_FD = hPlot1D("1n", "FD", "TL FD #theta^{truth}_{p} BC", "FD #theta^{truth}_{p} of Outgoing Proton BC", "#theta^{truth}_{p} [#circ]",
                                              directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "03FD_Theta_p_BC_truth_1n_FD", Theta_lboundary_FD,
                                              Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_p_AC_truth_1n_CD = hPlot1D("1n", "CD", "TL CD #theta^{truth}_{p} AC", "CD #theta^{truth}_{p} of Outgoing Proton AC", "#theta^{truth}_{p} [#circ]",
                                              directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "03CD_Theta_p_AC_truth_1n_CD", Theta_lboundary_CD,
                                              Theta_uboundary_CD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_p_BC_truth_1n_CD = hPlot1D("1n", "CD", "TL CD #theta^{truth}_{p} BC", "CD #theta^{truth}_{p} of Outgoing Proton BC", "#theta^{truth}_{p} [#circ]",
                                              directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "03CD_Theta_p_BC_truth_1n_CD", Theta_lboundary_CD,
                                              Theta_uboundary_CD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_p_AC_truth_1n_undet =
        hPlot1D("1n", "undet", "TL undet #theta^{truth}_{p} AC", "undet #theta^{truth}_{p} of Outgoing Proton AC", "#theta^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "03undet_Theta_p_AC_truth_1n_undet", 0., 180., numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_p_BC_truth_1n_undet =
        hPlot1D("1n", "undet", "TL undet #theta^{truth}_{p} BC", "undet #theta^{truth}_{p} of Outgoing Proton BC", "#theta^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "03undet_Theta_p_BC_truth_1n_undet", 0., 180., numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_pip_AC_truth_1n = hPlot1D("1n", "", "TL #theta^{truth}_{#pi^{+}} AC", "#theta^{truth}_{#pi^{+}} of Outgoing #pi^{+} AC", "#theta^{truth}_{#pi^{+}} [#circ]",
                                             directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "04_Theta_piplus_AC_truth_1n", Theta_lboundary_FD,
                                             Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pip_BC_truth_1n = hPlot1D("1n", "", "TL #theta^{truth}_{#pi^{+}} BC", "#theta^{truth}_{#pi^{+}} of Outgoing #pi^{+} BC", "#theta^{truth}_{#pi^{+}} [#circ]",
                                             directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "04_Theta_piplus_BC_truth_1n", Theta_lboundary_FD,
                                             Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pip_AC_truth_1n_FD = hPlot1D("1n", "FD", "TL FD #theta^{truth}_{#pi^{+}} AC", "FD #theta^{truth}_{#pi^{+}} of Outgoing #pi^{+} AC", "#theta^{truth}_{#pi^{+}} [#circ]",
                                                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "04FD_Theta_piplus_AC_truth_1n_FD", Theta_lboundary_FD,
                                                Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pip_BC_truth_1n_FD = hPlot1D("1n", "FD", "TL FD #theta^{truth}_{#pi^{+}} BC", "FD #theta^{truth}_{#pi^{+}} of Outgoing #pi^{+} BC", "#theta^{truth}_{#pi^{+}} [#circ]",
                                                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "04FD_Theta_piplus_BC_truth_1n_FD", Theta_lboundary_FD,
                                                Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pip_AC_truth_1n_CD = hPlot1D("1n", "CD", "TL CD #theta^{truth}_{#pi^{+}} AC", "CD #theta^{truth}_{#pi^{+}} of Outgoing #pi^{+} AC", "#theta^{truth}_{#pi^{+}} [#circ]",
                                                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "04CD_Theta_piplus_AC_truth_1n_CD", Theta_lboundary_CD,
                                                Theta_uboundary_CD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pip_BC_truth_1n_CD = hPlot1D("1n", "CD", "TL CD #theta^{truth}_{#pi^{+}} BC", "CD #theta^{truth}_{#pi^{+}} of Outgoing #pi^{+} BC", "#theta^{truth}_{#pi^{+}} [#circ]",
                                                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "04CD_Theta_piplus_BC_truth_1n_CD", Theta_lboundary_CD,
                                                Theta_uboundary_CD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pip_AC_truth_1n_undet =
        hPlot1D("1n", "undet", "TL undet #theta^{truth}_{#pi^{+}} AC", "undet #theta^{truth}_{#pi^{+}} of Outgoing #pi^{+} AC", "#theta^{truth}_{#pi^{+}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "04undet_Theta_piplus_AC_truth_1n_undet", 0., 180., numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pip_BC_truth_1n_undet =
        hPlot1D("1n", "undet", "TL undet #theta^{truth}_{#pi^{+}} BC", "undet #theta^{truth}_{#pi^{+}} of Outgoing #pi^{+} BC", "#theta^{truth}_{#pi^{+}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "04undet_Theta_piplus_BC_truth_1n_undet", 0., 180., numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_pim_AC_truth_1n = hPlot1D("1n", "", "TL #theta^{truth}_{#pi^{-}} AC", "#theta^{truth}_{#pi^{-}} of Outgoing #pi^{-} AC", "#theta^{truth}_{#pi^{-}} [#circ]",
                                             directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "05_Theta_piminus_AC_truth_1n", Theta_lboundary_FD,
                                             Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pim_BC_truth_1n = hPlot1D("1n", "", "TL #theta^{truth}_{#pi^{-}} BC", "#theta^{truth}_{#pi^{-}} of Outgoing #pi^{-} BC", "#theta^{truth}_{#pi^{-}} [#circ]",
                                             directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "05_Theta_piminus_BC_truth_1n", Theta_lboundary_FD,
                                             Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pim_AC_truth_1n_FD = hPlot1D("1n", "FD", "TL FD #theta^{truth}_{#pi^{-}} AC", "FD #theta^{truth}_{#pi^{-}} of Outgoing #pi^{-} AC", "#theta^{truth}_{#pi^{-}} [#circ]",
                                                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "05FD_Theta_piminus_AC_truth_1n_FD", Theta_lboundary_FD,
                                                Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pim_BC_truth_1n_FD = hPlot1D("1n", "FD", "TL FD #theta^{truth}_{#pi^{-}} BC", "FD #theta^{truth}_{#pi^{-}} of Outgoing #pi^{-} BC", "#theta^{truth}_{#pi^{-}} [#circ]",
                                                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "05FD_Theta_piminus_BC_truth_1n_FD", Theta_lboundary_FD,
                                                Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pim_AC_truth_1n_CD = hPlot1D("1n", "CD", "TL CD #theta^{truth}_{#pi^{-}} AC", "CD #theta^{truth}_{#pi^{-}} of Outgoing #pi^{-} AC", "#theta^{truth}_{#pi^{-}} [#circ]",
                                                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "05CD_Theta_piminus_AC_truth_1n_CD", Theta_lboundary_CD,
                                                Theta_uboundary_CD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pim_BC_truth_1n_CD = hPlot1D("1n", "CD", "TL CD #theta^{truth}_{#pi^{-}} BC", "CD #theta^{truth}_{#pi^{-}} of Outgoing #pi^{-} BC", "#theta^{truth}_{#pi^{-}} [#circ]",
                                                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "05CD_Theta_piminus_BC_truth_1n_CD", Theta_lboundary_CD,
                                                Theta_uboundary_CD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pim_AC_truth_1n_undet =
        hPlot1D("1n", "undet", "TL undet #theta^{truth}_{#pi^{-}} AC", "undet #theta^{truth}_{#pi^{-}} of Outgoing #pi^{-} AC", "#theta^{truth}_{#pi^{-}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "05undet_Theta_piminus_AC_truth_1n_undet", 0., 180., numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pim_BC_truth_1n_undet =
        hPlot1D("1n", "undet", "TL undet #theta^{truth}_{#pi^{-}} BC", "undet #theta^{truth}_{#pi^{-}} of Outgoing #pi^{-} BC", "#theta^{truth}_{#pi^{-}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "05undet_Theta_piminus_BC_truth_1n_undet", 0., 180., numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_pi0_AC_truth_1n =
        hPlot1D("1n", "", "TL #theta^{truth}_{#pi^{0}} AC", "#theta^{truth}_{#pi^{0}} of Outgoing #pi^{0} AC", "#theta^{truth}_{#pi^{0}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "06_Theta_pi0_AC_truth_1n", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pi0_BC_truth_1n =
        hPlot1D("1n", "", "TL #theta^{truth}_{#pi^{0}} BC", "#theta^{truth}_{#pi^{0}} of Outgoing #pi^{0} BC", "#theta^{truth}_{#pi^{0}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "06_Theta_pi0_BC_truth_1n", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_ph_AC_truth_1n =
        hPlot1D("1n", "", "TL #theta^{truth}_{#gamma} AC", "#theta^{truth}_{#gamma} of Outgoing #gamma AC", "#theta^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "07a_Theta_ph_AC_truth_1n", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_ph_BC_truth_1n =
        hPlot1D("1n", "", "TL #theta^{truth}_{#gamma} BC", "#theta^{truth}_{#gamma} of Outgoing #gamma BC", "#theta^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "07a_Theta_ph_BC_truth_1n", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_ph_AC_truth_1n_FD = hPlot1D("1n", "FD", "FD TL #theta^{truth}_{#gamma} AC", "#theta^{truth}_{#gamma} of FD Outgoing #gamma AC", "#theta^{truth}_{#gamma} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "07b_Theta_ph_AC_truth_1n_FD", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_ph_BC_truth_1n_FD = hPlot1D("1n", "FD", "FD TL #theta^{truth}_{#gamma} BC", "#theta^{truth}_{#gamma} of FD Outgoing #gamma BC", "#theta^{truth}_{#gamma} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_1n_Directory"], "07b_Theta_ph_BC_truth_1n_FD", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    // Truth level phi plots (1n)
    hPlot1D hPhi_e_AC_truth_1n =
        hPlot1D("1n", "", "TL #phi^{truth}_{e} AC", "#phi^{truth}_{e} of Outgoing Electron AC", "#phi^{truth}_{e} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "01_Phi_e_AC_truth_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_e_BC_truth_1n =
        hPlot1D("1n", "", "TL #phi^{truth}_{e} BC", "#phi^{truth}_{e} of Outgoing Electron BC", "#phi^{truth}_{e} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "01_Phi_e_BC_truth_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_n_AC_truth_1n =
        hPlot1D("1n", "", "TL #phi^{truth}_{n} AC", "#phi^{truth}_{n} of Outgoing Neutron AC", "#phi^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "02a_Phi_n_AC_truth_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_n_BC_truth_1n =
        hPlot1D("1n", "", "TL #phi^{truth}_{n} BC", "#phi^{truth}_{n} of Outgoing Neutron BC", "#phi^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "02a_Phi_n_BC_truth_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_nFD_AC_truth_1n =
        hPlot1D("1n", "FD", "FD TL #phi^{truth}_{n} AC", "#phi^{truth}_{n} of Outgoing FD Neutron AC", "#phi^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "02b_Phi_nFD_AC_truth_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_nFD_BC_truth_1n =
        hPlot1D("1n", "FD", "FD TL #phi^{truth}_{n} BC", "#phi^{truth}_{n} of Outgoing FD Neutron BC", "#phi^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "02b_Phi_nFD_BC_truth_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_p_AC_truth_1n =
        hPlot1D("1n", "", "TL #phi^{truth}_{p} AC", "#phi^{truth}_{n} of Outgoing Proton AC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "03_Phi_p_AC_truth_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_p_BC_truth_1n =
        hPlot1D("1n", "", "TL #phi^{truth}_{p} BC", "#phi^{truth}_{n} of Outgoing Proton BC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "03_Phi_p_BC_truth_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_p_AC_truth_1n_FD =
        hPlot1D("1n", "FD", "TL FD #phi^{truth}_{p} AC", "FD #phi^{truth}_{p} of Outgoing Proton AC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "03FD_Phi_p_AC_truth_1n_FD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_p_BC_truth_1n_FD =
        hPlot1D("1n", "FD", "TL FD #phi^{truth}_{p} BC", "FD #phi^{truth}_{p} of Outgoing Proton BC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "03FD_Phi_p_BC_truth_1n_FD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_p_AC_truth_1n_CD =
        hPlot1D("1n", "CD", "TL CD #phi^{truth}_{p} AC", "CD #phi^{truth}_{p} of Outgoing Proton AC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "03CD_Phi_p_AC_truth_1n_CD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_p_BC_truth_1n_CD =
        hPlot1D("1n", "CD", "TL CD #phi^{truth}_{p} BC", "CD #phi^{truth}_{p} of Outgoing Proton BC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "03CD_Phi_p_BC_truth_1n_CD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_p_AC_truth_1n_undet =
        hPlot1D("1n", "undet", "TL undet #phi^{truth}_{p} AC", "undet #phi^{truth}_{p} of Outgoing Proton AC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "03undet_Phi_p_AC_truth_1n_undet", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_p_BC_truth_1n_undet =
        hPlot1D("1n", "undet", "TL undet #phi^{truth}_{p} BC", "undet #phi^{truth}_{p} of Outgoing Proton BC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "03undet_Phi_p_BC_truth_1n_undet", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_pip_AC_truth_1n =
        hPlot1D("1n", "", "TL #phi^{truth}_{#pi^{+}} AC", "#phi^{truth}_{#pi^{+}} of Outgoing #pi^{+} AC", "#phi^{truth}_{#pi^{+}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "04_Phi_piplus_AC_truth_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pip_BC_truth_1n =
        hPlot1D("1n", "", "TL #phi^{truth}_{#pi^{+}} BC", "#phi^{truth}_{#pi^{+}} of Outgoing #pi^{+} BC", "#phi^{truth}_{#pi^{+}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "04_Phi_piplus_BC_truth_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pip_AC_truth_1n_FD =
        hPlot1D("1n", "FD", "TL FD #phi^{truth}_{#pi^{+}} AC", "FD #phi^{truth}_{#pi^{+}} of Outgoing #pi^{+} AC", "#phi^{truth}_{#pi^{+}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "04FD_Phi_piplus_AC_truth_1n_FD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pip_BC_truth_1n_FD =
        hPlot1D("1n", "FD", "TL FD #phi^{truth}_{#pi^{+}} BC", "FD #phi^{truth}_{#pi^{+}} of Outgoing #pi^{+} BC", "#phi^{truth}_{#pi^{+}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "04FD_Phi_piplus_BC_truth_1n_FD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pip_AC_truth_1n_CD =
        hPlot1D("1n", "CD", "TL CD #phi^{truth}_{#pi^{+}} AC", "CD #phi^{truth}_{#pi^{+}} of Outgoing #pi^{+} AC", "#phi^{truth}_{#pi^{+}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "04CD_Phi_piplus_AC_truth_1n_CD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pip_BC_truth_1n_CD =
        hPlot1D("1n", "CD", "TL CD #phi^{truth}_{#pi^{+}} BC", "CD #phi^{truth}_{#pi^{+}} of Outgoing #pi^{+} BC", "#phi^{truth}_{#pi^{+}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "04CD_Phi_piplus_BC_truth_1n_CD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pip_AC_truth_1n_undet =
        hPlot1D("1n", "undet", "TL undet #phi^{truth}_{#pi^{+}} AC", "undet #phi^{truth}_{#pi^{+}} of Outgoing #pi^{+} AC", "#phi^{truth}_{#pi^{+}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "04undet_Phi_piplus_AC_truth_1n_undet", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pip_BC_truth_1n_undet =
        hPlot1D("1n", "undet", "TL undet #phi^{truth}_{#pi^{+}} BC", "undet #phi^{truth}_{#pi^{+}} of Outgoing #pi^{+} BC", "#phi^{truth}_{#pi^{+}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "04undet_Phi_piplus_BC_truth_1n_undet", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_pim_AC_truth_1n =
        hPlot1D("1n", "", "TL #phi^{truth}_{#pi^{-}} AC", "#phi^{truth}_{#pi^{-}} of Outgoing #pi^{-} AC", "#phi^{truth}_{#pi^{-}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "05_Phi_piminus_AC_truth_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pim_BC_truth_1n =
        hPlot1D("1n", "", "TL #phi^{truth}_{#pi^{-}} BC", "#phi^{truth}_{#pi^{-}} of Outgoing #pi^{-} BC", "#phi^{truth}_{#pi^{-}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "05_Phi_piminus_BC_truth_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pim_AC_truth_1n_FD =
        hPlot1D("1n", "FD", "TL FD #phi^{truth}_{#pi^{-}} AC", "FD #phi^{truth}_{#pi^{-}} of Outgoing #pi^{-} AC", "#phi^{truth}_{#pi^{-}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "05FD_Phi_piminus_AC_truth_1n_FD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pim_BC_truth_1n_FD =
        hPlot1D("1n", "FD", "TL FD #phi^{truth}_{#pi^{-}} BC", "FD #phi^{truth}_{#pi^{-}} of Outgoing #pi^{-} BC", "#phi^{truth}_{#pi^{-}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "05FD_Phi_piminus_BC_truth_1n_FD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pim_AC_truth_1n_CD =
        hPlot1D("1n", "CD", "TL CD #phi^{truth}_{#pi^{-}} AC", "CD #phi^{truth}_{#pi^{-}} of Outgoing #pi^{-} AC", "#phi^{truth}_{#pi^{-}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "05CD_Phi_piminus_AC_truth_1n_CD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pim_BC_truth_1n_CD =
        hPlot1D("1n", "CD", "TL CD #phi^{truth}_{#pi^{-}} BC", "CD #phi^{truth}_{#pi^{-}} of Outgoing #pi^{-} BC", "#phi^{truth}_{#pi^{-}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "05CD_Phi_piminus_BC_truth_1n_CD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pim_AC_truth_1n_undet =
        hPlot1D("1n", "undet", "TL undet #phi^{truth}_{#pi^{-}} AC", "undet #phi^{truth}_{#pi^{-}} of Outgoing #pi^{-} AC", "#phi^{truth}_{#pi^{-}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "05undet_Phi_piminus_AC_truth_1n_undet", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pim_BC_truth_1n_undet =
        hPlot1D("1n", "undet", "TL undet #phi^{truth}_{#pi^{-}} BC", "undet #phi^{truth}_{#pi^{-}} of Outgoing #pi^{-} BC", "#phi^{truth}_{#pi^{-}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "05undet_Phi_piminus_BC_truth_1n_undet", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_pi0_AC_truth_1n =
        hPlot1D("1n", "", "TL #phi^{truth}_{#pi^{0}} AC", "#phi^{truth}_{#pi^{0}} of Outgoing #pi^{0} AC", "#phi^{truth}_{#pi^{0}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "06_Phi_pi0_AC_truth_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pi0_BC_truth_1n =
        hPlot1D("1n", "", "TL #phi^{truth}_{#pi^{0}} BC", "#phi^{truth}_{#pi^{0}} of Outgoing #pi^{0} BC", "#phi^{truth}_{#pi^{0}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "06_Phi_pi0_BC_truth_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_ph_AC_truth_1n =
        hPlot1D("1n", "", "TL #phi^{truth}_{#gamma} AC", "#phi^{truth}_{#gamma} of Outgoing #gamma AC", "#phi^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "07a_Phi_ph_AC_truth_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_ph_BC_truth_1n =
        hPlot1D("1n", "", "TL #phi^{truth}_{#gamma} BC", "#phi^{truth}_{#gamma} of Outgoing #gamma BC", "#phi^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "07a_Phi_hp_BC_truth_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_ph_AC_truth_1n_FD =
        hPlot1D("1n", "FD", "FD TL #phi^{truth}_{#gamma} AC", "#phi^{truth}_{#gamma} of FD Outgoing #gamma AC", "#phi^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "07b_Phi_ph_AC_truth_1n_FD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_ph_BC_truth_1n_FD =
        hPlot1D("1n", "FD", "FD TL #phi^{truth}_{#gamma} BC", "#phi^{truth}_{#gamma} of FD Outgoing #gamma BC", "#phi^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_1n_Directory"], "07b_Phi_hp_BC_truth_1n_FD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    // TL fiducial cuts (1n)
    hPlot2D hnFD_Hit_map_1n_BEC =
        hPlot2D("1n", "FD", "FD neutron hit map BEC", "FD neutron hit map BEC", "x_{nFD}", "y_{nFD}", directories.Eff_and_ACorr_Directory_map["Neutron_FD_Hit_map_1n_Directory"],
                "01a_Neutron_FD_Hit_map_BEC_1n", -1.1, 1.1, -1.1, 1.1, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);
    hPlot2D hnFD_Hit_map_1n_AEC =
        hPlot2D("1n", "FD", "FD neutron hit map AEC", "FD neutron hit map AEC", "x_{nFD}", "y_{nFD}", directories.Eff_and_ACorr_Directory_map["Neutron_FD_Hit_map_1n_Directory"],
                "01b_Neutron_FD_Hit_map_AEC_1n", -1.1, 1.1, -1.1, 1.1, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);

    hPlot2D hTheta_nFD_vs_Phi_nFD_1n_BEC = hPlot2D("1n", "FD", "#theta_{nFD} vs. #phi_{nFD} BEC", "TL #theta_{nFD} vs. #phi_{nFD} BEC", "#phi_{nFD} [#circ]", "#theta_{nFD} [#circ]",
                                                   directories.Eff_and_ACorr_Directory_map["Neutron_FD_Hit_map_1n_Directory"], "02a_Theta_nFD_vs_Phi_nFD_BEC_1n", Phi_lboundary,
                                                   Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);
    hPlot2D hTheta_nFD_vs_Phi_nFD_1n_AEC = hPlot2D("1n", "FD", "#theta_{nFD} vs. #phi_{nFD} AEC", "TL #theta_{nFD} vs. #phi_{nFD} AEC", "#phi_{nFD} [#circ]", "#theta_{nFD} [#circ]",
                                                   directories.Eff_and_ACorr_Directory_map["Neutron_FD_Hit_map_1n_Directory"], "02b_Theta_nFD_vs_Phi_nFD_AEC_1n", Phi_lboundary,
                                                   Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);

    // Truth level theta vs. phi plots (1n)
    hPlot2D hTheta_e_vs_Phi_e_truth_1n = hPlot2D("1n", "", "TL #theta_{e} vs. #phi_{e}", "TL #theta_{e} vs. #phi_{e}", "#phi_{e} [#circ]", "#theta_{e} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Neutron_FD_Hit_map_1n_Directory"], "01_Theta_e_vs_Phi_e_truth_1n", Phi_lboundary, Phi_uboundary,
                                                 Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Electron_Ang_eff_Plots, numTH2Dbins_Electron_Ang_eff_Plots);

    hPlot2D hTheta_nFD_vs_Phi_nFD_truth_1n = hPlot2D("1n", "FD", "TL #theta_{nFD} vs. #phi_{nFD}", "TL #theta_{nFD} vs. #phi_{nFD}", "#phi_{nFD} [#circ]", "#theta_{nFD} [#circ]",
                                                     directories.Eff_and_ACorr_Directory_map["Neutron_FD_Hit_map_1n_Directory"], "02_Theta_nFD_vs_Phi_nFD_truth_1n", Phi_lboundary,
                                                     Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);

    // Efficiency plots (pFDpCD)

    // Truth level momentum plots (pFDpCD)
    hPlot1D hP_e_AC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL Electron momentum AC", "Electron momentum P^{truth}_{e} AC", "P^{truth}_{e} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "01_P_e_AC_truth_pFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_e_BC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL Electron momentum BC", "Electron momentum P^{truth}_{e} BC", "P^{truth}_{e} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "01_P_e_BC_truth_pFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_n_AC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL Neutron momentum AC", "Neutron momentum P^{truth}_{n} AC", "P^{truth}_{n} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "02_P_n_AC_truth_pFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_n_BC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL Neutron momentum BC", "Neutron momentum P^{truth}_{n} BC", "P^{truth}_{n} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "02_P_n_BC_truth_pFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_p_AC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL Proton momentum AC", "Proton momentum P^{truth}_{p} AC", "P^{truth}_{p} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "03a_P_p_AC_truth_pFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_p_BC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL Proton momentum BC", "Proton momentum P^{truth}_{p} BC", "P^{truth}_{p} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "03a_P_p_BC_truth_pFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pFD_AC_truth_pFDpCD = hPlot1D("pFDpCD", "FD", "FD TL Proton momentum AC", "FD Proton momentum P^{truth}_{p} AC", "P^{truth}_{p} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "03b_P_pFD_AC_truth_pFDpCD", FDMomentum_lboundary,
                                             FDMomentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pFD_BC_truth_pFDpCD = hPlot1D("pFDpCD", "FD", "FD TL Proton momentum BC", "FD Proton momentum P^{truth}_{p} BC", "P^{truth}_{p} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "03b_P_pFD_BC_truth_pFDpCD", Momentum_lboundary,
                                             Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pCD_AC_truth_pFDpCD = hPlot1D("pFDpCD", "CD", "CD TL Proton momentum AC", "CD Proton momentum P^{truth}_{p} AC", "P^{truth}_{p} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "03b_P_pCD_AC_truth_pFDpCD", CDMomentum_lboundary,
                                             CDMomentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pCD_BC_truth_pFDpCD = hPlot1D("pFDpCD", "CD", "CD TL Proton momentum BC", "CD Proton momentum P^{truth}_{p} BC", "P^{truth}_{p} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "03b_P_pCD_BC_truth_pFDpCD", CDMomentum_lboundary,
                                             CDMomentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_pip_AC_truth_pFDpCD = hPlot1D("pFDpCD", "", "TL #pi^{+} momentum AC", "#pi^{+} momentum P^{truth}_{#pi^{+}} AC", "P^{truth}_{#pi^{+}} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "04_P_piplus_AC_truth_pFDpCD", Momentum_lboundary,
                                             Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pip_BC_truth_pFDpCD = hPlot1D("pFDpCD", "", "TL #pi^{+} momentum BC", "#pi^{+} momentum P^{truth}_{#pi^{+}} BC", "P^{truth}_{#pi^{+}} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "04_P_piplus_BC_truth_pFDpCD", Momentum_lboundary,
                                             Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_pim_AC_truth_pFDpCD = hPlot1D("pFDpCD", "", "TL #pi^{-} momentum AC", "#pi^{-} momentum P^{truth}_{#pi^{-}} AC", "P^{truth}_{#pi^{-}} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "05_P_piminus_AC_truth_pFDpCD", Momentum_lboundary,
                                             Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pim_BC_truth_pFDpCD = hPlot1D("pFDpCD", "", "TL #pi^{-} momentum BC", "#pi^{-} momentum P^{truth}_{#pi^{-}} BC", "P^{truth}_{#pi^{-}} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "05_P_piminus_BC_truth_pFDpCD", Momentum_lboundary,
                                             Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_pi0_AC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL #pi^{0} momentum AC", "#pi^{0} momentum P^{truth}_{#pi^{0}} AC", "P^{truth}_{#pi^{0}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "06_P_pi0_AC_truth_pFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pi0_BC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL #pi^{0} momentum BC", "#pi^{0} momentum P^{truth}_{#pi^{0}} BC", "P^{truth}_{#pi^{0}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "06_P_pi0_BC_truth_pFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_ph_AC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL #gamma momentum AC", "#gamma momentum P^{truth}_{#gamma} AC", "P^{truth}_{#gamma} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "07a_P_ph_AC_truth_pFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_ph_BC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL #gamma momentum BC", "#gamma momentum P^{truth}_{#gamma} BC", "P^{truth}_{#gamma} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "07a_P_ph_BC_truth_pFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_ph_AC_truth_pFDpCD_FD = hPlot1D("pFDpCD", "FD", "FD TL #gamma momentum AC", "FD #gamma momentum P^{truth}_{#gamma} AC", "P^{truth}_{#gamma} [GeV/c]",
                                               directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "07b_P_ph_AC_truth_pFDpCD_FD", Momentum_lboundary,
                                               Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_ph_BC_truth_pFDpCD_FD = hPlot1D("pFDpCD", "FD", "FD TL #gamma momentum BC", "FD #gamma momentum P^{truth}_{#gamma} BC", "P^{truth}_{#gamma} [GeV/c]",
                                               directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_pFDpCD_Directory"], "07b_P_ph_BC_truth_pFDpCD_FD", Momentum_lboundary,
                                               Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    // Truth level theta plots (pFDpCD)
    hPlot1D hTheta_e_AC_truth_pFDpCD = hPlot1D("pFDpCD", "", "TL #theta^{truth}_{e} AC", "#theta^{truth}_{e} of Outgoing Electron AC", "#theta^{truth}_{e} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "01_Theta_e_AC_truth_pFDpCD", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_e_BC_truth_pFDpCD = hPlot1D("pFDpCD", "", "TL #theta^{truth}_{e} BC", "#theta^{truth}_{e} of Outgoing Electron BC", "#theta^{truth}_{e} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "01_Theta_e_BC_truth_pFDpCD", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_n_AC_truth_pFDpCD = hPlot1D("pFDpCD", "", "TL #theta^{truth}_{n} AC", "#theta^{truth}_{n} of Outgoing Neutron AC", "#theta^{truth}_{n} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "02_Theta_n_AC_truth_pFDpCD", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_n_BC_truth_pFDpCD = hPlot1D("pFDpCD", "", "TL #theta^{truth}_{n} BC", "#theta^{truth}_{n} of Outgoing Neutron BC", "#theta^{truth}_{n} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "02_Theta_n_BC_truth_pFDpCD", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_p_AC_truth_pFDpCD = hPlot1D("pFDpCD", "", "TL #theta^{truth}_{p} AC", "#theta^{truth}_{p} of Outgoing Proton AC", "#theta^{truth}_{p} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "03a_Theta_p_AC_truth_pFDpCD", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_p_BC_truth_pFDpCD = hPlot1D("pFDpCD", "", "TL #theta^{truth}_{p} BC", "#theta^{truth}_{p} of Outgoing Proton BC", "#theta^{truth}_{p} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "03a_Theta_p_BC_truth_pFDpCD", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pFD_AC_truth_pFDpCD = hPlot1D("pFDpCD", "FD", "FD TL #theta^{truth}_{p} AC", "#theta^{truth}_{p} of Outgoing FD Proton AC", "#theta^{truth}_{p} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "03b_Theta_pFD_AC_truth_pFDpCD", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pFD_BC_truth_pFDpCD = hPlot1D("pFDpCD", "FD", "FD TL #theta^{truth}_{p} BC", "#theta^{truth}_{p} of Outgoing FD Proton BC", "#theta^{truth}_{p} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "03b_Theta_pFD_BC_truth_pFDpCD", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pCD_AC_truth_pFDpCD = hPlot1D("pFDpCD", "CD", "CD TL #theta^{truth}_{p} AC", "#theta^{truth}_{p} of Outgoing CD Proton AC", "#theta^{truth}_{p} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "03b_Theta_pCD_AC_truth_pFDpCD", Theta_lboundary_CD,
                                                 Theta_uboundary_CD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pCD_BC_truth_pFDpCD = hPlot1D("pFDpCD", "CD", "CD TL #theta^{truth}_{p} BC", "#theta^{truth}_{p} of Outgoing CD Proton BC", "#theta^{truth}_{p} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "03b_Theta_pCD_BC_truth_pFDpCD", Theta_lboundary_CD,
                                                 Theta_uboundary_CD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_pip_AC_truth_pFDpCD = hPlot1D("pFDpCD", "", "TL #theta^{truth}_{#pi^{+}} AC", "#theta^{truth}_{#pi^{+}} of Outgoing #pi^{+} AC", "#theta^{truth}_{#pi^{+}} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "04_Theta_piplus_AC_truth_pFDpCD", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pip_BC_truth_pFDpCD = hPlot1D("pFDpCD", "", "TL #theta^{truth}_{#pi^{+}} BC", "#theta^{truth}_{#pi^{+}} of Outgoing #pi^{+} BC", "#theta^{truth}_{#pi^{+}} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "04_Theta_piplus_BC_truth_pFDpCD", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_pim_AC_truth_pFDpCD = hPlot1D("pFDpCD", "", "TL #theta^{truth}_{#pi^{-}} AC", "#theta^{truth}_{#pi^{-}} of Outgoing #pi^{-} AC", "#theta^{truth}_{#pi^{-}} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "05_Theta_piminus_AC_truth_pFDpCD", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pim_BC_truth_pFDpCD = hPlot1D("pFDpCD", "", "TL #theta^{truth}_{#pi^{-}} BC", "#theta^{truth}_{#pi^{-}} of Outgoing #pi^{-} BC", "#theta^{truth}_{#pi^{-}} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "05_Theta_piminus_BC_truth_pFDpCD", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_pi0_AC_truth_pFDpCD = hPlot1D("pFDpCD", "", "TL #theta^{truth}_{#pi^{0}} AC", "#theta^{truth}_{#pi^{0}} of Outgoing #pi^{0} AC", "#theta^{truth}_{#pi^{0}} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "06_Theta_pi0_AC_truth_pFDpCD", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pi0_BC_truth_pFDpCD = hPlot1D("pFDpCD", "", "TL #theta^{truth}_{#pi^{0}} BC", "#theta^{truth}_{#pi^{0}} of Outgoing #pi^{0} BC", "#theta^{truth}_{#pi^{0}} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "06_Theta_pi0_BC_truth_pFDpCD", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_ph_AC_truth_pFDpCD = hPlot1D("pFDpCD", "", "TL #theta^{truth}_{#gamma} AC", "#theta^{truth}_{#gamma} of Outgoing #gamma AC", "#theta^{truth}_{#gamma} [#circ]",
                                                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "07a_Theta_ph_AC_truth_pFDpCD", Theta_lboundary_FD,
                                                Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_ph_BC_truth_pFDpCD = hPlot1D("pFDpCD", "", "TL #theta^{truth}_{#gamma} BC", "#theta^{truth}_{#gamma} of Outgoing #gamma BC", "#theta^{truth}_{#gamma} [#circ]",
                                                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "07a_Theta_ph_BC_truth_pFDpCD", Theta_lboundary_FD,
                                                Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_ph_AC_truth_pFDpCD_FD = hPlot1D("pFDpCD", "FD", "FD TL #theta^{truth}_{#gamma} AC", "#theta^{truth}_{#gamma} of FD Outgoing #gamma AC", "#theta^{truth}_{#gamma} [#circ]",
                                                   directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "07b_Theta_ph_AC_truth_pFDpCD_FD", Theta_lboundary_FD,
                                                   Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_ph_BC_truth_pFDpCD_FD = hPlot1D("pFDpCD", "FD", "FD TL #theta^{truth}_{#gamma} BC", "#theta^{truth}_{#gamma} of FD Outgoing #gamma BC", "#theta^{truth}_{#gamma} [#circ]",
                                                   directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_pFDpCD_Directory"], "07b_Theta_ph_BC_truth_pFDpCD_FD", Theta_lboundary_FD,
                                                   Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    // Truth level phi plots (pFDpCD)
    hPlot1D hPhi_e_AC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL #phi^{truth}_{e} AC", "#phi^{truth}_{e} of Outgoing Electron AC", "#phi^{truth}_{e} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "01_Phi_e_AC_truth_pFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_e_BC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL #phi^{truth}_{e} BC", "#phi^{truth}_{e} of Outgoing Electron BC", "#phi^{truth}_{e} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "01_Phi_e_BC_truth_pFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_n_AC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL #phi^{truth}_{n} AC", "#phi^{truth}_{n} of Outgoing Neutron AC", "#phi^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "02_Phi_n_AC_truth_pFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_n_BC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL #phi^{truth}_{n} BC", "#phi^{truth}_{n} of Outgoing Neutron BC", "#phi^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "02_Phi_n_BC_truth_pFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_p_AC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL #phi^{truth}_{p} AC", "#phi^{truth}_{n} of Outgoing Proton AC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "03a_Phi_p_AC_truth_pFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_p_BC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL #phi^{truth}_{p} BC", "#phi^{truth}_{n} of Outgoing Proton BC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "03a_Phi_p_BC_truth_pFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pFD_AC_truth_pFDpCD =
        hPlot1D("pFDpCD", "FD", "FD TL #phi^{truth}_{p} AC", "#phi^{truth}_{n} of FD Outgoing Proton AC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "03b_Phi_pFD_AC_truth_pFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pFD_BC_truth_pFDpCD =
        hPlot1D("pFDpCD", "FD", "FD TL #phi^{truth}_{p} BC", "#phi^{truth}_{n} of FD Outgoing Proton BC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "03b_Phi_pFD_BC_truth_pFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pCD_AC_truth_pFDpCD =
        hPlot1D("pFDpCD", "CD", "CD TL #phi^{truth}_{p} AC", "#phi^{truth}_{n} of CD Outgoing Proton AC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "03b_Phi_pCD_AC_truth_pFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pCD_BC_truth_pFDpCD =
        hPlot1D("pFDpCD", "CD", "CD TL #phi^{truth}_{p} BC", "#phi^{truth}_{n} of CD Outgoing Proton BC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "03b_Phi_pCD_BC_truth_pFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_pip_AC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL #phi^{truth}_{#pi^{+}} AC", "#phi^{truth}_{#pi^{+}} of Outgoing #pi^{+} AC", "#phi^{truth}_{#pi^{+}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "04_Phi_piplus_AC_truth_pFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pip_BC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL #phi^{truth}_{#pi^{+}} BC", "#phi^{truth}_{#pi^{+}} of Outgoing #pi^{+} BC", "#phi^{truth}_{#pi^{+}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "04_Phi_piplus_BC_truth_pFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_pim_AC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL #phi^{truth}_{#pi^{-}} AC", "#phi^{truth}_{#pi^{-}} of Outgoing #pi^{-} AC", "#phi^{truth}_{#pi^{-}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "05_Phi_piminus_AC_truth_pFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pim_BC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL #phi^{truth}_{#pi^{-}} BC", "#phi^{truth}_{#pi^{-}} of Outgoing #pi^{-} BC", "#phi^{truth}_{#pi^{-}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "05_Phi_piminus_BC_truth_pFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_pi0_AC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL #phi^{truth}_{#pi^{0}} AC", "#phi^{truth}_{#pi^{0}} of Outgoing #pi^{0} AC", "#phi^{truth}_{#pi^{0}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "06_Phi_pi0_AC_truth_pFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pi0_BC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL #phi^{truth}_{#pi^{0}} BC", "#phi^{truth}_{#pi^{0}} of Outgoing #pi^{0} BC", "#phi^{truth}_{#pi^{0}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "06_Phi_pi0_BC_truth_pFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_ph_AC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL #phi^{truth}_{#gamma} AC", "#phi^{truth}_{#gamma} of Outgoing #gamma AC", "#phi^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "07a_Phi_ph_AC_truth_pFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_ph_BC_truth_pFDpCD =
        hPlot1D("pFDpCD", "", "TL #phi^{truth}_{#gamma} BC", "#phi^{truth}_{#gamma} of Outgoing #gamma BC", "#phi^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "07a_Phi_ph_BC_truth_pFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_ph_AC_truth_pFDpCD_FD =
        hPlot1D("pFDpCD", "FD", "FD TL #phi^{truth}_{#gamma} AC", "#phi^{truth}_{#gamma} of FD Outgoing #gamma AC", "#phi^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "07b_Phi_ph_AC_truth_pFDpCD_FD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_ph_BC_truth_pFDpCD_FD =
        hPlot1D("pFDpCD", "FD", "FD TL #phi^{truth}_{#gamma} BC", "#phi^{truth}_{#gamma} of FD Outgoing #gamma BC", "#phi^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_pFDpCD_Directory"], "07b_Phi_ph_BC_truth_pFDpCD_FD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    // TL fiducial cuts (pFDpCD)
    hPlot2D hpFD_Hit_map_pFDpCD_BEC =
        hPlot2D("pFDpCD", "FD", "FD proton hit map BEC", "FD proton hit map BEC", "x_{pFD}", "y_{pFD}", directories.Eff_and_ACorr_Directory_map["Proton_FD_Hit_map_pFDpCD_Directory"],
                "01a_Proton_FD_Hit_map_BEC_pFDpCD", -1.1, 1.1, -1.1, 1.1, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);
    hPlot2D hpFD_Hit_map_pFDpCD_AEC =
        hPlot2D("pFDpCD", "FD", "FD proton hit map AEC", "FD proton hit map AEC", "x_{pFD}", "y_{pFD}", directories.Eff_and_ACorr_Directory_map["Proton_FD_Hit_map_pFDpCD_Directory"],
                "01b_Proton_FD_Hit_map_AEC_pFDpCD", -1.1, 1.1, -1.1, 1.1, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);

    hPlot2D hTheta_pFD_vs_Phi_pFD_pFDpCD_BEC = hPlot2D("pFDpCD", "FD", "#theta_{pFD} vs. #phi_{pFD} BEC", "TL #theta_{pFD} vs. #phi_{pFD} BEC", "#phi_{pFD} [#circ]", "#theta_{pFD} [#circ]",
                                                       directories.Eff_and_ACorr_Directory_map["Proton_FD_Hit_map_pFDpCD_Directory"], "02a_Theta_pFD_vs_Phi_pFD_BEC_pFDpCD", Phi_lboundary,
                                                       Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);
    hPlot2D hTheta_pFD_vs_Phi_pFD_pFDpCD_AEC = hPlot2D("pFDpCD", "FD", "#theta_{pFD} vs. #phi_{pFD} AEC", "TL #theta_{pFD} vs. #phi_{pFD} AEC", "#phi_{pFD} [#circ]", "#theta_{pFD} [#circ]",
                                                       directories.Eff_and_ACorr_Directory_map["Proton_FD_Hit_map_pFDpCD_Directory"], "02b_Theta_pFD_vs_Phi_pFD_AEC_pFDpCD", Phi_lboundary,
                                                       Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);

    // Truth level theta vs. phi plots (pFDpCD)
    hPlot2D hTheta_e_vs_Phi_e_truth_pFDpCD = hPlot2D("pFDpCD", "", "TL #theta_{e} vs. #phi_{e}", "TL #theta_{e} vs. #phi_{e}", "#phi_{e} [#circ]", "#theta_{e} [#circ]",
                                                     directories.Eff_and_ACorr_Directory_map["Proton_FD_Hit_map_pFDpCD_Directory"], "01_Theta_e_vs_Phi_e_truth_pFDpCD", Phi_lboundary,
                                                     Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Electron_Ang_eff_Plots, numTH2Dbins_Electron_Ang_eff_Plots);

    hPlot2D hTheta_pFD_vs_Phi_pFD_truth_pFDpCD = hPlot2D("pFDpCD", "FD", "TL #theta_{pFD} vs. #phi_{pFD}", "TL #theta_{pFD} vs. #phi_{pFD}", "#phi_{pFD} [#circ]", "#theta_{pFD} [#circ]",
                                                         directories.Eff_and_ACorr_Directory_map["Proton_FD_Hit_map_pFDpCD_Directory"], "02_Theta_pFD_vs_Phi_pFD_truth_pFDpCD", Phi_lboundary,
                                                         Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);

    // Efficiency plots (nFDpCD)

    // Truth level momentum plots (nFDpCD)
    hPlot1D hP_e_AC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL Electron momentum AC", "Electron momentum P^{truth}_{e} AC", "P^{truth}_{e} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "01_P_e_AC_truth_nFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_e_BC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL Electron momentum BC", "Electron momentum P^{truth}_{e} BC", "P^{truth}_{e} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "01_P_e_BC_truth_nFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_n_AC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL Neutron momentum AC", "Neutron momentum P^{truth}_{n} AC", "P^{truth}_{n} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "02a_P_n_AC_truth_nFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_n_BC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL Neutron momentum BC", "Neutron momentum P^{truth}_{n} BC", "P^{truth}_{n} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "02a_P_n_BC_truth_nFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_nFD_AC_truth_nFDpCD = hPlot1D("nFDpCD", "FD", "FD TL Neutron momentum AC", "FD Neutron momentum P^{truth}_{n} AC", "P^{truth}_{n} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "02b_P_nFD_AC_truth_nFDpCD", FDMomentum_lboundary,
                                             FDMomentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_nFD_BC_truth_nFDpCD = hPlot1D("nFDpCD", "FD", "FD TL Neutron momentum BC", "FD Neutron momentum P^{truth}_{n} BC", "P^{truth}_{n} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "02b_P_nFD_BC_truth_nFDpCD", Momentum_lboundary,
                                             Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_p_AC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL Proton momentum AC", "Proton momentum P^{truth}_{p} AC", "P^{truth}_{p} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "03_P_p_AC_truth_nFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_p_BC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL Proton momentum BC", "Proton momentum P^{truth}_{p} BC", "P^{truth}_{p} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "03_P_p_BC_truth_nFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pFD_AC_truth_nFDpCD = hPlot1D("nFDpCD", "FD", "FD TL Proton momentum AC", "FD Proton momentum P^{truth}_{p} AC", "P^{truth}_{p} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "02b_P_pFD_AC_truth_nFDpCD", Momentum_lboundary,
                                             Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pFD_BC_truth_nFDpCD = hPlot1D("nFDpCD", "FD", "FD TL Proton momentum BC", "FD Proton momentum P^{truth}_{p} BC", "P^{truth}_{p} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "02b_P_pFD_BC_truth_nFDpCD", Momentum_lboundary,
                                             Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pCD_AC_truth_nFDpCD = hPlot1D("nFDpCD", "CD", "CD TL Proton momentum AC", "CD Proton momentum P^{truth}_{p} AC", "P^{truth}_{p} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "02b_P_pCD_AC_truth_nFDpCD", CDMomentum_lboundary,
                                             CDMomentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pCD_BC_truth_nFDpCD = hPlot1D("nFDpCD", "CD", "CD TL Proton momentum BC", "CD Proton momentum P^{truth}_{p} BC", "P^{truth}_{p} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "02b_P_pCD_BC_truth_nFDpCD", CDMomentum_lboundary,
                                             CDMomentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_pip_AC_truth_nFDpCD = hPlot1D("nFDpCD", "", "TL #pi^{+} momentum AC", "#pi^{+} momentum P^{truth}_{#pi^{+}} AC", "P^{truth}_{#pi^{+}} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "04_P_piplus_AC_truth_nFDpCD", Momentum_lboundary,
                                             Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pip_BC_truth_nFDpCD = hPlot1D("nFDpCD", "", "TL #pi^{+} momentum BC", "#pi^{+} momentum P^{truth}_{#pi^{+}} BC", "P^{truth}_{#pi^{+}} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "04_P_piplus_BC_truth_nFDpCD", Momentum_lboundary,
                                             Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_pim_AC_truth_nFDpCD = hPlot1D("nFDpCD", "", "TL #pi^{-} momentum AC", "#pi^{-} momentum P^{truth}_{#pi^{-}} AC", "P^{truth}_{#pi^{-}} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "05_P_piminus_AC_truth_nFDpCD", Momentum_lboundary,
                                             Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pim_BC_truth_nFDpCD = hPlot1D("nFDpCD", "", "TL #pi^{-} momentum BC", "#pi^{-} momentum P^{truth}_{#pi^{-}} BC", "P^{truth}_{#pi^{-}} [GeV/c]",
                                             directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "05_P_piminus_BC_truth_nFDpCD", Momentum_lboundary,
                                             Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_pi0_AC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL #pi^{0} momentum AC", "#pi^{0} momentum P^{truth}_{#pi^{0}} AC", "P^{truth}_{#pi^{0}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "06_P_pi0_AC_truth_nFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_pi0_BC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL #pi^{0} momentum BC", "#pi^{0} momentum P^{truth}_{#pi^{0}} BC", "P^{truth}_{#pi^{0}} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "06_P_pi0_BC_truth_nFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    hPlot1D hP_ph_AC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL #gamma momentum AC", "#gamma momentum P^{truth}_{#gamma} AC", "P^{truth}_{#gamma} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "07a_P_ph_AC_truth_nFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_ph_BC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL #gamma momentum BC", "#gamma momentum P^{truth}_{#gamma} BC", "P^{truth}_{#gamma} [GeV/c]",
                directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "07a_P_ph_BC_truth_nFDpCD", Momentum_lboundary, Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_ph_AC_truth_nFDpCD_FD = hPlot1D("nFDpCD", "FD", "FD TL #gamma momentum AC", "FD #gamma momentum P^{truth}_{#gamma} AC", "P^{truth}_{#gamma} [GeV/c]",
                                               directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "07b_P_ph_AC_truth_nFDpCD_FD", Momentum_lboundary,
                                               Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);
    hPlot1D hP_ph_BC_truth_nFDpCD_FD = hPlot1D("nFDpCD", "FD", "FD TL #gamma momentum BC", "FD #gamma momentum P^{truth}_{#gamma} BC", "P^{truth}_{#gamma} [GeV/c]",
                                               directories.Eff_and_ACorr_Directory_map["Mom_Eff_and_ACorr_nFDpCD_Directory"], "07b_P_ph_BC_truth_nFDpCD_FD", Momentum_lboundary,
                                               Momentum_uboundary, numTH1Dbins_Mom_eff_Plots);

    // Truth level theta plots (nFDpCD)
    hPlot1D hTheta_e_AC_truth_nFDpCD = hPlot1D("nFDpCD", "", "TL #theta^{truth}_{e} AC", "#theta^{truth}_{e} of Outgoing Electron AC", "#theta^{truth}_{e} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "01_Theta_e_AC_truth_nFDpCD", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_e_BC_truth_nFDpCD = hPlot1D("nFDpCD", "", "TL #theta^{truth}_{e} BC", "#theta^{truth}_{e} of Outgoing Electron BC", "#theta^{truth}_{e} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "01_Theta_e_BC_truth_nFDpCD", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_n_AC_truth_nFDpCD = hPlot1D("nFDpCD", "", "TL #theta^{truth}_{n} AC", "#theta^{truth}_{n} of Outgoing Neutron AC", "#theta^{truth}_{n} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "02a_Theta_n_AC_truth_nFDpCD", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_n_BC_truth_nFDpCD = hPlot1D("nFDpCD", "", "TL #theta^{truth}_{n} BC", "#theta^{truth}_{n} of Outgoing Neutron BC", "#theta^{truth}_{n} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "02a_Theta_n_BC_truth_nFDpCD", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_nFD_AC_truth_nFDpCD = hPlot1D("nFDpCD", "FD", "FD TL #theta^{truth}_{n} AC", "#theta^{truth}_{n} of Outgoing FD Neutron AC", "#theta^{truth}_{n} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "02b_Theta_nFD_AC_truth_nFDpCD", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_nFD_BC_truth_nFDpCD = hPlot1D("nFDpCD", "FD", "FD TL #theta^{truth}_{n} BC", "#theta^{truth}_{n} of Outgoing FD Neutron BC", "#theta^{truth}_{n} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "02b_Theta_nFD_BC_truth_nFDpCD", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_p_AC_truth_nFDpCD = hPlot1D("nFDpCD", "", "TL #theta^{truth}_{p} AC", "#theta^{truth}_{p} of Outgoing Proton AC", "#theta^{truth}_{p} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "03_Theta_p_AC_truth_nFDpCD", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_p_BC_truth_nFDpCD = hPlot1D("nFDpCD", "", "TL #theta^{truth}_{p} BC", "#theta^{truth}_{p} of Outgoing Proton BC", "#theta^{truth}_{p} [#circ]",
                                               directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "03_Theta_p_BC_truth_nFDpCD", Theta_lboundary_FD,
                                               Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pFD_AC_truth_nFDpCD = hPlot1D("nFDpCD", "FD", "FD TL #theta^{truth}_{p} AC", "#theta^{truth}_{p} of Outgoing FD Proton AC", "#theta^{truth}_{p} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "02b_Theta_pFD_AC_truth_nFDpCD", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pFD_BC_truth_nFDpCD = hPlot1D("nFDpCD", "FD", "FD TL #theta^{truth}_{p} BC", "#theta^{truth}_{p} of Outgoing FD Proton BC", "#theta^{truth}_{p} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "02b_Theta_pFD_BC_truth_nFDpCD", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pCD_AC_truth_nFDpCD = hPlot1D("nFDpCD", "CD", "CD TL #theta^{truth}_{p} AC", "#theta^{truth}_{p} of Outgoing CD Proton AC", "#theta^{truth}_{p} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "02b_Theta_pCD_AC_truth_nFDpCD", Theta_lboundary_CD,
                                                 Theta_uboundary_CD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pCD_BC_truth_nFDpCD = hPlot1D("nFDpCD", "CD", "CD TL #theta^{truth}_{p} BC", "#theta^{truth}_{p} of Outgoing CD Proton BC", "#theta^{truth}_{p} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "02b_Theta_pCD_BC_truth_nFDpCD", Theta_lboundary_CD,
                                                 Theta_uboundary_CD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_pip_AC_truth_nFDpCD = hPlot1D("nFDpCD", "", "TL #theta^{truth}_{#pi^{+}} AC", "#theta^{truth}_{#pi^{+}} of Outgoing #pi^{+} AC", "#theta^{truth}_{#pi^{+}} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "04_Theta_piplus_AC_truth_nFDpCD", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pip_BC_truth_nFDpCD = hPlot1D("nFDpCD", "", "TL #theta^{truth}_{#pi^{+}} BC", "#theta^{truth}_{#pi^{+}} of Outgoing #pi^{+} BC", "#theta^{truth}_{#pi^{+}} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "04_Theta_piplus_BC_truth_nFDpCD", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_pim_AC_truth_nFDpCD = hPlot1D("nFDpCD", "", "TL #theta^{truth}_{#pi^{-}} AC", "#theta^{truth}_{#pi^{-}} of Outgoing #pi^{-} AC", "#theta^{truth}_{#pi^{-}} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "05_Theta_piminus_AC_truth_nFDpCD", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pim_BC_truth_nFDpCD = hPlot1D("nFDpCD", "", "TL #theta^{truth}_{#pi^{-}} BC", "#theta^{truth}_{#pi^{-}} of Outgoing #pi^{-} BC", "#theta^{truth}_{#pi^{-}} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "05_Theta_piminus_BC_truth_nFDpCD", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_pi0_AC_truth_nFDpCD = hPlot1D("nFDpCD", "", "TL #theta^{truth}_{#pi^{0}} AC", "#theta^{truth}_{#pi^{0}} of Outgoing #pi^{0} AC", "#theta^{truth}_{#pi^{0}} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "06_Theta_pi0_AC_truth_nFDpCD", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_pi0_BC_truth_nFDpCD = hPlot1D("nFDpCD", "", "TL #theta^{truth}_{#pi^{0}} BC", "#theta^{truth}_{#pi^{0}} of Outgoing #pi^{0} BC", "#theta^{truth}_{#pi^{0}} [#circ]",
                                                 directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "06_Theta_pi0_BC_truth_nFDpCD", Theta_lboundary_FD,
                                                 Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hTheta_ph_AC_truth_nFDpCD = hPlot1D("nFDpCD", "", "TL #theta^{truth}_{#gamma} AC", "#theta^{truth}_{#gamma} of Outgoing #gamma AC", "#theta^{truth}_{#gamma} [#circ]",
                                                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "07a_Theta_ph_AC_truth_nFDpCD", Theta_lboundary_FD,
                                                Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_ph_BC_truth_nFDpCD = hPlot1D("nFDpCD", "", "TL #theta^{truth}_{#gamma} BC", "#theta^{truth}_{#gamma} of Outgoing #gamma BC", "#theta^{truth}_{#gamma} [#circ]",
                                                directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "07a_Theta_ph_BC_truth_nFDpCD", Theta_lboundary_FD,
                                                Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_ph_AC_truth_nFDpCD_FD = hPlot1D("nFDpCD", "FD", "FD TL #theta^{truth}_{#gamma} AC", "#theta^{truth}_{#gamma} of FD Outgoing #gamma AC", "#theta^{truth}_{#gamma} [#circ]",
                                                   directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "07b_Theta_ph_AC_truth_nFDpCD_FD", Theta_lboundary_FD,
                                                   Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hTheta_ph_BC_truth_nFDpCD_FD = hPlot1D("nFDpCD", "FD", "FD TL #theta^{truth}_{#gamma} BC", "#theta^{truth}_{#gamma} of FD Outgoing #gamma BC", "#theta^{truth}_{#gamma} [#circ]",
                                                   directories.Eff_and_ACorr_Directory_map["Theta_Eff_and_ACorr_nFDpCD_Directory"], "07b_Theta_ph_BC_truth_nFDpCD_FD", Theta_lboundary_FD,
                                                   Theta_uboundary_FD, numTH1Dbins_Ang_eff_Plots);

    // Truth level phi plots (nFDpCD)
    hPlot1D hPhi_e_AC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL #phi^{truth}_{e} AC", "#phi^{truth}_{e} of Outgoing Electron AC", "#phi^{truth}_{e} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "01_Phi_e_AC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_e_BC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL #phi^{truth}_{e} BC", "#phi^{truth}_{e} of Outgoing Electron BC", "#phi^{truth}_{e} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "01_Phi_e_BC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_n_AC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL #phi^{truth}_{n} AC", "#phi^{truth}_{n} of Outgoing Neutron AC", "#phi^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "02a_Phi_n_AC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_n_BC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL #phi^{truth}_{n} BC", "#phi^{truth}_{n} of Outgoing Neutron BC", "#phi^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "02a_Phi_n_BC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_nFD_AC_truth_nFDpCD =
        hPlot1D("nFDpCD", "FD", "FD TL #phi^{truth}_{n} AC", "#phi^{truth}_{n} of Outgoing FD Neutron AC", "#phi^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "02b_Phi_nFD_AC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_nFD_BC_truth_nFDpCD =
        hPlot1D("nFDpCD", "FD", "FD TL #phi^{truth}_{n} BC", "#phi^{truth}_{n} of Outgoing FD Neutron AC", "#phi^{truth}_{n} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "02b_Phi_nFD_BC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_p_AC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL #phi^{truth}_{p} AC", "#phi^{truth}_{n} of Outgoing Proton AC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "03_Phi_p_AC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_p_BC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL #phi^{truth}_{p} BC", "#phi^{truth}_{n} of Outgoing Proton BC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "03_Phi_p_BC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pFD_AC_truth_nFDpCD =
        hPlot1D("nFDpCD", "FD", "FD TL #phi^{truth}_{p} AC", "#phi^{truth}_{p} of Outgoing FD Proton AC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "02b_Phi_pFD_AC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pFD_BC_truth_nFDpCD =
        hPlot1D("nFDpCD", "FD", "FD TL #phi^{truth}_{p} BC", "#phi^{truth}_{p} of Outgoing FD Proton BC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "02b_Phi_pFD_BC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pCD_AC_truth_nFDpCD =
        hPlot1D("nFDpCD", "CD", "CD TL #phi^{truth}_{p} AC", "#phi^{truth}_{p} of Outgoing CD Proton AC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "02b_Phi_pCD_AC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pCD_BC_truth_nFDpCD =
        hPlot1D("nFDpCD", "CD", "CD TL #phi^{truth}_{p} BC", "#phi^{truth}_{p} of Outgoing CD Proton BC", "#phi^{truth}_{p} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "02b_Phi_pCD_BC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_pip_AC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL #phi^{truth}_{#pi^{+}} AC", "#phi^{truth}_{#pi^{+}} of Outgoing #pi^{+} AC", "#phi^{truth}_{#pi^{+}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "04_Phi_piplus_AC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pip_BC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL #phi^{truth}_{#pi^{+}} BC", "#phi^{truth}_{#pi^{+}} of Outgoing #pi^{+} BC", "#phi^{truth}_{#pi^{+}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "04_Phi_piplus_BC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_pim_AC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL #phi^{truth}_{#pi^{-}} AC", "#phi^{truth}_{#pi^{-}} of Outgoing #pi^{-} AC", "#phi^{truth}_{#pi^{-}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "05_Phi_piminus_AC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pim_BC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL #phi^{truth}_{#pi^{-}} BC", "#phi^{truth}_{#pi^{-}} of Outgoing #pi^{-} BC", "#phi^{truth}_{#pi^{-}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "05_Phi_piminus_BC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_pi0_AC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL #phi^{truth}_{#pi^{0}} AC", "#phi^{truth}_{#pi^{0}} of Outgoing #pi^{0} AC", "#phi^{truth}_{#pi^{0}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "06_Phi_pi0_AC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_pi0_BC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL #phi^{truth}_{#pi^{0}} BC", "#phi^{truth}_{#pi^{0}} of Outgoing #pi^{0} BC", "#phi^{truth}_{#pi^{0}} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "06_Phi_pi0_BC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    hPlot1D hPhi_ph_AC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL #phi^{truth}_{#gamma} AC", "#phi^{truth}_{#gamma} of Outgoing #gamma AC", "#phi^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "07a_Phi_ph_AC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_ph_BC_truth_nFDpCD =
        hPlot1D("nFDpCD", "", "TL #phi^{truth}_{#gamma} BC", "#phi^{truth}_{#gamma} of Outgoing #gamma BC", "#phi^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "07a_Phi_hp_BC_truth_nFDpCD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_ph_AC_truth_nFDpCD_FD =
        hPlot1D("nFDpCD", "FD", "FD TL #phi^{truth}_{#gamma} AC", "#phi^{truth}_{#gamma} of FD Outgoing #gamma AC", "#phi^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "07b_Phi_ph_AC_truth_nFDpCD_FD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);
    hPlot1D hPhi_ph_BC_truth_nFDpCD_FD =
        hPlot1D("nFDpCD", "FD", "FD TL #phi^{truth}_{#gamma} BC", "#phi^{truth}_{#gamma} of FD Outgoing #gamma BC", "#phi^{truth}_{#gamma} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Phi_Eff_and_ACorr_nFDpCD_Directory"], "07b_Phi_hp_BC_truth_1n_FD", Phi_lboundary, Phi_uboundary, numTH1Dbins_Ang_eff_Plots);

    // TL fiducial cuts (nFDpCD)
    hPlot2D hnFD_Hit_map_nFDpCD_BEC =
        hPlot2D("nFDpCD", "FD", "FD neutron hit map BEC", "FD neutron hit map BEC", "x_{nFD}", "y_{nFD}", directories.Eff_and_ACorr_Directory_map["Neutron_FD_Hit_map_nFDpCD_Directory"],
                "01a_Neutron_FD_Hit_map_BEC_nFDpCD", -1.1, 1.1, -1.1, 1.1, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);
    hPlot2D hnFD_Hit_map_nFDpCD_AEC =
        hPlot2D("nFDpCD", "FD", "FD neutron hit map AEC", "FD neutron hit map AEC", "x_{nFD}", "y_{nFD}", directories.Eff_and_ACorr_Directory_map["Neutron_FD_Hit_map_nFDpCD_Directory"],
                "01b_Neutron_FD_Hit_map_AEC_nFDpCD", -1.1, 1.1, -1.1, 1.1, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);

    hPlot2D hTheta_nFD_vs_Phi_nFD_nFDpCD_BEC = hPlot2D("nFDpCD", "FD", "#theta_{nFD} vs. #phi_{nFD} BEC", "TL #theta_{nFD} vs. #phi_{nFD} BEC", "#phi_{nFD} [#circ]", "#theta_{nFD} [#circ]",
                                                       directories.Eff_and_ACorr_Directory_map["Neutron_FD_Hit_map_nFDpCD_Directory"], "02a_Theta_nFD_vs_Phi_nFD_BEC_nFDpCD", Phi_lboundary,
                                                       Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);
    hPlot2D hTheta_nFD_vs_Phi_nFD_nFDpCD_AEC = hPlot2D("nFDpCD", "FD", "#theta_{nFD} vs. #phi_{nFD} AEC", "TL #theta_{nFD} vs. #phi_{nFD} AEC", "#phi_{nFD} [#circ]", "#theta_{nFD} [#circ]",
                                                       directories.Eff_and_ACorr_Directory_map["Neutron_FD_Hit_map_nFDpCD_Directory"], "02b_Theta_nFD_vs_Phi_nFD_AEC_nFDpCD", Phi_lboundary,
                                                       Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);

    // Truth level theta vs. phi plots (nFDpCD)
    hPlot2D hTheta_e_vs_Phi_e_truth_nFDpCD = hPlot2D("nFDpCD", "", "TL #theta_{e} vs. #phi_{e}", "TL #theta_{e} vs. #phi_{e}", "#phi_{e} [#circ]", "#theta_{e} [#circ]",
                                                     directories.Eff_and_ACorr_Directory_map["Neutron_FD_Hit_map_nFDpCD_Directory"], "01_Theta_e_vs_Phi_e_truth_nFDpCD", Phi_lboundary,
                                                     Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Electron_Ang_eff_Plots, numTH2Dbins_Electron_Ang_eff_Plots);

    hPlot2D hTheta_nFD_vs_Phi_nFD_truth_nFDpCD =
        hPlot2D("nFDpCD", "FD", "TL #theta_{nFD} vs. #phi_{nFD}", "TL #theta_{nFD} vs. #phi_{nFD}", "#phi_{nFD} [#circ]", "#theta_{nFD} [#circ]",
                directories.Eff_and_ACorr_Directory_map["Neutron_FD_Hit_map_nFDpCD_Directory"], "02_Theta_nFD_vs_Phi_nFD_truth_nFDpCD", Phi_lboundary, Phi_uboundary, Theta_lboundary_FD,
                Theta_uboundary_FD, numTH2Dbins_Nucleon_Ang_eff_Plots, numTH2Dbins_Nucleon_Ang_eff_Plots);

    // ======================================================================================================================================================================
    // Acceptance maps histograms
    // ======================================================================================================================================================================

    // Acceptance maps histograms
    /* Acceptance maps are handled completely by the AMaps class */
    hPlot2D hElectronAMapBC =
        hPlot2D("", "", "Electron_AMap_BC", "Electron AMap BC", "#phi_{e} [#circ]", "#theta_{e} [#circ]", directories.AMaps_Directory_map["AMaps_BC_1e_cut_Directory"], "01_Electron_AMap_BC",
                Phi_lboundary, Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Electron_AMaps_Plots, numTH2Dbins_Electron_AMaps_Plots);
    hPlot2D hProtonAMapBC =
        hPlot2D("", "", "Proton_AMap_BC", "Proton AMap BC", "#phi_{p} [#circ]", "#theta_{p} [#circ]", directories.AMaps_Directory_map["AMaps_BC_1e_cut_Directory"], "02_Proton_AMap_BC",
                Phi_lboundary, Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hNeutronAMapBC =
        hPlot2D("", "", "Neutron_AMap_BC", "Neutron AMap BC", "#phi_{n} [#circ]", "#theta_{n} [#circ]", directories.AMaps_Directory_map["AMaps_BC_1e_cut_Directory"], "03_Neutron_AMap_BC",
                Phi_lboundary, Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hNucleonAMapBC =
        hPlot2D("", "", "Nucleon_AMap_BC", "Nucleon AMap BC", "#phi_{nuc} [#circ]", "#theta_{nuc} [#circ]", directories.AMaps_Directory_map["AMaps_BC_1e_cut_Directory"],
                "04_Nucleon_AMap_BC", Phi_lboundary, Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);

    hPlot1D hReco_P_e_AMaps = hPlot1D("1e cut", "FD", "Reco P_{e} used in AMaps", "Reco P_{e} used in AMaps", "P_{e} [GeV/c]", directories.AMaps_Directory_map["AMaps_1e_cut_Directory"],
                                      "01a_Reco_P_e_used_in_AMaps", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hTL_P_e_AMaps = hPlot1D("1e cut", "FD", "TL P_{e} used in AMaps", "TL P_{e} used in AMaps", "P_{e} [GeV/c]", directories.AMaps_Directory_map["AMaps_1e_cut_Directory"],
                                    "01b_TL_P_e_used_in_AMaps", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hReco_Theta_e_AMaps =
        hPlot1D("1e cut", "FD", "Reco #theta_{e} used in AMaps", "Reco #theta_{e} used in AMaps", "#theta_{e} [#circ]", directories.AMaps_Directory_map["AMaps_1e_cut_Directory"],
                "01c_Reco_Theta_e_used_in_AMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH1Dbins);
    hPlot1D hTL_Theta_e_AMaps =
        hPlot1D("1e cut", "FD", "TL #theta_{e} used in AMaps", "TL #theta_{e} used in AMaps", "#theta_{e} [#circ]", directories.AMaps_Directory_map["AMaps_1e_cut_Directory"],
                "01d_TL_Theta_e_used_in_AMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH1Dbins);
    hPlot1D hReco_Phi_e_AMaps = hPlot1D("1e cut", "FD", "Reco #phi_{e} used in AMaps", "Reco #phi_{e} used in AMaps", "#phi_{e} [#circ]",
                                        directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "01e_Reco_Phi_e_used_in_AMaps", Phi_lboundary, Phi_uboundary, numTH1Dbins);
    hPlot1D hTL_Phi_e_AMaps = hPlot1D("1e cut", "FD", "TL #phi_{e} used in AMaps", "TL #phi_{e} used in AMaps", "#phi_{e} [#circ]", directories.AMaps_Directory_map["AMaps_1e_cut_Directory"],
                                      "01f_TL_Phi_e_used_in_AMaps", Phi_lboundary, Phi_uboundary, numTH1Dbins);
    hPlot2D hReco_P_e_vs_Reco_Theta_e_AMap = hPlot2D("", "", "Reco_P_e_vs_Reco_Theta_e_AMap", "Reco P_{e} vs. Reco #theta_{e} used in AMaps", "P_{e} [GeV/c]", "#theta_{e} [#circ]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "01aa_Reco_P_e_vs_Reco_Theta_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                     ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_e_vs_Reco_Phi_e_AMap = hPlot2D("", "", "Reco_P_e_vs_Reco_Phi_e_AMap", "Reco P_{e} vs. Reco #phi_{e} used in AMaps", "P_{e} [GeV/c]", "#phi_{e} [#circ]",
                                                   directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "01ab_Reco_P_e_vs_Reco_Phi_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                   Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_e_vs_TL_Theta_e_AMap = hPlot2D("", "", "Reco_P_e_vs_TL_Theta_e_AMap", "Reco P_{e} vs. TL #theta_{e} used in AMaps", "P_{e} [GeV/c]", "#theta_{e} [#circ]",
                                                   directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "01ba_Reco_P_e_vs_TL_Theta_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                   ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_e_vs_TL_Phi_e_AMap = hPlot2D("", "", "Reco_P_e_vs_TL_Phi_e_AMap", "Reco P_{e} vs. TL #phi_{e} used in AMaps", "P_{e} [GeV/c]", "#phi_{e} [#circ]",
                                                 directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "01bb_Reco_P_e_vs_TL_Phi_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                 Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_e_vs_TL_Theta_e_AMap = hPlot2D("", "", "TL_P_e_vs_TL_Theta_e_AMap", "TL P_{e} vs. TL #theta_{e} used in AMaps", "P_{e} [GeV/c]", "#theta_{e} [#circ]",
                                                 directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "01ba_TL_P_e_vs_TL_Theta_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                 ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_e_vs_TL_Phi_e_AMap =
        hPlot2D("", "", "TL_P_e_vs_TL_Phi_e_AMap", "TL P_{e} vs. TL #phi_{e} used in AMaps", "P_{e} [GeV/c]", "#phi_{e} [#circ]", directories.AMaps_Directory_map["AMaps_1e_cut_Directory"],
                "01ab_TL_P_e_vs_TL_Phi_e_AMap", Momentum_lboundary, Momentum_uboundary, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);

    hPlot1D hReco_P_pFD_AMaps = hPlot1D("1e cut", "FD", "Reco P_{pFD} used in AMaps", "Reco P_{pFD} used in AMaps", "P_{pFD} [GeV/c]",
                                        directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02a_Reco_P_pFD_used_in_AMaps", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hTL_P_pFD_AMaps = hPlot1D("1e cut", "FD", "TL P_{pFD} used in AMaps", "TL P_{pFD} used in AMaps", "P_{pFD} [GeV/c]", directories.AMaps_Directory_map["AMaps_1e_cut_Directory"],
                                      "02b_TL_P_pFD_used_in_AMaps", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hReco_Theta_pFD_AMaps =
        hPlot1D("1e cut", "FD", "Reco #theta_{pFD} used in AMaps", "Reco #theta_{pFD} used in AMaps", "#theta_{pFD} [#circ]", directories.AMaps_Directory_map["AMaps_1e_cut_Directory"],
                "02c_Reco_Theta_pFD_used_in_AMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH1Dbins);
    hPlot1D hTL_Theta_pFD_AMaps =
        hPlot1D("1e cut", "FD", "TL #theta_{pFD} used in AMaps", "TL #theta_{pFD} used in AMaps", "#theta_{pFD} [#circ]", directories.AMaps_Directory_map["AMaps_1e_cut_Directory"],
                "02d_TL_Theta_pFD_used_in_AMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH1Dbins);
    hPlot1D hReco_Phi_pFD_AMaps = hPlot1D("1e cut", "FD", "Reco #phi_{pFD} used in AMaps", "Reco #phi_{pFD} used in AMaps", "#phi_{pFD} [#circ]",
                                          directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "01e_Reco_Phi_pFD_used_in_AMaps", -180, 180, numTH1Dbins);
    hPlot1D hTL_Phi_pFD_AMaps = hPlot1D("1e cut", "FD", "TL #phi_{pFD} used in AMaps", "TL #phi_{pFD} used in AMaps", "#phi_{pFD} [#circ]",
                                        directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "01f_TL_Phi_pFD_used_in_AMaps", -180, 180, numTH1Dbins);
    hPlot2D hReco_P_pFD_vs_Reco_Theta_pFD_AMap =
        hPlot2D("", "", "Reco_P_pFD_vs_Reco_Theta_pFD_AMap", "Reco P_{pFD} vs. Reco #theta_{pFD} used in AMaps", "P_{pFD} [GeV/c]", "#theta_{pFD} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02aa_Reco_P_pFD_vs_Reco_Theta_pFD_AMap", Momentum_lboundary, Momentum_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_pFD_vs_Reco_Phi_pFD_AMap = hPlot2D("", "", "Reco_P_pFD_vs_Reco_Phi_pFD_AMap", "Reco P_{pFD} vs. Reco #phi_{pFD} used in AMaps", "P_{pFD} [GeV/c]", "#phi_{pFD} [#circ]",
                                                       directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ab_Reco_P_pFD_vs_Reco_Phi_pFD_AMap", Momentum_lboundary,
                                                       Momentum_uboundary, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_pFD_vs_TL_Theta_pFD_AMap =
        hPlot2D("", "", "Reco_P_pFD_vs_TL_Theta_pFD_AMap", "Reco P_{pFD} vs. TL #theta_{pFD} used in AMaps", "P_{pFD} [GeV/c]", "#theta_{pFD} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ac_Reco_P_pFD_vs_TL_Theta_pFD_AMap", Momentum_lboundary, Momentum_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_pFD_vs_TL_Phi_pFD_AMap = hPlot2D("", "", "Reco_P_pFD_vs_TL_Phi_pFD_AMap", "Reco P_{pFD} vs. TL #phi_{pFD} used in AMaps", "P_{pFD} [GeV/c]", "#phi_{pFD} [#circ]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ad_Reco_P_pFD_vs_TL_Phi_pFD_AMap", Momentum_lboundary, Momentum_uboundary,
                                                     Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_pFD_vs_Reco_P_e_AMap = hPlot2D("", "", "Reco_P_pFD_vs_Reco_P_e_AMap", "Reco P_{pFD} vs. Reco P_{e} used in AMaps", "P_{pFD} [GeV/c]", "P_{e} [GeV/c]",
                                                   directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ae_Reco_P_pFD_vs_Reco_P_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                   Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_pFD_vs_TL_P_e_AMap = hPlot2D("", "", "Reco_P_pFD_vs_TL_P_e_AMap", "Reco P_{pFD} vs. TL P_{e} used in AMaps", "P_{pFD} [GeV/c]", "P_{e} [GeV/c]",
                                                 directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02af_Reco_P_pFD_vs_TL_P_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                 Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_pFD_vs_Reco_Theta_e_AMap =
        hPlot2D("", "", "Reco_P_pFD_vs_Reco_Theta_e_AMap", "Reco P_{pFD} vs. Reco #theta_{e} used in AMaps", "P_{pFD} [GeV/c]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ag_Reco_P_pFD_vs_Reco_Theta_e_AMap", Momentum_lboundary, Momentum_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_pFD_vs_Reco_Phi_e_AMap = hPlot2D("", "", "Reco_P_pFD_vs_Reco_Phi_e_AMap", "Reco P_{pFD} vs. Reco #phi_{e} used in AMaps", "P_{pFD} [GeV/c]", "#phi_{e} [#circ]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ah_Reco_P_pFD_vs_Reco_Phi_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                     Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_pFD_vs_TL_Theta_e_AMap = hPlot2D("", "", "Reco_P_pFD_vs_TL_Theta_e_AMap", "Reco P_{pFD} vs. TL #theta_{e} used in AMaps", "P_{pFD} [GeV/c]", "#theta_{e} [#circ]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ai_Reco_P_pFD_vs_TL_Theta_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                     ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_pFD_vs_TL_Phi_e_AMap = hPlot2D("", "", "Reco_P_pFD_vs_TL_Phi_e_AMap", "Reco P_{pFD} vs. TL #phi_{e} used in AMaps", "P_{pFD} [GeV/c]", "#phi_{e} [#circ]",
                                                   directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02aj_Reco_P_pFD_vs_TL_Phi_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                   Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_pFD_vs_Reco_Theta_pFD_AMap =
        hPlot2D("", "", "TL_P_pFD_vs_Reco_Theta_pFD_AMap", "TL P_{pFD} vs. Reco #theta_{pFD} used in AMaps", "P_{pFD} [GeV/c]", "#theta_{pFD} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ba_TL_P_pFD_vs_Reco_Theta_pFD_AMap", Momentum_lboundary, Momentum_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_pFD_vs_TL_Theta_pFD_AMap = hPlot2D("", "", "TL_P_pFD_vs_TL_Theta_pFD_AMap", "TL P_{pFD} vs. TL #theta_{pFD} used in AMaps", "P_{pFD} [GeV/c]", "#theta_{pFD} [#circ]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02bb_TL_P_pFD_vs_TL_Theta_pFD_AMap", Momentum_lboundary, Momentum_uboundary,
                                                     ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_pFD_vs_TL_Phi_pFD_AMap = hPlot2D("", "", "TL_P_pFD_vs_TL_Phi_pFD_AMap", "TL P_{pFD} vs. TL #phi_{pFD} used in AMaps", "P_{pFD} [GeV/c]", "#phi_{pFD} [#circ]",
                                                   directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02bc_TL_P_pFD_vs_TL_Phi_pFD_AMap", Momentum_lboundary, Momentum_uboundary,
                                                   Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_pFD_vs_TL_P_e_AMap = hPlot2D("", "", "TL_P_pFD_vs_TL_P_e_AMap", "TL P_{pFD} vs. Reco P_{e} used in AMaps", "P_{pFD} [GeV/c]", "P_{e} [GeV/c]",
                                               directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02bd_TL_P_pFD_vs_TL_P_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                               ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_pFD_vs_Reco_Theta_e_AMap = hPlot2D("", "", "TL_P_pFD_vs_Reco_Theta_e_AMap", "TL P_{pFD} vs. Reco #theta_{e} used in AMaps", "P_{pFD} [GeV/c]", "#theta_{e} [#circ]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02be_TL_P_pFD_vs_Reco_Theta_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                     ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_pFD_vs_TL_Theta_e_AMap = hPlot2D("", "", "TL_P_pFD_vs_TL_Theta_e_AMap", "TL P_{pFD} vs. TL #theta_{e} used in AMaps", "P_{pFD} [GeV/c]", "#theta_{e} [#circ]",
                                                   directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02bf_TL_P_pFD_vs_TL_Theta_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                   ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_pFD_vs_TL_Phi_e_AMap = hPlot2D("", "", "TL_P_pFD_vs_TL_Phi_e_AMap", "TL P_{pFD} vs. TL #phi_{e} used in AMaps", "P_{pFD} [GeV/c]", "#phi_{e} [#circ]",
                                                 directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02bg_TL_P_pFD_vs_TL_Phi_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                 Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_pFD_vs_Reco_Phi_pFD_AMap =
        hPlot2D("", "", "Reco_Theta_pFD_vs_Reco_Phi_pFD_AMap", "Reco #theta_{pFD} vs. Reco #phi_{pFD} used in AMaps", "#theta_{pFD} [#circ]", "#phi_{pFD} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ca_Reco_Theta_pFD_vs_Reco_Phi_pFD_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_pFD_vs_TL_Phi_pFD_AMap =
        hPlot2D("", "", "Reco_Theta_pFD_vs_TL_Phi_pFD_AMap", "Reco #theta_{pFD} vs. TL #phi_{pFD} used in AMaps", "#theta_{pFD} [#circ]", "#phi_{pFD} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02cb_Reco_Theta_pFD_vs_TL_Phi_pFD_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), Phi_lboundary,
                Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_pFD_vs_Reco_P_e_AMap = hPlot2D("", "", "Reco_Theta_pFD_vs_Reco_P_e_AMap", "Reco #theta_{pFD} vs. Reco P_{e} used in AMaps", "#theta_{pFD} [#circ]", "P_{e} [GeV/c]",
                                                       directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02cc_Reco_Theta_pFD_vs_Reco_P_e_AMap", ThetaFD_AMaps.GetLowerCut(),
                                                       ThetaFD_AMaps.GetUpperCut(), Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_pFD_vs_TL_P_e_AMap = hPlot2D("", "", "Reco_Theta_pFD_vs_TL_P_e_AMap", "Reco #theta_{pFD} vs. TL P_{e} used in AMaps", "#theta_{pFD} [#circ]", "P_{e} [GeV/c]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02cd_Reco_Theta_pFD_vs_TL_P_e_AMap", ThetaFD_AMaps.GetLowerCut(),
                                                     ThetaFD_AMaps.GetUpperCut(), Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_pFD_vs_Reco_Theta_e_AMap =
        hPlot2D("", "", "Reco_Theta_pFD_vs_Reco_Theta_e_AMap", "Reco #theta_{pFD} vs. Reco #theta_{e} used in AMaps", "#theta_{pFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ce_Reco_Theta_pFD_vs_Reco_Theta_e_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_pFD_vs_Reco_Phi_e_AMap =
        hPlot2D("", "", "Reco_Theta_pFD_vs_Reco_Phi_e_AMap", "Reco #theta_{pFD} vs. Reco #phi_{e} used in AMaps", "#theta_{pFD} [#circ]", "#phi_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02cf_Reco_Theta_pFD_vs_Reco_Phi_e_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), Phi_lboundary,
                Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_pFD_vs_TL_Theta_e_AMap =
        hPlot2D("", "", "Reco_Theta_pFD_vs_TL_Theta_e_AMap", "Reco #theta_{pFD} vs. TL #theta_{e} used in AMaps", "#theta_{pFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02cg_Reco_Theta_pFD_vs_TL_Theta_e_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_pFD_vs_TL_Phi_e_AMap =
        hPlot2D("", "", "Reco_Theta_pFD_vs_TL_Phi_e_AMap", "Reco #theta_{pFD} vs. TL #phi_{e} used in AMaps", "#theta_{pFD} [#circ]", "#phi_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ch_Reco_Theta_pFD_vs_TL_Phi_e_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), Phi_lboundary,
                Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_pFD_vs_TL_Phi_pFD_AMap =
        hPlot2D("", "", "TL_Theta_pFD_vs_TL_Phi_pFD_AMap", "TL #theta_{pFD} vs. Reco #phi_{pFD} used in AMaps", "#theta_{pFD} [#circ]", "#phi_{pFD} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02da_TL_Theta_pFD_vs_TL_Phi_pFD_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), Phi_lboundary,
                Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_pFD_vs_TL_P_e_AMap =
        hPlot2D("", "", "TL_Theta_pFD_vs_TL_P_e_AMap", "TL #theta_{pFD} vs. Reco P_{e} used in AMaps", "#theta_{pFD} [#circ]", "P_{e} [GeV/c]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02db_TL_Theta_pFD_vs_TL_P_e_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_pFD_vs_Reco_Theta_e_AMap =
        hPlot2D("", "", "TL_Theta_pFD_vs_Reco_Theta_e_AMap", "TL #theta_{pFD} vs. Reco #theta_{e} used in AMaps", "#theta_{pFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02dc_TL_Theta_pFD_vs_Reco_Theta_e_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_pFD_vs_TL_Phi_e_AMap = hPlot2D("", "", "TL_Theta_pFD_vs_TL_Phi_e_AMap", "TL #theta_{pFD} vs. Reco #phi_{e} used in AMaps", "#theta_{pFD} [#circ]", "#phi_{e} [#circ]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02de_TL_Theta_pFD_vs_TL_Phi_e_AMap", ThetaFD_AMaps.GetLowerCut(),
                                                     ThetaFD_AMaps.GetUpperCut(), Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_pFD_vs_TL_Theta_e_AMap =
        hPlot2D("", "", "TL_Theta_pFD_vs_TL_Theta_e_AMap", "TL #theta_{pFD} vs. TL #theta_{e} used in AMaps", "#theta_{pFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02df_TL_Theta_pFD_vs_TL_Theta_e_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_pFD_vs_Reco_Phi_pFD_AMap = hPlot2D("", "", "Reco_Phi_pFD_vs_Reco_Phi_pFD_AMap", "Reco #phi_{pFD} vs. Reco #phi_{pFD} used in AMaps", "#phi_{pFD} [#circ]",
                                                         "#phi_{pFD} [#circ]", directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ea_Reco_Phi_pFD_vs_Reco_Phi_pFD_AMap",
                                                         Phi_lboundary, Phi_uboundary, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_pFD_vs_TL_Phi_pFD_AMap = hPlot2D("", "", "Reco_Phi_pFD_vs_TL_Phi_pFD_AMap", "Reco #phi_{pFD} vs. TL #phi_{pFD} used in AMaps", "#phi_{pFD} [#circ]",
                                                       "#phi_{pFD} [#circ]", directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02eb_Reco_Phi_pFD_vs_TL_Phi_pFD_AMap", Phi_lboundary,
                                                       Phi_uboundary, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_pFD_vs_Reco_P_e_AMap = hPlot2D("", "", "Reco_Phi_pFD_vs_Reco_P_e_AMap", "Reco #phi_{pFD} vs. Reco P_{e} used in AMaps", "#phi_{pFD} [#circ]", "P_{e} [GeV/c]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ec_Reco_Phi_pFD_vs_Reco_P_e_AMap", Phi_lboundary, Phi_uboundary,
                                                     Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_pFD_vs_TL_P_e_AMap = hPlot2D("", "", "Reco_Phi_pFD_vs_TL_P_e_AMap", "Reco #phi_{pFD} vs. TL P_{e} used in AMaps", "#phi_{pFD} [#circ]", "P_{e} [GeV/c]",
                                                   directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ed_Reco_Phi_pFD_vs_TL_P_e_AMap", Phi_lboundary, Phi_uboundary,
                                                   Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_pFD_vs_Reco_Theta_e_AMap =
        hPlot2D("", "", "Reco_Phi_pFD_vs_Reco_Theta_e_AMap", "Reco #phi_{pFD} vs. Reco #theta_{e} used in AMaps", "#phi_{pFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ee_Reco_Phi_pFD_vs_Reco_Theta_e_AMap", Phi_lboundary, Phi_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_pFD_vs_Reco_Phi_e_AMap = hPlot2D("", "", "Reco_Phi_pFD_vs_Reco_Phi_e_AMap", "Reco #phi_{pFD} vs. Reco #phi_{e} used in AMaps", "#phi_{pFD} [#circ]", "#phi_{e} [#circ]",
                                                       directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ef_Reco_Phi_pFD_vs_Reco_Phi_e_AMap", Phi_lboundary, Phi_uboundary,
                                                       Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_pFD_vs_TL_Theta_e_AMap =
        hPlot2D("", "", "Reco_Phi_pFD_vs_TL_Theta_e_AMap", "Reco #phi_{pFD} vs. TL #theta_{e} used in AMaps", "#phi_{pFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02eg_Reco_Phi_pFD_vs_TL_Theta_e_AMap", Phi_lboundary, Phi_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_pFD_vs_TL_Phi_e_AMap = hPlot2D("", "", "Reco_Phi_pFD_vs_TL_Phi_e_AMap", "Reco #phi_{pFD} vs. TL #phi_{e} used in AMaps", "#phi_{pFD} [#circ]", "#phi_{e} [#circ]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ef_Reco_Phi_pFD_vs_TL_Phi_e_AMap", Phi_lboundary, Phi_uboundary,
                                                     Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_pFD_vs_TL_Phi_pFD_AMap = hPlot2D("", "", "TL_Phi_pFD_vs_TL_Phi_pFD_AMap", "TL #phi_{pFD} vs. Reco #phi_{pFD} used in AMaps", "#phi_{pFD} [#circ]", "#phi_{pFD} [#circ]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02fa_TL_Phi_pFD_vs_TL_Phi_pFD_AMap", Phi_lboundary, Phi_uboundary,
                                                     Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_pFD_vs_TL_P_e_AMap = hPlot2D("", "", "TL_Phi_pFD_vs_TL_P_e_AMap", "TL #phi_{pFD} vs. Reco P_{e} used in AMaps", "#phi_{pFD} [#circ]", "P_{e} [GeV/c]",
                                                 directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02fb_TL_Phi_pFD_vs_TL_P_e_AMap", Phi_lboundary, Phi_uboundary,
                                                 ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_pFD_vs_Reco_Theta_e_AMap =
        hPlot2D("", "", "TL_Phi_pFD_vs_Reco_Theta_e_AMap", "TL #phi_{pFD} vs. Reco #theta_{e} used in AMaps", "#phi_{pFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02fc_TL_Phi_pFD_vs_Reco_Theta_e_AMap", Phi_lboundary, Phi_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_pFD_vs_TL_Theta_e_AMap = hPlot2D("", "", "TL_Phi_pFD_vs_TL_Theta_e_AMap", "TL #phi_{pFD} vs. TL #theta_{e} used in AMaps", "#phi_{pFD} [#circ]", "#theta_{e} [#circ]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02fd_TL_Phi_pFD_vs_TL_Theta_e_AMap", Phi_lboundary, Phi_uboundary,
                                                     ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_pFD_vs_TL_Phi_e_AMap = hPlot2D("", "", "TL_Phi_pFD_vs_TL_Phi_e_AMap", "TL #phi_{pFD} vs. TL #phi_{e} used in AMaps", "#phi_{pFD} [#circ]", "#phi_{e} [#circ]",
                                                   directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02fh_TL_Phi_pFD_vs_TL_Phi_e_AMap", Phi_lboundary, Phi_uboundary, Phi_lboundary,
                                                   Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);

    hPlot1D hReco_P_nFD_AMaps = hPlot1D("1e cut", "FD", "Reco P_{nFD} used in AMaps", "Reco P_{nFD} used in AMaps", "P_{nFD} [GeV/c]",
                                        directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "03a_Reco_P_nFD_used_in_AMaps", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hTL_P_nFD_AMaps = hPlot1D("1e cut", "FD", "TL P_{nFD} used in AMaps", "TL P_{nFD} used in AMaps", "P_{nFD} [GeV/c]", directories.AMaps_Directory_map["AMaps_1e_cut_Directory"],
                                      "03b_TL_P_nFD_used_in_AMaps", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hReco_Theta_nFD_AMaps =
        hPlot1D("1e cut", "FD", "Reco #theta_{nFD} used in AMaps", "Reco #theta_{nFD} used in AMaps", "#theta_{nFD} [#circ]", directories.AMaps_Directory_map["AMaps_1e_cut_Directory"],
                "03c_Reco_Theta_nFD_used_in_AMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH1Dbins);
    hPlot1D hTL_Theta_nFD_AMaps =
        hPlot1D("1e cut", "FD", "TL #theta_{nFD} used in AMaps", "TL #theta_{nFD} used in AMaps", "#theta_{nFD} [#circ]", directories.AMaps_Directory_map["AMaps_1e_cut_Directory"],
                "03d_TL_Theta_nFD_used_in_AMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH1Dbins);
    hPlot1D hReco_Phi_nFD_AMaps = hPlot1D("1e cut", "FD", "Reco #phi_{nFD} used in AMaps", "Reco #phi_{nFD} used in AMaps", "#phi_{nFD} [#circ]",
                                          directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "01e_Reco_Phi_nFD_used_in_AMaps", -180, 180, numTH1Dbins);
    hPlot1D hTL_Phi_nFD_AMaps = hPlot1D("1e cut", "FD", "TL #phi_{nFD} used in AMaps", "TL #phi_{nFD} used in AMaps", "#phi_{nFD} [#circ]",
                                        directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "01f_TL_Phi_nFD_used_in_AMaps", -180, 180, numTH1Dbins);
    hPlot2D hReco_P_nFD_vs_Reco_Theta_nFD_AMap =
        hPlot2D("", "", "Reco_P_nFD_vs_Reco_Theta_nFD_AMap", "Reco P_{nFD} vs. Reco #theta_{nFD} used in AMaps", "P_{nFD} [GeV/c]", "#theta_{nFD} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02aa_Reco_P_nFD_vs_Reco_Theta_nFD_AMap", Momentum_lboundary, Momentum_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_nFD_vs_Reco_Phi_nFD_AMap = hPlot2D("", "", "Reco_P_nFD_vs_Reco_Phi_nFD_AMap", "Reco P_{nFD} vs. Reco #phi_{nFD} used in AMaps", "P_{nFD} [GeV/c]", "#phi_{nFD} [#circ]",
                                                       directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ab_Reco_P_nFD_vs_Reco_Phi_nFD_AMap", Momentum_lboundary,
                                                       Momentum_uboundary, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_nFD_vs_TL_Theta_nFD_AMap =
        hPlot2D("", "", "Reco_P_nFD_vs_TL_Theta_nFD_AMap", "Reco P_{nFD} vs. TL #theta_{nFD} used in AMaps", "P_{nFD} [GeV/c]", "#theta_{nFD} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ac_Reco_P_nFD_vs_TL_Theta_nFD_AMap", Momentum_lboundary, Momentum_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_nFD_vs_TL_Phi_nFD_AMap = hPlot2D("", "", "Reco_P_nFD_vs_TL_Phi_nFD_AMap", "Reco P_{nFD} vs. TL #phi_{nFD} used in AMaps", "P_{nFD} [GeV/c]", "#phi_{nFD} [#circ]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ad_Reco_P_nFD_vs_TL_Phi_nFD_AMap", Momentum_lboundary, Momentum_uboundary,
                                                     Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_nFD_vs_Reco_P_e_AMap = hPlot2D("", "", "Reco_P_nFD_vs_Reco_P_e_AMap", "Reco P_{nFD} vs. Reco P_{e} used in AMaps", "P_{nFD} [GeV/c]", "P_{e} [GeV/c]",
                                                   directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ae_Reco_P_nFD_vs_Reco_P_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                   Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_nFD_vs_TL_P_e_AMap = hPlot2D("", "", "Reco_P_nFD_vs_TL_P_e_AMap", "Reco P_{nFD} vs. TL P_{e} used in AMaps", "P_{nFD} [GeV/c]", "P_{e} [GeV/c]",
                                                 directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02af_Reco_P_nFD_vs_TL_P_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                 Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_nFD_vs_Reco_Theta_e_AMap =
        hPlot2D("", "", "Reco_P_nFD_vs_Reco_Theta_e_AMap", "Reco P_{nFD} vs. Reco #theta_{e} used in AMaps", "P_{nFD} [GeV/c]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ag_Reco_P_nFD_vs_Reco_Theta_e_AMap", Momentum_lboundary, Momentum_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_nFD_vs_Reco_Phi_e_AMap = hPlot2D("", "", "Reco_P_nFD_vs_Reco_Phi_e_AMap", "Reco P_{nFD} vs. Reco #phi_{e} used in AMaps", "P_{nFD} [GeV/c]", "#phi_{e} [#circ]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ah_Reco_P_nFD_vs_Reco_Phi_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                     Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_nFD_vs_TL_Theta_e_AMap = hPlot2D("", "", "Reco_P_nFD_vs_TL_Theta_e_AMap", "Reco P_{nFD} vs. TL #theta_{e} used in AMaps", "P_{nFD} [GeV/c]", "#theta_{e} [#circ]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ai_Reco_P_nFD_vs_TL_Theta_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                     ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_nFD_vs_TL_Phi_e_AMap = hPlot2D("", "", "Reco_P_nFD_vs_TL_Phi_e_AMap", "Reco P_{nFD} vs. TL #phi_{e} used in AMaps", "P_{nFD} [GeV/c]", "#phi_{e} [#circ]",
                                                   directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02aj_Reco_P_nFD_vs_TL_Phi_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                   Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_nFD_vs_Reco_Theta_nFD_AMap =
        hPlot2D("", "", "TL_P_nFD_vs_Reco_Theta_nFD_AMap", "TL P_{nFD} vs. Reco #theta_{nFD} used in AMaps", "P_{nFD} [GeV/c]", "#theta_{nFD} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ba_TL_P_nFD_vs_Reco_Theta_nFD_AMap", Momentum_lboundary, Momentum_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_nFD_vs_TL_Theta_nFD_AMap = hPlot2D("", "", "TL_P_nFD_vs_TL_Theta_nFD_AMap", "TL P_{nFD} vs. TL #theta_{nFD} used in AMaps", "P_{nFD} [GeV/c]", "#theta_{nFD} [#circ]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02bb_TL_P_nFD_vs_TL_Theta_nFD_AMap", Momentum_lboundary, Momentum_uboundary,
                                                     ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_nFD_vs_TL_Phi_nFD_AMap = hPlot2D("", "", "TL_P_nFD_vs_TL_Phi_nFD_AMap", "TL P_{nFD} vs. TL #phi_{nFD} used in AMaps", "P_{nFD} [GeV/c]", "#phi_{nFD} [#circ]",
                                                   directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02bc_TL_P_nFD_vs_TL_Phi_nFD_AMap", Momentum_lboundary, Momentum_uboundary,
                                                   Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_nFD_vs_TL_P_e_AMap = hPlot2D("", "", "TL_P_nFD_vs_TL_P_e_AMap", "TL P_{nFD} vs. Reco P_{e} used in AMaps", "P_{nFD} [GeV/c]", "P_{e} [GeV/c]",
                                               directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02bd_TL_P_nFD_vs_TL_P_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                               ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_nFD_vs_Reco_Theta_e_AMap = hPlot2D("", "", "TL_P_nFD_vs_Reco_Theta_e_AMap", "TL P_{nFD} vs. Reco #theta_{e} used in AMaps", "P_{nFD} [GeV/c]", "#theta_{e} [#circ]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02be_TL_P_nFD_vs_Reco_Theta_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                     ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_nFD_vs_TL_Theta_e_AMap = hPlot2D("", "", "TL_P_nFD_vs_TL_Theta_e_AMap", "TL P_{nFD} vs. TL #theta_{e} used in AMaps", "P_{nFD} [GeV/c]", "#theta_{e} [#circ]",
                                                   directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02bf_TL_P_nFD_vs_TL_Theta_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                   ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_nFD_vs_TL_Phi_e_AMap = hPlot2D("", "", "TL_P_nFD_vs_TL_Phi_e_AMap", "TL P_{nFD} vs. TL #phi_{e} used in AMaps", "P_{nFD} [GeV/c]", "#phi_{e} [#circ]",
                                                 directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02bg_TL_P_nFD_vs_TL_Phi_e_AMap", Momentum_lboundary, Momentum_uboundary,
                                                 Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_nFD_vs_Reco_Phi_nFD_AMap =
        hPlot2D("", "", "Reco_Theta_nFD_vs_Reco_Phi_nFD_AMap", "Reco #theta_{nFD} vs. Reco #phi_{nFD} used in AMaps", "#theta_{nFD} [#circ]", "#phi_{nFD} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ca_Reco_Theta_nFD_vs_Reco_Phi_nFD_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_nFD_vs_TL_Phi_nFD_AMap =
        hPlot2D("", "", "Reco_Theta_nFD_vs_TL_Phi_nFD_AMap", "Reco #theta_{nFD} vs. TL #phi_{nFD} used in AMaps", "#theta_{nFD} [#circ]", "#phi_{nFD} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02cb_Reco_Theta_nFD_vs_TL_Phi_nFD_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), Phi_lboundary,
                Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_nFD_vs_Reco_P_e_AMap = hPlot2D("", "", "Reco_Theta_nFD_vs_Reco_P_e_AMap", "Reco #theta_{nFD} vs. Reco P_{e} used in AMaps", "#theta_{nFD} [#circ]", "P_{e} [GeV/c]",
                                                       directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02cc_Reco_Theta_nFD_vs_Reco_P_e_AMap", ThetaFD_AMaps.GetLowerCut(),
                                                       ThetaFD_AMaps.GetUpperCut(), Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_nFD_vs_TL_P_e_AMap = hPlot2D("", "", "Reco_Theta_nFD_vs_TL_P_e_AMap", "Reco #theta_{nFD} vs. TL P_{e} used in AMaps", "#theta_{nFD} [#circ]", "P_{e} [GeV/c]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02cd_Reco_Theta_nFD_vs_TL_P_e_AMap", ThetaFD_AMaps.GetLowerCut(),
                                                     ThetaFD_AMaps.GetUpperCut(), Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_nFD_vs_Reco_Theta_e_AMap =
        hPlot2D("", "", "Reco_Theta_nFD_vs_Reco_Theta_e_AMap", "Reco #theta_{nFD} vs. Reco #theta_{e} used in AMaps", "#theta_{nFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ce_Reco_Theta_nFD_vs_Reco_Theta_e_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_nFD_vs_Reco_Phi_e_AMap =
        hPlot2D("", "", "Reco_Theta_nFD_vs_Reco_Phi_e_AMap", "Reco #theta_{nFD} vs. Reco #phi_{e} used in AMaps", "#theta_{nFD} [#circ]", "#phi_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02cf_Reco_Theta_nFD_vs_Reco_Phi_e_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), Phi_lboundary,
                Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_nFD_vs_TL_Theta_e_AMap =
        hPlot2D("", "", "Reco_Theta_nFD_vs_TL_Theta_e_AMap", "Reco #theta_{nFD} vs. TL #theta_{e} used in AMaps", "#theta_{nFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02cg_Reco_Theta_nFD_vs_TL_Theta_e_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_nFD_vs_TL_Phi_e_AMap =
        hPlot2D("", "", "Reco_Theta_nFD_vs_TL_Phi_e_AMap", "Reco #theta_{nFD} vs. TL #phi_{e} used in AMaps", "#theta_{nFD} [#circ]", "#phi_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ch_Reco_Theta_nFD_vs_TL_Phi_e_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), Phi_lboundary,
                Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_nFD_vs_TL_Phi_nFD_AMap =
        hPlot2D("", "", "TL_Theta_nFD_vs_TL_Phi_nFD_AMap", "TL #theta_{nFD} vs. Reco #phi_{nFD} used in AMaps", "#theta_{nFD} [#circ]", "#phi_{nFD} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02da_TL_Theta_nFD_vs_TL_Phi_nFD_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), Phi_lboundary,
                Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_nFD_vs_TL_P_e_AMap =
        hPlot2D("", "", "TL_Theta_nFD_vs_TL_P_e_AMap", "TL #theta_{nFD} vs. Reco P_{e} used in AMaps", "#theta_{nFD} [#circ]", "P_{e} [GeV/c]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02db_TL_Theta_nFD_vs_TL_P_e_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_nFD_vs_Reco_Theta_e_AMap =
        hPlot2D("", "", "TL_Theta_nFD_vs_Reco_Theta_e_AMap", "TL #theta_{nFD} vs. Reco #theta_{e} used in AMaps", "#theta_{nFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02dc_TL_Theta_nFD_vs_Reco_Theta_e_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_nFD_vs_TL_Phi_e_AMap = hPlot2D("", "", "TL_Theta_nFD_vs_TL_Phi_e_AMap", "TL #theta_{nFD} vs. Reco #phi_{e} used in AMaps", "#theta_{nFD} [#circ]", "#phi_{e} [#circ]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02de_TL_Theta_nFD_vs_TL_Phi_e_AMap", ThetaFD_AMaps.GetLowerCut(),
                                                     ThetaFD_AMaps.GetUpperCut(), Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_nFD_vs_TL_Theta_e_AMap =
        hPlot2D("", "", "TL_Theta_nFD_vs_TL_Theta_e_AMap", "TL #theta_{nFD} vs. TL #theta_{e} used in AMaps", "#theta_{nFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02df_TL_Theta_nFD_vs_TL_Theta_e_AMap", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_nFD_vs_Reco_Phi_nFD_AMap = hPlot2D("", "", "Reco_Phi_nFD_vs_Reco_Phi_nFD_AMap", "Reco #phi_{nFD} vs. Reco #phi_{nFD} used in AMaps", "#phi_{nFD} [#circ]",
                                                         "#phi_{nFD} [#circ]", directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ea_Reco_Phi_nFD_vs_Reco_Phi_nFD_AMap",
                                                         Phi_lboundary, Phi_uboundary, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_nFD_vs_TL_Phi_nFD_AMap = hPlot2D("", "", "Reco_Phi_nFD_vs_TL_Phi_nFD_AMap", "Reco #phi_{nFD} vs. TL #phi_{nFD} used in AMaps", "#phi_{nFD} [#circ]",
                                                       "#phi_{nFD} [#circ]", directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02eb_Reco_Phi_nFD_vs_TL_Phi_nFD_AMap", Phi_lboundary,
                                                       Phi_uboundary, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_nFD_vs_Reco_P_e_AMap = hPlot2D("", "", "Reco_Phi_nFD_vs_Reco_P_e_AMap", "Reco #phi_{nFD} vs. Reco P_{e} used in AMaps", "#phi_{nFD} [#circ]", "P_{e} [GeV/c]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ec_Reco_Phi_nFD_vs_Reco_P_e_AMap", Phi_lboundary, Phi_uboundary,
                                                     Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_nFD_vs_TL_P_e_AMap = hPlot2D("", "", "Reco_Phi_nFD_vs_TL_P_e_AMap", "Reco #phi_{nFD} vs. TL P_{e} used in AMaps", "#phi_{nFD} [#circ]", "P_{e} [GeV/c]",
                                                   directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ed_Reco_Phi_nFD_vs_TL_P_e_AMap", Phi_lboundary, Phi_uboundary,
                                                   Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_nFD_vs_Reco_Theta_e_AMap =
        hPlot2D("", "", "Reco_Phi_nFD_vs_Reco_Theta_e_AMap", "Reco #phi_{nFD} vs. Reco #theta_{e} used in AMaps", "#phi_{nFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ee_Reco_Phi_nFD_vs_Reco_Theta_e_AMap", Phi_lboundary, Phi_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_nFD_vs_Reco_Phi_e_AMap = hPlot2D("", "", "Reco_Phi_nFD_vs_Reco_Phi_e_AMap", "Reco #phi_{nFD} vs. Reco #phi_{e} used in AMaps", "#phi_{nFD} [#circ]", "#phi_{e} [#circ]",
                                                       directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ef_Reco_Phi_nFD_vs_Reco_Phi_e_AMap", Phi_lboundary, Phi_uboundary,
                                                       Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_nFD_vs_TL_Theta_e_AMap =
        hPlot2D("", "", "Reco_Phi_nFD_vs_TL_Theta_e_AMap", "Reco #phi_{nFD} vs. TL #theta_{e} used in AMaps", "#phi_{nFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02eg_Reco_Phi_nFD_vs_TL_Theta_e_AMap", Phi_lboundary, Phi_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_nFD_vs_TL_Phi_e_AMap = hPlot2D("", "", "Reco_Phi_nFD_vs_TL_Phi_e_AMap", "Reco #phi_{nFD} vs. TL #phi_{e} used in AMaps", "#phi_{nFD} [#circ]", "#phi_{e} [#circ]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02ef_Reco_Phi_nFD_vs_TL_Phi_e_AMap", Phi_lboundary, Phi_uboundary,
                                                     Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_nFD_vs_TL_Phi_nFD_AMap = hPlot2D("", "", "TL_Phi_nFD_vs_TL_Phi_nFD_AMap", "TL #phi_{nFD} vs. Reco #phi_{nFD} used in AMaps", "#phi_{nFD} [#circ]", "#phi_{nFD} [#circ]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02fa_TL_Phi_nFD_vs_TL_Phi_nFD_AMap", Phi_lboundary, Phi_uboundary,
                                                     Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_nFD_vs_TL_P_e_AMap = hPlot2D("", "", "TL_Phi_nFD_vs_TL_P_e_AMap", "TL #phi_{nFD} vs. Reco P_{e} used in AMaps", "#phi_{nFD} [#circ]", "P_{e} [GeV/c]",
                                                 directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02fb_TL_Phi_nFD_vs_TL_P_e_AMap", Phi_lboundary, Phi_uboundary,
                                                 ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_nFD_vs_Reco_Theta_e_AMap =
        hPlot2D("", "", "TL_Phi_nFD_vs_Reco_Theta_e_AMap", "TL #phi_{nFD} vs. Reco #theta_{e} used in AMaps", "#phi_{nFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02fc_TL_Phi_nFD_vs_Reco_Theta_e_AMap", Phi_lboundary, Phi_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_nFD_vs_TL_Theta_e_AMap = hPlot2D("", "", "TL_Phi_nFD_vs_TL_Theta_e_AMap", "TL #phi_{nFD} vs. TL #theta_{e} used in AMaps", "#phi_{nFD} [#circ]", "#theta_{e} [#circ]",
                                                     directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02fd_TL_Phi_nFD_vs_TL_Theta_e_AMap", Phi_lboundary, Phi_uboundary,
                                                     ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_nFD_vs_TL_Phi_e_AMap = hPlot2D("", "", "TL_Phi_nFD_vs_TL_Phi_e_AMap", "TL #phi_{nFD} vs. TL #phi_{e} used in AMaps", "#phi_{nFD} [#circ]", "#phi_{e} [#circ]",
                                                   directories.AMaps_Directory_map["AMaps_1e_cut_Directory"], "02fh_TL_Phi_nFD_vs_TL_Phi_e_AMap", Phi_lboundary, Phi_uboundary, Phi_lboundary,
                                                   Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);

    hPlot2D hElectronAMapBCwKC =
        hPlot2D("", "", "Electron_AMap_BCwKC", "Electron AMap BC wKC", "#phi_{e} [#circ]", "#theta_{e} [#circ]", directories.AMaps_Directory_map["WMaps_BC_1e_cut_Directory"],
                "01_Electron_AMap_BCwKC", Phi_lboundary, Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Electron_AMaps_Plots, numTH2Dbins_Electron_AMaps_Plots);
    hPlot2D hProtonAMapBCwKC =
        hPlot2D("", "", "Proton_AMap_BCwKC", "Proton AMap BC wKC", "#phi_{p} [#circ]", "#theta_{p} [#circ]", directories.AMaps_Directory_map["WMaps_BC_1e_cut_Directory"],
                "02_Proton_AMap_BCwKC", Phi_lboundary, Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hNeutronAMapBCwKC =
        hPlot2D("", "", "Neutron_AMap_BCwKC", "Neutron AMap BC wKC", "#phi_{n} [#circ]", "#theta_{n} [#circ]", directories.AMaps_Directory_map["WMaps_BC_1e_cut_Directory"],
                "03_Neutron_AMap_BCwKC", Phi_lboundary, Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hNucleonAMapBCwKC =
        hPlot2D("", "", "Nucleon_AMap_BCwKC", "Nucleon AMap BC wKC", "#phi_{nuc} [#circ]", "#theta_{nuc} [#circ]", directories.AMaps_Directory_map["WMaps_BC_1e_cut_Directory"],
                "04_Nucleon_AMap_BCwKC", Phi_lboundary, Phi_uboundary, Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);

    hPlot1D hReco_P_e_WMaps = hPlot1D("1e cut", "FD", "Reco P_{e} used in WMaps", "Reco P_{e} used in WMaps", "P_{e} [GeV/c]", directories.AMaps_Directory_map["WMaps_1e_cut_Directory"],
                                      "01a_Reco_P_e_used_in_WMaps", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hTL_P_e_WMaps = hPlot1D("1e cut", "FD", "TL P_{e} used in WMaps", "TL P_{e} used in WMaps", "P_{e} [GeV/c]", directories.AMaps_Directory_map["WMaps_1e_cut_Directory"],
                                    "01b_TL_P_e_used_in_WMaps", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hReco_Theta_e_WMaps =
        hPlot1D("1e cut", "FD", "Reco #theta_{e} used in WMaps", "Reco #theta_{e} used in WMaps", "#theta_{e} [#circ]", directories.AMaps_Directory_map["WMaps_1e_cut_Directory"],
                "01c_Reco_Theta_e_used_in_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH1Dbins);
    hPlot1D hTL_Theta_e_WMaps =
        hPlot1D("1e cut", "FD", "TL #theta_{e} used in WMaps", "TL #theta_{e} used in WMaps", "#theta_{e} [#circ]", directories.AMaps_Directory_map["WMaps_1e_cut_Directory"],
                "01d_TL_Theta_e_used_in_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH1Dbins);
    hPlot1D hReco_Phi_e_WMaps = hPlot1D("1e cut", "FD", "Reco #phi_{e} used in WMaps", "Reco #phi_{e} used in WMaps", "#phi_{e} [#circ]",
                                        directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "01e_Reco_Phi_e_used_in_WMaps", Phi_lboundary, Phi_uboundary, numTH1Dbins);
    hPlot1D hTL_Phi_e_WMaps = hPlot1D("1e cut", "FD", "TL #phi_{e} used in WMaps", "TL #phi_{e} used in WMaps", "#phi_{e} [#circ]", directories.AMaps_Directory_map["WMaps_1e_cut_Directory"],
                                      "01f_TL_Phi_e_used_in_WMaps", Phi_lboundary, Phi_uboundary, numTH1Dbins);
    hPlot2D hReco_P_e_vs_Reco_Theta_e_WMap = hPlot2D("", "", "Reco_P_e_vs_Reco_Theta_e_WMaps", "Reco P_{e} vs. Reco #theta_{e} used in WMaps", "P_{e} [GeV/c]", "#theta_{e} [#circ]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "01aa_Reco_P_e_vs_Reco_Theta_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                     ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_e_vs_Reco_Phi_e_WMap = hPlot2D("", "", "Reco_P_e_vs_Reco_Phi_e_WMaps", "Reco P_{e} vs. Reco #phi_{e} used in WMaps", "P_{e} [GeV/c]", "#phi_{e} [#circ]",
                                                   directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "01ab_Reco_P_e_vs_Reco_Phi_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                   Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_e_vs_TL_Theta_e_WMap = hPlot2D("", "", "Reco_P_e_vs_TL_Theta_e_WMaps", "Reco P_{e} vs. TL #theta_{e} used in WMaps", "P_{e} [GeV/c]", "#theta_{e} [#circ]",
                                                   directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "01ba_Reco_P_e_vs_TL_Theta_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                   ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_e_vs_TL_Phi_e_WMap = hPlot2D("", "", "Reco_P_e_vs_TL_Phi_e_WMaps", "Reco P_{e} vs. TL #phi_{e} used in WMaps", "P_{e} [GeV/c]", "#phi_{e} [#circ]",
                                                 directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "01bb_Reco_P_e_vs_TL_Phi_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                 Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_e_vs_TL_Theta_e_WMap = hPlot2D("", "", "TL_P_e_vs_TL_Theta_e_WMap", "TL P_{e} vs. TL #theta_{e} used in WMaps", "P_{e} [GeV/c]", "#theta_{e} [#circ]",
                                                 directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "01ba_TL_P_e_vs_TL_Theta_e_WMap", Momentum_lboundary, Momentum_uboundary,
                                                 ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_e_vs_TL_Phi_e_WMap =
        hPlot2D("", "", "TL_P_e_vs_TL_Phi_e_WMap", "TL P_{e} vs. TL #phi_{e} used in WMaps", "P_{e} [GeV/c]", "#phi_{e} [#circ]", directories.AMaps_Directory_map["WMaps_1e_cut_Directory"],
                "01ab_TL_P_e_vs_TL_Phi_e_WMap", Momentum_lboundary, Momentum_uboundary, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);

    hPlot1D hReco_P_pFD_WMaps = hPlot1D("1e cut", "FD", "Reco P_{pFD} used in WMaps", "Reco P_{pFD} used in WMaps", "P_{pFD} [GeV/c]",
                                        directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02a_Reco_P_pFD_used_in_WMaps", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hTL_P_pFD_WMaps = hPlot1D("1e cut", "FD", "TL P_{pFD} used in WMaps", "TL P_{pFD} used in WMaps", "P_{pFD} [GeV/c]", directories.AMaps_Directory_map["WMaps_1e_cut_Directory"],
                                      "02b_TL_P_pFD_used_in_WMaps", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hReco_Theta_pFD_WMaps =
        hPlot1D("1e cut", "FD", "Reco #theta_{pFD} used in WMaps", "Reco #theta_{pFD} used in WMaps", "#theta_{pFD} [#circ]", directories.AMaps_Directory_map["WMaps_1e_cut_Directory"],
                "02c_Reco_Theta_pFD_used_in_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH1Dbins);
    hPlot1D hTL_Theta_pFD_WMaps =
        hPlot1D("1e cut", "FD", "TL #theta_{pFD} used in WMaps", "TL #theta_{pFD} used in WMaps", "#theta_{pFD} [#circ]", directories.AMaps_Directory_map["WMaps_1e_cut_Directory"],
                "02d_TL_Theta_pFD_used_in_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH1Dbins);
    hPlot1D hReco_Phi_pFD_WMaps = hPlot1D("1e cut", "FD", "Reco #phi_{pFD} used in WMaps", "Reco #phi_{pFD} used in WMaps", "#phi_{pFD} [#circ]",
                                          directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "01e_Reco_Phi_pFD_used_in_WMaps", -180, 180, numTH1Dbins);
    hPlot1D hTL_Phi_pFD_WMaps = hPlot1D("1e cut", "FD", "TL #phi_{pFD} used in WMaps", "TL #phi_{pFD} used in WMaps", "#phi_{pFD} [#circ]",
                                        directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "01f_TL_Phi_pFD_used_in_WMaps", -180, 180, numTH1Dbins);
    hPlot2D hReco_P_pFD_vs_Reco_Theta_pFD_WMap =
        hPlot2D("", "", "Reco_P_pFD_vs_Reco_Theta_pFD_WMaps", "Reco P_{pFD} vs. Reco #theta_{pFD} used in WMaps", "P_{pFD} [GeV/c]", "#theta_{pFD} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02aa_Reco_P_pFD_vs_Reco_Theta_pFD_WMaps", Momentum_lboundary, Momentum_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_pFD_vs_Reco_Phi_pFD_WMap = hPlot2D("", "", "Reco_P_pFD_vs_Reco_Phi_pFD_WMaps", "Reco P_{pFD} vs. Reco #phi_{pFD} used in WMaps", "P_{pFD} [GeV/c]", "#phi_{pFD} [#circ]",
                                                       directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ab_Reco_P_pFD_vs_Reco_Phi_pFD_WMaps", Momentum_lboundary,
                                                       Momentum_uboundary, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_pFD_vs_TL_Theta_pFD_WMap =
        hPlot2D("", "", "Reco_P_pFD_vs_TL_Theta_pFD_WMaps", "Reco P_{pFD} vs. TL #theta_{pFD} used in WMaps", "P_{pFD} [GeV/c]", "#theta_{pFD} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ac_Reco_P_pFD_vs_TL_Theta_pFD_WMaps", Momentum_lboundary, Momentum_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_pFD_vs_TL_Phi_pFD_WMap = hPlot2D("", "", "Reco_P_pFD_vs_TL_Phi_pFD_WMaps", "Reco P_{pFD} vs. TL #phi_{pFD} used in WMaps", "P_{pFD} [GeV/c]", "#phi_{pFD} [#circ]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ad_Reco_P_pFD_vs_TL_Phi_pFD_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                     Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_pFD_vs_Reco_P_e_WMap = hPlot2D("", "", "Reco_P_pFD_vs_Reco_P_e_WMaps", "Reco P_{pFD} vs. Reco P_{e} used in WMaps", "P_{pFD} [GeV/c]", "P_{e} [GeV/c]",
                                                   directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ae_Reco_P_pFD_vs_Reco_P_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                   Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_pFD_vs_TL_P_e_WMap = hPlot2D("", "", "Reco_P_pFD_vs_TL_P_e_WMaps", "Reco P_{pFD} vs. TL P_{e} used in WMaps", "P_{pFD} [GeV/c]", "P_{e} [GeV/c]",
                                                 directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02af_Reco_P_pFD_vs_TL_P_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                 Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_pFD_vs_Reco_Theta_e_WMap =
        hPlot2D("", "", "Reco_P_pFD_vs_Reco_Theta_e_WMaps", "Reco P_{pFD} vs. Reco #theta_{e} used in WMaps", "P_{pFD} [GeV/c]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ag_Reco_P_pFD_vs_Reco_Theta_e_WMaps", Momentum_lboundary, Momentum_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_pFD_vs_Reco_Phi_e_WMap = hPlot2D("", "", "Reco_P_pFD_vs_Reco_Phi_e_WMaps", "Reco P_{pFD} vs. Reco #phi_{e} used in WMaps", "P_{pFD} [GeV/c]", "#phi_{e} [#circ]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ah_Reco_P_pFD_vs_Reco_Phi_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                     Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_pFD_vs_TL_Theta_e_WMap = hPlot2D("", "", "Reco_P_pFD_vs_TL_Theta_e_WMaps", "Reco P_{pFD} vs. TL #theta_{e} used in WMaps", "P_{pFD} [GeV/c]", "#theta_{e} [#circ]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ai_Reco_P_pFD_vs_TL_Theta_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                     ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_pFD_vs_TL_Phi_e_WMap = hPlot2D("", "", "Reco_P_pFD_vs_TL_Phi_e_WMaps", "Reco P_{pFD} vs. TL #phi_{e} used in WMaps", "P_{pFD} [GeV/c]", "#phi_{e} [#circ]",
                                                   directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02aj_Reco_P_pFD_vs_TL_Phi_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                   Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_pFD_vs_Reco_Theta_pFD_WMap =
        hPlot2D("", "", "TL_P_pFD_vs_Reco_Theta_pFD_WMaps", "TL P_{pFD} vs. Reco #theta_{pFD} used in WMaps", "P_{pFD} [GeV/c]", "#theta_{pFD} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ba_TL_P_pFD_vs_Reco_Theta_pFD_WMaps", Momentum_lboundary, Momentum_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_pFD_vs_TL_Theta_pFD_WMap = hPlot2D("", "", "TL_P_pFD_vs_TL_Theta_pFD_WMaps", "TL P_{pFD} vs. TL #theta_{pFD} used in WMaps", "P_{pFD} [GeV/c]", "#theta_{pFD} [#circ]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02bb_TL_P_pFD_vs_TL_Theta_pFD_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                     ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_pFD_vs_TL_Phi_pFD_WMap = hPlot2D("", "", "TL_P_pFD_vs_TL_Phi_pFD_WMaps", "TL P_{pFD} vs. TL #phi_{pFD} used in WMaps", "P_{pFD} [GeV/c]", "#phi_{pFD} [#circ]",
                                                   directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02bc_TL_P_pFD_vs_TL_Phi_pFD_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                   Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_pFD_vs_TL_P_e_WMap = hPlot2D("", "", "TL_P_pFD_vs_TL_P_e_WMaps", "TL P_{pFD} vs. Reco P_{e} used in WMaps", "P_{pFD} [GeV/c]", "P_{e} [GeV/c]",
                                               directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02bd_TL_P_pFD_vs_TL_P_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                               ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_pFD_vs_Reco_Theta_e_WMap = hPlot2D("", "", "TL_P_pFD_vs_Reco_Theta_e_WMaps", "TL P_{pFD} vs. Reco #theta_{e} used in WMaps", "P_{pFD} [GeV/c]", "#theta_{e} [#circ]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02be_TL_P_pFD_vs_Reco_Theta_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                     ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_pFD_vs_TL_Theta_e_WMap = hPlot2D("", "", "TL_P_pFD_vs_TL_Theta_e_WMaps", "TL P_{pFD} vs. TL #theta_{e} used in WMaps", "P_{pFD} [GeV/c]", "#theta_{e} [#circ]",
                                                   directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02bf_TL_P_pFD_vs_TL_Theta_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                   ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_pFD_vs_TL_Phi_e_WMap = hPlot2D("", "", "TL_P_pFD_vs_TL_Phi_e_WMaps", "TL P_{pFD} vs. TL #phi_{e} used in WMaps", "P_{pFD} [GeV/c]", "#phi_{e} [#circ]",
                                                 directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02bg_TL_P_pFD_vs_TL_Phi_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                 Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_pFD_vs_Reco_Phi_pFD_WMap =
        hPlot2D("", "", "Reco_Theta_pFD_vs_Reco_Phi_pFD_WMaps", "Reco #theta_{pFD} vs. Reco #phi_{pFD} used in WMaps", "#theta_{pFD} [#circ]", "#phi_{pFD} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ca_Reco_Theta_pFD_vs_Reco_Phi_pFD_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_pFD_vs_TL_Phi_pFD_WMap =
        hPlot2D("", "", "Reco_Theta_pFD_vs_TL_Phi_pFD_WMaps", "Reco #theta_{pFD} vs. TL #phi_{pFD} used in WMaps", "#theta_{pFD} [#circ]", "#phi_{pFD} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02cb_Reco_Theta_pFD_vs_TL_Phi_pFD_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), Phi_lboundary,
                Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_pFD_vs_Reco_P_e_WMap = hPlot2D("", "", "Reco_Theta_pFD_vs_Reco_P_e_WMaps", "Reco #theta_{pFD} vs. Reco P_{e} used in WMaps", "#theta_{pFD} [#circ]", "P_{e} [GeV/c]",
                                                       directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02cc_Reco_Theta_pFD_vs_Reco_P_e_WMaps", ThetaFD_AMaps.GetLowerCut(),
                                                       ThetaFD_AMaps.GetUpperCut(), Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_pFD_vs_TL_P_e_WMap = hPlot2D("", "", "Reco_Theta_pFD_vs_TL_P_e_WMaps", "Reco #theta_{pFD} vs. TL P_{e} used in WMaps", "#theta_{pFD} [#circ]", "P_{e} [GeV/c]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02cd_Reco_Theta_pFD_vs_TL_P_e_WMaps", ThetaFD_AMaps.GetLowerCut(),
                                                     ThetaFD_AMaps.GetUpperCut(), Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_pFD_vs_Reco_Theta_e_WMap =
        hPlot2D("", "", "Reco_Theta_pFD_vs_Reco_Theta_e_WMaps", "Reco #theta_{pFD} vs. Reco #theta_{e} used in WMaps", "#theta_{pFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ce_Reco_Theta_pFD_vs_Reco_Theta_e_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_pFD_vs_Reco_Phi_e_WMap =
        hPlot2D("", "", "Reco_Theta_pFD_vs_Reco_Phi_e_WMaps", "Reco #theta_{pFD} vs. Reco #phi_{e} used in WMaps", "#theta_{pFD} [#circ]", "#phi_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02cf_Reco_Theta_pFD_vs_Reco_Phi_e_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), Phi_lboundary,
                Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_pFD_vs_TL_Theta_e_WMap =
        hPlot2D("", "", "Reco_Theta_pFD_vs_TL_Theta_e_WMaps", "Reco #theta_{pFD} vs. TL #theta_{e} used in WMaps", "#theta_{pFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02cg_Reco_Theta_pFD_vs_TL_Theta_e_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_pFD_vs_TL_Phi_e_WMap =
        hPlot2D("", "", "Reco_Theta_pFD_vs_TL_Phi_e_WMaps", "Reco #theta_{pFD} vs. TL #phi_{e} used in WMaps", "#theta_{pFD} [#circ]", "#phi_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ch_Reco_Theta_pFD_vs_TL_Phi_e_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), Phi_lboundary,
                Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_pFD_vs_TL_Phi_pFD_WMap =
        hPlot2D("", "", "TL_Theta_pFD_vs_TL_Phi_pFD_WMaps", "TL #theta_{pFD} vs. Reco #phi_{pFD} used in WMaps", "#theta_{pFD} [#circ]", "#phi_{pFD} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02da_TL_Theta_pFD_vs_TL_Phi_pFD_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), Phi_lboundary,
                Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_pFD_vs_TL_P_e_WMap =
        hPlot2D("", "", "TL_Theta_pFD_vs_TL_P_e_WMaps", "TL #theta_{pFD} vs. Reco P_{e} used in WMaps", "#theta_{pFD} [#circ]", "P_{e} [GeV/c]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02db_TL_Theta_pFD_vs_TL_P_e_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_pFD_vs_Reco_Theta_e_WMap =
        hPlot2D("", "", "TL_Theta_pFD_vs_Reco_Theta_e_WMaps", "TL #theta_{pFD} vs. Reco #theta_{e} used in WMaps", "#theta_{pFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02dc_TL_Theta_pFD_vs_Reco_Theta_e_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_pFD_vs_TL_Phi_e_WMap = hPlot2D("", "", "TL_Theta_pFD_vs_TL_Phi_e_WMaps", "TL #theta_{pFD} vs. Reco #phi_{e} used in WMaps", "#theta_{pFD} [#circ]", "#phi_{e} [#circ]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02de_TL_Theta_pFD_vs_TL_Phi_e_WMaps", ThetaFD_AMaps.GetLowerCut(),
                                                     ThetaFD_AMaps.GetUpperCut(), Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_pFD_vs_TL_Theta_e_WMap =
        hPlot2D("", "", "TL_Theta_pFD_vs_TL_Theta_e_WMaps", "TL #theta_{pFD} vs. TL #theta_{e} used in WMaps", "#theta_{pFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02df_TL_Theta_pFD_vs_TL_Theta_e_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_pFD_vs_Reco_Phi_pFD_WMap = hPlot2D("", "", "Reco_Phi_pFD_vs_Reco_Phi_pFD_WMaps", "Reco #phi_{pFD} vs. Reco #phi_{pFD} used in WMaps", "#phi_{pFD} [#circ]",
                                                         "#phi_{pFD} [#circ]", directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ea_Reco_Phi_pFD_vs_Reco_Phi_pFD_WMaps",
                                                         Phi_lboundary, Phi_uboundary, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_pFD_vs_TL_Phi_pFD_WMap = hPlot2D("", "", "Reco_Phi_pFD_vs_TL_Phi_pFD_WMaps", "Reco #phi_{pFD} vs. TL #phi_{pFD} used in WMaps", "#phi_{pFD} [#circ]",
                                                       "#phi_{pFD} [#circ]", directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02eb_Reco_Phi_pFD_vs_TL_Phi_pFD_WMaps",
                                                       Phi_lboundary, Phi_uboundary, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_pFD_vs_Reco_P_e_WMap = hPlot2D("", "", "Reco_Phi_pFD_vs_Reco_P_e_WMaps", "Reco #phi_{pFD} vs. Reco P_{e} used in WMaps", "#phi_{pFD} [#circ]", "P_{e} [GeV/c]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ec_Reco_Phi_pFD_vs_Reco_P_e_WMaps", Phi_lboundary, Phi_uboundary,
                                                     Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_pFD_vs_TL_P_e_WMap = hPlot2D("", "", "Reco_Phi_pFD_vs_TL_P_e_WMaps", "Reco #phi_{pFD} vs. TL P_{e} used in WMaps", "#phi_{pFD} [#circ]", "P_{e} [GeV/c]",
                                                   directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ed_Reco_Phi_pFD_vs_TL_P_e_WMaps", Phi_lboundary, Phi_uboundary,
                                                   Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_pFD_vs_Reco_Theta_e_WMap =
        hPlot2D("", "", "Reco_Phi_pFD_vs_Reco_Theta_e_WMaps", "Reco #phi_{pFD} vs. Reco #theta_{e} used in WMaps", "#phi_{pFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ee_Reco_Phi_pFD_vs_Reco_Theta_e_WMaps", Phi_lboundary, Phi_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_pFD_vs_Reco_Phi_e_WMap = hPlot2D("", "", "Reco_Phi_pFD_vs_Reco_Phi_e_WMaps", "Reco #phi_{pFD} vs. Reco #phi_{e} used in WMaps", "#phi_{pFD} [#circ]",
                                                       "#phi_{e} [#circ]", directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ef_Reco_Phi_pFD_vs_Reco_Phi_e_WMaps", Phi_lboundary,
                                                       Phi_uboundary, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_pFD_vs_TL_Theta_e_WMap =
        hPlot2D("", "", "Reco_Phi_pFD_vs_TL_Theta_e_WMaps", "Reco #phi_{pFD} vs. TL #theta_{e} used in WMaps", "#phi_{pFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02eg_Reco_Phi_pFD_vs_TL_Theta_e_WMaps", Phi_lboundary, Phi_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_pFD_vs_TL_Phi_e_WMap = hPlot2D("", "", "Reco_Phi_pFD_vs_TL_Phi_e_WMaps", "Reco #phi_{pFD} vs. TL #phi_{e} used in WMaps", "#phi_{pFD} [#circ]", "#phi_{e} [#circ]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ef_Reco_Phi_pFD_vs_TL_Phi_e_WMaps", Phi_lboundary, Phi_uboundary,
                                                     Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_pFD_vs_TL_Phi_pFD_WMap = hPlot2D("", "", "TL_Phi_pFD_vs_TL_Phi_pFD_WMaps", "TL #phi_{pFD} vs. Reco #phi_{pFD} used in WMaps", "#phi_{pFD} [#circ]", "#phi_{pFD} [#circ]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02fa_TL_Phi_pFD_vs_TL_Phi_pFD_WMaps", Phi_lboundary, Phi_uboundary,
                                                     Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_pFD_vs_TL_P_e_WMap = hPlot2D("", "", "TL_Phi_pFD_vs_TL_P_e_WMaps", "TL #phi_{pFD} vs. Reco P_{e} used in WMaps", "#phi_{pFD} [#circ]", "P_{e} [GeV/c]",
                                                 directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02fb_TL_Phi_pFD_vs_TL_P_e_WMaps", Phi_lboundary, Phi_uboundary,
                                                 ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_pFD_vs_Reco_Theta_e_WMap =
        hPlot2D("", "", "TL_Phi_pFD_vs_Reco_Theta_e_WMaps", "TL #phi_{pFD} vs. Reco #theta_{e} used in WMaps", "#phi_{pFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02fc_TL_Phi_pFD_vs_Reco_Theta_e_WMaps", Phi_lboundary, Phi_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_pFD_vs_TL_Theta_e_WMap = hPlot2D("", "", "TL_Phi_pFD_vs_TL_Theta_e_WMaps", "TL #phi_{pFD} vs. TL #theta_{e} used in WMaps", "#phi_{pFD} [#circ]", "#theta_{e} [#circ]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02fd_TL_Phi_pFD_vs_TL_Theta_e_WMaps", Phi_lboundary, Phi_uboundary,
                                                     ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_pFD_vs_TL_Phi_e_WMap = hPlot2D("", "", "TL_Phi_pFD_vs_TL_Phi_e_WMaps", "TL #phi_{pFD} vs. TL #phi_{e} used in WMaps", "#phi_{pFD} [#circ]", "#phi_{e} [#circ]",
                                                   directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02fh_TL_Phi_pFD_vs_TL_Phi_e_WMaps", Phi_lboundary, Phi_uboundary,
                                                   Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);

    hPlot1D hReco_P_nFD_WMaps = hPlot1D("1e cut", "FD", "Reco P_{nFD} used in WMaps", "Reco P_{nFD} used in WMaps", "P_{nFD} [GeV/c]",
                                        directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "03a_Reco_P_nFD_used_in_WMaps", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hTL_P_nFD_WMaps = hPlot1D("1e cut", "FD", "TL P_{nFD} used in WMaps", "TL P_{nFD} used in WMaps", "P_{nFD} [GeV/c]", directories.AMaps_Directory_map["WMaps_1e_cut_Directory"],
                                      "03b_TL_P_nFD_used_in_WMaps", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hReco_Theta_nFD_WMaps =
        hPlot1D("1e cut", "FD", "Reco #theta_{nFD} used in WMaps", "Reco #theta_{nFD} used in WMaps", "#theta_{nFD} [#circ]", directories.AMaps_Directory_map["WMaps_1e_cut_Directory"],
                "03c_Reco_Theta_nFD_used_in_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH1Dbins);
    hPlot1D hTL_Theta_nFD_WMaps =
        hPlot1D("1e cut", "FD", "TL #theta_{nFD} used in WMaps", "TL #theta_{nFD} used in WMaps", "#theta_{nFD} [#circ]", directories.AMaps_Directory_map["WMaps_1e_cut_Directory"],
                "03d_TL_Theta_nFD_used_in_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH1Dbins);
    hPlot1D hReco_Phi_nFD_WMaps = hPlot1D("1e cut", "FD", "Reco #phi_{nFD} used in WMaps", "Reco #phi_{nFD} used in WMaps", "#phi_{nFD} [#circ]",
                                          directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "01e_Reco_Phi_nFD_used_in_WMaps", -180, 180, numTH1Dbins);
    hPlot1D hTL_Phi_nFD_WMaps = hPlot1D("1e cut", "FD", "TL #phi_{nFD} used in WMaps", "TL #phi_{nFD} used in WMaps", "#phi_{nFD} [#circ]",
                                        directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "01f_TL_Phi_nFD_used_in_WMaps", -180, 180, numTH1Dbins);
    hPlot2D hReco_P_nFD_vs_Reco_Theta_nFD_WMap =
        hPlot2D("", "", "Reco_P_nFD_vs_Reco_Theta_nFD_WMaps", "Reco P_{nFD} vs. Reco #theta_{nFD} used in WMaps", "P_{nFD} [GeV/c]", "#theta_{nFD} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02aa_Reco_P_nFD_vs_Reco_Theta_nFD_WMaps", Momentum_lboundary, Momentum_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_nFD_vs_Reco_Phi_nFD_WMap = hPlot2D("", "", "Reco_P_nFD_vs_Reco_Phi_nFD_WMaps", "Reco P_{nFD} vs. Reco #phi_{nFD} used in WMaps", "P_{nFD} [GeV/c]", "#phi_{nFD} [#circ]",
                                                       directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ab_Reco_P_nFD_vs_Reco_Phi_nFD_WMaps", Momentum_lboundary,
                                                       Momentum_uboundary, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_nFD_vs_TL_Theta_nFD_WMap =
        hPlot2D("", "", "Reco_P_nFD_vs_TL_Theta_nFD_WMaps", "Reco P_{nFD} vs. TL #theta_{nFD} used in WMaps", "P_{nFD} [GeV/c]", "#theta_{nFD} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ac_Reco_P_nFD_vs_TL_Theta_nFD_WMaps", Momentum_lboundary, Momentum_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_nFD_vs_TL_Phi_nFD_WMap = hPlot2D("", "", "Reco_P_nFD_vs_TL_Phi_nFD_WMaps", "Reco P_{nFD} vs. TL #phi_{nFD} used in WMaps", "P_{nFD} [GeV/c]", "#phi_{nFD} [#circ]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ad_Reco_P_nFD_vs_TL_Phi_nFD_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                     Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_nFD_vs_Reco_P_e_WMap = hPlot2D("", "", "Reco_P_nFD_vs_Reco_P_e_WMaps", "Reco P_{nFD} vs. Reco P_{e} used in WMaps", "P_{nFD} [GeV/c]", "P_{e} [GeV/c]",
                                                   directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ae_Reco_P_nFD_vs_Reco_P_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                   Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_nFD_vs_TL_P_e_WMap = hPlot2D("", "", "Reco_P_nFD_vs_TL_P_e_WMaps", "Reco P_{nFD} vs. TL P_{e} used in WMaps", "P_{nFD} [GeV/c]", "P_{e} [GeV/c]",
                                                 directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02af_Reco_P_nFD_vs_TL_P_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                 Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_nFD_vs_Reco_Theta_e_WMap =
        hPlot2D("", "", "Reco_P_nFD_vs_Reco_Theta_e_WMaps", "Reco P_{nFD} vs. Reco #theta_{e} used in WMaps", "P_{nFD} [GeV/c]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ag_Reco_P_nFD_vs_Reco_Theta_e_WMaps", Momentum_lboundary, Momentum_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_nFD_vs_Reco_Phi_e_WMap = hPlot2D("", "", "Reco_P_nFD_vs_Reco_Phi_e_WMaps", "Reco P_{nFD} vs. Reco #phi_{e} used in WMaps", "P_{nFD} [GeV/c]", "#phi_{e} [#circ]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ah_Reco_P_nFD_vs_Reco_Phi_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                     Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_nFD_vs_TL_Theta_e_WMap = hPlot2D("", "", "Reco_P_nFD_vs_TL_Theta_e_WMaps", "Reco P_{nFD} vs. TL #theta_{e} used in WMaps", "P_{nFD} [GeV/c]", "#theta_{e} [#circ]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ai_Reco_P_nFD_vs_TL_Theta_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                     ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_P_nFD_vs_TL_Phi_e_WMap = hPlot2D("", "", "Reco_P_nFD_vs_TL_Phi_e_WMaps", "Reco P_{nFD} vs. TL #phi_{e} used in WMaps", "P_{nFD} [GeV/c]", "#phi_{e} [#circ]",
                                                   directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02aj_Reco_P_nFD_vs_TL_Phi_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                   Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_nFD_vs_Reco_Theta_nFD_WMap =
        hPlot2D("", "", "TL_P_nFD_vs_Reco_Theta_nFD_WMaps", "TL P_{nFD} vs. Reco #theta_{nFD} used in WMaps", "P_{nFD} [GeV/c]", "#theta_{nFD} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ba_TL_P_nFD_vs_Reco_Theta_nFD_WMaps", Momentum_lboundary, Momentum_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_nFD_vs_TL_Theta_nFD_WMap = hPlot2D("", "", "TL_P_nFD_vs_TL_Theta_nFD_WMaps", "TL P_{nFD} vs. TL #theta_{nFD} used in WMaps", "P_{nFD} [GeV/c]", "#theta_{nFD} [#circ]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02bb_TL_P_nFD_vs_TL_Theta_nFD_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                     ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_nFD_vs_TL_Phi_nFD_WMap = hPlot2D("", "", "TL_P_nFD_vs_TL_Phi_nFD_WMaps", "TL P_{nFD} vs. TL #phi_{nFD} used in WMaps", "P_{nFD} [GeV/c]", "#phi_{nFD} [#circ]",
                                                   directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02bc_TL_P_nFD_vs_TL_Phi_nFD_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                   Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_nFD_vs_TL_P_e_WMap = hPlot2D("", "", "TL_P_nFD_vs_TL_P_e_WMaps", "TL P_{nFD} vs. Reco P_{e} used in WMaps", "P_{nFD} [GeV/c]", "P_{e} [GeV/c]",
                                               directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02bd_TL_P_nFD_vs_TL_P_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                               ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_nFD_vs_Reco_Theta_e_WMap = hPlot2D("", "", "TL_P_nFD_vs_Reco_Theta_e_WMaps", "TL P_{nFD} vs. Reco #theta_{e} used in WMaps", "P_{nFD} [GeV/c]", "#theta_{e} [#circ]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02be_TL_P_nFD_vs_Reco_Theta_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                     ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_nFD_vs_TL_Theta_e_WMap = hPlot2D("", "", "TL_P_nFD_vs_TL_Theta_e_WMaps", "TL P_{nFD} vs. TL #theta_{e} used in WMaps", "P_{nFD} [GeV/c]", "#theta_{e} [#circ]",
                                                   directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02bf_TL_P_nFD_vs_TL_Theta_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                   ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_P_nFD_vs_TL_Phi_e_WMap = hPlot2D("", "", "TL_P_nFD_vs_TL_Phi_e_WMaps", "TL P_{nFD} vs. TL #phi_{e} used in WMaps", "P_{nFD} [GeV/c]", "#phi_{e} [#circ]",
                                                 directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02bg_TL_P_nFD_vs_TL_Phi_e_WMaps", Momentum_lboundary, Momentum_uboundary,
                                                 Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_nFD_vs_Reco_Phi_nFD_WMap =
        hPlot2D("", "", "Reco_Theta_nFD_vs_Reco_Phi_nFD_WMaps", "Reco #theta_{nFD} vs. Reco #phi_{nFD} used in WMaps", "#theta_{nFD} [#circ]", "#phi_{nFD} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ca_Reco_Theta_nFD_vs_Reco_Phi_nFD_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_nFD_vs_TL_Phi_nFD_WMap =
        hPlot2D("", "", "Reco_Theta_nFD_vs_TL_Phi_nFD_WMaps", "Reco #theta_{nFD} vs. TL #phi_{nFD} used in WMaps", "#theta_{nFD} [#circ]", "#phi_{nFD} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02cb_Reco_Theta_nFD_vs_TL_Phi_nFD_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), Phi_lboundary,
                Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_nFD_vs_Reco_P_e_WMap = hPlot2D("", "", "Reco_Theta_nFD_vs_Reco_P_e_WMaps", "Reco #theta_{nFD} vs. Reco P_{e} used in WMaps", "#theta_{nFD} [#circ]", "P_{e} [GeV/c]",
                                                       directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02cc_Reco_Theta_nFD_vs_Reco_P_e_WMaps", ThetaFD_AMaps.GetLowerCut(),
                                                       ThetaFD_AMaps.GetUpperCut(), Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_nFD_vs_TL_P_e_WMap = hPlot2D("", "", "Reco_Theta_nFD_vs_TL_P_e_WMaps", "Reco #theta_{nFD} vs. TL P_{e} used in WMaps", "#theta_{nFD} [#circ]", "P_{e} [GeV/c]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02cd_Reco_Theta_nFD_vs_TL_P_e_WMaps", ThetaFD_AMaps.GetLowerCut(),
                                                     ThetaFD_AMaps.GetUpperCut(), Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_nFD_vs_Reco_Theta_e_WMap =
        hPlot2D("", "", "Reco_Theta_nFD_vs_Reco_Theta_e_WMaps", "Reco #theta_{nFD} vs. Reco #theta_{e} used in WMaps", "#theta_{nFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ce_Reco_Theta_nFD_vs_Reco_Theta_e_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_nFD_vs_Reco_Phi_e_WMap =
        hPlot2D("", "", "Reco_Theta_nFD_vs_Reco_Phi_e_WMaps", "Reco #theta_{nFD} vs. Reco #phi_{e} used in WMaps", "#theta_{nFD} [#circ]", "#phi_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02cf_Reco_Theta_nFD_vs_Reco_Phi_e_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), Phi_lboundary,
                Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_nFD_vs_TL_Theta_e_WMap =
        hPlot2D("", "", "Reco_Theta_nFD_vs_TL_Theta_e_WMaps", "Reco #theta_{nFD} vs. TL #theta_{e} used in WMaps", "#theta_{nFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02cg_Reco_Theta_nFD_vs_TL_Theta_e_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Theta_nFD_vs_TL_Phi_e_WMap =
        hPlot2D("", "", "Reco_Theta_nFD_vs_TL_Phi_e_WMaps", "Reco #theta_{nFD} vs. TL #phi_{e} used in WMaps", "#theta_{nFD} [#circ]", "#phi_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ch_Reco_Theta_nFD_vs_TL_Phi_e_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), Phi_lboundary,
                Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_nFD_vs_TL_Phi_nFD_WMap =
        hPlot2D("", "", "TL_Theta_nFD_vs_TL_Phi_nFD_WMaps", "TL #theta_{nFD} vs. Reco #phi_{nFD} used in WMaps", "#theta_{nFD} [#circ]", "#phi_{nFD} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02da_TL_Theta_nFD_vs_TL_Phi_nFD_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), Phi_lboundary,
                Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_nFD_vs_TL_P_e_WMap =
        hPlot2D("", "", "TL_Theta_nFD_vs_TL_P_e_WMaps", "TL #theta_{nFD} vs. Reco P_{e} used in WMaps", "#theta_{nFD} [#circ]", "P_{e} [GeV/c]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02db_TL_Theta_nFD_vs_TL_P_e_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_nFD_vs_Reco_Theta_e_WMap =
        hPlot2D("", "", "TL_Theta_nFD_vs_Reco_Theta_e_WMaps", "TL #theta_{nFD} vs. Reco #theta_{e} used in WMaps", "#theta_{nFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02dc_TL_Theta_nFD_vs_Reco_Theta_e_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_nFD_vs_TL_Phi_e_WMap = hPlot2D("", "", "TL_Theta_nFD_vs_TL_Phi_e_WMaps", "TL #theta_{nFD} vs. Reco #phi_{e} used in WMaps", "#theta_{nFD} [#circ]", "#phi_{e} [#circ]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02de_TL_Theta_nFD_vs_TL_Phi_e_WMaps", ThetaFD_AMaps.GetLowerCut(),
                                                     ThetaFD_AMaps.GetUpperCut(), Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Theta_nFD_vs_TL_Theta_e_WMap =
        hPlot2D("", "", "TL_Theta_nFD_vs_TL_Theta_e_WMaps", "TL #theta_{nFD} vs. TL #theta_{e} used in WMaps", "#theta_{nFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02df_TL_Theta_nFD_vs_TL_Theta_e_WMaps", ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(),
                ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_nFD_vs_Reco_Phi_nFD_WMap = hPlot2D("", "", "Reco_Phi_nFD_vs_Reco_Phi_nFD_WMaps", "Reco #phi_{nFD} vs. Reco #phi_{nFD} used in WMaps", "#phi_{nFD} [#circ]",
                                                         "#phi_{nFD} [#circ]", directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ea_Reco_Phi_nFD_vs_Reco_Phi_nFD_WMaps",
                                                         Phi_lboundary, Phi_uboundary, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_nFD_vs_TL_Phi_nFD_WMap = hPlot2D("", "", "Reco_Phi_nFD_vs_TL_Phi_nFD_WMaps", "Reco #phi_{nFD} vs. TL #phi_{nFD} used in WMaps", "#phi_{nFD} [#circ]",
                                                       "#phi_{nFD} [#circ]", directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02eb_Reco_Phi_nFD_vs_TL_Phi_nFD_WMaps",
                                                       Phi_lboundary, Phi_uboundary, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_nFD_vs_Reco_P_e_WMap = hPlot2D("", "", "Reco_Phi_nFD_vs_Reco_P_e_WMaps", "Reco #phi_{nFD} vs. Reco P_{e} used in WMaps", "#phi_{nFD} [#circ]", "P_{e} [GeV/c]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ec_Reco_Phi_nFD_vs_Reco_P_e_WMaps", Phi_lboundary, Phi_uboundary,
                                                     Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_nFD_vs_TL_P_e_WMap = hPlot2D("", "", "Reco_Phi_nFD_vs_TL_P_e_WMaps", "Reco #phi_{nFD} vs. TL P_{e} used in WMaps", "#phi_{nFD} [#circ]", "P_{e} [GeV/c]",
                                                   directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ed_Reco_Phi_nFD_vs_TL_P_e_WMaps", Phi_lboundary, Phi_uboundary,
                                                   Momentum_lboundary, Momentum_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_nFD_vs_Reco_Theta_e_WMap =
        hPlot2D("", "", "Reco_Phi_nFD_vs_Reco_Theta_e_WMaps", "Reco #phi_{nFD} vs. Reco #theta_{e} used in WMaps", "#phi_{nFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ee_Reco_Phi_nFD_vs_Reco_Theta_e_WMaps", Phi_lboundary, Phi_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_nFD_vs_Reco_Phi_e_WMap = hPlot2D("", "", "Reco_Phi_nFD_vs_Reco_Phi_e_WMaps", "Reco #phi_{nFD} vs. Reco #phi_{e} used in WMaps", "#phi_{nFD} [#circ]",
                                                       "#phi_{e} [#circ]", directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ef_Reco_Phi_nFD_vs_Reco_Phi_e_WMaps", Phi_lboundary,
                                                       Phi_uboundary, Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_nFD_vs_TL_Theta_e_WMap =
        hPlot2D("", "", "Reco_Phi_nFD_vs_TL_Theta_e_WMaps", "Reco #phi_{nFD} vs. TL #theta_{e} used in WMaps", "#phi_{nFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02eg_Reco_Phi_nFD_vs_TL_Theta_e_WMaps", Phi_lboundary, Phi_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hReco_Phi_nFD_vs_TL_Phi_e_WMap = hPlot2D("", "", "Reco_Phi_nFD_vs_TL_Phi_e_WMaps", "Reco #phi_{nFD} vs. TL #phi_{e} used in WMaps", "#phi_{nFD} [#circ]", "#phi_{e} [#circ]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02ef_Reco_Phi_nFD_vs_TL_Phi_e_WMaps", Phi_lboundary, Phi_uboundary,
                                                     Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_nFD_vs_TL_Phi_nFD_WMap = hPlot2D("", "", "TL_Phi_nFD_vs_TL_Phi_nFD_WMaps", "TL #phi_{nFD} vs. Reco #phi_{nFD} used in WMaps", "#phi_{nFD} [#circ]", "#phi_{nFD} [#circ]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02fa_TL_Phi_nFD_vs_TL_Phi_nFD_WMaps", Phi_lboundary, Phi_uboundary,
                                                     Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_nFD_vs_TL_P_e_WMap = hPlot2D("", "", "TL_Phi_nFD_vs_TL_P_e_WMaps", "TL #phi_{nFD} vs. Reco P_{e} used in WMaps", "#phi_{nFD} [#circ]", "P_{e} [GeV/c]",
                                                 directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02fb_TL_Phi_nFD_vs_TL_P_e_WMaps", Phi_lboundary, Phi_uboundary,
                                                 ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_nFD_vs_Reco_Theta_e_WMap =
        hPlot2D("", "", "TL_Phi_nFD_vs_Reco_Theta_e_WMaps", "TL #phi_{nFD} vs. Reco #theta_{e} used in WMaps", "#phi_{nFD} [#circ]", "#theta_{e} [#circ]",
                directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02fc_TL_Phi_nFD_vs_Reco_Theta_e_WMaps", Phi_lboundary, Phi_uboundary, ThetaFD_AMaps.GetLowerCut(),
                ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_nFD_vs_TL_Theta_e_WMap = hPlot2D("", "", "TL_Phi_nFD_vs_TL_Theta_e_WMaps", "TL #phi_{nFD} vs. TL #theta_{e} used in WMaps", "#phi_{nFD} [#circ]", "#theta_{e} [#circ]",
                                                     directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02fd_TL_Phi_nFD_vs_TL_Theta_e_WMaps", Phi_lboundary, Phi_uboundary,
                                                     ThetaFD_AMaps.GetLowerCut(), ThetaFD_AMaps.GetUpperCut(), numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);
    hPlot2D hTL_Phi_nFD_vs_TL_Phi_e_WMap = hPlot2D("", "", "TL_Phi_nFD_vs_TL_Phi_e_WMaps", "TL #phi_{nFD} vs. TL #phi_{e} used in WMaps", "#phi_{nFD} [#circ]", "#phi_{e} [#circ]",
                                                   directories.AMaps_Directory_map["WMaps_1e_cut_Directory"], "02fh_TL_Phi_nFD_vs_TL_Phi_e_WMaps", Phi_lboundary, Phi_uboundary,
                                                   Phi_lboundary, Phi_uboundary, numTH2Dbins_Nucleon_AMaps_Plots, numTH2Dbins_Nucleon_AMaps_Plots);

    // ======================================================================================================================================================================
    // Resolution histograms
    // ======================================================================================================================================================================

    // Resolution histograms

    // Resolution histograms (1p)

    // Match monitoring plots (1p)
    hPlot1D hdTheta_pFD_TL_BC_1p =
        hPlot1D("1p", "FD", "TL #Delta#theta_{pFD} BC", "#Delta#theta_{pFD} of FD proton BC", "#Delta#theta_{pFD} = #theta^{rec}_{pFD} - #theta^{truth}_{pFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1p_Directory"], "00a_DeltaTheta_pFD_BC_TL_1p", -Theta_uboundary_FD, Theta_uboundary_FD, numTH1Dbins_nRes_Plots);
    hPlot1D hdTheta_pFD_TL_ZOOMIN_BC_1p =
        hPlot1D("1p", "FD", "TL #Delta#theta_{pFD} - ZOOMIN BC", "#Delta#theta_{pFD} of FD proton - ZOOMIN BC", "#Delta#theta_{pFD} = #theta^{rec}_{pFD} - #theta^{truth}_{pFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1p_Directory"], "00b_DeltaTheta_pFD_BC_TL_ZOOMIN_1p", -10.0, 10.0, numTH1Dbins_nRes_Plots);
    hPlot1D hdPhi_pFD_TL_BC_1p = hPlot1D("1p", "FD", "TL #Delta#phi_{pFD} BC", "#Delta#phi_{pFD} of FD proton BC", "#Delta#phi_{pFD} = #phi^{rec}_{pFD} - #phi^{truth}_{pFD} [#circ]",
                                         directories.Resolution_Directory_map["Monitoring_1p_Directory"], "00c_DeltaPhi_pFD_BC_TL_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_nRes_Plots);
    hPlot1D hdPhi_pFD_TL_ZOOMIN_BC_1p =
        hPlot1D("1p", "FD", "TL #Delta#phi_{pFD} - ZOOMIN BC", "#Delta#phi_{pFD} of FD proton - ZOOMIN BC", "#Delta#phi_{pFD} = #phi^{rec}_{pFD} - #phi^{truth}_{pFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1p_Directory"], "00d_DeltaPhi_pFD_BC_TL_ZOOMIN_1p", -20, 20, numTH1Dbins_nRes_Plots);

    hPlot1D hdTheta_pFD_TL_AdPC_1p =
        hPlot1D("1p", "FD", "TL #Delta#theta_{pFD} AdPC", "#Delta#theta_{pFD} of FD proton AdPC", "#Delta#theta_{pFD} = #theta^{rec}_{pFD} - #theta^{truth}_{pFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1p_Directory"], "00e_DeltaTheta_pFD_AdPC_TL_1p", -Theta_uboundary_FD, Theta_uboundary_FD, numTH1Dbins_nRes_Plots);
    hPlot1D hdTheta_pFD_TL_ZOOMIN_AdPC_1p =
        hPlot1D("1p", "FD", "TL #Delta#theta_{pFD} - ZOOMIN AdPC", "#Delta#theta_{pFD} of FD proton - ZOOMIN AdPC", "#Delta#theta_{pFD} = #theta^{rec}_{pFD} - #theta^{truth}_{pFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1p_Directory"], "00f_DeltaTheta_pFD_AdPC_TL_ZOOMIN_1p", -10.0, 10.0, numTH1Dbins_nRes_Plots);
    hPlot1D hdPhi_pFD_TL_AdPC_1p =
        hPlot1D("1p", "FD", "TL #Delta#phi_{pFD} AdPC", "#Delta#phi_{pFD} of FD proton AdPC", "#Delta#phi_{pFD} = #phi^{rec}_{pFD} - #phi^{truth}_{pFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1p_Directory"], "00g_DeltaPhi_pFD_AdPC_TL_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_nRes_Plots);
    hPlot1D hdPhi_pFD_TL_ZOOMIN_AdPC_1p =
        hPlot1D("1p", "FD", "TL #Delta#phi_{pFD} - ZOOMIN AdPC", "#Delta#phi_{pFD} of FD proton - ZOOMIN AdPC", "#Delta#phi_{pFD} = #phi^{rec}_{pFD} - #phi^{truth}_{pFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1p_Directory"], "00h_DeltaPhi_pFD_AdPC_TL_ZOOMIN_1p", -20, 20, numTH1Dbins_nRes_Plots);

    hPlot1D hTheta_pFD_TL_ApResC_1p =
        hPlot1D("1p", "", "TL #theta^{truth}_{pFD} ApResC", "#theta^{truth}_{pFD} of FD proton ApResC", "#theta^{truth}_{pFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1p_Directory"], "01a_Theta_pFD_ApResC_TL_1p", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_nRes_Plots);
    hPlot1D hPhi_pFD_TL_ApResC_1p =
        hPlot1D("1p", "", "TL #phi^{truth}_{pFD} ApResC", "#phi^{truth}_{pFD} of FD proton ApResC", "#phi^{truth}_{pFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1p_Directory"], "02a_Phi_pFD_ApResC_TL_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_nRes_Plots);
    TH2D *hTheta_pFD_TL_VS_Phi_pFD_TL_ApResC_1p = new TH2D("#theta^{truth}_{pFD} vs. #phi^{truth}_{pFD} ApResC (1p, FD)",
                                                           "#theta^{truth}_{pFD} vs. #phi^{truth}_{pFD} ApResC (1p, FD);#phi^{truth}_{pFD} [#circ];#theta^{truth}_{pFD} [#circ]",
                                                           numTH2Dbins_nRes_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_nRes_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_pFD_TL_VS_Phi_pFD_TL_ApResC_1p_Dir = directories.Resolution_Directory_map["Monitoring_1p_Directory"];

    hPlot1D hTheta_pFD_TL_MatchedP_1p =
        hPlot1D("1p", "", "TL #theta^{truth}_{pFD} of matched TL p", "#theta^{truth}_{pFD} of matched TL FD proton", "#theta^{truth}_{pFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1p_Directory"], "01b_Theta_pFD_MatchedN_TL_1p", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_nRes_Plots);
    hPlot1D hPhi_pFD_TL_MatchedP_1p =
        hPlot1D("1p", "", "TL #phi^{truth}_{pFD} of matched TL p", "#phi^{truth}_{pFD} of matched TL FD proton", "#phi^{truth}_{pFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1p_Directory"], "02b_Phi_pFD_MatchedN_TL_1p", Phi_lboundary, Phi_uboundary, numTH1Dbins_nRes_Plots);
    TH2D *hTheta_pFD_TL_VS_Phi_pFD_TL_MatchedP_1p =
        new TH2D("#theta^{truth}_{pFD} vs. #phi^{truth}_{pFD} of matched TL p (1p, FD)",
                 "#theta^{truth}_{pFD} vs. #phi^{truth}_{pFD} of matched TL FD proton (1p, FD);#phi^{truth}_{pFD} [#circ];#theta^{truth}_{pFD} [#circ]", numTH2Dbins_nRes_Plots,
                 Phi_lboundary, Phi_uboundary, numTH2Dbins_nRes_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_pFD_TL_VS_Phi_pFD_TL_MatchedP_1p_Dir = directories.Resolution_Directory_map["Monitoring_1p_Directory"];

    hPlot1D hP_pFD_Res_1p = hPlot1D("1p", "", "R_{pFD}", "FD neutron R_{pFD}", "Resolution = (P^{truth}_{pFD} - P^{reco}_{pFD})/P^{truth}_{pFD}",
                                    directories.Resolution_Directory_map["Resolution_1p_Directory"], "04_P_pFD_Res_1p", -2, 2, numTH1Dbins_nRes_Plots);
    TH2D *hP_pFD_Res_VS_TL_P_pFD_1p = new TH2D("R_{pFD} vs. P^{truth}_{pFD} (1p, FD)",
                                               "R_{pFD} vs. P^{truth}_{pFD} (1p, FD);P^{truth}_{pFD} [GeV/c];"
                                               "Resolution = (P^{truth}_{pFD} - P^{reco}_{pFD})/P^{truth}_{pFD}",
                                               numTH2Dbins_nRes_Plots, 0, beamE * 1.1, numTH2Dbins_nRes_Plots, -1.1, 1.1);
    TH2D *hP_pFD_Res_VS_TL_P_pFD_ZOOMIN_1p =
        new TH2D("R_{pFD} vs. P^{truth}_{pFD} - ZOOMIN (1p, FD)",
                 "R_{pFD} vs. P^{truth}_{pFD} - ZOOMIN (1p, FD);P^{truth}_{pFD} [GeV/c];"
                 "Resolution = (P^{truth}_{pFD} - P^{reco}_{pFD})/P^{truth}_{pFD}",
                 numTH2Dbins_nRes_Plots, FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(), numTH2Dbins_nRes_Plots, -0.75, 0.75);
    TH2D *hP_pFD_Res_VS_TL_P_pFD_noKC_1p = new TH2D("R_{pFD} vs. P^{truth}_{pFD} no mom. KC (1p, FD)",
                                                    "R_{pFD} vs. P^{truth}_{pFD} no mom. KC (1p, FD);P^{truth}_{pFD} [GeV/c];"
                                                    "Resolution = (P^{truth}_{pFD} - P^{reco}_{pFD})/P^{truth}_{pFD}",
                                                    numTH2Dbins_nRes_Plots, 0, beamE * 1.1, numTH2Dbins_nRes_Plots, -1.1, 1.1);
    TH2D *hP_pFD_Res_VS_Reco_P_pFD_1p = new TH2D("R_{pFD} vs. P^{reco}_{pFD} (1p, FD)",
                                                 "R_{pFD} vs. P^{reco}_{pFD} (1p, FD);P^{reco}_{pFD} [GeV/c];"
                                                 "Resolution = (P^{truth}_{pFD} - P^{reco}_{pFD})/P^{truth}_{pFD}",
                                                 numTH2Dbins_nRes_Plots, 0, beamE * 1.1, numTH2Dbins_nRes_Plots, -1.1, 1.1);
    TH2D *hP_pFD_Res_VS_Reco_P_pFD_ZOOMIN_1p =
        new TH2D("R_{pFD} vs. P^{reco}_{pFD} - ZOOMIN (1p, FD)",
                 "R_{pFD} vs. P^{reco}_{pFD} - ZOOMIN (1p, FD);P^{reco}_{pFD} [GeV/c];"
                 "Resolution = (P^{truth}_{pFD} - P^{reco}_{pFD})/P^{truth}_{pFD}",
                 numTH2Dbins_nRes_Plots, FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(), numTH2Dbins_nRes_Plots, -0.75, 0.75);
    TH2D *hP_pFD_Res_VS_Reco_P_pFD_noKC_1p = new TH2D("R_{pFD} vs. P^{reco}_{pFD} no mom. KC (1p, FD)",
                                                      "R_{pFD} vs. P^{reco}_{pFD} no mom. KC (1p, FD);P^{reco}_{pFD} [GeV/c];"
                                                      "Resolution = (P^{truth}_{pFD} - P^{reco}_{pFD})/P^{truth}_{pFD}",
                                                      numTH2Dbins_nRes_Plots, 0, beamE * 1.1, numTH2Dbins_nRes_Plots, -1.1, 1.1);
    TH2D *hP_pFD_Res_VS_Smear_Reco_P_pFD_1p = new TH2D("R_{pFD} vs. smeared P^{reco}_{pFD} (1p, FD)",
                                                       "R_{pFD} vs. smeared P^{reco}_{pFD} (1p, FD);Smeared P^{reco}_{pFD} [GeV/c];"
                                                       "Resolution = (P^{truth}_{pFD} - P^{reco}_{pFD})/P^{truth}_{pFD}",
                                                       numTH2Dbins_nRes_Plots, 0, beamE * 1.1, numTH2Dbins_nRes_Plots, -1.1, 1.1);
    TH2D *hP_pFD_Res_VS_Smear_Reco_P_pFD_ZOOMIN_1p =
        new TH2D("R_{pFD} vs. smeared P^{reco}_{pFD} - ZOOMIN (1p, FD)",
                 "R_{pFD} vs. smeared P^{reco}_{pFD} - ZOOMIN (1p, FD);Smeared P^{reco}_{pFD} [GeV/c];"
                 "Resolution = (P^{truth}_{pFD} - P^{reco}_{pFD})/P^{truth}_{pFD}",
                 numTH2Dbins_nRes_Plots, FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(), numTH2Dbins_nRes_Plots, -0.75, 0.75);
    TH2D *hP_pFD_Res_VS_Smear_Reco_P_pFD_noKC_1p = new TH2D("R_{pFD} vs. smeared P^{reco}_{pFD} no mom. KC (1p, FD)",
                                                            "R_{pFD} vs. smeared P^{reco}_{pFD} no mom. KC (1p, FD);Smeared P^{reco}_{pFD} [GeV/c];"
                                                            "Resolution = (P^{truth}_{pFD} - P^{reco}_{pFD})/P^{truth}_{pFD}",
                                                            numTH2Dbins_nRes_Plots, 0, beamE * 1.1, numTH2Dbins_nRes_Plots, -1.1, 1.1);
    string hP_pFD_Res_VS_TL_P_pFD_1p_Dir = directories.Resolution_Directory_map["Resolution_1p_Directory"];
    string hP_pFD_Res_VS_Reco_P_pFD_1p_Dir = directories.Resolution_Directory_map["Resolution_1p_Directory"];

    // Match multiplicity (1p)
    hPlot1D hpRes_Match_Multi_1p = hPlot1D("1p", "FD", "Proton resolution match multiplicity", "Proton resolution match multiplicity", "Match multiplicity",
                                           directories.Resolution_Directory_map["Match_multi_1p_Directory"], "01_pRes_Match_Multi_1p", 0, 10., 10);
    hPlot2D hpRes_Match_Multi_vs_Reco_P_pFD_1p =
        hPlot2D("1p", "FD", "Match multiplicity vs. P^{reco}_{pFD}", "Match multiplicity vs. P^{reco}_{pFD}", "Match multiplicity", "P^{reco}_{pFD} [GeV/c]",
                directories.Resolution_Directory_map["Match_multi_1p_Directory"], "02_pRes_Match_Multi_vs_Reco_P_pFD_1p", 0, 10., Momentum_lboundary, Momentum_uboundary, 10, 50);
    hPlot2D hpRes_Match_Multi_vs_Reco_Theta_pFD_1p =
        hPlot2D("1p", "FD", "Match multiplicity vs. #theta^{reco}_{pFD}", "Match multiplicity vs. #theta^{reco}_{pFD}", "Match multiplicity", "#theta^{reco}_{pFD} [#circ]",
                directories.Resolution_Directory_map["Match_multi_1p_Directory"], "03_pRes_Match_Multi_vs_Reco_Theta_pFD_1p", 0, 10., Theta_lboundary_FD, Theta_uboundary_FD, 10, 50);
    hPlot2D hpRes_Match_Multi_vs_Reco_Phi_pFD_1p =
        hPlot2D("1p", "FD", "Match multiplicity vs. #phi^{reco}_{pFD}", "Match multiplicity vs. #phi^{reco}_{pFD}", "Match multiplicity", "#phi^{reco}_{pFD} [#circ]",
                directories.Resolution_Directory_map["Match_multi_1p_Directory"], "04_pRes_Match_Multi_vs_Reco_Phi_pFD_1p", 0, 10., Phi_lboundary, Phi_uboundary, 10, 50);

    hPlot1D hReco_P_pFD_pRes_1p =
        hPlot1D("1p", "FD", "Reco P_{pFD} used in pRes", "Reco P_{pFD} used in pRes", "P_{pFD} [GeV/c]", directories.Resolution_Directory_map["Resolution_1p_Directory"],
                "06a_Reco_P_pFD_used_in_pRes_1p", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hTL_P_pFD_pRes_1p = hPlot1D("1p", "FD", "TL P_{pFD} used in pRes", "TL P_{pFD} used in pRes", "P_{pFD} [GeV/c]", directories.Resolution_Directory_map["Resolution_1p_Directory"],
                                        "06b_TL_P_pFD_used_in_pRes_1p", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot2D hTL_P_pFD_vs_Reco_P_pFD_1p = hPlot2D("1p", "FD", "P^{truth}_{pFD} vs. P^{reco}_{pFD}", "P^{truth}_{pFD} vs. P^{reco}_{pFD}", "P^{truth}_{pFD} [GeV/c]", "P^{reco}_{pFD} [GeV/c]",
                                                 directories.Resolution_Directory_map["Resolution_1p_Directory"], "00XX_TL_P_pFD_vs_Reco_P_pFD_1p", Momentum_lboundary, Momentum_uboundary,
                                                 Momentum_lboundary, Momentum_uboundary, numTH2Dbins_nRes_Plots, numTH2Dbins_nRes_Plots);
    hPlot2D hTL_P_pFD_vs_Smear_Reco_P_pFD_1p = hPlot2D("1p", "FD", "P^{truth}_{pFD} vs. smeared P^{reco}_{pFD}", "P^{truth}_{pFD} vs. smeared P^{reco}_{pFD}", "P^{truth}_{pFD} [GeV/c]",
                                                       "Smeared P^{reco}_{pFD} [GeV/c]", directories.Resolution_Directory_map["Resolution_1p_Directory"], "00XX_TL_P_pFD_vs_Reco_P_pFD_1p",
                                                       Momentum_lboundary, Momentum_uboundary, Momentum_lboundary, Momentum_uboundary, numTH2Dbins_nRes_Plots, numTH2Dbins_nRes_Plots);

    // Resolution histograms (1n)

    // Match monitoring plots (1n)
    hPlot1D hdTheta_nFD_TL_BC_1n =
        hPlot1D("1n", "FD", "TL #Delta#theta_{nFD} BC", "#Delta#theta_{nFD} of FD neutron BC", "#Delta#theta_{nFD} = #theta^{rec}_{nFD} - #theta^{truth}_{nFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1n_Directory"], "00a_DeltaTheta_nFD_BC_TL_1n", -Theta_uboundary_FD, Theta_uboundary_FD, numTH1Dbins_nRes_Plots);
    hPlot1D hdTheta_nFD_TL_ZOOMIN_BC_1n =
        hPlot1D("1n", "FD", "TL #Delta#theta_{nFD} - ZOOMIN BC", "#Delta#theta_{nFD} of FD neutron - ZOOMIN BC", "#Delta#theta_{nFD} = #theta^{rec}_{nFD} - #theta^{truth}_{nFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1n_Directory"], "00b_DeltaTheta_nFD_BC_TL_ZOOMIN_1n", -10.0, 10.0, numTH1Dbins_nRes_Plots);
    hPlot1D hdPhi_nFD_TL_BC_1n = hPlot1D("1n", "FD", "TL #Delta#phi_{nFD} BC", "#Delta#phi_{nFD} of FD neutron BC", "#Delta#phi_{nFD} = #phi^{rec}_{nFD} - #phi^{truth}_{nFD} [#circ]",
                                         directories.Resolution_Directory_map["Monitoring_1n_Directory"], "00c_DeltaPhi_nFD_BC_TL_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_nRes_Plots);
    hPlot1D hdPhi_nFD_TL_ZOOMIN_BC_1n =
        hPlot1D("1n", "FD", "TL #Delta#phi_{nFD} - ZOOMIN BC", "#Delta#phi_{nFD} of FD neutron - ZOOMIN BC", "#Delta#phi_{nFD} = #phi^{rec}_{nFD} - #phi^{truth}_{nFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1n_Directory"], "00d_DeltaPhi_nFD_BC_TL_ZOOMIN_1n", -20, 20, numTH1Dbins_nRes_Plots);

    hPlot1D hdTheta_nFD_TL_AdPC_1n =
        hPlot1D("1n", "FD", "TL #Delta#theta_{nFD} AdPC", "#Delta#theta_{nFD} of FD neutron AdPC", "#Delta#theta_{nFD} = #theta^{rec}_{nFD} - #theta^{truth}_{nFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1n_Directory"], "00e_DeltaTheta_nFD_AdPC_TL_1n", -Theta_uboundary_FD, Theta_uboundary_FD, numTH1Dbins_nRes_Plots);
    hPlot1D hdTheta_nFD_TL_ZOOMIN_AdPC_1n =
        hPlot1D("1n", "FD", "TL #Delta#theta_{nFD} - ZOOMIN AdPC", "#Delta#theta_{nFD} of FD neutron - ZOOMIN AdPC", "#Delta#theta_{nFD} = #theta^{rec}_{nFD} - #theta^{truth}_{nFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1n_Directory"], "00f_DeltaTheta_nFD_AdPC_TL_ZOOMIN_1n", -10.0, 10.0, numTH1Dbins_nRes_Plots);
    hPlot1D hdPhi_nFD_TL_AdPC_1n =
        hPlot1D("1n", "FD", "TL #Delta#phi_{nFD} AdPC", "#Delta#phi_{nFD} of FD neutron AdPC", "#Delta#phi_{nFD} = #phi^{rec}_{nFD} - #phi^{truth}_{nFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1n_Directory"], "00g_DeltaPhi_nFD_AdPC_TL_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_nRes_Plots);
    hPlot1D hdPhi_nFD_TL_ZOOMIN_AdPC_1n =
        hPlot1D("1n", "FD", "TL #Delta#phi_{nFD} - ZOOMIN AdPC", "#Delta#phi_{nFD} of FD neutron - ZOOMIN AdPC", "#Delta#phi_{nFD} = #phi^{rec}_{nFD} - #phi^{truth}_{nFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1n_Directory"], "00h_DeltaPhi_nFD_AdPC_TL_ZOOMIN_1n", -20, 20, numTH1Dbins_nRes_Plots);

    hPlot1D hTheta_nFD_TL_AnResC_1n =
        hPlot1D("1n", "", "TL #theta^{truth}_{nFD} AnResC", "#theta^{truth}_{nFD} of FD neutron AnResC", "#theta^{truth}_{nFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1n_Directory"], "01a_Theta_nFD_AnResC_TL_1n", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_nRes_Plots);
    hPlot1D hPhi_nFD_TL_AnResC_1n =
        hPlot1D("1n", "", "TL #phi^{truth}_{nFD} AnResC", "#phi^{truth}_{nFD} of FD neutron AnResC", "#phi^{truth}_{nFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1n_Directory"], "02a_Phi_nFD_AnResC_TL_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_nRes_Plots);
    TH2D *hTheta_nFD_TL_VS_Phi_nFD_TL_AnResC_1n = new TH2D("#theta^{truth}_{nFD} vs. #phi^{truth}_{nFD} AnResC (1n, FD)",
                                                           "#theta^{truth}_{nFD} vs. #phi^{truth}_{nFD} AnResC (1n, FD);#phi^{truth}_{nFD} [#circ];#theta^{truth}_{nFD} [#circ]",
                                                           numTH2Dbins_nRes_Plots, Phi_lboundary, Phi_uboundary, numTH2Dbins_nRes_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_nFD_TL_VS_Phi_nFD_TL_AnResC_1n_Dir = directories.Resolution_Directory_map["Monitoring_1n_Directory"];

    hPlot1D hTheta_nFD_TL_MatchedN_1n =
        hPlot1D("1n", "", "TL #theta^{truth}_{nFD} of matched TL n", "#theta^{truth}_{nFD} of matched TL FD neutron", "#theta^{truth}_{nFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1n_Directory"], "01b_Theta_nFD_MatchedN_TL_1n", Theta_lboundary_FD, Theta_uboundary_FD, numTH1Dbins_nRes_Plots);
    hPlot1D hPhi_nFD_TL_MatchedN_1n =
        hPlot1D("1n", "", "TL #phi^{truth}_{nFD} of matched TL n", "#phi^{truth}_{nFD} of matched TL FD neutron", "#phi^{truth}_{nFD} [#circ]",
                directories.Resolution_Directory_map["Monitoring_1n_Directory"], "02b_Phi_nFD_MatchedN_TL_1n", Phi_lboundary, Phi_uboundary, numTH1Dbins_nRes_Plots);
    TH2D *hTheta_nFD_TL_VS_Phi_nFD_TL_MatchedN_1n =
        new TH2D("#theta^{truth}_{nFD} vs. #phi^{truth}_{nFD} of matched TL n (1n, FD)",
                 "#theta^{truth}_{nFD} vs. #phi^{truth}_{nFD} of matched TL FD neutron (1n, FD);#phi^{truth}_{nFD} [#circ];#theta^{truth}_{nFD} [#circ]", numTH2Dbins_nRes_Plots,
                 Phi_lboundary, Phi_uboundary, numTH2Dbins_nRes_Plots, Theta_lboundary_FD, Theta_uboundary_FD);
    string hTheta_nFD_TL_VS_Phi_nFD_TL_MatchedN_1n_Dir = directories.Resolution_Directory_map["Monitoring_1n_Directory"];

    hPlot1D hP_nFD_Res_1n = hPlot1D("1n", "", "R_{nFD}", "FD neutron R_{nFD}", "Resolution = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}",
                                    directories.Resolution_Directory_map["Resolution_1n_Directory"], "04_P_nFD_Res_1n", -2, 2, numTH1Dbins_nRes_Plots);
    TH2D *hP_nFD_Res_VS_TL_P_nFD_1n = new TH2D("R_{nFD} vs. P^{truth}_{nFD} (1n, FD)",
                                               "R_{nFD} vs. P^{truth}_{nFD} (1n, FD);P^{truth}_{nFD} [GeV/c];"
                                               "Resolution = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}",
                                               numTH2Dbins_nRes_Plots, 0, beamE * 1.1, numTH2Dbins_nRes_Plots, -1.1, 1.1);
    TH2D *hP_nFD_Res_VS_TL_P_nFD_ZOOMIN_1n =
        new TH2D("R_{nFD} vs. P^{truth}_{nFD} - ZOOMIN (1n, FD)",
                 "R_{nFD} vs. P^{truth}_{nFD} - ZOOMIN (1n, FD);P^{truth}_{nFD} [GeV/c];"
                 "Resolution = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}",
                 numTH2Dbins_nRes_Plots, FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(), numTH2Dbins_nRes_Plots, -0.75, 0.75);
    TH2D *hP_nFD_Res_VS_TL_P_nFD_noKC_1n = new TH2D("R_{nFD} vs. P^{truth}_{nFD} no mom. KC (1n, FD)",
                                                    "R_{nFD} vs. P^{truth}_{nFD} no mom. KC (1n, FD);P^{truth}_{nFD} [GeV/c];"
                                                    "Resolution = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}",
                                                    numTH2Dbins_nRes_Plots, 0, beamE * 1.1, numTH2Dbins_nRes_Plots, -1.1, 1.1);
    TH2D *hP_nFD_Res_VS_Reco_P_nFD_1n = new TH2D("R_{nFD} vs. P^{reco}_{nFD} (1n, FD)",
                                                 "R_{nFD} vs. P^{reco}_{nFD} (1n, FD);P^{reco}_{nFD} [GeV/c];"
                                                 "Resolution = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}",
                                                 numTH2Dbins_nRes_Plots, 0, beamE * 1.1, numTH2Dbins_nRes_Plots, -1.1, 1.1);
    TH2D *hP_nFD_Res_VS_Reco_P_nFD_ZOOMIN_1n =
        new TH2D("R_{nFD} vs. P^{reco}_{nFD} - ZOOMIN (1n, FD)",
                 "R_{nFD} vs. P^{reco}_{nFD} - ZOOMIN (1n, FD);P^{reco}_{nFD} [GeV/c];"
                 "Resolution = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}",
                 numTH2Dbins_nRes_Plots, FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(), numTH2Dbins_nRes_Plots, -0.75, 0.75);
    TH2D *hP_nFD_Res_VS_Reco_P_nFD_noKC_1n = new TH2D("R_{nFD} vs. P^{reco}_{nFD} no mom. KC (1n, FD)",
                                                      "R_{nFD} vs. P^{reco}_{nFD} no mom. KC (1n, FD);P^{reco}_{nFD} [GeV/c];"
                                                      "Resolution = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}",
                                                      numTH2Dbins_nRes_Plots, 0, beamE * 1.1, numTH2Dbins_nRes_Plots, -1.1, 1.1);
    TH2D *hP_nFD_Res_VS_Corr_Reco_P_nFD_1n = new TH2D("R_{nFD} vs. corrected P^{reco}_{nFD} (1n, FD)",
                                                      "R_{nFD} vs. corrected P^{reco}_{nFD} (1n, FD);Corrected P^{reco}_{nFD} [GeV/c];"
                                                      "Resolution = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}",
                                                      numTH2Dbins_nRes_Plots, 0, beamE * 1.1, numTH2Dbins_nRes_Plots, -1.1, 1.1);
    TH2D *hP_nFD_Res_VS_Corr_Reco_P_nFD_ZOOMIN_1n =
        new TH2D("R_{nFD} vs. corrected P^{reco}_{nFD} - ZOOMIN (1n, FD)",
                 "R_{nFD} vs. corrected P^{reco}_{nFD} - ZOOMIN (1n, FD);Corrected P^{reco}_{nFD} [GeV/c];"
                 "Resolution = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}",
                 numTH2Dbins_nRes_Plots, FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(), numTH2Dbins_nRes_Plots, -0.75, 0.75);
    TH2D *hP_nFD_Res_VS_Corr_Reco_P_nFD_noKC_1n = new TH2D("R_{nFD} vs. corrected P^{reco}_{nFD} no mom. KC (1n, FD)",
                                                           "R_{nFD} vs. corrected P^{reco}_{nFD} no mom. KC (1n, FD);Corrected P^{reco}_{nFD} [GeV/c];"
                                                           "Resolution = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}",
                                                           numTH2Dbins_nRes_Plots, 0, beamE * 1.1, numTH2Dbins_nRes_Plots, -1.1, 1.1);
    string hP_nFD_Res_VS_TL_P_nFD_1n_Dir = directories.Resolution_Directory_map["Resolution_1n_Directory"];
    string hP_nFD_Res_VS_Reco_P_nFD_1n_Dir = directories.Resolution_Directory_map["Resolution_1n_Directory"];

    // Basic neutron variables (1n)
    hPlot1D hReco_L_1n = hPlot1D("1n", "FD", "Reco neutron path #font[12]{L_{reco}}", "Reco neutron path #font[12]{L_{reco}}", "#font[12]{L_{reco}} [cm]",
                                 directories.Resolution_Directory_map["Basic_var_1n_Directory"], "01a_Reco_L_1n", 700, 950, numTH1Dbins);
    hPlot2D hReco_L_VS_reco_P_nFD_1n =
        hPlot2D("1n", "FD", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{P^{reco}_{nFD}}", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{P^{reco}_{nFD}}",
                "#font[12]{L_{reco}} [cm]", "#font[12]{P^{reco}_{nFD}} [GeV/c]", directories.Resolution_Directory_map["Basic_var_1n_Directory"], "01b_Reco_L_VS_reco_P_nFD_1n", 700, 950,
                0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hReco_L_VS_truth_P_nFD_1n =
        hPlot2D("1n", "FD", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{P^{truth}_{nFD}}", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{P^{truth}_{nFD}}",
                "#font[12]{L_{reco}} [cm]", "#font[12]{P^{truth}_{nFD}} [GeV/c]", directories.Resolution_Directory_map["Basic_var_1n_Directory"], "01c_Reco_L_VS_truth_P_nFD_1n", 700, 950,
                0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hReco_L_VS_R_nFD_1n = hPlot2D("1n", "FD", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{R_{nFD}}", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{R_{nFD}}",
                                          "#font[12]{L_{reco}} [cm]", "#font[12]{R_{nFD} = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}}",
                                          directories.Resolution_Directory_map["Basic_var_1n_Directory"], "01d_Reco_L_VS_R_nFD_1n", 700, 950, -1, 1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hReco_L_VS_reco_theta_nFD_1n =
        hPlot2D("1n", "FD", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{#theta_{nFD}}", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{#theta_{nFD}}",
                "#font[12]{L_{reco}} [cm]", "#font[12]{#theta_{nFD}} [#circ]", directories.Resolution_Directory_map["Basic_var_1n_Directory"], "01e_Reco_L_VS_reco_theta_nFD_1n", 700, 950,
                Theta_lboundary_FD, Theta_uboundary_FD, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hReco_L_VS_reco_phi_nFD_1n =
        hPlot2D("1n", "FD", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{#phi_{nFD}}", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{#phi_{nFD}}", "#font[12]{L_{reco}} [cm]",
                "#font[12]{#phi_{nFD}} [#circ]", directories.Resolution_Directory_map["Basic_var_1n_Directory"], "01f_Reco_L_VS_reco_phi_nFD_1n", 700, 950, Phi_lboundary, Phi_uboundary,
                numTH2Dbins * 3, numTH2Dbins * 3);

    hPlot1D hReco_L_ECIN_1n = hPlot1D("1n", "ECIN Only", "Reco neutron path #font[12]{L_{reco}}", "Reco neutron path #font[12]{L_{reco}}", "#font[12]{L_{reco}} [cm]",
                                      directories.Resolution_Directory_map["Basic_var_1n_Directory"], "02a_Reco_L_ECIN_1n", 700, 950, numTH1Dbins);
    hPlot2D hReco_L_VS_reco_P_nFD_ECIN_1n =
        hPlot2D("1n", "ECIN Only", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{P^{reco}_{nFD}}", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{P^{reco}_{nFD}}",
                "#font[12]{L_{reco}} [cm]", "#font[12]{P^{reco}_{nFD}} [GeV/c]", directories.Resolution_Directory_map["Basic_var_1n_Directory"], "02b_Reco_L_VS_reco_P_nFD_ECIN_1n", 700, 950,
                0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hReco_L_VS_truth_P_nFD_ECIN_1n =
        hPlot2D("1n", "ECIN Only", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{P^{truth}_{nFD}}", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{P^{truth}_{nFD}}",
                "#font[12]{L_{reco}} [cm]", "#font[12]{P^{truth}_{nFD}} [GeV/c]", directories.Resolution_Directory_map["Basic_var_1n_Directory"], "02c_Reco_L_VS_truth_P_nFD_ECIN_1n", 700,
                950, 0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hReco_L_VS_R_nFD_ECIN_1n =
        hPlot2D("1n", "ECIN Only", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{R_{nFD}}", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{R_{nFD}}", "#font[12]{L_{reco}} [cm]",
                "#font[12]{R_{nFD} = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}}", directories.Resolution_Directory_map["Basic_var_1n_Directory"], "02d_Reco_L_VS_R_nFD_ECIN_1n", 700,
                950, -1, 1, numTH2Dbins * 3, numTH2Dbins * 3);

    hPlot1D hReco_L_ECOUT_1n = hPlot1D("1n", "ECOUT Only", "Reco neutron path #font[12]{L_{reco}}", "Reco neutron path #font[12]{L_{reco}}", "#font[12]{L_{reco}} [cm]",
                                       directories.Resolution_Directory_map["Basic_var_1n_Directory"], "03a_Reco_L_ECOUT_1n", 700, 950, numTH1Dbins);
    hPlot2D hReco_L_VS_reco_P_nFD_ECOUT_1n =
        hPlot2D("1n", "ECOUT Only", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{P^{reco}_{nFD}}", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{P^{reco}_{nFD}}",
                "#font[12]{L_{reco}} [cm]", "#font[12]{P^{reco}_{nFD}} [GeV/c]", directories.Resolution_Directory_map["Basic_var_1n_Directory"], "03b_Reco_L_VS_reco_P_nFD_ECOUT_1n", 700,
                950, 0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hReco_L_VS_truth_P_nFD_ECOUT_1n =
        hPlot2D("1n", "ECOUT Only", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{P^{truth}_{nFD}}", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{P^{truth}_{nFD}}",
                "#font[12]{L_{reco}} [cm]", "#font[12]{P^{truth}_{nFD}} [GeV/c]", directories.Resolution_Directory_map["Basic_var_1n_Directory"], "03c_Reco_L_VS_truth_P_nFD_ECOUT_1n", 700,
                950, 0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hReco_L_VS_R_nFD_ECOUT_1n =
        hPlot2D("1n", "ECOUT Only", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{R_{nFD}}", "Reco neutron path #font[12]{L_{reco}} vs. #font[12]{R_{nFD}}",
                "#font[12]{L_{reco}} [cm]", "#font[12]{R_{nFD} = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}}", directories.Resolution_Directory_map["Basic_var_1n_Directory"],
                "03d_Reco_L_VS_R_nFD_ECOUT_1n", 700, 950, -1, 1, numTH2Dbins * 3, numTH2Dbins * 3);

    hPlot1D hReco_t_ToF_1n = hPlot1D("1n", "FD", "Reco neutron #font[12]{t_{ToF}}", "Reco neutron #font[12]{t_{ToF}}", "#font[12]{t_{ToF}} [ns]",
                                     directories.Resolution_Directory_map["Basic_var_1n_Directory"], "04a_Reco_t_ToF_1n", 135, 220, numTH1Dbins);
    hPlot2D hReco_t_ToF_VS_reco_P_nFD_1n =
        hPlot2D("1n", "FD", "Reco neutron #font[12]{t_{ToF}} vs. #font[12]{P^{reco}_{nFD}}", "Reco neutron #font[12]{t_{ToF}} vs. #font[12]{P^{reco}_{nFD}}", "#font[12]{t_{ToF}} [ns]",
                "#font[12]{P^{reco}_{nFD}} [GeV/c]", directories.Resolution_Directory_map["Basic_var_1n_Directory"], "04b_Reco_t_ToF_VS_reco_P_nFD_1n", 135, 220, 0.4 * 0.95, beamE * 1.1,
                numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hReco_t_ToF_VS_truth_P_nFD_1n =
        hPlot2D("1n", "FD", "Reco neutron #font[12]{t_{ToF}} vs. #font[12]{P^{truth}_{nFD}}", "Reco neutron #font[12]{t_{ToF}} vs. #font[12]{P^{truth}_{nFD}}", "#font[12]{t_{ToF}} [ns]",
                "#font[12]{P^{truth}_{nFD}} [GeV/c]", directories.Resolution_Directory_map["Basic_var_1n_Directory"], "04c_Reco_t_ToF_VS_truth_P_nFD_1n", 135, 220, 0.4 * 0.95, beamE * 1.1,
                numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hReco_t_ToF_VS_R_nFD_1n = hPlot2D("1n", "FD", "Reco neutron #font[12]{t_{ToF}} vs. #font[12]{R_{nFD}}", "Reco neutron #font[12]{t_{ToF}} vs. #font[12]{R_{nFD}}",
                                              "#font[12]{t_{ToF}} [ns]", "#font[12]{R_{nFD} = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}}",
                                              directories.Resolution_Directory_map["Basic_var_1n_Directory"], "04d_Reco_beta_VS_R_nFD_1n", 135, 220, -1, 1, numTH2Dbins * 3, numTH2Dbins * 3);

    hPlot1D hReco_beta_1n = hPlot1D("1n", "FD", "Reco neutron #font[12]{#beta^{reco}_{nFD}}", "Reco neutron #font[12]{#beta^{reco}_{nFD}}", "#font[12]{#beta^{reco}_{nFD}}",
                                    directories.Resolution_Directory_map["Basic_var_1n_Directory"], "05a_Reco_beta_1n", 0.35, 1.05, numTH1Dbins);
    hPlot2D hReco_beta_VS_reco_P_nFD_1n =
        hPlot2D("1n", "FD", "Reco neutron #font[12]{#beta^{reco}_{nFD}} vs. #font[12]{P^{reco}_{nFD}}", "Reco neutron #font[12]{#beta^{reco}_{nFD}} vs. #font[12]{P^{reco}_{nFD}}",
                "#font[12]{P^{reco}_{nFD}} [GeV/c]", "#font[12]{#beta^{reco}_{nFD}}", directories.Resolution_Directory_map["Basic_var_1n_Directory"], "05b_Reco_beta_VS_reco_P_nFD_1n",
                0.4 * 0.95, beamE * 1.1, 0.35, 1.05, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hReco_beta_VS_truth_P_nFD_1n =
        hPlot2D("1n", "FD", "Reco neutron #font[12]{#beta^{reco}_{nFD}} vs. #font[12]{P^{truth}_{nFD}}", "Reco neutron #font[12]{#beta^{reco}_{nFD}} vs. #font[12]{P^{truth}_{nFD}}",
                "#font[12]{P^{truth}_{nFD}} [GeV/c]", "#font[12]{#beta^{reco}_{nFD}}", directories.Resolution_Directory_map["Basic_var_1n_Directory"], "05c_Reco_beta_VS_truth_P_nFD_1n",
                0.4 * 0.95, beamE * 1.1, 0.35, 1.05, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hReco_beta_VS_R_nFD_1n =
        hPlot2D("1n", "FD", "Reco neutron #font[12]{#beta^{reco}_{nFD}} vs. #font[12]{R_{nFD}}", "Reco neutron #font[12]{#beta^{reco}_{nFD}} vs. #font[12]{R_{nFD}}",
                "#font[12]{#beta^{reco}_{nFD}}", "#font[12]{R_{nFD} = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}}", directories.Resolution_Directory_map["Basic_var_1n_Directory"],
                "05d_Reco_beta_VS_R_nFD_1n", 0.35, 1.05, -1, 1, numTH2Dbins * 3, numTH2Dbins * 3);

    hPlot1D hReco_ToF_from_beta_1n = hPlot1D("1n", "FD", "Reco neutron ToF from #font[12]{#beta^{reco}_{nFD}} - #font[12]{t_{ToF}^{#beta^{reco}_{nFD}}}",
                                             "Reco neutron ToF from #font[12]{#beta^{reco}_{nFD}} - #font[12]{t_{ToF}^{#beta^{reco}_{nFD}}}",
                                             "#font[12]{t_{ToF}^{#beta^{reco}_{nFD}} = L_{reco}/#left(c#times#beta^{reco}_{nFD}#right)} [ns]",
                                             directories.Resolution_Directory_map["Basic_var_1n_Directory"], "06a_Reco_ToF_from_beta_1n", 20, 75, numTH1Dbins);
    hPlot2D hReco_ToF_from_beta_VS_reco_P_nFD_1n = hPlot2D(
        "1n", "FD", "Reco neutron ToF from #font[12]{#beta^{reco}_{nFD}} vs. #font[12]{P^{reco}_{nFD}}", "Reco neutron ToF from #font[12]{#beta^{reco}_{nFD}} vs. #font[12]{P^{reco}_{nFD}}",
        "#font[12]{t_{ToF}^{#beta^{reco}_{nFD}} = L_{reco}/#left(c#times#beta^{reco}_{nFD}#right)} [ns]", "#font[12]{P^{reco}_{nFD}} [GeV/c]",
        directories.Resolution_Directory_map["Basic_var_1n_Directory"], "06b_Reco_ToF_from_beta_VS_reco_P_nFD_1n", 20, 75, 0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hReco_ToF_from_beta_VS_truth_P_nFD_1n = hPlot2D("1n", "FD", "Reco neutron ToF from #font[12]{#beta^{reco}_{nFD}} vs. #font[12]{P^{truth}_{nFD}}",
                                                            "Reco neutron ToF from #font[12]{#beta^{reco}_{nFD}} vs. #font[12]{P^{truth}_{nFD}}",
                                                            "#font[12]{t_{ToF}^{#beta^{reco}_{nFD}} = L_{reco}/#left(c#times#beta^{reco}_{nFD}#right)} [ns]",
                                                            "#font[12]{P^{truth}_{nFD}} [GeV/c]", directories.Resolution_Directory_map["Basic_var_1n_Directory"],
                                                            "06c_Reco_ToF_from_beta_VS_truth_P_nFD_1n", 20, 75, 0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hReco_ToF_from_beta_VS_R_nFD_1n =
        hPlot2D("1n", "FD", "Reco neutron ToF from #font[12]{#beta^{reco}_{nFD}} vs. #font[12]{R_{nFD}}", "Reco neutron ToF from #font[12]{#beta^{reco}_{nFD}} vs. #font[12]{R_{nFD}}",
                "#font[12]{t_{ToF}^{#beta^{reco}_{nFD}} = L_{reco}/#left(c#times#beta^{reco}_{nFD}#right)} [ns]", "#font[12]{R_{nFD} = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}}",
                directories.Resolution_Directory_map["Basic_var_1n_Directory"], "06d_Reco_ToF_from_beta_VS_R_nFD_1n", 20, 75, -1, 1, numTH2Dbins * 3, numTH2Dbins * 3);

    hPlot1D hReco_calc_ToF_1n =
        hPlot1D("1n", "FD", "Reco neutron ToF from calculation - #font[12]{t_{ToF}^{calc}}", "Reco neutron ToF from calculation - #font[12]{t_{ToF}^{calc}}",
                "#font[12]{t_{ToF}^{calc} = t_{ECAL} - t_{start}} [ns]", directories.Resolution_Directory_map["Basic_var_1n_Directory"], "07a_Reco_calc_ToF_1n", 20, 75, numTH1Dbins);
    hPlot2D hReco_calc_ToF_VS_reco_P_nFD_1n = hPlot2D(
        "1n", "FD", "Reco neutron calculated #font[12]{t_{ToF}^{calc}} vs. #font[12]{P^{reco}_{nFD}}", "Reco neutron calculated #font[12]{t_{ToF}^{calc}} vs. #font[12]{P^{reco}_{nFD}}",
        "#font[12]{t_{ToF}^{calc} = t_{ECAL} - t_{start}} [ns]", "#font[12]{P^{reco}_{nFD}} [GeV/c]", directories.Resolution_Directory_map["Basic_var_1n_Directory"],
        "07b_Reco_calc_ToF_VS_reco_P_nFD_1n", 20, 75, 0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hReco_calc_ToF_VS_truth_P_nFD_1n = hPlot2D(
        "1n", "FD", "Reco neutron calculated #font[12]{t_{ToF}^{calc}} vs. #font[12]{P^{truth}_{nFD}}", "Reco neutron calculated #font[12]{t_{ToF}^{calc}} vs. #font[12]{P^{truth}_{nFD}}",
        "#font[12]{t_{ToF}^{calc} = t_{ECAL} - t_{start}} [ns]", "#font[12]{P^{truth}_{nFD}} [GeV/c]", directories.Resolution_Directory_map["Basic_var_1n_Directory"],
        "07c_Reco_calc_ToF_VS_truth_P_nFD_1n", 20, 75, 0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hReco_calc_ToF_VS_R_nFD_1n =
        hPlot2D("1n", "FD", "Reco neutron calculated #font[12]{t_{ToF}^{calc}} vs. #font[12]{R_{nFD}}", "Reco neutron calculated #font[12]{t_{ToF}^{calc}} vs. #font[12]{R_{nFD}}",
                "#font[12]{t_{ToF}^{calc} = t_{ECAL} - t_{start}} [ns]", "#font[12]{R_{nFD} = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}}",
                directories.Resolution_Directory_map["Basic_var_1n_Directory"], "07d_Reco_calc_ToF_VS_R_nFD_1n", 20, 75, -1, 1, numTH2Dbins * 3, numTH2Dbins * 3);

    // Correction fit justification (1n)
    hPlot1D hEff_dist_TL_1n = hPlot1D("1n", "FD", "Effective distance #font[12]{L^{truth}_{eff}} from #font[12]{#beta^{truth}_{nFD}}",
                                      "Effective distance #font[12]{L^{truth}_{eff}} from #font[12]{#beta^{truth}_{nFD}}",
                                      "#font[12]{L^{truth}_{eff} = c#times#beta^{truth}_{nFD}#timest_{ToF}^{#beta^{reco}_{nFD}}} [cm]",
                                      directories.Resolution_Directory_map["Corr_just_1n_Directory"], "08a_Eff_dist_TL_1n", 400, 1600, numTH1Dbins);
    hPlot2D hEff_dist_TL_VS_reco_P_nFD_1n =
        hPlot2D("1n", "FD", "Effective distance #font[12]{L^{truth}_{eff}} vs. #font[12]{P^{reco}_{nFD}}", "Effective distance #font[12]{L^{truth}_{eff}} vs. #font[12]{P^{reco}_{nFD}}",
                "#font[12]{L^{truth}_{eff} = c#times#beta^{truth}_{nFD}#timest_{ToF}^{#beta^{reco}_{nFD}}} [cm]", "#font[12]{P^{reco}_{nFD}} [GeV/c]",
                directories.Resolution_Directory_map["Corr_just_1n_Directory"], "08b_Eff_dist_TL_VS_reco_P_nFD_1n", 400, 1600, 0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hEff_dist_TL_VS_truth_P_nFD_1n =
        hPlot2D("1n", "FD", "Effective distance #font[12]{L^{truth}_{eff}} vs. #font[12]{P^{truth}_{nFD}}", "Effective distance #font[12]{L^{truth}_{eff}} vs. #font[12]{P^{truth}_{nFD}}",
                "#font[12]{L^{truth}_{eff} = c#times#beta^{truth}_{nFD}#timest_{ToF}^{#beta^{reco}_{nFD}}} [cm]", "#font[12]{P^{truth}_{nFD}} [GeV/c]",
                directories.Resolution_Directory_map["Corr_just_1n_Directory"], "08c_Eff_dist_TL_VS_truth_P_nFD_1n", 400, 1600, 0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hEff_dist_TL_VS_R_nFD_1n =
        hPlot2D("1n", "FD", "Effective distance #font[12]{L^{truth}_{eff}} vs. #font[12]{R_{nFD}}", "Effective distance #font[12]{L^{truth}_{eff}} vs. #font[12]{R_{nFD}}",
                "#font[12]{L^{truth}_{eff} = c#times#beta^{truth}_{nFD}#timest_{ToF}^{#beta^{reco}_{nFD}}} [cm]", "#font[12]{R_{nFD} = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}}",
                directories.Resolution_Directory_map["Corr_just_1n_Directory"], "08d_Eff_dist_TL_VS_R_nFD_1n", 400, 1600, -1, 1, numTH2Dbins * 3, numTH2Dbins * 3);

    hPlot1D hEff_dist_calc_1n =
        hPlot1D("1n", "FD", "Effective distance #font[12]{L^{calc}_{eff}} from #font[12]{t_{ToF}^{calc}}", "Effective distance #font[12]{L^{calc}_{eff}} from #font[12]{t_{ToF}^{calc}}",
                "#font[12]{L^{calc}_{eff} = c#times#beta^{truth}_{nFD}#timest_{ToF}^{calc}} [cm]", directories.Resolution_Directory_map["Corr_just_1n_Directory"], "09a_Eff_dist_calc_1n",
                400, 1600, numTH1Dbins);
    hPlot2D hEff_dist_calc_VS_reco_P_nFD_1n =
        hPlot2D("1n", "FD", "Effective distance #font[12]{L^{calc}_{eff}} vs. #font[12]{P^{reco}_{nFD}}", "Effective distance #font[12]{L^{calc}_{eff}} vs. #font[12]{P^{reco}_{nFD}}",
                "#font[12]{L^{calc}_{eff} = c#times#beta^{truth}_{nFD}#timest_{ToF}^{calc}} [cm]", "#font[12]{P^{reco}_{nFD}} [GeV/c]",
                directories.Resolution_Directory_map["Corr_just_1n_Directory"], "09b_Eff_dist_calc_VS_reco_P_nFD_1n", 400, 1600, 0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hEff_dist_calc_VS_truth_P_nFD_1n =
        hPlot2D("1n", "FD", "Effective distance #font[12]{L^{calc}_{eff}} vs. #font[12]{P^{truth}_{nFD}}", "Effective distance #font[12]{L^{calc}_{eff}} vs. #font[12]{P^{truth}_{nFD}}",
                "#font[12]{L^{calc}_{eff} = c#times#beta^{truth}_{nFD}#timest_{ToF}^{calc}} [cm]", "#font[12]{P^{truth}_{nFD}} [GeV/c]",
                directories.Resolution_Directory_map["Corr_just_1n_Directory"], "09c_Eff_dist_calc_VS_truth_P_nFD_1n", 400, 1600, 0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hEff_dist_calc_VS_R_nFD_1n =
        hPlot2D("1n", "FD", "Effective distance #font[12]{L^{calc}_{eff}} vs. #font[12]{R_{nFD}}", "Effective distance #font[12]{L^{calc}_{eff}} vs. #font[12]{R_{nFD}}",
                "#font[12]{L^{calc}_{eff} = c#times#beta^{truth}_{nFD}#timest_{ToF}^{calc}} [cm]", "#font[12]{R_{nFD} = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}}",
                directories.Resolution_Directory_map["Corr_just_1n_Directory"], "09d_Eff_dist_calc_VS_R_nFD_1n", 400, 1600, -1, 1, numTH2Dbins * 3, numTH2Dbins * 3);

    hPlot1D hDeltaL_TL_1n =
        hPlot1D("1n", "FD", "Distance difference between #font[12]{L^{truth}_{eff}} and #font[12]{L_{reco}}",
                "Distance difference between #font[12]{L^{truth}_{eff}} and #font[12]{L_{reco}}", "#font[12]{#DeltaL^{truth} = L^{truth}_{eff} - #font[12]{L_{reco}}} [cm]",
                directories.Resolution_Directory_map["Corr_just_1n_Directory"], "10a_DeltaL_TL_1n", -100, 400, numTH1Dbins);
    hPlot2D hDeltaL_TL_VS_reco_P_nFD_1n =
        hPlot2D("1n", "FD", "Distance difference #font[12]{#DeltaL^{truth}} vs. #font[12]{P^{reco}_{nFD}}", "Distance difference #font[12]{#DeltaL^{truth}} vs. #font[12]{P^{reco}_{nFD}}",
                "#font[12]{#DeltaL^{truth} = L^{truth}_{eff} - #font[12]{L_{reco}}} [cm]", "#font[12]{P^{reco}_{nFD}} [GeV/c]",
                directories.Resolution_Directory_map["Corr_just_1n_Directory"], "10b_DeltaL_TL_VS_reco_P_nFD_1n", -100, 400, 0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hDeltaL_TL_VS_truth_P_nFD_1n =
        hPlot2D("1n", "FD", "Distance difference #font[12]{#DeltaL^{truth}} vs. #font[12]{P^{truth}_{nFD}}", "Distance difference #font[12]{#DeltaL^{truth}} vs. #font[12]{P^{truth}_{nFD}}",
                "#font[12]{#DeltaL^{truth} = L^{truth}_{eff} - #font[12]{L_{reco}}} [cm]", "#font[12]{P^{truth}_{nFD}} [GeV/c]",
                directories.Resolution_Directory_map["Corr_just_1n_Directory"], "10c_DeltaL_TL_VS_truth_P_nFD_1n", -100, 400, 0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hDeltaL_TL_VS_R_nFD_1n =
        hPlot2D("1n", "FD", "Distance difference #font[12]{#DeltaL^{truth}} vs. #font[12]{R_{nFD}}", "Distance difference #font[12]{#DeltaL^{truth}} vs. #font[12]{R_{nFD}}",
                "#font[12]{#DeltaL^{truth} = L^{truth}_{eff} - #font[12]{L_{reco}}} [cm]", "#font[12]{R_{nFD} = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}}",
                directories.Resolution_Directory_map["Corr_just_1n_Directory"], "10d_DeltaL_TL_VS_R_nFD_1n", -100, 400, -1, 1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hDeltaL_TL_VS_Eff_dist_TL_1n =
        hPlot2D("1n", "FD", "Distance difference #font[12]{#DeltaL^{truth}} vs. #font[12]{L^{truth}_{eff}}", "Distance difference #font[12]{#DeltaL^{truth}} vs. #font[12]{L^{truth}_{eff}}",
                "#font[12]{#DeltaL^{truth} = L^{truth}_{eff} - #font[12]{L_{reco}}} [cm]", "#font[12]{L^{truth}_{eff} = c#times#beta^{truth}_{nFD}#timest_{ToF}^{#beta^{reco}_{nFD}}} [cm]",
                directories.Resolution_Directory_map["Corr_just_1n_Directory"], "10e_DeltaL_TL_VS_Eff_dist_TL_1n", -100, 400, 400, 1600, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hDeltaL_TL_VS_Reco_L_1n =
        hPlot2D("1n", "FD", "Distance difference #font[12]{#DeltaL^{truth}} vs. #font[12]{L_{reco}}", "Distance difference #font[12]{#DeltaL^{truth}} vs. #font[12]{L_{reco}}",
                "#font[12]{#DeltaL^{truth} = L^{truth}_{eff} - #font[12]{L_{reco}}} [cm]", "#font[12]{L_{reco}} [cm]", directories.Resolution_Directory_map["Corr_just_1n_Directory"],
                "10f_DeltaL_TL_VS_Reco_L_1n", -100, 400, 700, 950, numTH2Dbins * 3, numTH2Dbins * 3);

    hPlot1D hDeltaL_calc_1n =
        hPlot1D("1n", "FD", "Distance difference between #font[12]{L^{calc}_{eff}} and #font[12]{L_{reco}}", "Distance difference between #font[12]{L^{calc}_{eff}} and #font[12]{L_{reco}}",
                "#font[12]{#DeltaL^{calc} = L^{calc}_{eff} - #font[12]{L_{reco}}} [cm]", directories.Resolution_Directory_map["Corr_just_1n_Directory"], "11a_DeltaL_calc_1n", -100, 400,
                numTH1Dbins);
    hPlot2D hDeltaL_calc_VS_reco_P_nFD_1n =
        hPlot2D("1n", "FD", "Distance difference #font[12]{#DeltaL^{calc}} vs. #font[12]{P^{reco}_{nFD}}", "Distance difference #font[12]{#DeltaL^{calc}} vs. #font[12]{P^{reco}_{nFD}}",
                "#font[12]{#DeltaL^{calc} = L^{calc}_{eff} - #font[12]{L_{reco}}} [cm]", "#font[12]{P^{reco}_{nFD}} [GeV/c]", directories.Resolution_Directory_map["Corr_just_1n_Directory"],
                "11b_DeltaL_calc_VS_reco_P_nFD_1n", -100, 400, 0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hDeltaL_calc_VS_truth_P_nFD_1n =
        hPlot2D("1n", "FD", "Distance difference #font[12]{#DeltaL^{calc}} vs. #font[12]{P^{truth}_{nFD}}", "Distance difference #font[12]{#DeltaL^{calc}} vs. #font[12]{P^{truth}_{nFD}}",
                "#font[12]{#DeltaL^{calc} = L^{calc}_{eff} - #font[12]{L_{reco}}} [cm]", "#font[12]{P^{truth}_{nFD}} [GeV/c]", directories.Resolution_Directory_map["Corr_just_1n_Directory"],
                "11c_DeltaL_calc_VS_truth_P_nFD_1n", -100, 400, 0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hDeltaL_calc_VS_R_nFD_1n =
        hPlot2D("1n", "FD", "Distance difference #font[12]{#DeltaL^{calc}} vs. #font[12]{R_{nFD}}", "Distance difference #font[12]{#DeltaL^{calc}} vs. #font[12]{R_{nFD}}",
                "#font[12]{#DeltaL^{calc} = L^{calc}_{eff} - #font[12]{L_{reco}}} [cm]", "#font[12]{R_{nFD} = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}}",
                directories.Resolution_Directory_map["Corr_just_1n_Directory"], "11d_DeltaL_calc_VS_R_nFD_1n", -100, 400, -1, 1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hDeltaL_calc_VS_Eff_dist_TL_1n =
        hPlot2D("1n", "FD", "Distance difference #font[12]{#DeltaL^{calc}} vs. #font[12]{L^{calc}_{eff}}", "Distance difference #font[12]{#DeltaL^{calc}} vs. #font[12]{L^{calc}_{eff}}",
                "#font[12]{#DeltaL^{calc} = L^{calc}_{eff} - #font[12]{L_{reco}}} [cm]", "#font[12]{L^{calc}_{eff} = c#times#beta^{truth}_{nFD}#timest_{ToF}^{#beta^{reco}_{nFD}}} [cm]",
                directories.Resolution_Directory_map["Corr_just_1n_Directory"], "11e_DeltaL_calc_VS_Eff_dist_TL_1n", -100, 400, 400, 1600, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hDeltaL_calc_VS_Reco_L_1n =
        hPlot2D("1n", "FD", "Distance difference #font[12]{#DeltaL^{calc}} vs. #font[12]{L_{reco}}", "Distance difference #font[12]{#DeltaL^{calc}} vs. #font[12]{L_{reco}}",
                "#font[12]{#DeltaL^{calc} = L^{calc}_{eff} - #font[12]{L_{reco}}} [cm]", "#font[12]{L_{reco}} [cm]", directories.Resolution_Directory_map["Corr_just_1n_Directory"],
                "11f_DeltaL_calc_VS_Reco_L_1n", -100, 400, 700, 950, numTH2Dbins * 3, numTH2Dbins * 3);

    hPlot1D hDeltaL_TL_below_0_4_1n = hPlot1D("1n", "FD", "Distance difference between #font[12]{L^{truth}_{eff}} and #font[12]{L_{reco}} for #font[12]{R_{nFD}<0.4}",
                                              "Distance difference between #font[12]{L^{truth}_{eff}} and #font[12]{L_{reco}} for #font[12]{R_{nFD}<0.4}",
                                              "#font[12]{#DeltaL^{truth} = L^{truth}_{eff} - #font[12]{L_{reco}}} [cm]", directories.Resolution_Directory_map["Corr_just_1n_Directory"],
                                              "12a_DeltaL_TL_for_R_nFD_below_0_4_1n", -100, 400, numTH1Dbins);
    hPlot2D hDeltaL_TL_VS_reco_P_nFD_below_0_4_1n = hPlot2D("1n", "FD", "Distance difference #font[12]{#DeltaL^{truth}} vs. #font[12]{P^{reco}_{nFD}} for #font[12]{R_{nFD}<0.4}",
                                                            "Distance difference #font[12]{#DeltaL^{truth}} vs. #font[12]{P^{reco}_{nFD}} for #font[12]{R_{nFD}<0.4}",
                                                            "#font[12]{#DeltaL^{truth} = L^{truth}_{eff} - #font[12]{L_{reco}}} [cm]", "#font[12]{P^{reco}_{nFD}} [GeV/c]",
                                                            directories.Resolution_Directory_map["Corr_just_1n_Directory"], "12b_DeltaL_TL_VS_reco_P_nFD_below_0_4_1n", -100, 400, 0.4 * 0.95,
                                                            beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hDeltaL_TL_VS_truth_P_nFD_below_0_4_1n = hPlot2D("1n", "FD", "Distance difference #font[12]{#DeltaL^{truth}} vs. #font[12]{P^{truth}_{nFD}} for #font[12]{R_{nFD}<0.4}",
                                                             "Distance difference #font[12]{#DeltaL^{truth}} vs. #font[12]{P^{truth}_{nFD}} for #font[12]{R_{nFD}<0.4}",
                                                             "#font[12]{#DeltaL^{truth} = L^{truth}_{eff} - #font[12]{L_{reco}}} [cm]", "#font[12]{P^{truth}_{nFD}} [GeV/c]",
                                                             directories.Resolution_Directory_map["Corr_just_1n_Directory"], "12c_DeltaL_TL_VS_truth_P_nFD_below_0_4_1n", -100, 400,
                                                             0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hDeltaL_TL_VS_R_nFD_below_0_4_1n =
        hPlot2D("1n", "FD", "Distance difference #font[12]{#DeltaL^{truth}} vs. #font[12]{R_{nFD}} for #font[12]{R_{nFD}<0.4}",
                "Distance difference #font[12]{#DeltaL^{truth}} vs. #font[12]{R_{nFD}} for #font[12]{R_{nFD}<0.4}", "#font[12]{#DeltaL^{truth} = L^{truth}_{eff} - #font[12]{L_{reco}}} [cm]",
                "#font[12]{R_{nFD} = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}}", directories.Resolution_Directory_map["Corr_just_1n_Directory"],
                "12d_DeltaL_TL_VS_R_nFD_below_0_4_1n", -100, 400, -1, 1, numTH2Dbins * 3, numTH2Dbins * 3);

    hPlot1D hDeltaL_TL_above_0_4_1n = hPlot1D("1n", "FD", "Distance difference between #font[12]{L^{truth}_{eff}} and #font[12]{L_{reco}} for #font[12]{R_{nFD}>0.4}",
                                              "Distance difference between #font[12]{L^{truth}_{eff}} and #font[12]{L_{reco}} for #font[12]{R_{nFD}>0.4}",
                                              "#font[12]{#DeltaL = L^{truth}_{eff} - #font[12]{L_{reco}}} [cm]", directories.Resolution_Directory_map["Corr_just_1n_Directory"],
                                              "13a_DeltaL_TL_for_R_nFD_above_0_4_1n", -100, 400, numTH1Dbins);
    hPlot2D hDeltaL_TL_VS_reco_P_nFD_above_0_4_1n =
        hPlot2D("1n", "FD", "Distance difference #font[12]{#DeltaL} vs. #font[12]{P^{reco}_{nFD}} for #font[12]{R_{nFD}>0.4}",
                "Distance difference #font[12]{#DeltaL} vs. #font[12]{P^{reco}_{nFD}} for #font[12]{R_{nFD}>0.4}", "#font[12]{#DeltaL = L^{truth}_{eff} - #font[12]{L_{reco}}} [cm]",
                "#font[12]{P^{reco}_{nFD}} [GeV/c]", directories.Resolution_Directory_map["Corr_just_1n_Directory"], "13b_DeltaL_TL_VS_reco_P_nFD_above_0_4_1n", -100, 400, 0.4 * 0.95,
                beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hDeltaL_TL_VS_truth_P_nFD_above_0_4_1n =
        hPlot2D("1n", "FD", "Distance difference #font[12]{#DeltaL} vs. #font[12]{P^{truth}_{nFD}} for #font[12]{R_{nFD}>0.4}",
                "Distance difference #font[12]{#DeltaL} vs. #font[12]{P^{truth}_{nFD}} for #font[12]{R_{nFD}>0.4}", "#font[12]{#DeltaL = L^{truth}_{eff} - #font[12]{L_{reco}}} [cm]",
                "#font[12]{P^{truth}_{nFD}} [GeV/c]", directories.Resolution_Directory_map["Corr_just_1n_Directory"], "13c_DeltaL_TL_VS_truth_P_nFD_above_0_4_1n", -100, 400, 0.4 * 0.95,
                beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hDeltaL_TL_VS_R_nFD_above_0_4_1n =
        hPlot2D("1n", "FD", "Distance difference #font[12]{#DeltaL} vs. #font[12]{R_{nFD}} for #font[12]{R_{nFD}>0.4}",
                "Distance difference #font[12]{#DeltaL} vs. #font[12]{R_{nFD}} for #font[12]{R_{nFD}>0.4}", "#font[12]{#DeltaL = L^{truth}_{eff} - #font[12]{L_{reco}}} [cm]",
                "#font[12]{R_{nFD} = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}}", directories.Resolution_Directory_map["Corr_just_1n_Directory"],
                "13d_DeltaL_TL_VS_R_nFD_above_0_4_1n", -100, 400, -1, 1, numTH2Dbins * 3, numTH2Dbins * 3);

    // Smearing fit justification (1n)
    hPlot1D hDeltat_ToF_reco_1n = hPlot1D("1n", "FD", "Reco neutron ToF error #font[12]{#Deltat^{err}_{ToF}}", "Reco neutron ToF error #font[12]{#Deltat^{err}_{ToF}}",
                                          "#font[12]{#Deltat^{err}_{ToF} = - t_{ToF}#times#left(1 - #beta^{2}#right)#timesR_{nFD}} [ns]",
                                          directories.Resolution_Directory_map["Smear_just_1n_Directory"], "13a_Deltat_ToF_reco_for_R_nFD_1n", -20, 5, numTH1Dbins);
    hPlot2D hDeltat_ToF_reco_VS_reco_P_nFD_1n =
        hPlot2D("1n", "FD", "Reco neutron ToF error #font[12]{#Deltat^{err}_{ToF}} vs. #font[12]{P^{reco}_{nFD}}",
                "Reco neutron ToF error #font[12]{#Deltat^{err}_{ToF}} vs. #font[12]{P^{reco}_{nFD}}",
                "#font[12]{#Deltat^{err}_{ToF} = - t_{ToF}#times#left(1 - #beta^{2}#right)#timesR_{nFD}} [ns]", "#font[12]{P^{reco}_{nFD}} [GeV/c]",
                directories.Resolution_Directory_map["Smear_just_1n_Directory"], "13b_Deltat_ToF_reco_VS_reco_P_nFD_1n", -20, 5, 0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hDeltat_ToF_reco_VS_truth_P_nFD_1n =
        hPlot2D("1n", "FD", "Reco neutron ToF error #font[12]{#Deltat^{err}_{ToF}} vs. #font[12]{P^{truth}_{nFD}}",
                "Reco neutron ToF error #font[12]{#Deltat^{err}_{ToF}} vs. #font[12]{P^{truth}_{nFD}}",
                "#font[12]{#Deltat^{err}_{ToF} = - t_{ToF}#times#left(1 - #beta^{2}#right)#timesR_{nFD}} [ns]", "#font[12]{P^{truth}_{nFD}} [GeV/c]",
                directories.Resolution_Directory_map["Smear_just_1n_Directory"], "13c_Deltat_ToF_reco_VS_truth_P_nFD_1n", -20, 5, 0.4 * 0.95, beamE * 1.1, numTH2Dbins * 3, numTH2Dbins * 3);
    hPlot2D hDeltat_ToF_reco_VS_R_nFD_1n =
        hPlot2D("1n", "FD", "Reco neutron ToF error #font[12]{#Deltat^{err}_{ToF}} vs. #font[12]{R_{nFD}}", "Reco neutron ToF error #font[12]{#Deltat^{err}_{ToF}} vs. #font[12]{R_{nFD}}",
                "#font[12]{#Deltat^{err}_{ToF} = - t_{ToF}#times#left(1 - #beta^{2}#right)#timesR_{nFD}} [ns]", "#font[12]{R_{nFD} = (P^{truth}_{nFD} - P^{reco}_{nFD})/P^{truth}_{nFD}}",
                directories.Resolution_Directory_map["Smear_just_1n_Directory"], "13d_Deltat_ToF_reco_VS_R_nFD_1n", -20, 5, -1, 1, numTH2Dbins * 3, numTH2Dbins * 3);

    // Match multiplicity (1n)
    hPlot1D hnRes_Match_Multi_1n = hPlot1D("1n", "FD", "Neutron resolution match multiplicity", "Neutron resolution match multiplicity", "Match multiplicity",
                                           directories.Resolution_Directory_map["Match_multi_1n_Directory"], "01_nRes_Match_Multi_1n", 0, 10., 10);
    hPlot2D hnRes_Match_Multi_vs_Reco_P_nFD_1n =
        hPlot2D("1n", "FD", "Match multiplicity vs. P^{reco}_{nFD}", "Match multiplicity vs. P^{reco}_{nFD}", "Match multiplicity", "P^{reco}_{nFD} [GeV/c]",
                directories.Resolution_Directory_map["Match_multi_1n_Directory"], "02_nRes_Match_Multi_vs_Reco_P_nFD_1n", 0, 10., Momentum_lboundary, Momentum_uboundary, 10, 50);
    hPlot2D hnRes_Match_Multi_vs_Reco_Theta_nFD_1n =
        hPlot2D("1n", "FD", "Match multiplicity vs. #theta^{reco}_{nFD}", "Match multiplicity vs. #theta^{reco}_{nFD}", "Match multiplicity", "#theta^{reco}_{nFD} [#circ]",
                directories.Resolution_Directory_map["Match_multi_1n_Directory"], "03_nRes_Match_Multi_vs_Reco_Theta_nFD_1n", 0, 10., Theta_lboundary_FD, Theta_uboundary_FD, 10, 50);
    hPlot2D hnRes_Match_Multi_vs_Reco_Phi_nFD_1n =
        hPlot2D("1n", "FD", "Match multiplicity vs. #phi^{reco}_{nFD}", "Match multiplicity vs. #phi^{reco}_{nFD}", "Match multiplicity", "#phi^{reco}_{nFD} [#circ]",
                directories.Resolution_Directory_map["Match_multi_1n_Directory"], "04_nRes_Match_Multi_vs_Reco_Phi_nFD_1n", 0, 10., Phi_lboundary, Phi_uboundary, 10, 50);

    hPlot1D hReco_P_nFD_nRes_1n =
        hPlot1D("1n", "FD", "Reco P_{nFD} used in nRes", "Reco P_{nFD} used in nRes", "P_{nFD} [GeV/c]", directories.Resolution_Directory_map["Resolution_1n_Directory"],
                "06a_Reco_P_nFD_used_in_nRes_1n", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);
    hPlot1D hTL_P_nFD_nRes_1n = hPlot1D("1n", "FD", "TL P_{nFD} used in nRes", "TL P_{nFD} used in nRes", "P_{nFD} [GeV/c]", directories.Resolution_Directory_map["Resolution_1n_Directory"],
                                        "06b_TL_P_nFD_used_in_nRes_1n", Momentum_lboundary, Momentum_uboundary, numTH1Dbins);

    hPlot2D hTL_P_nFD_vs_Reco_P_nFD_1n = hPlot2D("1n", "FD", "P^{truth}_{nFD} vs. P^{reco}_{nFD}", "P^{truth}_{nFD} vs. P^{reco}_{nFD}", "P^{truth}_{nFD} [GeV/c]", "P^{reco}_{nFD} [GeV/c]",
                                                 directories.Resolution_Directory_map["Resolution_1n_Directory"], "00XX_TL_P_nFD_vs_Reco_P_nFD_1n", Momentum_lboundary, Momentum_uboundary,
                                                 Momentum_lboundary, Momentum_uboundary, numTH2Dbins_nRes_Plots, numTH2Dbins_nRes_Plots);
    hPlot2D hTL_P_nFD_vs_Corr_Reco_P_nFD_1n = hPlot2D("1n", "FD", "P^{truth}_{nFD} vs. corrected P^{reco}_{nFD}", "P^{truth}_{nFD} vs. corrected P^{reco}_{nFD}", "P^{truth}_{nFD} [GeV/c]",
                                                      "Corrected P^{reco}_{nFD} [GeV/c]", directories.Resolution_Directory_map["Resolution_1n_Directory"], "00XX_TL_P_nFD_vs_Reco_P_nFD_1n",
                                                      Momentum_lboundary, Momentum_uboundary, Momentum_lboundary, Momentum_uboundary, numTH2Dbins_nRes_Plots, numTH2Dbins_nRes_Plots);

    // ======================================================================================================================================================================
    // Multiplicity histograms
    // ======================================================================================================================================================================

    // Multiplicity histograms

    // Resolution histograms (1e cut)
    hPlot1D hNeut_Multi_By_clas12pid_APID_BV_1e_cut_FD = hPlot1D("1e cut", "FD", "Multiplicity of FD neutrons by clas12pid APID&BV", "Multiplicity of FD neutrons by clas12pid APID&BV",
                                                                 "Multiplicity", directories.Multiplicity_Directory_map["Multiplicity_1e_cut_Directory"],
                                                                 "01_Multiplicity_Neutrons_By_clas12pid_APID_BV_1e_cut_FD", 0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);
    hPlot1D hNeut_Multi_By_clas12pid_APID_AV_1e_cut_FD = hPlot1D("1e cut", "FD", "Multiplicity of FD neutrons by clas12pid APID&AV", "Multiplicity of FD neutrons by clas12pid APID&AV",
                                                                 "Multiplicity", directories.Multiplicity_Directory_map["Multiplicity_1e_cut_Directory"],
                                                                 "02_Multiplicity_Neutrons_By_clas12pid_APID_AV_1e_cut_FD", 0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);
    hPlot1D hNeut_Multi_By_clas12pid_BPID_BV_1e_cut_FD = hPlot1D("1e cut", "FD", "Multiplicity of FD neutrons by clas12pid BPID&BV", "Multiplicity of FD neutrons by clas12pid BPID&BV",
                                                                 "Multiplicity", directories.Multiplicity_Directory_map["Multiplicity_1e_cut_Directory"],
                                                                 "03_Multiplicity_Neutrons_By_clas12pid_BPID_BV_1e_cut_FD", 0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);
    hPlot1D hNeut_Multi_By_clas12pid_BPID_AV_1e_cut_FD = hPlot1D("1e cut", "FD", "Multiplicity of FD neutrons by clas12pid BPID&AV", "Multiplicity of FD neutrons by clas12pid BPID&AV",
                                                                 "Multiplicity", directories.Multiplicity_Directory_map["Multiplicity_1e_cut_Directory"],
                                                                 "04_Multiplicity_Neutrons_By_clas12pid_BPID_AV_1e_cut_FD", 0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);

    hPlot1D hNeut_Multi_By_Redef_APID_BV_1e_cut_FD = hPlot1D("1e cut", "FD", "Multiplicity of FD neutrons by redef. APID&BV", "Multiplicity of FD neutrons by redef. APID&BV", "Multiplicity",
                                                             directories.Multiplicity_Directory_map["Multiplicity_1e_cut_Directory"], "01_Multiplicity_Neutrons_By_Redef_APID_BV_1e_cut_FD",
                                                             0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);
    hPlot1D hNeut_Multi_By_Redef_APID_AV_1e_cut_FD = hPlot1D("1e cut", "FD", "Multiplicity of FD neutrons by redef. APID&AV", "Multiplicity of FD neutrons by redef. APID&AV", "Multiplicity",
                                                             directories.Multiplicity_Directory_map["Multiplicity_1e_cut_Directory"], "02_Multiplicity_Neutrons_By_Redef_APID_AV_1e_cut_FD",
                                                             0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);
    hPlot1D hNeut_Multi_By_Redef_BPID_BV_1e_cut_FD = hPlot1D("1e cut", "FD", "Multiplicity of FD neutrons by redef. BPID&BV", "Multiplicity of FD neutrons by redef. BPID&BV", "Multiplicity",
                                                             directories.Multiplicity_Directory_map["Multiplicity_1e_cut_Directory"], "03_Multiplicity_Neutrons_By_Redef_BPID_BV_1e_cut_FD",
                                                             0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);
    hPlot1D hNeut_Multi_By_Redef_BPID_AV_1e_cut_FD = hPlot1D("1e cut", "FD", "Multiplicity of FD neutrons by redef. BPID&AV", "Multiplicity of FD neutrons by redef. BPID&AV", "Multiplicity",
                                                             directories.Multiplicity_Directory_map["Multiplicity_1e_cut_Directory"], "04_Multiplicity_Neutrons_By_Redef_BPID_AV_1e_cut_FD",
                                                             0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);

    // Resolution histograms (1p)
    hPlot1D hNeut_Multi_By_Redef_APID_BV_1p_FD =
        hPlot1D("1p", "FD", "Multiplicity of FD neutrons by redef. APID&BV", "Multiplicity of FD neutrons by redef. APID&BV", "Multiplicity",
                directories.Multiplicity_Directory_map["Multiplicity_1p_Directory"], "01_Multiplicity_Neutrons_By_Redef_APID_BV_1p_FD", 0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);
    hPlot1D hNeut_Multi_By_Redef_APID_AV_1p_FD =
        hPlot1D("1p", "FD", "Multiplicity of FD neutrons by redef. APID&AV", "Multiplicity of FD neutrons by redef. APID&AV", "Multiplicity",
                directories.Multiplicity_Directory_map["Multiplicity_1p_Directory"], "02_Multiplicity_Neutrons_By_Redef_APID_AV_1p_FD", 0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);
    hPlot1D hNeut_Multi_By_Redef_BPID_BV_1p_FD =
        hPlot1D("1p", "FD", "Multiplicity of FD neutrons by redef. BPID&BV", "Multiplicity of FD neutrons by redef. BPID&BV", "Multiplicity",
                directories.Multiplicity_Directory_map["Multiplicity_1p_Directory"], "03_Multiplicity_Neutrons_By_Redef_BPID_BV_1p_FD", 0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);
    hPlot1D hNeut_Multi_By_Redef_BPID_AV_1p_FD =
        hPlot1D("1p", "FD", "Multiplicity of FD neutrons by redef. BPID&AV", "Multiplicity of FD neutrons by redef. BPID&AV", "Multiplicity",
                directories.Multiplicity_Directory_map["Multiplicity_1p_Directory"], "04_Multiplicity_Neutrons_By_Redef_BPID_AV_1p_FD", 0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);

    // Resolution histograms (1n)
    hPlot1D hNeut_Multi_By_Redef_APID_BV_1n_FD =
        hPlot1D("1n", "FD", "Multiplicity of FD neutrons by redef. APID&BV", "Multiplicity of FD neutrons by redef. APID&BV", "Multiplicity",
                directories.Multiplicity_Directory_map["Multiplicity_1n_Directory"], "01_Multiplicity_Neutrons_By_Redef_APID_BV_1n_FD", 0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);
    hPlot1D hNeut_Multi_By_Redef_APID_AV_1n_FD =
        hPlot1D("1n", "FD", "Multiplicity of FD neutrons by redef. APID&AV", "Multiplicity of FD neutrons by redef. APID&AV", "Multiplicity",
                directories.Multiplicity_Directory_map["Multiplicity_1n_Directory"], "02_Multiplicity_Neutrons_By_Redef_APID_AV_1n_FD", 0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);
    hPlot1D hNeut_Multi_By_Redef_BPID_BV_1n_FD =
        hPlot1D("1n", "FD", "Multiplicity of FD neutrons by redef. BPID&BV", "Multiplicity of FD neutrons by redef. BPID&BV", "Multiplicity",
                directories.Multiplicity_Directory_map["Multiplicity_1n_Directory"], "03_Multiplicity_Neutrons_By_Redef_BPID_BV_1n_FD", 0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);
    hPlot1D hNeut_Multi_By_Redef_BPID_AV_1n_FD =
        hPlot1D("1n", "FD", "Multiplicity of FD neutrons by redef. BPID&AV", "Multiplicity of FD neutrons by redef. BPID&AV", "Multiplicity",
                directories.Multiplicity_Directory_map["Multiplicity_1n_Directory"], "04_Multiplicity_Neutrons_By_Redef_BPID_AV_1n_FD", 0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);

    // Resolution histograms (pFDpCD)
    hPlot1D hNeut_Multi_By_Redef_APID_BV_pFDpCD_FD = hPlot1D("pFDpCD", "FD", "Multiplicity of FD neutrons by redef. APID&BV", "Multiplicity of FD neutrons by redef. APID&BV", "Multiplicity",
                                                             directories.Multiplicity_Directory_map["Multiplicity_pFDpCD_Directory"], "01_Multiplicity_Neutrons_By_Redef_APID_BV_pFDpCD_FD",
                                                             0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);
    hPlot1D hNeut_Multi_By_Redef_APID_AV_pFDpCD_FD = hPlot1D("pFDpCD", "FD", "Multiplicity of FD neutrons by redef. APID&AV", "Multiplicity of FD neutrons by redef. APID&AV", "Multiplicity",
                                                             directories.Multiplicity_Directory_map["Multiplicity_pFDpCD_Directory"], "02_Multiplicity_Neutrons_By_Redef_APID_AV_pFDpCD_FD",
                                                             0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);
    hPlot1D hNeut_Multi_By_Redef_BPID_BV_pFDpCD_FD = hPlot1D("pFDpCD", "FD", "Multiplicity of FD neutrons by redef. BPID&BV", "Multiplicity of FD neutrons by redef. BPID&BV", "Multiplicity",
                                                             directories.Multiplicity_Directory_map["Multiplicity_pFDpCD_Directory"], "03_Multiplicity_Neutrons_By_Redef_BPID_BV_pFDpCD_FD",
                                                             0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);
    hPlot1D hNeut_Multi_By_Redef_BPID_AV_pFDpCD_FD = hPlot1D("pFDpCD", "FD", "Multiplicity of FD neutrons by redef. BPID&AV", "Multiplicity of FD neutrons by redef. BPID&AV", "Multiplicity",
                                                             directories.Multiplicity_Directory_map["Multiplicity_pFDpCD_Directory"], "04_Multiplicity_Neutrons_By_Redef_BPID_AV_pFDpCD_FD",
                                                             0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);

    // Resolution histograms (nFDpCD)
    hPlot1D hNeut_Multi_By_Redef_APID_BV_nFDpCD_FD = hPlot1D("nFDpCD", "FD", "Multiplicity of FD neutrons by redef. APID&BV", "Multiplicity of FD neutrons by redef. APID&BV", "Multiplicity",
                                                             directories.Multiplicity_Directory_map["Multiplicity_nFDpCD_Directory"], "01_Multiplicity_Neutrons_By_Redef_APID_BV_nFDpCD_FD",
                                                             0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);
    hPlot1D hNeut_Multi_By_Redef_APID_AV_nFDpCD_FD = hPlot1D("nFDpCD", "FD", "Multiplicity of FD neutrons by redef. APID&AV", "Multiplicity of FD neutrons by redef. APID&AV", "Multiplicity",
                                                             directories.Multiplicity_Directory_map["Multiplicity_nFDpCD_Directory"], "02_Multiplicity_Neutrons_By_Redef_APID_AV_nFDpCD_FD",
                                                             0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);
    hPlot1D hNeut_Multi_By_Redef_BPID_BV_nFDpCD_FD = hPlot1D("nFDpCD", "FD", "Multiplicity of FD neutrons by redef. BPID&BV", "Multiplicity of FD neutrons by redef. BPID&BV", "Multiplicity",
                                                             directories.Multiplicity_Directory_map["Multiplicity_nFDpCD_Directory"], "03_Multiplicity_Neutrons_By_Redef_BPID_BV_nFDpCD_FD",
                                                             0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);
    hPlot1D hNeut_Multi_By_Redef_BPID_AV_nFDpCD_FD = hPlot1D("nFDpCD", "FD", "Multiplicity of FD neutrons by redef. BPID&AV", "Multiplicity of FD neutrons by redef. BPID&AV", "Multiplicity",
                                                             directories.Multiplicity_Directory_map["Multiplicity_nFDpCD_Directory"], "04_Multiplicity_Neutrons_By_Redef_BPID_AV_nFDpCD_FD",
                                                             0, numTH1Dbins_multi_Plots, numTH1Dbins_multi_Plots);

    cout << "\033[33m done.\n\n\033[0m";
}

void DetectorSimulationAnalyser::RefreshNumOfBins() {
    CodeDebugger.PrintStepTester(DebuggerMode);
    
    // Histogram setup ---------------------------------------------------------------------------------------------------------------------------------------------------

    // Histogram setup
    /* Histogram boundary variables. Used to unify histograms to the same boundaries. */

    // Number of histogram bins
    /* Default */
    // int numTH1Dbins = 30;
    // int numTH2Dbins = 25;
    this->numTH1Dbins = 50;
    this->numTH2Dbins = 65;

    if (isData) { numTH2Dbins = numTH2Dbins * 2; }

    /* Momentum plots */
    this->numTH2Dbins_Mom_Plots = numTH2Dbins;  // To be changed if apply_kinematical_cuts = true

    /* Beta plots */
    this->numTH1Dbins_Beta_Plots = 65;
    this->numTH2Dbins_Beta_Plots = numTH2Dbins * 2;

    /* W plots */
    this->numTH1Dbins_W_Plots = numTH1Dbins;
    this->numTH2Dbins_W_Plots = numTH2Dbins;

    /* Angle plots */
    this->numTH1Dbins_Ang_Plots = numTH1Dbins;
    this->numTH2Dbins_Ang_Plots = numTH2Dbins;
    this->numTH2Dbins_Electron_Ang_Plots = 100;
    this->numTH2Dbins_Nucleon_Ang_Plots = 75;

    /* Momentum transfer plots */
    this->numTH1Dbins_Momentum_transfer_plots = numTH1Dbins;
    this->numTH2Dbins_Momentum_transfer_plots = numTH2Dbins;

    /* E_e plots */
    this->numTH1Dbins_E_e_Plots = numTH1Dbins;
    this->numTH2Dbins_E_e_Plots = numTH2Dbins;

    /* ET plots */
    this->numTH1Dbins_ET_Plots = numTH1Dbins;

    /* E_cal plots */
    this->numTH1Dbins_E_cal_Plots = numTH1Dbins;
    this->numTH2Dbins_E_cal_Plots = numTH2Dbins;

    /* TKI plots */
    this->numTH1Dbins_TKI_dP_T_Plots = numTH1Dbins;
    this->numTH1Dbins_TKI_dAlpha_T_Plots = 30;
    this->numTH2Dbins_TKI_Plots = numTH2Dbins;

    /* Efficiency % acceptance correction plots */
    this->numTH1Dbins_Mom_eff_Plots = numTH1Dbins;
    this->numTH1Dbins_Ang_eff_Plots = numTH1Dbins_Ang_Plots;
    this->numTH2Dbins_Ang_eff_Plots = numTH2Dbins_Ang_Plots;
    this->numTH2Dbins_Electron_Ang_eff_Plots = numTH2Dbins_Electron_Ang_Plots;
    this->numTH2Dbins_Nucleon_Ang_eff_Plots = numTH2Dbins_Nucleon_Ang_Plots;

    /* Acceptance maps plots */
    this->numTH1Dbins_AMaps_Plots = numTH1Dbins_Ang_Plots;
    this->numTH2Dbins_AMaps_Plots = numTH2Dbins_Ang_Plots;
    this->numTH2Dbins_Electron_AMaps_Plots = numTH2Dbins_Electron_Ang_Plots;
    this->numTH2Dbins_Nucleon_AMaps_Plots = numTH2Dbins_Nucleon_Ang_Plots;

    /* Neutron resolution plots */
    this->numTH1Dbins_nRes_Plots = numTH1Dbins_Ang_Plots;
    this->numTH2Dbins_nRes_Plots = numTH2Dbins_Nucleon_Ang_Plots * 4 / 3;

    /* Neutron multiplicity plots */
    this->numTH1Dbins_multi_Plots = 10;
}

void DetectorSimulationAnalyser::RefresHistogramLimits() {
    CodeDebugger.PrintStepTester(DebuggerMode);
    
    // Histogram limits
    /* Nphe boundaries */
    this->Nphe_boundary = 40;

    /* Chi2 boundaries */
    this->Chi2_boundary = 20;
    //    double Chi2_boundary = 30;

    if (apply_cuts) { Chi2_boundary = 9; }

    /* Vertex boundaries */
    this->Vertex_boundary = 20., this->Vertex_uboundary = Vertex_boundary, this->Vertex_lboundary = -Vertex_boundary;
    this->Vertex_boundary_FD = Vertex_boundary, this->Vertex_uboundary_FD = Vertex_uboundary, this->Vertex_lboundary_FD = Vertex_lboundary;
    this->Vertex_boundary_CD = Vertex_boundary, this->Vertex_uboundary_CD = Vertex_uboundary, this->Vertex_lboundary_CD = Vertex_lboundary;
    this->dV_boundary = 8., this->dV_uboundary = dV_boundary, this->dV_lboundary = -dV_boundary;
    this->dV_boundary_FD = dV_boundary, this->dV_uboundary_FD = dV_uboundary, this->dV_lboundary_FD = dV_lboundary;
    this->dV_boundary_CD = dV_boundary, this->dV_uboundary_CD = dV_uboundary, this->dV_lboundary_CD = dV_lboundary;

    if (apply_cuts) {
        double dVertex_boundary = Vz_cut.GetUpperCut() - Vz_cut.GetLowerCut();
        double dVertex_boundary_FD = Vz_cut_FD.GetUpperCut() - Vz_cut_FD.GetLowerCut(), dVertex_boundary_CD = Vz_cut_CD.GetUpperCut() - Vz_cut_CD.GetLowerCut();
        double ddV_boundary = dVz_cuts.GetUpperCut() - dVz_cuts.GetLowerCut();
        double ddV_boundary_FD = dVz_cuts_FD.GetUpperCut() - dVz_cuts_FD.GetLowerCut(), ddV_boundary_CD = dVz_cuts_CD.GetUpperCut() - dVz_cuts_CD.GetLowerCut();

        Vertex_uboundary = Vz_cut.GetUpperCut() + 0.2 * dVertex_boundary, this->Vertex_lboundary = Vz_cut.GetLowerCut() - 0.1 * dVertex_boundary;
        Vertex_uboundary_FD = Vz_cut_FD.GetUpperCut() + 0.2 * dVertex_boundary_FD, this->Vertex_lboundary_FD = Vz_cut_FD.GetLowerCut() - 0.1 * dVertex_boundary_FD;
        Vertex_uboundary_CD = Vz_cut_CD.GetUpperCut() + 0.2 * dVertex_boundary_CD, this->Vertex_lboundary_CD = Vz_cut_CD.GetLowerCut() - 0.1 * dVertex_boundary_CD;
        dV_uboundary = dVz_cuts.GetUpperCut() + 0.2 * ddV_boundary, this->dV_lboundary = dVz_cuts.GetLowerCut() - 0.1 * ddV_boundary;
        dV_uboundary_FD = dVz_cuts_FD.GetUpperCut() + 0.2 * ddV_boundary_FD, this->dV_lboundary_FD = dVz_cuts_FD.GetLowerCut() - 0.1 * ddV_boundary_FD;
        dV_uboundary_CD = dVz_cuts_CD.GetUpperCut() + 0.2 * ddV_boundary_CD, this->dV_lboundary_CD = dVz_cuts_CD.GetLowerCut() - 0.1 * ddV_boundary_CD;

        this->Vertex_boundary = 8., this->Vertex_boundary_FD = 8., this->Vertex_boundary_CD = 8.;
        this->dV_boundary = 8., this->dV_boundary_FD = 8., this->dV_boundary_CD = 8.;
    }

    /* SF boundries */
    this->SF_uboundary = 0.31, this->SF_lboundary = 0.16;

    /* Momentum boundries */
    this->Momentum_lboundary = 0., this->Momentum_uboundary = beamE * 1.1;                             // Default
    this->FDMomentum_lboundary = Momentum_lboundary, this->FDMomentum_uboundary = Momentum_uboundary;  // FD nucleons (1nFD, 1pFD, pFDpCD and nFDpCD)
    this->CDMomentum_lboundary = 0., this->CDMomentum_uboundary = beamE / 2;                           // CD nucleons (pFDpCD & nFDpCD)
    this->P_nucFD_lboundary = 0., this->P_nucFD_uboundary = beamE * 1.1;                               // Default
    this->P_nucCD_lboundary = 0., this->P_nucCD_uboundary = beamE / 2;                                 // CD nucleons (pFDpCD & nFDpCD)

    if (apply_kinematical_cuts) {
        this->P_nucFD_lboundary = FD_nucleon_momentum_cut.GetLowerCut(), this->P_nucFD_uboundary = FD_nucleon_momentum_cut.GetUpperCut() * 1.1;
        this->P_nucCD_lboundary = 0.4, this->P_nucCD_uboundary = 2.5;  // CD nucleons (pFDpCD & nFDpCD)
        this->FDMomentum_lboundary = FD_nucleon_momentum_cut.GetLowerCut() * 0.8, this->FDMomentum_uboundary = FD_nucleon_momentum_cut.GetUpperCut() * 1.2;
    }

    /* W boundries */
    this->W_lboundary = 0.35;
    this->W_uboundary = 1.1 * sqrt((beamE + m_p) * (beamE + m_p) - beamE * beamE);  // Default

    /* Beta boundries */
    this->dBeta_sigma_boundary = 0.1;
    this->Beta_dist_uboundary = 1 + dBeta_sigma_boundary, this->Beta_dist_lboundary = 1 - dBeta_sigma_boundary;

    this->dBeta_sigma_ZOOMOUT_boundary = 0.1;
    this->Beta_dist_ZOOMOUT_uboundary = 1 + dBeta_sigma_ZOOMOUT_boundary;
    this->Beta_dist_ZOOMOUT_lboundary = 0.9;

    this->Beta_boundary_const = 3., this->Beta_boundary = 3., this->P_boundary = beamE * 1.425;

    if (apply_cuts) {
        Beta_boundary = 1.25;
        P_boundary = beamE * 1.1;
    }

    /* Angle boundries */
    this->Theta_lboundary_FD = 0., this->Theta_uboundary_FD = 50.;
    this->Theta_lboundary_CD = 30., this->Theta_uboundary_CD = 155.;
    this->Opening_Ang_wide_lboundary = 0, this->Opening_Ang_wide_uboundary = 180.;
    this->Opening_Ang_narrow_lboundary = 0, this->Opening_Ang_narrow_uboundary = 100.;
    this->Phi_lboundary = -180., this->Phi_uboundary = 180.;

    /* Momentum transfer boundries */
    this->Q2_lboundary_FD = 0., this->Q2_uboundary_FD = beamE * 1.1;

    if (is2GeVSample) {
        // Q2_uboundary_FD = 0.15;
        Q2_uboundary_FD = 0.8;
        // Q2_uboundary_FD = 1;
    } else if (is4GeVSample) {
        // Q2_uboundary_FD = 1;
        Q2_uboundary_FD = 3;
    } else if (is6GeVSample) {
        // Q2_uboundary_FD = 1.5;
        Q2_uboundary_FD = 5;
    }

    /* TKI boundries */
    this->dP_T_boundary = 3.;
}

void DetectorSimulationAnalyser::SavePlots() {
    CodeDebugger.PrintStepTester(DebuggerMode);
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                        Histograms plots                                                                             //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // Histograms plots

    // ======================================================================================================================================================================
    // Canvas definitions
    // ======================================================================================================================================================================

    // Canvas definitions
    this->c1 = new TCanvas("canvas", "canvas", 1000, 750);  // normal res
    c1->SetGrid();
    c1->SetBottomMargin(0.14);

    if (wider_margin) {
        c1->SetLeftMargin(0.16);
        c1->SetRightMargin(0.12);
    }

    float DefStatX = gStyle->GetStatX(), DefStatY = gStyle->GetStatY();

    c1->cd();

    // ======================================================================================================================================================================
    // Cut parameters plots
    // ======================================================================================================================================================================

    // Cut parameters plots

    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // Number of Photo-electrons (Nphe) histograms
    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Number of Photo-electrons (Nphe) histograms
    if (Nphe_plots) {
        cout << "\033[33m\n\nPlotting number of photo-electrons (Nphe) histograms...\n\n\033[0m";

        //  Nphe plots ----------------------------------------------------------------------------------------------------------------------------------------------------------

        // Nphe plots (1e cut, FD)
        if (!apply_cuts) {
            hNphe_1e_cut_BC_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Nphe_plots, true, 1., clasAna.getNpheCuts(), 9999, 0, false);
            hNphe_1e_cut_AC_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Nphe_plots, true, 1., clasAna.getNpheCuts(), 9999, 0, false);
        } else {
            hNphe_1e_cut_BC_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Nphe_plots, true, 1., clasAna.getNpheCuts(), 9999, 0, false);
        }

        // Nphe plots (1p, FD)
        hNphe_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Nphe_plots, true, 1., clasAna.getNpheCuts(), 9999, 0, false);

        // Nphe plots (1n, FD)
        hNphe_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Nphe_plots, true, 1., clasAna.getNpheCuts(), 9999, 0, false);

        // Nphe plots (2p, FD)
        hNphe_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Nphe_plots, true, 1., clasAna.getNpheCuts(), 9999, 0, false);

        // Nphe plots (pFDpCD, FD)
        hNphe_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Nphe_plots, true, 1., clasAna.getNpheCuts(), 9999, 0, false);

        // Nphe plots (nFDpCD, FD)
        hNphe_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Nphe_plots, true, 1., clasAna.getNpheCuts(), 9999, 0, false);
    } else {
        cout << "\033[33m\n\nnumber of photo-electrons (Nphe) plots are disabled by user.\n\n\033[0m";
    }

    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // Chi2 plots
    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Chi2 plots
    if (Chi2_plots) {
        cout << "\033[33m\n\nPlotting Chi2 plots...\n\n\033[0m";

        // Finding Xmax
        Chi2_Electron_cuts_FD.MeanFromHistogram = hChi2_Electron_1e_cut_FD.GetHistogram1D().GetBinCenter(hChi2_Electron_1e_cut_FD.GetHistogram1D().GetMaximumBin());
        Chi2_Proton_cuts_CD.MeanFromHistogram = hChi2_Proton_1e_cut_CD.GetHistogram1D().GetBinCenter(hChi2_Proton_1e_cut_CD.GetHistogram1D().GetMaximumBin());
        Chi2_Proton_cuts_FD.MeanFromHistogram = hChi2_Proton_1e_cut_FD.GetHistogram1D().GetBinCenter(hChi2_Proton_1e_cut_FD.GetHistogram1D().GetMaximumBin());
        Chi2_Kplus_cuts_CD.MeanFromHistogram = hChi2_Kplus_1e_cut_CD.GetHistogram1D().GetBinCenter(hChi2_Kplus_1e_cut_CD.GetHistogram1D().GetMaximumBin());
        Chi2_Kplus_cuts_FD.MeanFromHistogram = hChi2_Kplus_1e_cut_FD.GetHistogram1D().GetBinCenter(hChi2_Kplus_1e_cut_FD.GetHistogram1D().GetMaximumBin());
        Chi2_Kminus_cuts_CD.MeanFromHistogram = hChi2_Kminus_1e_cut_CD.GetHistogram1D().GetBinCenter(hChi2_Kminus_1e_cut_CD.GetHistogram1D().GetMaximumBin());
        Chi2_Kminus_cuts_FD.MeanFromHistogram = hChi2_Kminus_1e_cut_FD.GetHistogram1D().GetBinCenter(hChi2_Kminus_1e_cut_FD.GetHistogram1D().GetMaximumBin());
        Chi2_piplus_cuts_CD.MeanFromHistogram = hChi2_piplus_1e_cut_CD.GetHistogram1D().GetBinCenter(hChi2_piplus_1e_cut_CD.GetHistogram1D().GetMaximumBin());
        Chi2_piplus_cuts_FD.MeanFromHistogram = hChi2_piplus_1e_cut_FD.GetHistogram1D().GetBinCenter(hChi2_piplus_1e_cut_FD.GetHistogram1D().GetMaximumBin());
        Chi2_piminus_cuts_CD.MeanFromHistogram = hChi2_piminus_1e_cut_CD.GetHistogram1D().GetBinCenter(hChi2_piminus_1e_cut_CD.GetHistogram1D().GetMaximumBin());
        Chi2_piminus_cuts_FD.MeanFromHistogram = hChi2_piminus_1e_cut_FD.GetHistogram1D().GetBinCenter(hChi2_piminus_1e_cut_FD.GetHistogram1D().GetMaximumBin());
        Chi2_deuteron_cuts_CD.MeanFromHistogram = hChi2_deuteron_1e_cut_CD.GetHistogram1D().GetBinCenter(hChi2_deuteron_1e_cut_CD.GetHistogram1D().GetMaximumBin());
        Chi2_deuteron_cuts_FD.MeanFromHistogram = hChi2_deuteron_1e_cut_FD.GetHistogram1D().GetBinCenter(hChi2_deuteron_1e_cut_FD.GetHistogram1D().GetMaximumBin());

        //  Chi2 plots ----------------------------------------------------------------------------------------------------------------------------------------------------------

        // Chi2 plots (no #(e) cut)
        hChi2_Electron_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., 9999, 9999, 0, false);
        hChi2_Proton_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_Proton_cuts_CD.Cuts.at(2), Chi2_Proton_cuts_CD.Cuts.at(2),
                                     Chi2_Proton_cuts_CD.Cuts.at(0), false);
        hChi2_Proton_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_Proton_cuts_FD.Cuts.at(2), Chi2_Proton_cuts_FD.Cuts.at(2),
                                     Chi2_Proton_cuts_FD.Cuts.at(0), false);

        // Chi2 plots (1e cut)
        hChi2_Electron_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., 9999, 9999, 0, false);

        if (!apply_cuts && !apply_chi2_cuts_1e_cut) {
            /* No cuts are applied. Plot without cut limits or fit */
            hChi2_Proton_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., 9999, 9999, 0, false);
            hChi2_Proton_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., 9999, 9999, 0, false);
        } else if (apply_cuts && !apply_chi2_cuts_1e_cut) {
            /* Do Gaussian fit if not applying chi2 cuts */
            hChi2_Proton_1e_cut_CD.hDrawAndSaveWFit(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., Chi2_Proton_cuts_CD.FitStdFactor, Chi2_Proton_cuts_CD.Cuts.at(1),
                                                    Chi2_Proton_cuts_CD.Cuts.at(2), Chi2_Proton_cuts_CD.Cuts.at(0), true);
            hChi2_Proton_1e_cut_FD.hDrawAndSaveWFit(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., Chi2_Proton_cuts_FD.FitStdFactor, Chi2_Proton_cuts_FD.Cuts.at(1),
                                                    Chi2_Proton_cuts_FD.Cuts.at(2), Chi2_Proton_cuts_FD.Cuts.at(0), true);
        } else if (apply_cuts && apply_chi2_cuts_1e_cut) {
            hChi2_Proton_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_Proton_cuts_CD.Cuts.at(2), Chi2_Proton_cuts_CD.Cuts.at(2),
                                                Chi2_Proton_cuts_CD.Cuts.at(0), true);
            hChi2_Proton_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_Proton_cuts_FD.Cuts.at(2), Chi2_Proton_cuts_FD.Cuts.at(2),
                                                Chi2_Proton_cuts_FD.Cuts.at(0), true);
        }

        if (!apply_cuts && !apply_chi2_cuts_1e_cut) {
            /* No cuts are applied. Plot without cut limits or fit */
            hChi2_Kplus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., 9999, 9999, 0, false);
            hChi2_Kplus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., 9999, 9999, 0, false);
        } else if (apply_cuts && !apply_chi2_cuts_1e_cut) {
            /* Do Gaussian fit if not applying chi2 cuts */
            hChi2_Kplus_1e_cut_CD.hDrawAndSaveWFit(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., Chi2_Kplus_cuts_CD.FitStdFactor, Chi2_Kplus_cuts_CD.Cuts.at(1),
                                                   Chi2_Kplus_cuts_CD.Cuts.at(2), Chi2_Kplus_cuts_CD.Cuts.at(0), true);
            hChi2_Kplus_1e_cut_FD.hDrawAndSaveWFit(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., Chi2_Kplus_cuts_FD.FitStdFactor, Chi2_Kplus_cuts_FD.Cuts.at(1),
                                                   Chi2_Kplus_cuts_FD.Cuts.at(2), Chi2_Kplus_cuts_FD.Cuts.at(0), true);
        } else if (apply_cuts && apply_chi2_cuts_1e_cut) {
            hChi2_Kplus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_Kplus_cuts_CD.Cuts.at(2), Chi2_Kplus_cuts_CD.Cuts.at(2),
                                               Chi2_Kplus_cuts_CD.Cuts.at(0), true);
            hChi2_Kplus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_Kplus_cuts_FD.Cuts.at(2), Chi2_Kplus_cuts_FD.Cuts.at(2),
                                               Chi2_Kplus_cuts_FD.Cuts.at(0), true);
        }

        if (!apply_cuts && !apply_chi2_cuts_1e_cut) {
            /* No cuts are applied. Plot without cut limits or fit */
            hChi2_Kminus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., 9999, 9999, 0, false);
            hChi2_Kminus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., 9999, 9999, 0, false);
        } else if (apply_cuts && !apply_chi2_cuts_1e_cut) {
            /* Do Gaussian fit if not applying chi2 cuts */
            hChi2_Kminus_1e_cut_CD.hDrawAndSaveWFit(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., Chi2_Kminus_cuts_CD.FitStdFactor, Chi2_Kminus_cuts_CD.Cuts.at(1),
                                                    Chi2_Kminus_cuts_CD.Cuts.at(2), Chi2_Kminus_cuts_CD.Cuts.at(0), true);
            hChi2_Kminus_1e_cut_FD.hDrawAndSaveWFit(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., Chi2_Kminus_cuts_FD.FitStdFactor, Chi2_Kminus_cuts_FD.Cuts.at(1),
                                                    Chi2_Kminus_cuts_FD.Cuts.at(2), Chi2_Kminus_cuts_FD.Cuts.at(0), true);
        } else if (apply_cuts && apply_chi2_cuts_1e_cut) {
            hChi2_Kminus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_Kminus_cuts_CD.Cuts.at(2), Chi2_Kminus_cuts_CD.Cuts.at(2),
                                                Chi2_Kminus_cuts_CD.Cuts.at(0), true);
            hChi2_Kminus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_Kminus_cuts_FD.Cuts.at(2), Chi2_Kminus_cuts_FD.Cuts.at(2),
                                                Chi2_Kminus_cuts_FD.Cuts.at(0), true);
        }

        if (!apply_cuts && !apply_chi2_cuts_1e_cut) {
            /* No cuts are applied. Plot without cut limits or fit */
            hChi2_piplus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., 9999, 9999, 0, false);
            hChi2_piplus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., 9999, 9999, 0, false);
        } else if (apply_cuts && !apply_chi2_cuts_1e_cut) {
            /* Do Gaussian fit if not applying chi2 cuts */
            hChi2_piplus_1e_cut_CD.hDrawAndSaveWFit(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., Chi2_piplus_cuts_CD.FitStdFactor, Chi2_piplus_cuts_CD.Cuts.at(1),
                                                    Chi2_piplus_cuts_CD.Cuts.at(2), Chi2_piplus_cuts_CD.Cuts.at(0), true);
            hChi2_piplus_1e_cut_FD.hDrawAndSaveWFit(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., Chi2_piplus_cuts_FD.FitStdFactor, Chi2_piplus_cuts_FD.Cuts.at(1),
                                                    Chi2_piplus_cuts_FD.Cuts.at(2), Chi2_piplus_cuts_FD.Cuts.at(0), true);
        } else if (apply_cuts && apply_chi2_cuts_1e_cut) {
            hChi2_piplus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_piplus_cuts_CD.Cuts.at(2), Chi2_piplus_cuts_CD.Cuts.at(2),
                                                Chi2_piplus_cuts_CD.Cuts.at(0), true);
            hChi2_piplus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_piplus_cuts_FD.Cuts.at(2), Chi2_piplus_cuts_FD.Cuts.at(2),
                                                Chi2_piplus_cuts_FD.Cuts.at(0), true);
        }

        if (!apply_cuts && !apply_chi2_cuts_1e_cut) {
            /* No cuts are applied. Plot without cut limits or fit */
            hChi2_piminus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., 9999, 9999, 0, false);
            hChi2_piminus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., 9999, 9999, 0, false);
        } else if (apply_cuts && !apply_chi2_cuts_1e_cut) {
            /* Do Gaussian fit if not applying chi2 cuts */
            hChi2_piminus_1e_cut_CD.hDrawAndSaveWFit(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., Chi2_piminus_cuts_CD.FitStdFactor, Chi2_piminus_cuts_CD.Cuts.at(1),
                                                     Chi2_piminus_cuts_CD.Cuts.at(2), Chi2_piminus_cuts_CD.Cuts.at(0), true);
            hChi2_piminus_1e_cut_FD.hDrawAndSaveWFit(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., Chi2_piminus_cuts_FD.FitStdFactor, Chi2_piminus_cuts_FD.Cuts.at(1),
                                                     Chi2_piminus_cuts_FD.Cuts.at(2), Chi2_piminus_cuts_FD.Cuts.at(0), true);
        } else if (apply_cuts && apply_chi2_cuts_1e_cut) {
            hChi2_piminus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_piminus_cuts_CD.Cuts.at(2), Chi2_piminus_cuts_CD.Cuts.at(2),
                                                 Chi2_piminus_cuts_CD.Cuts.at(0), true);
            hChi2_piminus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_piminus_cuts_FD.Cuts.at(2), Chi2_piminus_cuts_FD.Cuts.at(2),
                                                 Chi2_piminus_cuts_FD.Cuts.at(0), true);
        }

        if (!apply_cuts && !apply_chi2_cuts_1e_cut) {
            /* No cuts are applied. Plot without cut limits or fit */
            hChi2_deuteron_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., 9999, 9999, 0, false);
            hChi2_deuteron_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., 9999, 9999, 0, false);
        } else if (apply_cuts && !apply_chi2_cuts_1e_cut) {
            /* Do Gaussian fit if not applying chi2 cuts */
            hChi2_deuteron_1e_cut_CD.hDrawAndSaveWFit(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., Chi2_deuteron_cuts_CD.FitStdFactor,
                                                      Chi2_deuteron_cuts_CD.Cuts.at(1), Chi2_deuteron_cuts_CD.Cuts.at(2), Chi2_deuteron_cuts_CD.Cuts.at(0), true);
            hChi2_deuteron_1e_cut_FD.hDrawAndSaveWFit(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., Chi2_deuteron_cuts_FD.FitStdFactor,
                                                      Chi2_deuteron_cuts_FD.Cuts.at(1), Chi2_deuteron_cuts_FD.Cuts.at(2), Chi2_deuteron_cuts_FD.Cuts.at(0), true);
        } else if (apply_cuts && apply_chi2_cuts_1e_cut) {
            hChi2_deuteron_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_deuteron_cuts_CD.Cuts.at(2), Chi2_deuteron_cuts_CD.Cuts.at(2),
                                                  Chi2_deuteron_cuts_CD.Cuts.at(0), true);
            hChi2_deuteron_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_deuteron_cuts_FD.Cuts.at(2), Chi2_deuteron_cuts_FD.Cuts.at(2),
                                                  Chi2_deuteron_cuts_FD.Cuts.at(0), true);
        }

        // Chi2 plots (1p)
        hChi2_Electron_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., 9999, 9999, 0, false);
        hChi2_Proton_1p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_Proton_cuts_CD.Cuts.at(2), Chi2_Proton_cuts_CD.Cuts.at(2),
                                        Chi2_Proton_cuts_CD.Cuts.at(0), false);
        hChi2_Proton_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_Proton_cuts_FD.Cuts.at(2), Chi2_Proton_cuts_FD.Cuts.at(2),
                                        Chi2_Proton_cuts_FD.Cuts.at(0), false);

        // Chi2 plots (1n)
        hChi2_Electron_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., 9999, 9999, 0, false);
        hChi2_Proton_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_Proton_cuts_CD.Cuts.at(2), Chi2_Proton_cuts_CD.Cuts.at(2),
                                        Chi2_Proton_cuts_CD.Cuts.at(0), false);
        hChi2_Proton_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_Proton_cuts_FD.Cuts.at(2), Chi2_Proton_cuts_FD.Cuts.at(2),
                                        Chi2_Proton_cuts_FD.Cuts.at(0), false);

        // Chi2 plots (2p)
        hChi2_Electron_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., 9999, 9999, 0, false);

        hChi2_Proton_2p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_Proton_cuts_CD.Cuts.at(2), Chi2_Proton_cuts_CD.Cuts.at(2),
                                        Chi2_Proton_cuts_CD.Cuts.at(0), true);
        hChi2_Proton_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_Proton_cuts_FD.Cuts.at(2), Chi2_Proton_cuts_FD.Cuts.at(2),
                                        Chi2_Proton_cuts_FD.Cuts.at(0), true);

        // Chi2 plots (pFDpCD)
        hChi2_Electron_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., 9999, 9999, 0, false);

        hChi2_Proton_pFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_Proton_cuts_CD.Cuts.at(2), Chi2_Proton_cuts_CD.Cuts.at(2),
                                            Chi2_Proton_cuts_CD.Cuts.at(0), true);
        hChi2_Proton_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_Proton_cuts_FD.Cuts.at(2), Chi2_Proton_cuts_FD.Cuts.at(2),
                                            Chi2_Proton_cuts_FD.Cuts.at(0), true);

        // Chi2 plots (nFDpCD)
        hChi2_Electron_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., 9999, 9999, 0, false);

        hChi2_Proton_nFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_Proton_cuts_CD.Cuts.at(2), Chi2_Proton_cuts_CD.Cuts.at(2),
                                            Chi2_Proton_cuts_CD.Cuts.at(0), true);
        hChi2_Proton_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Chi2_plots, true, 1., -Chi2_Proton_cuts_FD.Cuts.at(2), Chi2_Proton_cuts_FD.Cuts.at(2),
                                            Chi2_Proton_cuts_FD.Cuts.at(0), true);
    } else {
        cout << "\033[33m\n\nChi2 plots are disabled by user.\n\n\033[0m";
    }

    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // Vertex plots
    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Vertex plots
    if (Vertex_plots) {
        cout << "\033[33m\n\nPlotting Vertex plots...\n\n\033[0m";

        //  Vertex plots --------------------------------------------------------------------------------------------------------------------------------------------------------

        // Vertex plots (1e cut, CD & FD)
        hVx_Electron_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVy_Electron_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVz_Electron_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., Vz_cut_FD.GetLowerCut(), Vz_cut_FD.GetUpperCut(), 0, false);
        hVz_Electron_vs_P_e_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hVz_Electron_vs_Theta_e_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hVz_Electron_vs_Phi_e_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hVx_Proton_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVy_Proton_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVz_Proton_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., Vz_cut_FD.GetLowerCut(), Vz_cut_FD.GetUpperCut(), 0, false);
        hVz_Proton_vs_P_p_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hVz_Proton_vs_Theta_p_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hVz_Proton_vs_Phi_p_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hVx_Proton_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVy_Proton_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVz_Proton_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., Vz_cut_CD.GetLowerCut(), Vz_cut_CD.GetUpperCut(), 0, false);
        hVz_Proton_vs_P_p_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hVz_Proton_vs_Theta_p_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hVz_Proton_vs_Phi_p_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hVx_Kplus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVx_Kplus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVy_Kplus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVy_Kplus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVz_Kplus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., Vz_cut_CD.GetLowerCut(), Vz_cut_CD.GetUpperCut(), 0, false);
        hVz_Kplus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., Vz_cut_FD.GetLowerCut(), Vz_cut_FD.GetUpperCut(), 0, false);

        hVx_Kminus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVx_Kminus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVy_Kminus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVy_Kminus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVz_Kminus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., Vz_cut_CD.GetLowerCut(), Vz_cut_CD.GetUpperCut(), 0, false);
        hVz_Kminus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., Vz_cut_FD.GetLowerCut(), Vz_cut_FD.GetUpperCut(), 0, false);

        hVx_piplus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVx_piplus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVy_piplus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVy_piplus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVz_piplus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., Vz_cut_CD.GetLowerCut(), Vz_cut_CD.GetUpperCut(), 0, false);
        hVz_piplus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., Vz_cut_FD.GetLowerCut(), Vz_cut_FD.GetUpperCut(), 0, false);

        hVx_piminus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVx_piminus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVy_piminus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVy_piminus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVz_piminus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., Vz_cut_CD.GetLowerCut(), Vz_cut_CD.GetUpperCut(), 0, false);
        hVz_piminus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., Vz_cut_FD.GetLowerCut(), Vz_cut_FD.GetUpperCut(), 0, false);

        hVx_Deuteron_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVx_Deuteron_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVy_Deuteron_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVy_Deuteron_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hVz_Deuteron_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., Vz_cut_CD.GetLowerCut(), Vz_cut_CD.GetUpperCut(), 0, false);
        hVz_Deuteron_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., Vz_cut_FD.GetLowerCut(), Vz_cut_FD.GetUpperCut(), 0, false);

        //  dV plots ------------------------------------------------------------------------------------------------------------------------------------------------------------

        // dV plots (1e cut, CD & FD)
        hdVx_Proton_FD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_Proton_FD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVz_Proton_FD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts_FD.GetLowerCut(), dVz_cuts_FD.GetUpperCut(), 0, false);
        hdVz_Proton_vs_P_p_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hdVz_Proton_vs_Theta_p_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hdVz_Proton_vs_Phi_p_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hdVx_Proton_CD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_Proton_CD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVz_Proton_CD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts_CD.GetLowerCut(), dVz_cuts_CD.GetUpperCut(), 0, false);
        hdVz_Proton_vs_P_p_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hdVz_Proton_vs_Theta_p_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hdVz_Proton_vs_Phi_p_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hdVx_Kplus_CD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVx_Kplus_FD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_Kplus_CD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_Kplus_FD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVz_Kplus_CD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts_CD.GetLowerCut(), dVz_cuts_CD.GetUpperCut(), 0, false);
        hdVz_Kplus_FD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts_FD.GetLowerCut(), dVz_cuts_FD.GetUpperCut(), 0, false);

        hdVx_Kminus_CD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVx_Kminus_FD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_Kminus_CD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_Kminus_FD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVz_Kminus_CD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts_CD.GetLowerCut(), dVz_cuts_CD.GetUpperCut(), 0, false);
        hdVz_Kminus_FD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts_FD.GetLowerCut(), dVz_cuts_FD.GetUpperCut(), 0, false);

        hdVx_piplus_CD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVx_piplus_FD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_piplus_CD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_piplus_FD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVz_piplus_CD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts_CD.GetLowerCut(), dVz_cuts_CD.GetUpperCut(), 0, false);
        hdVz_piplus_FD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts_FD.GetLowerCut(), dVz_cuts_FD.GetUpperCut(), 0, false);

        hdVx_piminus_CD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVx_piminus_FD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_piminus_CD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_piminus_FD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVz_piminus_CD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts_CD.GetLowerCut(), dVz_cuts_CD.GetUpperCut(), 0, false);
        hdVz_piminus_FD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts_FD.GetLowerCut(), dVz_cuts_FD.GetUpperCut(), 0, false);

        hdVx_Deuteron_CD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVx_Deuteron_FD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_Deuteron_CD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_Deuteron_FD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVz_Deuteron_CD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts_CD.GetLowerCut(), dVz_cuts_CD.GetUpperCut(), 0, false);
        hdVz_Deuteron_FD_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts_FD.GetLowerCut(), dVz_cuts_FD.GetUpperCut(), 0, false);

        // dV plots (1p, CD & FD)
        hdVx_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVz_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts_FD.GetLowerCut(), dVz_cuts_FD.GetUpperCut(), 0, false);

        // dV plots (1n, CD & FD)
        hdVx_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVz_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts_FD.GetLowerCut(), dVz_cuts_FD.GetUpperCut(), 0, false);

        // dV plots (2p, CD & FD)
        hdVx_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVz_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts.GetLowerCut(), dVz_cuts.GetUpperCut(), 0, false);

        // dV plots (pFDpCD, CD & FD)
        hdVx_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVz_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts.GetLowerCut(), dVz_cuts.GetUpperCut(), 0, false);

        hdVx_pFD_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_pFD_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVz_pFD_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts_FD.GetLowerCut(), dVz_cuts_FD.GetUpperCut(), 0, false);

        hdVx_pCD_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_pCD_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVz_pCD_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts_CD.GetLowerCut(), dVz_cuts_CD.GetUpperCut(), 0, false);

        // dV plots (nFDpCD, CD & FD)
        hdVx_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVz_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts.GetLowerCut(), dVz_cuts.GetUpperCut(), 0, false);

        hdVx_pCD_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVy_pCD_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., 9999, 9999, 0, false);
        hdVz_pCD_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Vertex_plots, true, 1., dVz_cuts_CD.GetLowerCut(), dVz_cuts_CD.GetUpperCut(), 0, false);
    } else {
        cout << "\033[33m\n\nVertex plots are disabled by user.\n\n\033[0m";
    }

    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // Sampling Fraction (SF) histograms
    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Sampling Fraction (SF) histograms
    if (SF_plots) {
        cout << "\033[33m\n\nPlotting Sampling Fraction histograms...\n\n\033[0m";

        //  SF plots ------------------------------------------------------------------------------------------------------------------------------------------------------------

        // SF plots (1e cut, FD)
        if (!apply_cuts) {
            hSF_1e_cut_BC_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_SF_plots, true, 1., clasAna.getEcalSFLowerCut(), clasAna.getEcalSFUpperCut(), 0, false);
            hSF_1e_cut_AC_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_SF_plots, true, 1., clasAna.getEcalSFLowerCut(), clasAna.getEcalSFUpperCut(), 0, false);
        } else {
            hSF_1e_cut_BC_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_SF_plots, true, 1., clasAna.getEcalSFLowerCut(), clasAna.getEcalSFUpperCut(), 0, false);
        }

        // SF plots (1p, FD)
        hSF_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_SF_plots, true, 1., clasAna.getEcalSFLowerCut(), clasAna.getEcalSFUpperCut(), 0, false);

        // SF plots (1n, FD)
        hSF_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_SF_plots, true, 1., clasAna.getEcalSFLowerCut(), clasAna.getEcalSFUpperCut(), 0, false);

        // SF plots (2p, FD)
        hSF_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_SF_plots, true, 1., clasAna.getEcalSFLowerCut(), clasAna.getEcalSFUpperCut(), 0, false);

        // SF plots (pFDpCD, FD)
        hSF_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_SF_plots, true, 1., clasAna.getEcalSFLowerCut(), clasAna.getEcalSFUpperCut(), 0, false);

        // SF plots (nFDpCD, FD)
        hSF_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_SF_plots, true, 1., clasAna.getEcalSFLowerCut(), clasAna.getEcalSFUpperCut(), 0, false);

        //  SF vs. P plots ------------------------------------------------------------------------------------------------------------------------------------------------------

        // SF vs. P plots (1e cut, FD)
        if (!apply_cuts) {
            hSF_VS_P_e_1e_cut_BC_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
            hSF_VS_P_e_1e_cut_AC_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        } else {
            hSF_VS_P_e_1e_cut_BC_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        }

        // SF vs. P plots (1p, FD)
        hSF_VS_P_e_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        // SF vs. P plots (1n, FD)
        hSF_VS_P_e_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        // SF vs. P plots (2p, FD)
        hSF_VS_P_e_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        // SF vs. P plots (pFDpCD, FD)
        hSF_VS_P_e_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        // SF vs. P plots (nFDpCD, FD)
        hSF_VS_P_e_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
    } else {
        cout << "\033[33m\n\nSampling Fraction plots are disabled by user.\n\n\033[0m";
    }

    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // ECAL edge histograms (electrons only, FD only)
    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    // ECAL edge histograms (electrons only, FD only)
    if (fiducial_plots) {
        cout << "\033[33m\n\nPlotting fiducial histograms...\n\n\033[0m";

        //  ECAL coordinates vs. SF plots ---------------------------------------------------------------------------------------------------------------------------------------

        // ECAL coordinates vs. SF plots (1e cut, FD only)
        if (!apply_cuts) {
            hVcal_VS_EoP_1e_cut_BC_PCAL.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
            hVcal_VS_EoP_1e_cut_AC_PCAL.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
            hWcal_VS_EoP_1e_cut_BC_PCAL.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
            hWcal_VS_EoP_1e_cut_AC_PCAL.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
            hUcal_VS_EoP_1e_cut_BC_PCAL.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
            hUcal_VS_EoP_1e_cut_AC_PCAL.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        } else {
            hVcal_VS_EoP_1e_cut_BC_PCAL.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
            hWcal_VS_EoP_1e_cut_BC_PCAL.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
            hUcal_VS_EoP_1e_cut_BC_PCAL.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        }

        hPCAL_acceptance_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        // ECAL coordinates vs. SF plots (1p, FD only)
        hVcal_VS_EoP_1p_PCAL.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hWcal_VS_EoP_1p_PCAL.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        // ECAL coordinates vs. SF plots (1n, FD only)
        hVcal_VS_EoP_1n_PCAL.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hWcal_VS_EoP_1n_PCAL.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        // ECAL coordinates vs. SF plots (2p, FD only)
        hVcal_VS_EoP_2p_PCAL.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hWcal_VS_EoP_2p_PCAL.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        // ECAL coordinates vs. SF plots (pFDpCD, FD only)
        hVcal_VS_EoP_pFDpCD_PCAL.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hWcal_VS_EoP_pFDpCD_PCAL.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        // ECAL coordinates vs. SF plots (nFDpCD, FD only)
        hVcal_VS_EoP_nFDpCD_PCAL.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hWcal_VS_EoP_nFDpCD_PCAL.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
    } else {
        cout << "\033[33m\n\nFiducial plots are disabled by user.\n\n\033[0m";
    }

    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // Momentum histograms
    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Momentum histograms
    if (Momentum_plots) {
        cout << "\033[33m\n\nPlotting Momentum histograms...\n\n\033[0m";

        //  Momentum plots ------------------------------------------------------------------------------------------------------------------------------------------------------

        // Momentum plots (1e cut, CD & FD)
        // TODO: check for duplications of plots

        // Momentum plots (1e cut, CD & FD)
        hP_e_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);

        hP_p_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hP_p_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);

        hP_piplus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hP_piplus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);

        hP_piminus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hP_piminus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);

        hP_Kplus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hP_Kplus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);

        hP_Kminus_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hP_Kminus_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);

        hP_deuteron_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hP_deuteron_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);

        hP_LnFD_APID_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
        hP_LnFD_APID_1e_cut_ZOOMOUT_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
        hP_LnFD_BPID_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
        hP_LnFD_BPID_1e_cut_ZOOMOUT_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
        hP_LnFD_APIDandNS_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
        hP_LnFD_APIDandNS_1e_cut_ZOOMOUT_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);

        hP_nFD_APID_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
        hP_nFD_APID_1e_cut_ZOOMOUT_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
        hP_nFD_BPID_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
        hP_nFD_BPID_1e_cut_ZOOMOUT_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
        hP_nFD_APIDandNS_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
        hP_nFD_APIDandNS_1e_cut_ZOOMOUT_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);

        // Reco momentum plots for momentum thresholds (1e cut)
        hP_e_reco_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_e_reco_1e_cut_FD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_e_vs_Theta_e_reco_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hP_p_reco_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_p_reco_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_p_reco_1e_cut_FD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_p_reco_1e_cut_CD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_p_vs_Theta_p_reco_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_p_vs_Theta_p_reco_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hP_LnFD_reco_APID_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_LnFD_reco_APID_1e_cut_FD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_LnFD_reco_APID_1e_cut_FD_ZOOMOUT.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_LnFD_vs_Theta_LnFD_reco_APID_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_LnFD_reco_BPID_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_LnFD_reco_BPID_1e_cut_FD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_LnFD_reco_BPID_1e_cut_FD_ZOOMOUT.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_LnFD_vs_Theta_LnFD_reco_BPID_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_nFD_reco_APID_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_nFD_reco_APID_1e_cut_FD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_nFD_reco_APID_1e_cut_FD_ZOOMOUT.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_nFD_vs_Theta_nFD_reco_APID_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_nFD_reco_BPID_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_nFD_reco_BPID_1e_cut_FD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_nFD_reco_BPID_1e_cut_FD_ZOOMOUT.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_nFD_vs_Theta_nFD_reco_BPID_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hP_piplus_reco_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piplus_reco_1e_cut_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piplus_reco_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piplus_reco_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piplus_reco_1e_cut_FD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piplus_reco_1e_cut_CD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piplus_vs_Theta_piplus_reco_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_piplus_vs_Theta_piplus_reco_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hP_piminus_reco_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piminus_reco_1e_cut_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piminus_reco_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piminus_reco_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piminus_reco_1e_cut_FD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piminus_reco_1e_cut_CD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piminus_vs_Theta_piminus_reco_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_piminus_vs_Theta_piminus_reco_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hP_ph_reco_APID_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_ph_reco_APID_1e_cut_FD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_ph_reco_BPID_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_ph_reco_BPID_1e_cut_FD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_ph_vs_Theta_ph_reco_APID_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_ph_vs_Theta_ph_reco_BPID_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        // Momentum plots (1p, CD & FD)
        hP_e_APID_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., e_mom_th.GetLowerCut(), e_mom_th.GetUpperCut(), 0, false);
        hP_e_BPID_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., e_mom_th.GetLowerCut(), e_mom_th.GetUpperCut(), 0, false);

        hP_p_APID_1p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hP_p_APIDandPS_1p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hP_p_BPID_1p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hP_p_APID_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hP_p_APIDandPS_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hP_p_BPID_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);

        if (!apply_kinematical_cuts) {
            hP_pFD_APID_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
            hP_pFD_APIDandPS_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        } else {
            hP_pFD_APID_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(),
                                        0, false);
            hP_pFD_APIDandPS_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                             FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
        }

        hP_piplus_APID_1p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);
        hP_piplus_BPID_1p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);
        hP_piplus_APID_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);
        hP_piplus_BPID_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);

        hP_piminus_APID_1p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);
        hP_piminus_BPID_1p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);
        hP_piminus_APID_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);
        hP_piminus_BPID_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);

        hP_ph_APID_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., ph_mom_th.GetLowerCut(), ph_mom_th.GetUpperCut(), 0, false);
        hP_ph_BPID_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., ph_mom_th.GetLowerCut(), ph_mom_th.GetUpperCut(), 0, false);

        hP_n_APID_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
        hP_n_BPID_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);

        // Momentum plots (1n, CD & FD)
        hP_e_APID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., e_mom_th.GetLowerCut(), e_mom_th.GetUpperCut(), 0, false);
        hP_e_BPID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., e_mom_th.GetLowerCut(), e_mom_th.GetUpperCut(), 0, false);

        if (!apply_kinematical_cuts) {
            hP_n_APID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
            hP_n_APID_1n_ZOOMOUT_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
            hP_n_BPID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
            hP_n_BPID_1n_ZOOMOUT_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
            hP_n_APIDandNS_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
            hP_n_APIDandNS_1n_ZOOMOUT_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
            hP_nFD_APID_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
            hP_nFD_APID_1n_ZOOMOUT.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
            hP_nFD_APIDandNS_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
            hP_nFD_APIDandNS_1n_ZOOMOUT.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
        } else {
            hP_n_APID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(),
                                         0, false);
            hP_n_APID_1n_ZOOMOUT_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                                 FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
            hP_n_BPID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(),
                                         0, false);
            hP_n_BPID_1n_ZOOMOUT_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                                 FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
            hP_n_APIDandNS_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                              FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
            hP_n_APIDandNS_1n_ZOOMOUT_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                                      FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
            hP_nFD_APID_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(),
                                        0, false);
            hP_nFD_APID_1n_ZOOMOUT.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                                FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
            hP_nFD_APIDandNS_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                             FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
            hP_nFD_APIDandNS_1n_ZOOMOUT.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                                     FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
        }

        hP_nFD_vs_P_e_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_nFD_vs_P_e_ZoomOut_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_nFD_vs_theta_e_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_nFD_vs_theta_e_ZoomOut_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_nFD_vs_phi_e_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_nFD_vs_phi_e_ZoomOut_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        htheta_nFD_vs_P_e_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        htheta_nFD_vs_theta_e_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        htheta_nFD_vs_phi_e_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hphi_nFD_vs_P_e_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hphi_nFD_vs_theta_e_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hphi_nFD_vs_phi_e_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hP_p_APID_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hP_p_BPID_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hP_p_APID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hP_p_BPID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);

        hP_piplus_APID_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);
        hP_piplus_BPID_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);
        hP_piplus_APID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);
        hP_piplus_BPID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);

        hP_piminus_APID_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);
        hP_piminus_BPID_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);
        hP_piminus_APID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);
        hP_piminus_BPID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);

        if (!apply_kinematical_cuts) {
            hP_n_VN_BPID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
            hP_n_VN_APID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
            hP_n_Ph_BPID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
            hP_n_Ph_APID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
        } else {
            hP_n_VN_BPID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                            FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
            hP_n_VN_APID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                            FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
            hP_n_Ph_BPID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                            FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
            hP_n_Ph_APID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                            FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
        }

        hP_ph_APID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., ph_mom_th.GetLowerCut(), ph_mom_th.GetUpperCut(), 0, false);
        hP_ph_BPID_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., ph_mom_th.GetLowerCut(), ph_mom_th.GetUpperCut(), 0, false);

        // Momentum plots (2p, CD & FD)
        hP_e_APID_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., e_mom_th.GetLowerCut(), e_mom_th.GetUpperCut(), 0, false);
        hP_e_BPID_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., e_mom_th.GetLowerCut(), e_mom_th.GetUpperCut(), 0, false);

        hP_p_APID_2p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hP_p_BPID_2p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hP_p_APID_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hP_p_BPID_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);

        hP_piplus_APID_2p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);
        hP_piplus_BPID_2p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);
        hP_piplus_APID_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);
        hP_piplus_BPID_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);

        hP_piminus_APID_2p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);
        hP_piminus_BPID_2p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);
        hP_piminus_APID_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);
        hP_piminus_BPID_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);

        hP_ph_APID_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., ph_mom_th.GetLowerCut(), ph_mom_th.GetUpperCut(), 0, false);
        hP_ph_BPID_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., ph_mom_th.GetLowerCut(), ph_mom_th.GetUpperCut(), 0, false);

        hP_n_APID_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
        hP_n_BPID_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);

        // Momentum plots (pFDpCD, CD & FD)
        hP_e_APID_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., e_mom_th.GetLowerCut(), e_mom_th.GetUpperCut(), 0, false);
        hP_e_BPID_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., e_mom_th.GetLowerCut(), e_mom_th.GetUpperCut(), 0, false);
        hP_p_APID_pFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hP_p_BPID_pFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);

        if (!apply_kinematical_cuts) {
            hP_p_APID_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
            hP_p_APIDandPS_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
            hP_p_BPID_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        } else {
            hP_p_APID_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                             FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
            hP_p_APIDandPS_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                                  FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
            hP_p_BPID_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                             FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
        }

        hP_piplus_APID_pFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);
        hP_piplus_BPID_pFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);
        hP_piplus_APID_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);
        hP_piplus_BPID_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);

        hP_piminus_APID_pFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);
        hP_piminus_BPID_pFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);
        hP_piminus_APID_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);
        hP_piminus_BPID_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);

        hP_ph_APID_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., ph_mom_th.GetLowerCut(), ph_mom_th.GetUpperCut(), 0, false);
        hP_ph_BPID_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., ph_mom_th.GetLowerCut(), ph_mom_th.GetUpperCut(), 0, false);

        hP_n_APID_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
        hP_n_BPID_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);

        // P_pFD vs. W plots (pFDpCD, FD)
        histPlotter2D(c1, hP_pFD_VS_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pFD_VS_W_pFDpCD_Dir, "10_P_pFD_VS_W_pFDpCD");
        histPlotter2D(c1, hP_pFD_VS_W_QEL_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pFD_VS_W_pFDpCD_Dir, "10a_P_pFD_VS_W_QEL_pFDpCD");
        histPlotter2D(c1, hP_pFD_VS_W_MEC_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pFD_VS_W_pFDpCD_Dir, "10b_P_pFD_VS_W_MEC_pFDpCD");
        histPlotter2D(c1, hP_pFD_VS_W_RES_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pFD_VS_W_pFDpCD_Dir, "10c_P_pFD_VS_W_RES_pFDpCD");
        histPlotter2D(c1, hP_pFD_VS_W_DIS_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pFD_VS_W_pFDpCD_Dir, "10d_P_pFD_VS_W_DIS_pFDpCD");

        // P_pCD vs. W plots (pFDpCD, FD)
        histPlotter2D(c1, hP_pCD_VS_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pCD_VS_W_pFDpCD_Dir, "11_P_pCD_VS_W_pFDpCD");
        histPlotter2D(c1, hP_pCD_VS_W_QEL_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pCD_VS_W_pFDpCD_Dir, "11a_P_pCD_VS_W_QEL_pFDpCD");
        histPlotter2D(c1, hP_pCD_VS_W_MEC_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pCD_VS_W_pFDpCD_Dir, "11b_P_pCD_VS_W_MEC_pFDpCD");
        histPlotter2D(c1, hP_pCD_VS_W_RES_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pCD_VS_W_pFDpCD_Dir, "11c_P_pCD_VS_W_RES_pFDpCD");
        histPlotter2D(c1, hP_pCD_VS_W_DIS_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pCD_VS_W_pFDpCD_Dir, "11d_P_pCD_VS_W_DIS_pFDpCD");

        // Momentum plots (nFDpCD, CD & FD)
        hP_e_APID_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., e_mom_th.GetLowerCut(), e_mom_th.GetUpperCut(), 0, false);
        hP_e_BPID_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., e_mom_th.GetLowerCut(), e_mom_th.GetUpperCut(), 0, false);

        hP_p_APID_nFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hP_p_BPID_nFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hP_p_APID_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(),
                                         0, false);
        hP_p_BPID_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(),
                                         0, false);

        hP_piplus_APID_nFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);
        hP_piplus_BPID_nFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);
        hP_piplus_APID_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);
        hP_piplus_BPID_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pip_mom_th.GetLowerCut(), pip_mom_th.GetUpperCut(), 0, false);

        hP_piminus_APID_nFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);
        hP_piminus_BPID_nFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);
        hP_piminus_APID_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);
        hP_piminus_BPID_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., pim_mom_th.GetLowerCut(), pim_mom_th.GetUpperCut(), 0, false);

        hP_ph_APID_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., ph_mom_th.GetLowerCut(), ph_mom_th.GetUpperCut(), 0, false);
        hP_ph_BPID_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., ph_mom_th.GetLowerCut(), ph_mom_th.GetUpperCut(), 0, false);

        if (!apply_kinematical_cuts) {
            hP_n_APID_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
            hP_n_BPID_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
        } else {
            hP_n_APID_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                             FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
            hP_n_BPID_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                             FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
        }

        // P_nFD vs. W plots (nFDpCD, FD)
        histPlotter2D(c1, hP_nFD_VS_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_nFD_VS_W_nFDpCD_Dir, "10_P_nFD_VS_W_nFDpCD");
        histPlotter2D(c1, hP_nFD_VS_W_QEL_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_nFD_VS_W_nFDpCD_Dir, "10a_P_nFD_VS_W_QEL_nFDpCD");
        histPlotter2D(c1, hP_nFD_VS_W_MEC_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_nFD_VS_W_nFDpCD_Dir, "10b_P_nFD_VS_W_MEC_nFDpCD");
        histPlotter2D(c1, hP_nFD_VS_W_RES_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_nFD_VS_W_nFDpCD_Dir, "10c_P_nFD_VS_W_RES_nFDpCD");
        histPlotter2D(c1, hP_nFD_VS_W_DIS_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_nFD_VS_W_nFDpCD_Dir, "10d_P_nFD_VS_W_DIS_nFDpCD");

        // P_pCD vs. W plots (nFDpCD, FD)
        histPlotter2D(c1, hP_pCD_VS_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pCD_VS_W_nFDpCD_Dir, "11_P_pCD_VS_W_nFDpCD");
        histPlotter2D(c1, hP_pCD_VS_W_QEL_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pCD_VS_W_nFDpCD_Dir, "11a_P_pCD_VS_W_QEL_nFDpCD");
        histPlotter2D(c1, hP_pCD_VS_W_MEC_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pCD_VS_W_nFDpCD_Dir, "11b_P_pCD_VS_W_MEC_nFDpCD");
        histPlotter2D(c1, hP_pCD_VS_W_RES_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pCD_VS_W_nFDpCD_Dir, "11c_P_pCD_VS_W_RES_nFDpCD");
        histPlotter2D(c1, hP_pCD_VS_W_DIS_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pCD_VS_W_nFDpCD_Dir, "11d_P_pCD_VS_W_DIS_nFDpCD");

        // Leading and recoil momentum plots (2p)
        hP_p_1_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hP_p_2_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);

        // Leading and recoil momentum plots (pFDpCD)
        if (!apply_kinematical_cuts) {
            hP_pFD_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
            hP_pL_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        } else {
            hP_pFD_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(),
                                       0, false);
            hP_pL_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(), 0,
                                      false);
        }

        hP_pCD_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hP_pR_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);

        // Leading and recoil momentum plots (nFDpCD)
        if (!apply_kinematical_cuts) {
            hP_nFD_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
            hP_nFD_nFDpCD_ZoomOut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
            hP_nL_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
        } else {
            hP_nFD_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(),
                                       0, false);
            hP_nFD_nFDpCD_ZoomOut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                               FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
            hP_nL_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(), 0,
                                      false);
        }

        hP_pCD_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hP_nR_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);

        // Total and relative momenta (pFDpCD)
        hP_tot_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hP_rel_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hP_tot_vs_P_rel_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_tot_mu_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hP_rel_mu_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hP_tot_mu_vs_P_rel_mu_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_tot_minus_q_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hP_tot_minus_q_vs_P_tot_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_tot_minus_q_vs_q_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        // Total and relative momenta (nFDpCD)
        hP_tot_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hP_rel_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hP_tot_vs_P_rel_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_tot_mu_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hP_rel_mu_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hP_tot_mu_vs_P_rel_mu_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_tot_minus_q_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hP_tot_minus_q_vs_P_tot_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_tot_minus_q_vs_q_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        // P1 vs P2 plots (2p, CD & FD)
        hP_p_1_vs_P_p_2_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        // P1 vs P2 plots (pFDpCD, CD & FD)
        hP_pL_vs_P_pR_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_pFD_vs_P_pCD_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        // P1 vs P2 plots (nFDpCD, CD & FD)
        hP_nL_vs_P_nR_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_nFD_vs_P_pCD_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_nFD_vs_P_e_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_nFD_vs_P_e_ZoomOut_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_nFD_vs_theta_e_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_nFD_vs_theta_e_ZoomOut_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_nFD_vs_phi_e_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hP_nFD_vs_phi_e_ZoomOut_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        htheta_nFD_vs_P_e_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        htheta_nFD_vs_theta_e_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        htheta_nFD_vs_phi_e_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hphi_nFD_vs_P_e_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hphi_nFD_vs_theta_e_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hphi_nFD_vs_phi_e_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        // Final state ratios (nFDpCD/pFDpCD) -------------------------------------------------------------------------------------------------------------------------------

        // Final state ratios (nFDpCD/pFDpCD)
        if (apply_nucleon_cuts) {
            if (FSR_1D_plots) {
                DrawAndSaveFSRatio(SampleName, hP_e_APID_1p_FD, hP_e_APID_1n_FD, plots);
                DrawAndSaveFSRatio(SampleName, hP_pFD_APIDandPS_1p, hP_nFD_APIDandNS_1n, plots);

                DrawAndSaveFSRatio(SampleName, hP_e_APID_pFDpCD_FD, hP_e_APID_nFDpCD_FD, plots);
                DrawAndSaveFSRatio(SampleName, hP_pL_pFDpCD, hP_nL_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hP_pR_pFDpCD, hP_nR_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hP_pFD_pFDpCD, hP_nFD_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hP_pCD_pFDpCD, hP_pCD_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hP_tot_pFDpCD, hP_tot_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hP_rel_pFDpCD, hP_rel_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hP_tot_mu_pFDpCD, hP_tot_mu_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hP_rel_mu_pFDpCD, hP_rel_mu_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hP_tot_minus_q_pFDpCD, hP_tot_minus_q_nFDpCD, plots);
            }

            if (FSR_2D_plots && SampleName != "C12_simulation_6GeV_T5_first_10") {
                DrawAndSaveFSRatio(SampleName, hP_pL_vs_P_pR_pFDpCD, hP_nL_vs_P_nR_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hP_pFD_vs_P_pCD_pFDpCD, hP_nFD_vs_P_pCD_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hP_tot_vs_P_rel_pFDpCD, hP_tot_vs_P_rel_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hP_tot_mu_vs_P_rel_mu_pFDpCD, hP_tot_mu_vs_P_rel_mu_nFDpCD, plots);
            }
        }
    } else {
        cout << "\033[33m\n\nMomentum plots are disabled by user.\n\n\033[0m";
    }

    // ======================================================================================================================================================================
    // W histograms
    // ======================================================================================================================================================================

    // W histograms
    if (W_plots) {
        cout << "\033[33m\n\nPlotting W histograms...\n\n\033[0m";

        //  W plots (CD & FD) ---------------------------------------------------------------------------------------------------------------------------------------------------

        // W plots (1e cut, CD & FD)
        double W_1e_cut_integral = hW_All_Int_1e_cut->Integral();

        histPlotter1D(c1, hW_All_Int_1e_cut, norm_W_plots, true, W_1e_cut_integral, "W distribution", "All Int., 1e Cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sW_1e_cut, "00_W_All_Int_1e_cut", hW_All_Int_1e_cut_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_QEL_1e_cut, norm_W_plots, true, W_1e_cut_integral, "W distribution", "QEL only, 1e Cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sW_1e_cut, "01_W_QEL_only_1e_cut", hW_QEL_1e_cut_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_MEC_1e_cut, norm_W_plots, true, W_1e_cut_integral, "W distribution", "MEC only, 1e Cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sW_1e_cut, "02_W_MEC_only_1e_cut", hW_MEC_1e_cut_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_RES_1e_cut, norm_W_plots, true, W_1e_cut_integral, "W distribution", "RES only, 1e Cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sW_1e_cut, "03_W_RES_only_1e_cut", hW_RES_1e_cut_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_DIS_1e_cut, norm_W_plots, true, W_1e_cut_integral, "W distribution", "DIS only, 1e Cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sW_1e_cut, "04_W_DIS_only_1e_cut", hW_DIS_1e_cut_Dir, "", kBlue, true, true, true, false);

        stackPlotter1D(c1, sW_1e_cut, norm_W_plots, "W distribution", "1e Cut", plots, Histogram_OutPDF, hW_All_Int_1e_cut, hW_QEL_1e_cut, hW_MEC_1e_cut, hW_RES_1e_cut, hW_DIS_1e_cut,
                       "05_W_Stack_1e_cut", sW_1e_cut_Dir, "");

        // W vs. q_3v plots (1e cut, FD)
        histPlotter2D(c1, hW_VS_q_3v_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_1e_cut_Dir, "06_W_VS_q_3v_1e_cut");
        histPlotter2D(c1, hW_VS_q_3v_QEL_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_1e_cut_Dir, "06a_W_VS_q_3v_QEL_1e_cut");
        histPlotter2D(c1, hW_VS_q_3v_MEC_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_1e_cut_Dir, "06b_W_VS_q_3v_MEC_1e_cut");
        histPlotter2D(c1, hW_VS_q_3v_RES_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_1e_cut_Dir, "06c_W_VS_q_3v_RES_1e_cut");
        histPlotter2D(c1, hW_VS_q_3v_DIS_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_1e_cut_Dir, "06d_W_VS_q_3v_DIS_1e_cut");

        // W vs. omega plots (1e cut, FD)
        histPlotter2D(c1, hW_VS_omega_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_1e_cut_Dir, "07_W_VS_omega_1e_cut");
        histPlotter2D(c1, hW_VS_omega_QEL_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_1e_cut_Dir, "07a_W_VS_omega_QEL_1e_cut");
        histPlotter2D(c1, hW_VS_omega_MEC_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_1e_cut_Dir, "07b_W_VS_omega_MEC_1e_cut");
        histPlotter2D(c1, hW_VS_omega_RES_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_1e_cut_Dir, "07c_W_VS_omega_RES_1e_cut");
        histPlotter2D(c1, hW_VS_omega_DIS_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_1e_cut_Dir, "07d_W_VS_omega_DIS_1e_cut");

        // W plots (1p, CD & FD)
        double W_1p_integral = hW_All_Int_1p->Integral();

        histPlotter1D(c1, hW_All_Int_1p, norm_W_plots, true, W_1p_integral, "W distribution", "All Int., 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sW_1p,
                      "00_W_All_Int_1p", hW_All_Int_1p_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_QEL_1p, norm_W_plots, true, W_1p_integral, "W distribution", "QEL only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sW_1p,
                      "01_W_QEL_only_1p", hW_QEL_1p_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_MEC_1p, norm_W_plots, true, W_1p_integral, "W distribution", "MEC only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sW_1p,
                      "02_W_MEC_only_1p", hW_MEC_1p_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_RES_1p, norm_W_plots, true, W_1p_integral, "W distribution", "RES only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sW_1p,
                      "03_W_RES_only_1p", hW_RES_1p_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_DIS_1p, norm_W_plots, true, W_1p_integral, "W distribution", "DIS only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sW_1p,
                      "04_W_DIS_only_1p", hW_DIS_1p_Dir, "", kBlue, true, true, true, false);

        stackPlotter1D(c1, sW_1p, norm_W_plots, "W distribution", "1p", plots, Histogram_OutPDF, hW_All_Int_1p, hW_QEL_1p, hW_MEC_1p, hW_RES_1p, hW_DIS_1p, "05_W_Stack_1p", sW_1p_Dir, "");

        // W vs. q_3v plots (1p, FD)
        histPlotter2D(c1, hW_VS_q_3v_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_1p_Dir, "06_W_VS_q_3v_1p");
        histPlotter2D(c1, hW_VS_q_3v_QEL_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_1p_Dir, "06a_W_VS_q_3v_QEL_1p");
        histPlotter2D(c1, hW_VS_q_3v_MEC_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_1p_Dir, "06b_W_VS_q_3v_MEC_1p");
        histPlotter2D(c1, hW_VS_q_3v_RES_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_1p_Dir, "06c_W_VS_q_3v_RES_1p");
        histPlotter2D(c1, hW_VS_q_3v_DIS_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_1p_Dir, "06d_W_VS_q_3v_DIS_1p");

        // W vs. omega plots (1p, FD)
        histPlotter2D(c1, hW_VS_omega_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_1p_Dir, "07_W_VS_omega_1p");
        histPlotter2D(c1, hW_VS_omega_QEL_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_1p_Dir, "07a_W_VS_omega_QEL_1p");
        histPlotter2D(c1, hW_VS_omega_MEC_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_1p_Dir, "07b_W_VS_omega_MEC_1p");
        histPlotter2D(c1, hW_VS_omega_RES_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_1p_Dir, "07c_W_VS_omega_RES_1p");
        histPlotter2D(c1, hW_VS_omega_DIS_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_1p_Dir, "07d_W_VS_omega_DIS_1p");

        // W plots (1n, CD & FD)
        double W_1n_integral = hW_All_Int_1n->Integral();

        histPlotter1D(c1, hW_All_Int_1n, norm_W_plots, true, W_1n_integral, "W distribution", "All Int., 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sW_1n,
                      "00_W_All_Int_1n", hW_All_Int_1n_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_QEL_1n, norm_W_plots, true, W_1n_integral, "W distribution", "QEL only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sW_1n,
                      "01_W_QEL_only_1n", hW_QEL_1n_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_MEC_1n, norm_W_plots, true, W_1n_integral, "W distribution", "MEC only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sW_1n,
                      "02_W_MEC_only_1n", hW_MEC_1n_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_RES_1n, norm_W_plots, true, W_1n_integral, "W distribution", "RES only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sW_1n,
                      "03_W_RES_only_1n", hW_RES_1n_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_DIS_1n, norm_W_plots, true, W_1n_integral, "W distribution", "DIS only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sW_1n,
                      "04_W_DIS_only_1n", hW_DIS_1n_Dir, "", kBlue, true, true, true, false);

        stackPlotter1D(c1, sW_1n, norm_W_plots, "W distribution", "1n", plots, Histogram_OutPDF, hW_All_Int_1n, hW_QEL_1n, hW_MEC_1n, hW_RES_1n, hW_DIS_1n, "05_W_Stack_1n", sW_1n_Dir, "");

        // W vs. q_3v plots (1n, FD)
        histPlotter2D(c1, hW_VS_q_3v_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_1n_Dir, "06_W_VS_q_3v_1n");
        histPlotter2D(c1, hW_VS_q_3v_QEL_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_1n_Dir, "06a_W_VS_q_3v_QEL_1n");
        histPlotter2D(c1, hW_VS_q_3v_MEC_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_1n_Dir, "06b_W_VS_q_3v_MEC_1n");
        histPlotter2D(c1, hW_VS_q_3v_RES_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_1n_Dir, "06c_W_VS_q_3v_RES_1n");
        histPlotter2D(c1, hW_VS_q_3v_DIS_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_1n_Dir, "06d_W_VS_q_3v_DIS_1n");

        // W vs. omega plots (1n, FD)
        histPlotter2D(c1, hW_VS_omega_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_1n_Dir, "07_W_VS_omega_1n");
        histPlotter2D(c1, hW_VS_omega_QEL_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_1n_Dir, "07a_W_VS_omega_QEL_1n");
        histPlotter2D(c1, hW_VS_omega_MEC_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_1n_Dir, "07b_W_VS_omega_MEC_1n");
        histPlotter2D(c1, hW_VS_omega_RES_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_1n_Dir, "07c_W_VS_omega_RES_1n");
        histPlotter2D(c1, hW_VS_omega_DIS_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_1n_Dir, "07d_W_VS_omega_DIS_1n");

        // W plots (2p, CD & FD)
        double W_2p_integral = hW_All_Int_2p->Integral();

        histPlotter1D(c1, hW_All_Int_2p, norm_W_plots, true, W_2p_integral, "W distribution", "All Int., 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sW_2p,
                      "00_W_All_Int_2p", hW_All_Int_2p_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_QEL_2p, norm_W_plots, true, W_2p_integral, "W distribution", "QEL only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sW_2p,
                      "01_W_QEL_only_2p", hW_QEL_2p_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_MEC_2p, norm_W_plots, true, W_2p_integral, "W distribution", "MEC only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sW_2p,
                      "02_W_MEC_only_2p", hW_MEC_2p_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_RES_2p, norm_W_plots, true, W_2p_integral, "W distribution", "RES only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sW_2p,
                      "03_W_RES_only_2p", hW_RES_2p_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_DIS_2p, norm_W_plots, true, W_2p_integral, "W distribution", "DIS only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sW_2p,
                      "04_W_DIS_only_2p", hW_DIS_2p_Dir, "", kBlue, true, true, true, false);

        stackPlotter1D(c1, sW_2p, norm_W_plots, "W distribution", "2p", plots, Histogram_OutPDF, hW_All_Int_2p, hW_QEL_2p, hW_MEC_2p, hW_RES_2p, hW_DIS_2p, "05_W_Stack_2p", sW_2p_Dir, "");

        // W vs. q_3v plots (2p, FD)
        histPlotter2D(c1, hW_VS_q_3v_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_2p_Dir, "06_W_VS_q_3v_2p");
        histPlotter2D(c1, hW_VS_q_3v_QEL_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_2p_Dir, "06a_W_VS_q_3v_QEL_2p");
        histPlotter2D(c1, hW_VS_q_3v_MEC_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_2p_Dir, "06b_W_VS_q_3v_MEC_2p");
        histPlotter2D(c1, hW_VS_q_3v_RES_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_2p_Dir, "06c_W_VS_q_3v_RES_2p");
        histPlotter2D(c1, hW_VS_q_3v_DIS_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_2p_Dir, "06d_W_VS_q_3v_DIS_2p");

        // W vs. omega plots (2p, FD)
        histPlotter2D(c1, hW_VS_omega_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_2p_Dir, "07_W_VS_omega_2p");
        histPlotter2D(c1, hW_VS_omega_QEL_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_2p_Dir, "07a_W_VS_omega_QEL_2p");
        histPlotter2D(c1, hW_VS_omega_MEC_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_2p_Dir, "07b_W_VS_omega_MEC_2p");
        histPlotter2D(c1, hW_VS_omega_RES_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_2p_Dir, "07c_W_VS_omega_RES_2p");
        histPlotter2D(c1, hW_VS_omega_DIS_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_2p_Dir, "07d_W_VS_omega_DIS_2p");

        // W plots (pFDpCD, CD & FD)
        double W_pFDpCD_integral = hW_All_Int_pFDpCD->Integral();

        histPlotter1D(c1, hW_All_Int_pFDpCD, norm_W_plots, true, W_pFDpCD_integral, "W distribution", "All Int., pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sW_pFDpCD, "00_W_All_Int_pFDpCD", hW_All_Int_pFDpCD_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_QEL_pFDpCD, norm_W_plots, true, W_pFDpCD_integral, "W distribution", "QEL only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sW_pFDpCD, "01_W_QEL_only_pFDpCD", hW_QEL_pFDpCD_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_MEC_pFDpCD, norm_W_plots, true, W_pFDpCD_integral, "W distribution", "MEC only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sW_pFDpCD, "02_W_MEC_only_pFDpCD", hW_MEC_pFDpCD_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_RES_pFDpCD, norm_W_plots, true, W_pFDpCD_integral, "W distribution", "RES only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sW_pFDpCD, "03_W_RES_only_pFDpCD", hW_RES_pFDpCD_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_DIS_pFDpCD, norm_W_plots, true, W_pFDpCD_integral, "W distribution", "DIS only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sW_pFDpCD, "04_W_DIS_only_pFDpCD", hW_DIS_pFDpCD_Dir, "", kBlue, true, true, true, false);

        stackPlotter1D(c1, sW_pFDpCD, norm_W_plots, "W distribution", "pFDpCD", plots, Histogram_OutPDF, hW_All_Int_pFDpCD, hW_QEL_pFDpCD, hW_MEC_pFDpCD, hW_RES_pFDpCD, hW_DIS_pFDpCD,
                       "05_W_Stack_pFDpCD", sW_pFDpCD_Dir, "");

        // W vs. q_3v plots (pFDpCD, FD)
        histPlotter2D(c1, hW_VS_q_3v_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_pFDpCD_Dir, "06_W_VS_q_3v_pFDpCD");
        histPlotter2D(c1, hW_VS_q_3v_QEL_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_pFDpCD_Dir, "06a_W_VS_q_3v_QEL_pFDpCD");
        histPlotter2D(c1, hW_VS_q_3v_MEC_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_pFDpCD_Dir, "06b_W_VS_q_3v_MEC_pFDpCD");
        histPlotter2D(c1, hW_VS_q_3v_RES_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_pFDpCD_Dir, "06c_W_VS_q_3v_RES_pFDpCD");
        histPlotter2D(c1, hW_VS_q_3v_DIS_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_pFDpCD_Dir, "06d_W_VS_q_3v_DIS_pFDpCD");

        // W vs. omega plots (pFDpCD, FD)
        histPlotter2D(c1, hW_VS_omega_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_pFDpCD_Dir, "07_W_VS_omega_pFDpCD");
        histPlotter2D(c1, hW_VS_omega_QEL_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_pFDpCD_Dir, "07a_W_VS_omega_QEL_pFDpCD");
        histPlotter2D(c1, hW_VS_omega_MEC_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_pFDpCD_Dir, "07b_W_VS_omega_MEC_pFDpCD");
        histPlotter2D(c1, hW_VS_omega_RES_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_pFDpCD_Dir, "07c_W_VS_omega_RES_pFDpCD");
        histPlotter2D(c1, hW_VS_omega_DIS_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_pFDpCD_Dir, "07d_W_VS_omega_DIS_pFDpCD");

        // W plots (nFDpCD, CD & FD)
        double W_nFDpCD_integral = hW_All_Int_nFDpCD->Integral();

        histPlotter1D(c1, hW_All_Int_nFDpCD, norm_W_plots, true, W_nFDpCD_integral, "W distribution", "All Int., nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sW_nFDpCD, "00_W_All_Int_nFDpCD", hW_All_Int_nFDpCD_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_QEL_nFDpCD, norm_W_plots, true, W_nFDpCD_integral, "W distribution", "QEL only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sW_nFDpCD, "01_W_QEL_only_nFDpCD", hW_QEL_nFDpCD_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_MEC_nFDpCD, norm_W_plots, true, W_nFDpCD_integral, "W distribution", "MEC only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sW_nFDpCD, "02_W_MEC_only_nFDpCD", hW_MEC_nFDpCD_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_RES_nFDpCD, norm_W_plots, true, W_nFDpCD_integral, "W distribution", "RES only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sW_nFDpCD, "03_W_RES_only_nFDpCD", hW_RES_nFDpCD_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hW_DIS_nFDpCD, norm_W_plots, true, W_nFDpCD_integral, "W distribution", "DIS only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sW_nFDpCD, "04_W_DIS_only_nFDpCD", hW_DIS_nFDpCD_Dir, "", kBlue, true, true, true, false);

        stackPlotter1D(c1, sW_nFDpCD, norm_W_plots, "W distribution", "nFDpCD", plots, Histogram_OutPDF, hW_All_Int_nFDpCD, hW_QEL_nFDpCD, hW_MEC_nFDpCD, hW_RES_nFDpCD, hW_DIS_nFDpCD,
                       "05_W_Stack_nFDpCD", sW_nFDpCD_Dir, "");

        // W vs. q_3v plots (nFDpCD, FD)
        histPlotter2D(c1, hW_VS_q_3v_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_nFDpCD_Dir, "06_W_VS_q_3v_nFDpCD");
        histPlotter2D(c1, hW_VS_q_3v_QEL_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_nFDpCD_Dir, "06a_W_VS_q_3v_QEL_nFDpCD");
        histPlotter2D(c1, hW_VS_q_3v_MEC_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_nFDpCD_Dir, "06b_W_VS_q_3v_MEC_nFDpCD");
        histPlotter2D(c1, hW_VS_q_3v_RES_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_nFDpCD_Dir, "06c_W_VS_q_3v_RES_nFDpCD");
        histPlotter2D(c1, hW_VS_q_3v_DIS_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_q_3v_nFDpCD_Dir, "06d_W_VS_q_3v_DIS_nFDpCD");

        // W vs. omega plots (nFDpCD, FD)
        histPlotter2D(c1, hW_VS_omega_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_nFDpCD_Dir, "07_W_VS_omega_nFDpCD");
        histPlotter2D(c1, hW_VS_omega_QEL_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_nFDpCD_Dir, "07a_W_VS_omega_QEL_nFDpCD");
        histPlotter2D(c1, hW_VS_omega_MEC_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_nFDpCD_Dir, "07b_W_VS_omega_MEC_nFDpCD");
        histPlotter2D(c1, hW_VS_omega_RES_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_nFDpCD_Dir, "07c_W_VS_omega_RES_nFDpCD");
        histPlotter2D(c1, hW_VS_omega_DIS_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hW_VS_omega_nFDpCD_Dir, "07d_W_VS_omega_DIS_nFDpCD");

        //  Final state ratios (nFDpCD/pFDpCD) ----------------------------------------------------------------------------------------------------------------------------------

        // Final state ratios (nFDpCD/pFDpCD)
        if (apply_nucleon_cuts) {
            if (FSR_1D_plots) { DrawAndSaveFSRatio(SampleName, hW_All_Int_pFDpCD, hW_All_Int_pFDpCD_Dir, hW_All_Int_nFDpCD, plots); }
        }
    } else {
        cout << "\033[33m\n\nW plots are disabled by user.\n\n\033[0m";
    }  // end of Beta plot if

    // ======================================================================================================================================================================
    // Beta histograms
    // ======================================================================================================================================================================

    // Beta histograms

    // Beta plots
    if (Beta_plots) {
        cout << "\033[33m\n\nPlotting Beta histograms...\n\n\033[0m";

        //  Beta plots ----------------------------------------------------------------------------------------------------------------------------------------------------------

        // Beta plots (1n)

        // Beta of neutrons from 'photons' - all sectors (1n)
        hBeta_n_from_ph_01_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Beta_plots, true, 1., 9999, 9999, 0, false);
        hBeta_n_from_ph_01_1n_ZOOMOUT_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Beta_plots, true, 1., 9999, 9999, 0, false);
        hBeta_n_from_ph_02_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Beta_plots, true, 1., 9999, 9999, 0, false);
        hBeta_n_from_ph_02_1n_ZOOMOUT_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Beta_plots, true, 1., 9999, 9999, 0, false);
        hBeta_n_from_ph_03_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Beta_plots, true, 1., 9999, 9999, 0, false);
        hBeta_n_from_ph_03_1n_ZOOMOUT_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Beta_plots, true, 1., 9999, 9999, 0, false);
        hBeta_n_from_ph_04_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Beta_plots, true, 1., 9999, 9999, 0, false);
        hBeta_n_from_ph_04_1n_ZOOMOUT_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Beta_plots, true, 1., 9999, 9999, 0, false);
    } else {
        cout << "\033[33m\n\nBeta plots are disabled by user.\n\n\033[0m";
    }  // end of Beta plot if

    if (!apply_nucleon_cuts && !is2GeVSample) {
        /* If sample is with 2GeV beam energy, no fit is needed. */
        BetaFit(SampleName, Beta_max_cut_ABF_FD_n_from_ph, n_momentum_cuts_ABF_FD_n_from_ph, hBeta_n_from_ph_01_1n_FD, plots, beamE);
        BetaFitApprax(SampleName, Beta_max_cut_ABF_FD_n_from_ph_apprax, n_momentum_cuts_ABF_FD_n_from_ph_apprax, hBeta_n_from_ph_01_1n_FD, plots, beamE);
    }

    // Beta vs. P plots
    if (Beta_vs_P_plots) {
        cout << "\033[33m\n\nPlotting Beta vs. P histograms...\n\n\033[0m";

        //  Beta vs. P TF1 plots ------------------------------------------------------------------------------------------------------------------------------------------------

        // Beta vs. P TF1 plots
        auto *beta_neutron = new TF1("beta_neutron", ("x/sqrt(x*x + " + to_string(m_n * m_n) + ")").c_str(), 0, beamE);
        auto *beta_proton = new TF1("beta_proton", ("x/sqrt(x*x + " + to_string(m_p * m_p) + ")").c_str(), 0, beamE);
        auto *beta_Kplus = new TF1("beta_Kplus", ("x/sqrt(x*x + " + to_string(m_Kplus * m_Kplus) + ")").c_str(), 0, beamE);
        auto *beta_Kminus = new TF1("beta_Kminus", ("x/sqrt(x*x + " + to_string(m_Kminus * m_Kminus) + ")").c_str(), 0, beamE);
        auto *beta_Kzero = new TF1("beta_Kplus", ("x/sqrt(x*x + " + to_string(m_Kzero * m_Kzero) + ")").c_str(), 0, beamE);
        auto *beta_piplus = new TF1("beta_piplus", ("x/sqrt(x*x + " + to_string(m_piplus * m_piplus) + ")").c_str(), 0, beamE);
        auto *beta_piminus = new TF1("beta_piminus", ("x/sqrt(x*x + " + to_string(m_piminus * m_piminus) + ")").c_str(), 0, beamE);
        auto *beta_pizero = new TF1("beta_piplus", ("x/sqrt(x*x + " + to_string(m_pizero * m_pizero) + ")").c_str(), 0, beamE);
        auto *beta_electron = new TF1("beta_electron", ("x/sqrt(x*x + " + to_string(m_e * m_e) + ")").c_str(), 0, beamE);
        auto *beta_photon = new TF1("beta_electron", ("x/sqrt(x*x + " + to_string(0) + ")").c_str(), 0, beamE);

        //  Beta vs. P plots ----------------------------------------------------------------------------------------------------------------------------------------------------

        // Beta vs. P plots (no #(e) cut)
        hBeta_vs_P_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_electron, beta_proton, beta_neutron, beta_pizero, beta_piplus, beta_piminus, beta_Kzero, beta_Kplus,
                                   beta_Kminus, true);
        hBeta_vs_P_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_electron, beta_proton, beta_neutron, beta_pizero, beta_piplus, beta_piminus, beta_Kzero, beta_Kplus,
                                   beta_Kminus, true);

        hBeta_vs_P_Electrons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_electron, "Electrons", true);
        hBeta_vs_P_Protons_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", true);
        hBeta_vs_P_Protons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", true);
        hBeta_vs_P_Neutrons_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_neutron, "Neutrons", true);
        hBeta_vs_P_Neutrons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_neutron, "Neutrons", true);

        hBeta_vs_P_positive_part_All_e_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", beta_Kplus, "Positive kaons", beta_piplus, "Positive pions", true);
        hBeta_vs_P_positive_part_All_e_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", beta_Kplus, "Positive kaons", beta_piplus, "Positive pions", true);
        hBeta_vs_P_neutral_part_All_e_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_neutron, "Neutrons", beta_Kzero, "Neutral kaons", beta_pizero, "Neutral pions", true);
        hBeta_vs_P_neutral_part_All_e_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_neutron, "Neutrons", beta_Kzero, "Neutral kaons", beta_pizero, "Neutral pions", true);
        hBeta_vs_P_negative_part_All_e_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "Negative kaons", beta_piminus, "Negative pions", beta_electron, "Electrons",
                                                       true);
        hBeta_vs_P_negative_part_All_e_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "Negative kaons", beta_piminus, "Negative pions", beta_electron, "Electrons",
                                                       true);

        // Beta vs. P plots (1e cut)
        hBeta_vs_P_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_electron, beta_proton, beta_neutron, beta_pizero, beta_piplus, beta_piminus, beta_Kzero, beta_Kplus,
                                          beta_Kminus, true);
        hBeta_vs_P_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_electron, beta_proton, beta_neutron, beta_pizero, beta_piplus, beta_piminus, beta_Kzero, beta_Kplus,
                                          beta_Kminus, true);

        hBeta_vs_P_1e_cut_Electrons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_electron, "Electrons", true);

        hBeta_vs_P_1e_cut_Protons_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", true);
        hBeta_vs_P_1e_cut_Protons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", true);

        hBeta_vs_P_1e_cut_Neutrons_Only_CD_CLAS12.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_neutron, "Neutrons", true);
        hBeta_vs_P_1e_cut_Neutrons_Only_FD_CLAS12.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_neutron, "Neutrons", true);
        hBeta_vs_P_1e_cut_Neutrons_Only_FD_ByDef.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_neutron, "Neutrons", true);

        hBeta_vs_P_1e_cut_Kplus_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kplus, "K^{+}", true);
        hBeta_vs_P_1e_cut_Kplus_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kplus, "K^{+}", true);

        hBeta_vs_P_1e_cut_Kminus_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "K^{-}", true);
        hBeta_vs_P_1e_cut_Kminus_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "K^{-}", true);

        hBeta_vs_P_1e_cut_piplus_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_piplus, "#pi^{+}", true);
        hBeta_vs_P_1e_cut_piplus_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_piplus, "#pi^{+}", true);

        hBeta_vs_P_1e_cut_piminus_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_piminus, "#pi^{-}", true);
        hBeta_vs_P_1e_cut_piminus_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_piminus, "#pi^{-}", true);

        hBeta_vs_P_positive_part_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", beta_Kplus, "Positive kaons", beta_piplus, "Positive pions", true);
        hBeta_vs_P_positive_part_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", beta_Kplus, "Positive kaons", beta_piplus, "Positive pions", true);
        hBeta_vs_P_neutral_part_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_neutron, "Neutrons", beta_Kzero, "Neutral kaons", beta_pizero, "Neutral pions", true);
        hBeta_vs_P_neutral_part_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_neutron, "Neutrons", beta_Kzero, "Neutral kaons", beta_pizero, "Neutral pions", true);
        hBeta_vs_P_negative_part_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "Negative kaons", beta_piminus, "Negative pions", beta_electron, "Electrons",
                                                        true);
        hBeta_vs_P_negative_part_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "Negative kaons", beta_piminus, "Negative pions", beta_electron, "Electrons",
                                                        true);

        // Beta vs. P plots (1p)
        hBeta_vs_P_1p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_electron, beta_proton, beta_neutron, beta_pizero, beta_piplus, beta_piminus, beta_Kzero, beta_Kplus,
                                      beta_Kminus, true);
        hBeta_vs_P_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_electron, beta_proton, beta_neutron, beta_pizero, beta_piplus, beta_piminus, beta_Kzero, beta_Kplus,
                                      beta_Kminus, true);
        hBeta_vs_P_1p_Electrons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_electron, "Electrons", true);
        hBeta_vs_P_1p_Protons_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", true);
        hBeta_vs_P_1p_Protons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", true);
        hBeta_vs_P_positive_part_1p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", beta_Kplus, "Positive kaons", beta_piplus, "Positive pions", true);
        hBeta_vs_P_positive_part_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", beta_Kplus, "Positive kaons", beta_piplus, "Positive pions", true);
        hBeta_vs_P_neutral_part_1p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_neutron, "Neutrons", beta_Kzero, "Neutral kaons", beta_pizero, "Neutral pions", true);
        hBeta_vs_P_neutral_part_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_neutron, "Neutrons", beta_Kzero, "Neutral kaons", beta_pizero, "Neutral pions", true);
        hBeta_vs_P_negative_part_1p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "Negative kaons", beta_piminus, "Negative pions", beta_electron, "Electrons", true);
        hBeta_vs_P_negative_part_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "Negative kaons", beta_piminus, "Negative pions", beta_electron, "Electrons", true);

        // Beta vs. P plots (1n)
        hBeta_vs_P_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hBeta_vs_P_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hBeta_vs_P_1n_Electrons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hBeta_vs_P_1n_Neutrons_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hBeta_vs_P_1n_Neutrons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hBeta_vs_P_1n_Neutrons_Only_ZOOMOUT_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hBeta_vs_P_1n_Neutrons_Only_from_photons_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hBeta_vs_P_1n_Photons_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hBeta_vs_P_1n_Photons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hBeta_vs_P_1n_Protons_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", true);
        hBeta_vs_P_1n_Protons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", true);
        hBeta_vs_P_1n_Piplus_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_piplus, "#pi^{+}", true);
        hBeta_vs_P_1n_Piplus_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_piplus, "#pi^{+}", true);
        hBeta_vs_P_1n_Piminus_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_piminus, "#pi^{-}", true);
        hBeta_vs_P_1n_Piminus_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_piminus, "#pi^{-}", true);
        hBeta_vs_P_1n_Kplus_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kplus, "K^{+}", true);
        hBeta_vs_P_1n_Kplus_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kplus, "K^{+}", true);
        hBeta_vs_P_1n_Kminus_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "K^{-}", true);
        hBeta_vs_P_1n_Kminus_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "K^{-}", true);

        hBeta_vs_P_pos_part_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", beta_Kplus, "Positive kaons", beta_piplus, "Positive pions", true);
        hBeta_vs_P_pos_part_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", beta_Kplus, "Positive kaons", beta_piplus, "Positive pions", true);
        hBeta_vs_P_neut_part_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_neutron, "Neutrons", beta_Kzero, "Neutral kaons", beta_pizero, "Neutral pions", true);
        hBeta_vs_P_neut_part_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_neutron, "Neutrons", beta_Kzero, "Neutral kaons", beta_pizero, "Neutral pions", true);
        hBeta_vs_P_neg_part_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "Negative kaons", beta_piminus, "Negative pions", beta_electron, "Electrons", true);
        hBeta_vs_P_neg_part_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "Negative kaons", beta_piminus, "Negative pions", beta_electron, "Electrons", true);

        // Beta vs. P plots (2p)
        hBeta_vs_P_2p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_electron, beta_proton, beta_neutron, beta_pizero, beta_piplus, beta_piminus, beta_Kzero, beta_Kplus,
                                      beta_Kminus, true);
        hBeta_vs_P_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_electron, beta_proton, beta_neutron, beta_pizero, beta_piplus, beta_piminus, beta_Kzero, beta_Kplus,
                                      beta_Kminus, true);
        hBeta_vs_P_2p_Electrons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_electron, "Electrons", true);
        hBeta_vs_P_2p_Protons_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", true);
        hBeta_vs_P_2p_Protons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", true);
        hBeta_vs_P_positive_part_2p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", beta_Kplus, "Positive kaons", beta_piplus, "Positive pions", true);
        hBeta_vs_P_positive_part_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", beta_Kplus, "Positive kaons", beta_piplus, "Positive pions", true);
        hBeta_vs_P_neutral_part_2p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_neutron, "Neutrons", beta_Kzero, "Neutral kaons", beta_pizero, "Neutral pions", true);
        hBeta_vs_P_neutral_part_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_neutron, "Neutrons", beta_Kzero, "Neutral kaons", beta_pizero, "Neutral pions", true);
        hBeta_vs_P_negative_part_2p_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "Negative kaons", beta_piminus, "Negative pions", beta_electron, "Electrons", true);
        hBeta_vs_P_negative_part_2p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "Negative kaons", beta_piminus, "Negative pions", beta_electron, "Electrons", true);

        // Beta vs. P plots (pFDpCD)
        hBeta_vs_P_pFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_electron, beta_proton, beta_neutron, beta_pizero, beta_piplus, beta_piminus, beta_Kzero, beta_Kplus,
                                          beta_Kminus, true);
        hBeta_vs_P_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_electron, beta_proton, beta_neutron, beta_pizero, beta_piplus, beta_piminus, beta_Kzero, beta_Kplus,
                                          beta_Kminus, true);
        hBeta_vs_P_pFDpCD_Electrons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_electron, "Electrons", true);
        hBeta_vs_P_pFDpCD_Protons_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", true);
        hBeta_vs_P_pFDpCD_Protons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", true);
        hBeta_vs_P_pFD_pFDpCD_Protons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", true);
        hBeta_vs_P_pCD_pFDpCD_Protons_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", true);
        hBeta_vs_P_positive_part_pFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", beta_Kplus, "Positive kaons", beta_piplus, "Positive pions", true);
        hBeta_vs_P_positive_part_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", beta_Kplus, "Positive kaons", beta_piplus, "Positive pions", true);
        hBeta_vs_P_neutral_part_pFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_neutron, "Neutrons", beta_Kzero, "Neutral kaons", beta_pizero, "Neutral pions", true);
        hBeta_vs_P_neutral_part_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_neutron, "Neutrons", beta_Kzero, "Neutral kaons", beta_pizero, "Neutral pions", true);
        hBeta_vs_P_negative_part_pFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "Negative kaons", beta_piminus, "Negative pions", beta_electron, "Electrons",
                                                        true);
        hBeta_vs_P_negative_part_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "Negative kaons", beta_piminus, "Negative pions", beta_electron, "Electrons",
                                                        true);

        // Beta vs. P plots (nFDpCD)
        hBeta_vs_P_nFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hBeta_vs_P_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hBeta_vs_P_nFDpCD_Electrons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hBeta_vs_P_nFDpCD_Neutrons_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hBeta_vs_P_nFDpCD_Neutrons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hBeta_vs_P_nFDpCD_Neutrons_Only_ZOOMOUT_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hBeta_vs_P_nFDpCD_Neutrons_Only_from_photons_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hBeta_vs_P_nFDpCD_Photons_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hBeta_vs_P_nFDpCD_Photons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hBeta_vs_P_nFDpCD_Protons_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", true);
        hBeta_vs_P_nFDpCD_Protons_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", true);
        hBeta_vs_P_nFDpCD_Piplus_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_piplus, "#pi^{+}", true);
        hBeta_vs_P_nFDpCD_Piplus_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_piplus, "#pi^{+}", true);
        hBeta_vs_P_nFDpCD_Piminus_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_piminus, "#pi^{-}", true);
        hBeta_vs_P_nFDpCD_Piminus_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_piminus, "#pi^{-}", true);
        hBeta_vs_P_nFDpCD_Kplus_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kplus, "K^{+}", true);
        hBeta_vs_P_nFDpCD_Kplus_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kplus, "K^{+}", true);
        hBeta_vs_P_nFDpCD_Kminus_Only_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "K^{-}", true);
        hBeta_vs_P_nFDpCD_Kminus_Only_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "K^{-}", true);

        hBeta_vs_P_pos_part_nFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", beta_Kplus, "Positive kaons", beta_piplus, "Positive pions", true);
        hBeta_vs_P_pos_part_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_proton, "Protons", beta_Kplus, "Positive kaons", beta_piplus, "Positive pions", true);
        hBeta_vs_P_neut_part_nFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_neutron, "Neutrons", beta_Kzero, "Neutral kaons", beta_pizero, "Neutral pions", true);
        hBeta_vs_P_neut_part_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_neutron, "Neutrons", beta_Kzero, "Neutral kaons", beta_pizero, "Neutral pions", true);
        hBeta_vs_P_neg_part_nFDpCD_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "Negative kaons", beta_piminus, "Negative pions", beta_electron, "Electrons", true);
        hBeta_vs_P_neg_part_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, beta_Kminus, "Negative kaons", beta_piminus, "Negative pions", beta_electron, "Electrons", true);
    } else {
        cout << "\033[33m\n\nBeta vs. P plots are disabled by user.\n\n\033[0m";
    }  // end of Beta vs. P plot if

    // ======================================================================================================================================================================
    // Angle histograms
    // ======================================================================================================================================================================

    // Angle histograms
    if (Angle_plots_master) {
        cout << "\033[33m\n\nPlotting Angle histograms...\n\n\033[0m";

        CanvasPDF->Print(Form("%s[", Histogram_OutPDF));  // Open the PDF file
        CanvasPDF->cd();

        TLatex text;
        text.SetTextSize(0.05);
        text.DrawLatex(0.2, 0.9, "Angle histograms");
        // text.DrawLatex(0.2, 0.8, "No Cuts");

        // Force canvas to recognize modifications
        CanvasPDF->Modified();
        CanvasPDF->Update();

        // Save the current canvas content to the PDF
        CanvasPDF->Print(Histogram_OutPDF);

        // End the multi-page PDF
        CanvasPDF->Print(Form("%s]", Histogram_OutPDF));  // Close the PDF file
        CanvasPDF->Print(Form("%s[", Histogram_OutPDF));  // Open the PDF file
        c1->cd();

        //  Theta_e plots (FD only) ---------------------------------------------------------------------------------------------------------------------------------------------

        // Theta_e plots (no #(e) cut, FD)
        double Theta_e_integral = hTheta_e_All_e_FD->Integral();

        histPlotter1D(c1, hTheta_e_All_e_FD, norm_Angle_plots_master, true, Theta_e_integral, "#theta_{e} of Outgoing Electron", "All Int., No #(e) Cut", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_e, "Theta_e_All_Int_All_e", hTheta_e_All_e_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5, 22.5, false);

        // Theta_e plots (1e cut, FD)
        double Theta_e_1e_integral = hTheta_e_1e_cut_FD->Integral();

        histPlotter1D(c1, hTheta_e_1e_cut_FD, norm_Angle_plots_master, true, Theta_e_1e_integral, "#theta_{e} of Outgoing Electron", "All Int., 1e Cut", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_e, "Theta_e_All_Int_1e_cut", hTheta_e_1e_cut_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5, 22.5, false);

        // Theta_e plots (1p, FD)
        double Theta_e_All_Int_1p_integral = hTheta_e_All_Int_1p_FD->Integral();
        double Theta_e_QEL_1p_integral = hTheta_e_QEL_1p_FD->Integral();
        double Theta_e_MEC_1p_integral = hTheta_e_MEC_1p_FD->Integral();
        double Theta_e_RES_1p_integral = hTheta_e_RES_1p_FD->Integral();
        double Theta_e_DIS_1p_integral = hTheta_e_DIS_1p_FD->Integral();

        histPlotter1D(c1, hTheta_e_All_Int_1p_FD, norm_Angle_plots_master, true, Theta_e_All_Int_1p_integral, "#theta_{e} of Outgoing Electron", "All Int., 1p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_e_1p_FD, "00_Theta_e_All_Int_1p", hTheta_e_All_Int_1p_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5, 22.5, false);
        histPlotter1D(c1, hTheta_e_QEL_1p_FD, norm_Angle_plots_master, true, Theta_e_QEL_1p_integral, "#theta_{e} of Outgoing Electron", "QEL Only, 1p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_e_1p_FD, "01_Theta_e_QEL_Only_1p", hTheta_e_QEL_1p_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5, 22.5, false);
        histPlotter1D(c1, hTheta_e_MEC_1p_FD, norm_Angle_plots_master, true, Theta_e_MEC_1p_integral, "#theta_{e} of Outgoing Electron", "MEC Only, 1p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_e_1p_FD, "02_Theta_e_MEC_Only_1p", hTheta_e_MEC_1p_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5, 22.5, false);
        histPlotter1D(c1, hTheta_e_RES_1p_FD, norm_Angle_plots_master, true, Theta_e_RES_1p_integral, "#theta_{e} of Outgoing Electron", "RES Only, 1p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_e_1p_FD, "03_Theta_e_RES_Only_1p", hTheta_e_RES_1p_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5, 22.5, false);
        histPlotter1D(c1, hTheta_e_DIS_1p_FD, norm_Angle_plots_master, true, Theta_e_DIS_1p_integral, "#theta_{e} of Outgoing Electron", "DIS Only, 1p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_e_1p_FD, "04_Theta_e_DIS_Only_1p", hTheta_e_DIS_1p_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5, 22.5, false);

        stackPlotter1D(c1, sTheta_e_1p_FD, norm_Angle_plots_master, "#theta_{e} of Outgoing Electron", "1p", plots, Histogram_OutPDF, hTheta_e_All_Int_1p_FD, hTheta_e_QEL_1p_FD,
                       hTheta_e_MEC_1p_FD, hTheta_e_RES_1p_FD, hTheta_e_DIS_1p_FD, "05_Theta_e_Stack_1p", hTheta_e_All_Int_1p_FD_Dir, "FD");

        histPlotter2D(c1, hTheta_e_VS_P_e_1p_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_e_VS_P_e_1p_FD_Dir, "Theta_e_VS_P_e_1p_FD");
        histPlotter2D(c1, hTheta_e_VS_W_1p_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_e_VS_W_1p_FD_Dir, "Theta_e_VS_W_1p_FD");

        // Theta_e plots (1n, FD)
        double Theta_e_All_Int_1n_integral = hTheta_e_All_Int_1n_FD->Integral();
        double Theta_e_QEL_1n_integral = hTheta_e_QEL_1n_FD->Integral();
        double Theta_e_MEC_1n_integral = hTheta_e_MEC_1n_FD->Integral();
        double Theta_e_RES_1n_integral = hTheta_e_RES_1n_FD->Integral();
        double Theta_e_DIS_1n_integral = hTheta_e_DIS_1n_FD->Integral();

        histPlotter1D(c1, hTheta_e_All_Int_1n_FD, norm_Angle_plots_master, true, Theta_e_All_Int_1n_integral, "#theta_{e} of Outgoing Electron", "All Int., 1n", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_e_1n_FD, "00_Theta_e_All_Int_1n", hTheta_e_All_Int_1n_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5, 22.5, false);
        histPlotter1D(c1, hTheta_e_QEL_1n_FD, norm_Angle_plots_master, true, Theta_e_QEL_1n_integral, "#theta_{e} of Outgoing Electron", "QEL Only, 1n", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_e_1n_FD, "01_Theta_e_QEL_Only_1n", hTheta_e_QEL_1n_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5, 22.5, false);
        histPlotter1D(c1, hTheta_e_MEC_1n_FD, norm_Angle_plots_master, true, Theta_e_MEC_1n_integral, "#theta_{e} of Outgoing Electron", "MEC Only, 1n", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_e_1n_FD, "02_Theta_e_MEC_Only_1n", hTheta_e_MEC_1n_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5, 22.5, false);
        histPlotter1D(c1, hTheta_e_RES_1n_FD, norm_Angle_plots_master, true, Theta_e_RES_1n_integral, "#theta_{e} of Outgoing Electron", "RES Only, 1n", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_e_1n_FD, "03_Theta_e_RES_Only_1n", hTheta_e_RES_1n_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5, 22.5, false);
        histPlotter1D(c1, hTheta_e_DIS_1n_FD, norm_Angle_plots_master, true, Theta_e_DIS_1n_integral, "#theta_{e} of Outgoing Electron", "DIS Only, 1n", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_e_1n_FD, "04_Theta_e_DIS_Only_1n", hTheta_e_DIS_1n_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5, 22.5, false);

        stackPlotter1D(c1, sTheta_e_1n_FD, norm_Angle_plots_master, "#theta_{e} of Outgoing Electron", "1n", plots, Histogram_OutPDF, hTheta_e_All_Int_1n_FD, hTheta_e_QEL_1n_FD,
                       hTheta_e_MEC_1n_FD, hTheta_e_RES_1n_FD, hTheta_e_DIS_1n_FD, "05_Theta_e_Stack_1n", hTheta_e_All_Int_1n_FD_Dir, "FD");

        histPlotter2D(c1, hTheta_e_VS_P_e_1n_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_e_VS_P_e_1n_FD_Dir, "Theta_e_VS_P_e_1n_FD");
        histPlotter2D(c1, hTheta_e_VS_W_1n_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_e_VS_W_1n_FD_Dir, "Theta_e_VS_W_1n_FD");

        // Theta_e plots (2p, FD)
        double Theta_e_All_Int_2p_integral = hTheta_e_All_Int_2p_FD->Integral();
        double Theta_e_QEL_2p_integral = hTheta_e_QEL_2p_FD->Integral();
        double Theta_e_MEC_2p_integral = hTheta_e_MEC_2p_FD->Integral();
        double Theta_e_RES_2p_integral = hTheta_e_RES_2p_FD->Integral();
        double Theta_e_DIS_2p_integral = hTheta_e_DIS_2p_FD->Integral();

        histPlotter1D(c1, hTheta_e_All_Int_2p_FD, norm_Angle_plots_master, true, Theta_e_All_Int_2p_integral, "#theta_{e} of Outgoing Electron", "All Int., 2p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_e_2p_FD, "00_Theta_e_All_Int_2p", hTheta_e_All_Int_2p_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5, 22.5, false);
        histPlotter1D(c1, hTheta_e_QEL_2p_FD, norm_Angle_plots_master, true, Theta_e_QEL_2p_integral, "#theta_{e} of Outgoing Electron", "QEL Only, 2p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_e_2p_FD, "01_Theta_e_QEL_Only_2p", hTheta_e_QEL_2p_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5, 22.5, false);
        histPlotter1D(c1, hTheta_e_MEC_2p_FD, norm_Angle_plots_master, true, Theta_e_MEC_2p_integral, "#theta_{e} of Outgoing Electron", "MEC Only, 2p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_e_2p_FD, "02_Theta_e_MEC_Only_2p", hTheta_e_MEC_2p_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5, 22.5, false);
        histPlotter1D(c1, hTheta_e_RES_2p_FD, norm_Angle_plots_master, true, Theta_e_RES_2p_integral, "#theta_{e} of Outgoing Electron", "RES Only, 2p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_e_2p_FD, "03_Theta_e_RES_Only_2p", hTheta_e_RES_2p_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5, 22.5, false);
        histPlotter1D(c1, hTheta_e_DIS_2p_FD, norm_Angle_plots_master, true, Theta_e_DIS_2p_integral, "#theta_{e} of Outgoing Electron", "DIS Only, 2p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_e_2p_FD, "04_Theta_e_DIS_Only_2p", hTheta_e_DIS_2p_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5, 22.5, false);

        stackPlotter1D(c1, sTheta_e_2p_FD, norm_Angle_plots_master, "#theta_{e} of Outgoing Electron", "2p", plots, Histogram_OutPDF, hTheta_e_All_Int_2p_FD, hTheta_e_QEL_2p_FD,
                       hTheta_e_MEC_2p_FD, hTheta_e_RES_2p_FD, hTheta_e_DIS_2p_FD, "05_Theta_e_Stack_2p", hTheta_e_All_Int_2p_FD_Dir, "FD");

        // Theta_e plots (pFDpCD, FD)
        double Theta_e_All_Int_pFDpCD_integral = hTheta_e_All_Int_pFDpCD_FD->Integral();
        double Theta_e_QEL_pFDpCD_integral = hTheta_e_QEL_pFDpCD_FD->Integral();
        double Theta_e_MEC_pFDpCD_integral = hTheta_e_MEC_pFDpCD_FD->Integral();
        double Theta_e_RES_pFDpCD_integral = hTheta_e_RES_pFDpCD_FD->Integral();
        double Theta_e_DIS_pFDpCD_integral = hTheta_e_DIS_pFDpCD_FD->Integral();

        histPlotter1D(c1, hTheta_e_All_Int_pFDpCD_FD, norm_Angle_plots_master, true, Theta_e_All_Int_pFDpCD_integral, "#theta_{e} of Outgoing Electron", "All Int., pFDpCD", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_e_pFDpCD_FD, "00_Theta_e_All_Int_pFDpCD", hTheta_e_All_Int_pFDpCD_FD_Dir, "FD", kBlue, true, true, true, false,
                      true, 17.5, 22.5, false);
        histPlotter1D(c1, hTheta_e_QEL_pFDpCD_FD, norm_Angle_plots_master, true, Theta_e_QEL_pFDpCD_integral, "#theta_{e} of Outgoing Electron", "QEL Only, pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_e_pFDpCD_FD, "01_Theta_e_QEL_Only_pFDpCD", hTheta_e_QEL_pFDpCD_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5,
                      22.5, false);
        histPlotter1D(c1, hTheta_e_MEC_pFDpCD_FD, norm_Angle_plots_master, true, Theta_e_MEC_pFDpCD_integral, "#theta_{e} of Outgoing Electron", "MEC Only, pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_e_pFDpCD_FD, "02_Theta_e_MEC_Only_pFDpCD", hTheta_e_MEC_pFDpCD_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5,
                      22.5, false);
        histPlotter1D(c1, hTheta_e_RES_pFDpCD_FD, norm_Angle_plots_master, true, Theta_e_RES_pFDpCD_integral, "#theta_{e} of Outgoing Electron", "RES Only, pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_e_pFDpCD_FD, "03_Theta_e_RES_Only_pFDpCD", hTheta_e_RES_pFDpCD_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5,
                      22.5, false);
        histPlotter1D(c1, hTheta_e_DIS_pFDpCD_FD, norm_Angle_plots_master, true, Theta_e_DIS_pFDpCD_integral, "#theta_{e} of Outgoing Electron", "DIS Only, pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_e_pFDpCD_FD, "04_Theta_e_DIS_Only_pFDpCD", hTheta_e_DIS_pFDpCD_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5,
                      22.5, false);

        stackPlotter1D(c1, sTheta_e_pFDpCD_FD, norm_Angle_plots_master, "#theta_{e} of Outgoing Electron", "pFDpCD", plots, Histogram_OutPDF, hTheta_e_All_Int_pFDpCD_FD,
                       hTheta_e_QEL_pFDpCD_FD, hTheta_e_MEC_pFDpCD_FD, hTheta_e_RES_pFDpCD_FD, hTheta_e_DIS_pFDpCD_FD, "05_Theta_e_Stack_pFDpCD", hTheta_e_All_Int_pFDpCD_FD_Dir, "FD");

        histPlotter2D(c1, hTheta_e_VS_P_e_pFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_e_VS_P_e_pFDpCD_FD_Dir, "Theta_e_VS_P_e_pFDpCD_FD");
        histPlotter2D(c1, hTheta_e_VS_W_pFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_e_VS_W_pFDpCD_FD_Dir, "Theta_e_VS_W_pFDpCD_FD");

        // Theta_e plots (nFDpCD, FD)
        double Theta_e_All_Int_nFDpCD_integral = hTheta_e_All_Int_nFDpCD_FD->Integral();
        double Theta_e_QEL_nFDpCD_integral = hTheta_e_QEL_nFDpCD_FD->Integral();
        double Theta_e_MEC_nFDpCD_integral = hTheta_e_MEC_nFDpCD_FD->Integral();
        double Theta_e_RES_nFDpCD_integral = hTheta_e_RES_nFDpCD_FD->Integral();
        double Theta_e_DIS_nFDpCD_integral = hTheta_e_DIS_nFDpCD_FD->Integral();

        histPlotter1D(c1, hTheta_e_All_Int_nFDpCD_FD, norm_Angle_plots_master, true, Theta_e_All_Int_nFDpCD_integral, "#theta_{e} of Outgoing Electron", "All Int., nFDpCD", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_e_nFDpCD_FD, "00_Theta_e_All_Int_nFDpCD", hTheta_e_All_Int_nFDpCD_FD_Dir, "FD", kBlue, true, true, true, false,
                      true, 17.5, 22.5, false);
        histPlotter1D(c1, hTheta_e_QEL_nFDpCD_FD, norm_Angle_plots_master, true, Theta_e_QEL_nFDpCD_integral, "#theta_{e} of Outgoing Electron", "QEL Only, nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_e_nFDpCD_FD, "01_Theta_e_QEL_Only_nFDpCD", hTheta_e_QEL_nFDpCD_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5,
                      22.5, false);
        histPlotter1D(c1, hTheta_e_MEC_nFDpCD_FD, norm_Angle_plots_master, true, Theta_e_MEC_nFDpCD_integral, "#theta_{e} of Outgoing Electron", "MEC Only, nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_e_nFDpCD_FD, "02_Theta_e_MEC_Only_nFDpCD", hTheta_e_MEC_nFDpCD_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5,
                      22.5, false);
        histPlotter1D(c1, hTheta_e_RES_nFDpCD_FD, norm_Angle_plots_master, true, Theta_e_RES_nFDpCD_integral, "#theta_{e} of Outgoing Electron", "RES Only, nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_e_nFDpCD_FD, "03_Theta_e_RES_Only_nFDpCD", hTheta_e_RES_nFDpCD_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5,
                      22.5, false);
        histPlotter1D(c1, hTheta_e_DIS_nFDpCD_FD, norm_Angle_plots_master, true, Theta_e_DIS_nFDpCD_integral, "#theta_{e} of Outgoing Electron", "DIS Only, nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_e_nFDpCD_FD, "04_Theta_e_DIS_Only_nFDpCD", hTheta_e_DIS_nFDpCD_FD_Dir, "FD", kBlue, true, true, true, false, true, 17.5,
                      22.5, false);

        stackPlotter1D(c1, sTheta_e_nFDpCD_FD, norm_Angle_plots_master, "#theta_{e} of Outgoing Electron", "nFDpCD", plots, Histogram_OutPDF, hTheta_e_All_Int_nFDpCD_FD,
                       hTheta_e_QEL_nFDpCD_FD, hTheta_e_MEC_nFDpCD_FD, hTheta_e_RES_nFDpCD_FD, hTheta_e_DIS_nFDpCD_FD, "05_Theta_e_Stack_nFDpCD", hTheta_e_All_Int_nFDpCD_FD_Dir, "FD");

        histPlotter2D(c1, hTheta_e_VS_P_e_nFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_e_VS_P_e_nFDpCD_FD_Dir, "Theta_e_VS_P_e_nFDpCD_FD");
        histPlotter2D(c1, hTheta_e_VS_W_nFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_e_VS_W_nFDpCD_FD_Dir, "Theta_e_VS_W_nFDpCD_FD");

        //  Phi_e plots (FD only) -----------------------------------------------------------------------------------------------------------------------------------------------

        // Phi_e plots (no #(e) cut, FD)
        double Phi_e_integral = hPhi_e_All_e_FD->Integral();

        histPlotter1D(c1, hPhi_e_All_e_FD, norm_Angle_plots_master, true, Phi_e_integral, "#phi_{e} of Outgoing Electron", "no #(e) cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sPhi_e, "Phi_e_All_Int_All_e", hPhi_e_All_e_FD_Dir, "FD", kBlue, true, true, true);

        // Phi_e plots (1e cut, FD)
        double Phi_e_1e_integral = hPhi_e_1e_cut_FD->Integral();

        histPlotter1D(c1, hPhi_e_1e_cut_FD, norm_Angle_plots_master, true, Phi_e_1e_integral, "#phi_{e} of Outgoing Electron", "1e Cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sPhi_e, "Phi_e_All_Int_1e_cut", hPhi_e_1e_cut_FD_Dir, "FD", kBlue, true, true, true);

        // Phi_e plots (1p, FD)
        double Phi_e_All_Int_1p_integral = hPhi_e_All_Int_1p_FD->Integral();
        double Phi_e_QEL_1p_integral = hPhi_e_QEL_1p_FD->Integral();
        double Phi_e_MEC_1p_integral = hPhi_e_MEC_1p_FD->Integral();
        double Phi_e_RES_1p_integral = hPhi_e_RES_1p_FD->Integral();
        double Phi_e_DIS_1p_integral = hPhi_e_DIS_1p_FD->Integral();

        histPlotter1D(c1, hPhi_e_All_Int_1p_FD, norm_Angle_plots_master, true, Phi_e_All_Int_1p_integral, "#phi_{e} of Outgoing Electron", "All Int., 1p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "00_phi_e_All_Int_1p", hPhi_e_All_Int_1p_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_QEL_1p_FD, norm_Angle_plots_master, true, Phi_e_QEL_1p_integral, "#phi_{e} of Outgoing Electron", "QEL Only, 1p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "01_Phi_e_QEL_Only_1p", hPhi_e_QEL_1p_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_MEC_1p_FD, norm_Angle_plots_master, true, Phi_e_MEC_1p_integral, "#phi_{e} of Outgoing Electron", "MEC Only, 1p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "02_Phi_e_MEC_Only_1p", hPhi_e_MEC_1p_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_RES_1p_FD, norm_Angle_plots_master, true, Phi_e_RES_1p_integral, "#phi_{e} of Outgoing Electron", "RES Only, 1p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "03_Phi_e_RES_Only_1p", hPhi_e_RES_1p_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_DIS_1p_FD, norm_Angle_plots_master, true, Phi_e_DIS_1p_integral, "#phi_{e} of Outgoing Electron", "DIS Only, 1p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "04_Phi_e_DIS_Only_1p", hPhi_e_DIS_1p_FD_Dir, "FD", kBlue, true, true, true);

        histPlotter2D(c1, hPhi_e_VS_P_e_1p_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_e_VS_P_e_1p_FD_Dir, "Phi_e_VS_P_e_1p_FD");
        histPlotter2D(c1, hPhi_e_VS_W_1p_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_e_VS_W_1p_FD_Dir, "Phi_e_VS_W_1p_FD");

        // Phi_e plots (1n, FD)
        double Phi_e_All_Int_1n_integral = hPhi_e_All_Int_1n_FD->Integral();
        double Phi_e_QEL_1n_integral = hPhi_e_QEL_1n_FD->Integral();
        double Phi_e_MEC_1n_integral = hPhi_e_MEC_1n_FD->Integral();
        double Phi_e_RES_1n_integral = hPhi_e_RES_1n_FD->Integral();
        double Phi_e_DIS_1n_integral = hPhi_e_DIS_1n_FD->Integral();

        histPlotter1D(c1, hPhi_e_All_Int_1n_FD, norm_Angle_plots_master, true, Phi_e_All_Int_1n_integral, "#phi_{e} of Outgoing Electron", "All Int., 1n", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "00_phi_e_All_Int_1n", hPhi_e_All_Int_1n_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_QEL_1n_FD, norm_Angle_plots_master, true, Phi_e_QEL_1n_integral, "#phi_{e} of Outgoing Electron", "QEL Only, 1n", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "01_Phi_e_QEL_Only_1n", hPhi_e_QEL_1n_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_MEC_1n_FD, norm_Angle_plots_master, true, Phi_e_MEC_1n_integral, "#phi_{e} of Outgoing Electron", "MEC Only, 1n", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "02_Phi_e_MEC_Only_1n", hPhi_e_MEC_1n_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_RES_1n_FD, norm_Angle_plots_master, true, Phi_e_RES_1n_integral, "#phi_{e} of Outgoing Electron", "RES Only, 1n", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "03_Phi_e_RES_Only_1n", hPhi_e_RES_1n_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_DIS_1n_FD, norm_Angle_plots_master, true, Phi_e_DIS_1n_integral, "#phi_{e} of Outgoing Electron", "DIS Only, 1n", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "04_Phi_e_DIS_Only_1n", hPhi_e_DIS_1n_FD_Dir, "FD", kBlue, true, true, true);

        histPlotter2D(c1, hPhi_e_VS_P_e_1n_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_e_VS_P_e_1n_FD_Dir, "Phi_e_VS_P_e_1n_FD");
        histPlotter2D(c1, hPhi_e_VS_W_1n_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_e_VS_W_1n_FD_Dir, "Phi_e_VS_W_1n_FD");

        // Phi_e plots (2p, FD)
        double Phi_e_All_Int_2p_integral = hPhi_e_All_Int_2p_FD->Integral();
        double Phi_e_QEL_2p_integral = hPhi_e_QEL_2p_FD->Integral();
        double Phi_e_MEC_2p_integral = hPhi_e_MEC_2p_FD->Integral();
        double Phi_e_RES_2p_integral = hPhi_e_RES_2p_FD->Integral();
        double Phi_e_DIS_2p_integral = hPhi_e_DIS_2p_FD->Integral();

        histPlotter1D(c1, hPhi_e_All_Int_2p_FD, norm_Angle_plots_master, true, Phi_e_All_Int_2p_integral, "#phi_{e} of Outgoing Electron", "All Int., 2p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "00_phi_e_All_Int_2p", hPhi_e_All_Int_2p_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_QEL_2p_FD, norm_Angle_plots_master, true, Phi_e_QEL_2p_integral, "#phi_{e} of Outgoing Electron", "QEL Only, 2p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "01_Phi_e_QEL_Only_2p", hPhi_e_QEL_2p_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_MEC_2p_FD, norm_Angle_plots_master, true, Phi_e_MEC_2p_integral, "#phi_{e} of Outgoing Electron", "MEC Only, 2p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "02_Phi_e_MEC_Only_2p", hPhi_e_MEC_2p_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_RES_2p_FD, norm_Angle_plots_master, true, Phi_e_RES_2p_integral, "#phi_{e} of Outgoing Electron", "RES Only, 2p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "03_Phi_e_RES_Only_2p", hPhi_e_RES_2p_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_DIS_2p_FD, norm_Angle_plots_master, true, Phi_e_DIS_2p_integral, "#phi_{e} of Outgoing Electron", "DIS Only, 2p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "04_Phi_e_DIS_Only_2p", hPhi_e_DIS_2p_FD_Dir, "FD", kBlue, true, true, true);

        // Phi_e plots (pFDpCD, FD)
        double Phi_e_All_Int_pFDpCD_integral = hPhi_e_All_Int_pFDpCD_FD->Integral();
        double Phi_e_QEL_pFDpCD_integral = hPhi_e_QEL_pFDpCD_FD->Integral();
        double Phi_e_MEC_pFDpCD_integral = hPhi_e_MEC_pFDpCD_FD->Integral();
        double Phi_e_RES_pFDpCD_integral = hPhi_e_RES_pFDpCD_FD->Integral();
        double Phi_e_DIS_pFDpCD_integral = hPhi_e_DIS_pFDpCD_FD->Integral();

        histPlotter1D(c1, hPhi_e_All_Int_pFDpCD_FD, norm_Angle_plots_master, true, Phi_e_All_Int_pFDpCD_integral, "#phi_{e} of Outgoing Electron", "All Int., pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sPhi_e, "00_phi_e_All_Int_pFDpCD", hPhi_e_All_Int_pFDpCD_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_QEL_pFDpCD_FD, norm_Angle_plots_master, true, Phi_e_QEL_pFDpCD_integral, "#phi_{e} of Outgoing Electron", "QEL Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "01_Phi_e_QEL_Only_pFDpCD", hPhi_e_QEL_pFDpCD_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_MEC_pFDpCD_FD, norm_Angle_plots_master, true, Phi_e_MEC_pFDpCD_integral, "#phi_{e} of Outgoing Electron", "MEC Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "02_Phi_e_MEC_Only_pFDpCD", hPhi_e_MEC_pFDpCD_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_RES_pFDpCD_FD, norm_Angle_plots_master, true, Phi_e_RES_pFDpCD_integral, "#phi_{e} of Outgoing Electron", "RES Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "03_Phi_e_RES_Only_pFDpCD", hPhi_e_RES_pFDpCD_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_DIS_pFDpCD_FD, norm_Angle_plots_master, true, Phi_e_DIS_pFDpCD_integral, "#phi_{e} of Outgoing Electron", "DIS Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "04_Phi_e_DIS_Only_pFDpCD", hPhi_e_DIS_pFDpCD_FD_Dir, "FD", kBlue, true, true, true);

        histPlotter2D(c1, hPhi_e_VS_P_e_pFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_e_VS_P_e_pFDpCD_FD_Dir, "Phi_e_VS_P_e_pFDpCD_FD");
        histPlotter2D(c1, hPhi_e_VS_W_pFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_e_VS_W_pFDpCD_FD_Dir, "Phi_e_VS_W_pFDpCD_FD");

        // Phi_e plots (nFDpCD, FD)
        double Phi_e_All_Int_nFDpCD_integral = hPhi_e_All_Int_nFDpCD_FD->Integral();
        double Phi_e_QEL_nFDpCD_integral = hPhi_e_QEL_nFDpCD_FD->Integral();
        double Phi_e_MEC_nFDpCD_integral = hPhi_e_MEC_nFDpCD_FD->Integral();
        double Phi_e_RES_nFDpCD_integral = hPhi_e_RES_nFDpCD_FD->Integral();
        double Phi_e_DIS_nFDpCD_integral = hPhi_e_DIS_nFDpCD_FD->Integral();

        histPlotter1D(c1, hPhi_e_All_Int_nFDpCD_FD, norm_Angle_plots_master, true, Phi_e_All_Int_nFDpCD_integral, "#phi_{e} of Outgoing Electron", "All Int., nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sPhi_e, "00_phi_e_All_Int_nFDpCD", hPhi_e_All_Int_nFDpCD_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_QEL_nFDpCD_FD, norm_Angle_plots_master, true, Phi_e_QEL_nFDpCD_integral, "#phi_{e} of Outgoing Electron", "QEL Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "01_Phi_e_QEL_Only_nFDpCD", hPhi_e_QEL_nFDpCD_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_MEC_nFDpCD_FD, norm_Angle_plots_master, true, Phi_e_MEC_nFDpCD_integral, "#phi_{e} of Outgoing Electron", "MEC Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "02_Phi_e_MEC_Only_nFDpCD", hPhi_e_MEC_nFDpCD_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_RES_nFDpCD_FD, norm_Angle_plots_master, true, Phi_e_RES_nFDpCD_integral, "#phi_{e} of Outgoing Electron", "RES Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "03_Phi_e_RES_Only_nFDpCD", hPhi_e_RES_nFDpCD_FD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_e_DIS_nFDpCD_FD, norm_Angle_plots_master, true, Phi_e_DIS_nFDpCD_integral, "#phi_{e} of Outgoing Electron", "DIS Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_e, "04_Phi_e_DIS_Only_nFDpCD", hPhi_e_DIS_nFDpCD_FD_Dir, "FD", kBlue, true, true, true);

        histPlotter2D(c1, hPhi_e_VS_P_e_nFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_e_VS_P_e_nFDpCD_FD_Dir, "Phi_e_VS_P_e_nFDpCD_FD");
        histPlotter2D(c1, hPhi_e_VS_W_nFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_e_VS_W_nFDpCD_FD_Dir, "Phi_e_VS_W_nFDpCD_FD");

        //  Phi of protons (1e2pXy) ---------------------------------------------------------------------------------------------------------------------------------------------

        // Phi of protons (1e2pXy)
        double Phi_p1_1e2pXy_CD_integral = hPhi_p1_1e2pXy_CD->Integral(), Phi_p2_1e2pXy_CD_integral = hPhi_p2_1e2pXy_CD->Integral();

        histPlotter1D(c1, hPhi_p1_1e2pXy_CD, norm_Angle_plots_master, true, Phi_p1_1e2pXy_CD_integral, "#phi_{p_{1}} of Leading Proton", "1e2pXy", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_Proton_1e2pXy, "01_Phi_p1_All_Int_1e2pXy", hPhi_p1_1e2pXy_CD_Dir, "CD", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_p2_1e2pXy_CD, norm_Angle_plots_master, true, Phi_p2_1e2pXy_CD_integral, "#phi_{p_{2}} of Recoil Proton", "1e2pXy", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_Proton_1e2pXy, "01_Phi_p2_All_Int_1e2pXy", hPhi_p2_1e2pXy_CD_Dir, "CD", kBlue, true, true, true);

        //  Theta_e vs. Phi_e plots (FD only) -----------------------------------------------------------------------------------------------------------------------------------

        // Theta_e vs. Phi_e plots (no #(e) cut, FD)
        histPlotter2D(c1, hTheta_e_VS_Phi_e_All_e_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_e_VS_Phi_e_All_e_FD_Dir,
                      "Theta_e_VS_Phi_e_All_Int_All_e_FD");

        // Theta_e vs. Phi_e plots (1e cut, FD)
        histPlotter2D(c1, hTheta_e_VS_Phi_e_1e_cut_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_e_VS_Phi_e_1e_cut_FD_Dir,
                      "Theta_e_VS_Phi_e_All_Int_1e_cut_FD");

        // Theta_e vs. Phi_e plots (1p, FD)
        histPlotter2D(c1, hTheta_e_VS_Phi_e_1p_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_e_VS_Phi_e_1p_FD_Dir, "Theta_e_VS_Phi_e_All_Int_1p_FD");

        // Theta_e vs. Phi_e plots (1n, FD)
        histPlotter2D(c1, hTheta_e_VS_Phi_e_1n_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_e_VS_Phi_e_1n_FD_Dir, "Theta_e_VS_Phi_e_All_Int_1n_FD");

        // Theta_e vs. Phi_e plots (2p, FD)
        histPlotter2D(c1, hTheta_e_VS_Phi_e_2p_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_e_VS_Phi_e_2p_FD_Dir, "Theta_e_VS_Phi_e_All_Int_2p_FD");

        // Theta_e vs. Phi_e plots (pFDpCD, FD)
        histPlotter2D(c1, hTheta_e_VS_Phi_e_pFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_e_VS_Phi_e_pFDpCD_FD_Dir,
                      "Theta_e_VS_Phi_e_All_Int_pFDpCD_FD");

        // Theta_e vs. Phi_e plots (nFDpCD, FD)
        histPlotter2D(c1, hTheta_e_VS_Phi_e_nFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_e_VS_Phi_e_nFDpCD_FD_Dir,
                      "Theta_e_VS_Phi_e_All_Int_nFDpCD_FD");

        //  Other angle plots ---------------------------------------------------------------------------------------------------------------------------------------------------

        // Other angle plots

        // 1p plots

        //  Theta_p (1p, CD & FD) ---------------------------------------------------------------------------------------------------------------------------------------

        // Theta_p (1p, CD & FD)
        double Theta_p_1p_integral = hTheta_p_All_Int_1p->Integral();

        if (!apply_kinematical_cuts) {
            histPlotter1D(c1, hTheta_p_All_Int_1p, norm_Angle_plots_master, true, Theta_p_1p_integral, "#theta_{p} of Outgoing FD Proton", "All Int., 1p", plots, Histogram_OutPDF, 2, false,
                          true, sTheta_p_1p, "01_Theta_p_All_Int_1p", hTheta_p_All_Int_1p_Dir, "FD", kBlue, true, true, false, true, 9999, -1, 0, false);
        } else {
            histPlotter1D(c1, hTheta_p_All_Int_1p, norm_Angle_plots_master, true, Theta_p_1p_integral, "#theta_{p} of Outgoing FD Proton", "All Int., 1p", plots, Histogram_OutPDF, 2, false,
                          true, sTheta_p_1p, "01_Theta_p_All_Int_1p", hTheta_p_All_Int_1p_Dir, "FD", kBlue, true, true, false, true, FD_nucleon_theta_cut.GetUpperCut(), -1, 0, false);
        }

        histPlotter2D(c1, hTheta_p_VS_P_p_1p_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_p_VS_P_p_1p_FD_Dir, "02_Theta_p_VS_P_p_1p_FD");
        histPlotter2D(c1, hTheta_p_VS_W_1p_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_p_VS_W_1p_FD_Dir, "03_Theta_p_VS_W_1p_FD");

        //  Phi_p (1p, CD & FD) ---------------------------------------------------------------------------------------------------------------------------------------

        // Phi_p (1p, CD & FD)
        double Phi_p_1p_integral = hPhi_p_All_Int_1p->Integral();

        histPlotter1D(c1, hPhi_p_All_Int_1p, norm_Angle_plots_master, true, Phi_p_1p_integral, "#phi_{p} of Outgoing Proton", "All Int., 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF,
                      2, false, true, sPhi_p_1p, "01_Phi_p_All_Int_1p", hPhi_p_All_Int_1p_Dir, "FD", kBlue, true, true, true, false);

        //  Theta_p vs. Phi_p plots (1p, CD & FD) -------------------------------------------------------------------------------------------------------------------------------

        // Theta_p vs. Phi_p plots (1p, FD)
        histPlotter2D(c1, hTheta_p_VS_Phi_p_1p_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_p_VS_Phi_p_1p_FD_Dir, "Theta_p_VS_Phi_p_All_Int_1p_FD");

        //  Theta_p_e_p_tot (1p, CD & FD) ---------------------------------------------------------------------------------------------------------------------------------------

        // Theta_p_e_p_tot (1p, CD & FD)
        double Theta_p_e_p_p_1p_integral = hTheta_p_e_p_p_1p->Integral();

        histPlotter1D(c1, hTheta_p_e_p_p_1p, norm_Angle_plots_master, true, Theta_p_e_p_p_1p_integral, "#theta_{#vec{P}_{e},#vec{P}_{p}} - Opening Angle Between #vec{P}_{e} and #vec{P}_{p}",
                      "All Int., 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_p_e_p_p_1p, "01_Theta_p_e_p_p_All_Int_1p", hTheta_p_e_p_p_1p_Dir, "FD", kBlue,
                      true, true, true, false);

        //  Theta_q_p_p (1p, FD only) ---------------------------------------------------------------------------------------------------------------------------------------------

        // Theta_q_p_p (1p, FD only)
        double Theta_q_p_p_1p_1p_integral = hTheta_q_p_p_1p->Integral();

        histPlotter1D(c1, hTheta_q_p_p_1p, norm_Angle_plots_master, true, Theta_q_p_p_1p_1p_integral, "#theta_{#vec{q},#vec{P}_{p}} - Opening Angle Between #vec{q} and #vec{P}_{p}",
                      "All Int., 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_p_1p, "02_Theta_q_p_p_All_Int_1p", hTheta_q_p_p_1p_Dir, "FD", kBlue, true,
                      true, true, false);

        //  Theta_q_p_p vs. |P_p|/|q| (1p, FD only) -------------------------------------------------------------------------------------------------------------------------------

        // Theta_q_p_p vs. |P_p|/|q| (1p, FD only)
        histPlotter2D(c1, hTheta_q_p_p_vs_p_p_q_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_p_p_vs_p_p_q_1p_Dir, "03_Theta_q_p_p_vs_p_p_q_1p");

        //  Theta_q_p_p vs. |p_N|/|q| (1p, FD only) -------------------------------------------------------------------------------------------------------------------------------

        // Theta_q_p_p vs. |P_p|/|q| (1p, FD only)
        histPlotter2D(c1, hTheta_q_p_p_vs_p_N_q_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_p_p_vs_p_N_q_1p_Dir, "04_Theta_q_p_N_vs_p_p_q_1p");

        // 1n plots

        //  Theta_n (1n, CD & FD) ---------------------------------------------------------------------------------------------------------------------------------------

        // Theta_n (1n, CD & FD)
        double Theta_n_1n_integral = hTheta_n_All_Int_1n->Integral();

        if (!apply_kinematical_cuts) {
            histPlotter1D(c1, hTheta_n_All_Int_1n, norm_Angle_plots_master, true, Theta_n_1n_integral, "#theta_{n} of Outgoing FD Neutron", "All Int., 1n", plots, Histogram_OutPDF, 2, false,
                          true, sTheta_n_1n, "01_Theta_n_All_Int_1n", hTheta_n_All_Int_1n_Dir, "FD", kBlue, true, true, false, true, 9999, -1, 0, false);
        } else {
            histPlotter1D(c1, hTheta_n_All_Int_1n, norm_Angle_plots_master, true, Theta_n_1n_integral, "#theta_{n} of Outgoing FD Neutron", "All Int., 1n", plots, Histogram_OutPDF, 2, false,
                          true, sTheta_n_1n, "01_Theta_n_All_Int_1n", hTheta_n_All_Int_1n_Dir, "FD", kBlue, true, true, false, true, FD_nucleon_theta_cut.GetUpperCut(), -1, 0, false);
        }

        histPlotter2D(c1, hTheta_n_VS_P_n_1n_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_n_VS_P_n_1n_FD_Dir, "02_Theta_n_VS_P_n_1n_FD");
        histPlotter2D(c1, hTheta_n_VS_W_1n_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_n_VS_W_1n_FD_Dir, "03_Theta_n_VS_W_1n_FD");

        //  Phi_n (1n, CD & FD) -------------------------------------------------------------------------------------------------------------------------------------------------

        // Phi_n (1n, CD & FD)
        double Phi_n_1n_integral = hPhi_n_All_Int_1n->Integral();

        histPlotter1D(c1, hPhi_n_All_Int_1n, norm_Angle_plots_master, true, Phi_n_1n_integral, "#phi_{n} of Outgoing Neutron", "All Int., 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF,
                      2, false, true, sPhi_n_1n, "01_Phi_n_All_Int_1n", hPhi_n_All_Int_1n_Dir, "FD", kBlue, true, true, true, false);

        //  Theta_n vs. Phi_n plots (1n, CD & FD) -------------------------------------------------------------------------------------------------------------------------------

        // Theta_n vs. Phi_n plots (1n, FD)
        histPlotter2D(c1, hTheta_n_VS_Phi_n_1n_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_n_VS_Phi_n_1n_FD_Dir, "Theta_n_VS_Phi_n_All_Int_1n_FD");

        //  Theta_p_e_p_tot (1n, CD & FD) ---------------------------------------------------------------------------------------------------------------------------------------

        // Theta_p_e_p_tot (1n, CD & FD)
        double Theta_p_e_p_n_1n_integral = hTheta_p_e_p_n_1n->Integral();

        histPlotter1D(c1, hTheta_p_e_p_n_1n, norm_Angle_plots_master, true, Theta_p_e_p_n_1n_integral, "#theta_{#vec{P}_{e},#vec{P}_{n}} - Opening Angle Between #vec{P}_{e} and #vec{P}_{n}",
                      "All Int., 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_p_e_p_n_1n, "01_Theta_p_e_p_n_All_Int_1n", hTheta_p_e_p_n_1n_Dir, "FD", kBlue,
                      true, true, true, false);

        //  Theta_q_p_n (1n, FD only) -------------------------------------------------------------------------------------------------------------------------------------------

        // Theta_q_p_n (1n, FD only)
        double Theta_q_p_n_1n_1n_integral = hTheta_q_p_n_1n->Integral();

        histPlotter1D(c1, hTheta_q_p_n_1n, norm_Angle_plots_master, true, Theta_q_p_n_1n_1n_integral, "#theta_{#vec{q},#vec{P}_{n}} - Opening Angle Between #vec{q} and #vec{P}_{n}",
                      "All Int., 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_n_1n, "02_Theta_q_p_n_All_Int_1n", hTheta_q_p_n_1n_Dir, "FD", kBlue, true,
                      true, true, false);

        //  Theta_q_p_n vs. |p_n|/|q| (1n, FD only) -----------------------------------------------------------------------------------------------------------------------------

        // Theta_q_p_n vs. |p_n|/|q| (1n, FD only)
        histPlotter2D(c1, hTheta_q_p_n_vs_p_n_q_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_p_n_vs_p_n_q_1n_Dir, "03_Theta_q_p_n_vs_p_n_q_1n");

        //  Theta_q_p_n vs. |p_N|/|q| (1n, FD only) -----------------------------------------------------------------------------------------------------------------------------

        // Theta_q_p_n vs. |p_N|/|q| (1n, FD only)
        histPlotter2D(c1, hTheta_q_p_n_vs_p_N_q_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_p_n_vs_p_N_q_1n_Dir, "04_Theta_q_p_n_vs_p_N_q_1n");

        // 2p plots

        // Theta_p_e_p_tot (2p, CD & FD) ----------------------------------------------------------------------------------------------------------------------------------------

        // Theta_p_e_p_tot (2p, CD & FD)
        double Theta_p_e_p_tot_2p_integral = hTheta_p_e_p_tot_2p->Integral();

        histPlotter1D(c1, hTheta_p_e_p_tot_2p, norm_Angle_plots_master, true, Theta_p_e_p_tot_2p_integral,
                      "#theta_{#vec{P}_{e},#vec{P}_{tot}} - Opening Angle Between #vec{P}_{e} and #vec{P}_{tot}=#vec{P}_{1}+#vec{P}_{2}", "All Int., 2p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_p_e_p_tot_2p, "01_Theta_p_e_p_tot_All_Int_2p", hTheta_p_e_p_tot_2p_Dir, "", kBlue, true, true, true, false);

        // Theta_q_p (2p, CD & FD) ----------------------------------------------------------------------------------------------------------------------------------------------

        // Theta_q_p_tot (2p, CD & FD)
        double Theta_q_p_tot_2p_integral = hTheta_q_p_tot_2p->Integral();

        histPlotter1D(c1, hTheta_q_p_tot_2p, norm_Angle_plots_master, true, Theta_q_p_tot_2p_integral,
                      "#theta_{#vec{q},#vec{P}_{tot}} - Opening Angle Between #vec{q} and #vec{P}_{tot}=#vec{P}_{1}+#vec{P}_{2}", "All Int., 2p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_q_p_2p, "02_Theta_q_p_tot_All_Int_2p", hTheta_q_p_tot_2p_Dir, "", kBlue, true, true, true, false);

        // Theta_q_p_L and Theta_q_p_R (2p, CD & FD)
        double Theta_q_p_L_2p_integral = hTheta_q_p_L_2p->Integral(), Theta_q_p_R_2p_integral = hTheta_q_p_R_2p->Integral();

        histPlotter1D(c1, hTheta_q_p_L_2p, norm_Angle_plots_master, true, Theta_q_p_L_2p_integral,
                      "#theta_{#vec{q},#vec{P}_{1}} - Opening Angle Between #vec{q} and leading proton #vec{P}_{1}", "All Int., 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sTheta_q_p_2p, "03_Theta_q_p_1_All_Int_2p", hTheta_q_p_L_2p_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hTheta_q_p_R_2p, norm_Angle_plots_master, true, Theta_q_p_R_2p_integral,
                      "#theta_{#vec{q},#vec{P}_{2}} - Opening Angle Between #vec{q} and recoil proton #vec{P}_{2}", "All Int., 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sTheta_q_p_2p, "03_Theta_q_p_2_All_Int_2p", hTheta_q_p_R_2p_Dir, "", kBlue, true, true, true, false);

        // Theta_q_p_L vs |P_L|/|q| (2p, CD & FD) -------------------------------------------------------------------------------------------------------------------------------

        // hTheta_p1_p2_vs_W_2p (2p, CD & FD)
        histPlotter2D(c1, hTheta_q_p_L_vs_p_L_q_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hTheta_q_p_L_vs_p_L_q_2p_Dir, "04_Theta_q_p_L_vs_p_L_q_2p");

        // Theta_p1_p2 (2p, CD & FD) --------------------------------------------------------------------------------------------------------------------------------------------

        // Theta_p1_p2 (2p, CD & FD)
        double Theta_p1_p2_integral = hTheta_p1_p2_All_Int_2p->Integral();

        histPlotter1D(c1, hTheta_p1_p2_All_Int_2p, norm_Angle_plots_master, true, Theta_p1_p2_integral, "#theta_{p_{1},p_{2}} - Opening Angle Between Protons", "All Int., 2p", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_p1_p2_2p, "00_Theta_p1_p2_All_Int_2p", hTheta_p1_p2_All_Int_2p_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hTheta_p1_p2_QEL_2p, norm_Angle_plots_master, true, Theta_p1_p2_integral, "#theta_{p_{1},p_{2}} - Opening Angle Between Protons", "QEL only, 2p", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_p1_p2_2p, "01_Theta_p1_p2_QEL_only_2p", hTheta_p1_p2_QEL_2p_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hTheta_p1_p2_MEC_2p, norm_Angle_plots_master, true, Theta_p1_p2_integral, "#theta_{p_{1},p_{2}} - Opening Angle Between Protons", "MEC only, 2p", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_p1_p2_2p, "02_Theta_p1_p2_MEC_only_2p", hTheta_p1_p2_MEC_2p_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hTheta_p1_p2_RES_2p, norm_Angle_plots_master, true, Theta_p1_p2_integral, "#theta_{p_{1},p_{2}} - Opening Angle Between Protons", "RES only, 2p", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_p1_p2_2p, "03_Theta_p1_p2_RES_only_2p", hTheta_p1_p2_RES_2p_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hTheta_p1_p2_DIS_2p, norm_Angle_plots_master, true, Theta_p1_p2_integral, "#theta_{p_{1},p_{2}} - Opening Angle Between Protons", "DIS only, 2p", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_p1_p2_2p, "04_Theta_p1_p2_DIS_only_2p", hTheta_p1_p2_DIS_2p_Dir, "", kBlue, true, true, true, false);

        stackPlotter1D(c1, sTheta_p1_p2_2p, norm_E_e_plots, "#theta_{p_{1},p_{2}} - Opening Angle Between Protons", "2p", plots, Histogram_OutPDF, hTheta_p1_p2_All_Int_2p,
                       hTheta_p1_p2_QEL_2p, hTheta_p1_p2_MEC_2p, hTheta_p1_p2_RES_2p, hTheta_p1_p2_DIS_2p, "05_Theta_p1_p2_Stack", sTheta_p1_p2_2p_Dir, "");

        // hTheta_p1_p2_vs_W_2p (2p, CD & FD) -----------------------------------------------------------------------------------------------------------------------------------

        // hTheta_p1_p2_vs_W_2p (2p, CD & FD)
        histPlotter2D(c1, hTheta_p1_p2_vs_W_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hTheta_p1_p2_vs_W_2p_Dir, "06_Theta_p1_p2_vs_W_2p");

        // Theta_p1_vs_Theta_p2 for Theta_p1_p2 < 20 (2p, CD & FD) --------------------------------------------------------------------------------------------------------------

        // Theta_p1_vs_Theta_p2 for Theta_p1_p2 < 20 (2p, CD & FD)
        histPlotter2D(c1, hTheta_p1_vs_theta_p2_for_Theta_p1_p2_20_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_p1_vs_theta_p2_for_Theta_p1_p2_20_2p_Dir,
                      "01a_Theta_p1_vs_theta_p2_for_Theta_p1_p2_20_2p");

        // Theta_p1_vs_Theta_p2 for Theta_p1_p2 monitoring plots
        if (apply_nucleon_cuts && GoodProtonsMonitorPlots) {
            histPlotter2D(c1, pid.hTheta_pi_vs_theta_pj_for_Theta_pi_pj_20_BC_2idp_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false,
                          pid.hTheta_pi_vs_theta_pj_for_Theta_pi_pj_20_BC_2idp_2p_Dir, "01a_hTheta_pi_vs_theta_pj_for_Theta_pi_pj_20_BC_2idp_2p");
            histPlotter2D(c1, pid.hTheta_pi_vs_theta_pj_for_Theta_pi_pj_20_RE_2idp_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false,
                          pid.hTheta_pi_vs_theta_pj_for_Theta_pi_pj_20_RE_2idp_2p_Dir, "01b_hTheta_pi_vs_theta_pj_for_Theta_pi_pj_20_RE_2idp_2p");
            histPlotter2D(c1, pid.hTheta_pi_vs_theta_pj_for_Theta_pi_pj_20_BC_3idp_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false,
                          pid.hTheta_pi_vs_theta_pj_for_Theta_pi_pj_20_BC_3idp_2p_Dir, "02a_hTheta_pi_vs_theta_pj_for_Theta_pi_pj_20_BC_3idp_2p");
            histPlotter2D(c1, pid.hTheta_pi_vs_theta_pj_for_Theta_pi_pj_20_AE_3idp_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false,
                          pid.hTheta_pi_vs_theta_pj_for_Theta_pi_pj_20_AE_3idp_2p_Dir, "02b_hTheta_pi_vs_theta_pj_for_Theta_pi_pj_20_AE_3idp_2p");
            histPlotter2D(c1, pid.hTheta_pi_vs_theta_pj_for_Theta_pi_pj_20_BC_4idp_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false,
                          pid.hTheta_pi_vs_theta_pj_for_Theta_pi_pj_20_BC_4idp_2p_Dir, "03a_hTheta_pi_vs_theta_pj_for_Theta_pi_pj_20_BC_4idp_2p");
            histPlotter2D(c1, pid.hTheta_pi_vs_theta_pj_for_Theta_pi_pj_20_AE_4idp_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false,
                          pid.hTheta_pi_vs_theta_pj_for_Theta_pi_pj_20_AE_4idp_2p_Dir, "03b_hTheta_pi_vs_theta_pj_for_Theta_pi_pj_20_AE_4idp_2p");
        }

        // Theta_pFD_vs_Theta_pCD for Theta_pFD_pCD < 20 (2p, CD & FD) ----------------------------------------------------------------------------------------------------------

        // Theta_pFD_vs_Theta_pCD for Theta_pFD_pCD < 20 (2p, CD & FD)
        histPlotter2D(c1, hTheta_pFD_vs_Theta_pCD_for_Theta_pFD_pCD_20_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false,
                      hTheta_pFD_vs_Theta_pCD_for_Theta_pFD_pCD_20_2p_Dir, "04a_Theta_pFD_vs_Theta_pCD_for_Theta_pFD_pCD_20_2p_20_2p");

        // dphi_nFD_pCD for Theta_p1_p2 < 20 (2p, CD & FD) --------------------------------------------------------------------------------------------------------------

        // dphi_nFD_pCD for Theta_p1_p2 < 20 (2p, CD & FD)
        double hdPhi_p1_p2_for_Theta_p1_p2_20_2p_integral = hdPhi_p1_p2_for_Theta_p1_p2_20_2p->Integral();
        double hdPhi_p1_p2_for_Theta_p1_p2_20_ZOOMIN_2p_integral = hdPhi_p1_p2_for_Theta_p1_p2_20_ZOOMIN_2p->Integral();

        histPlotter1D(c1, hdPhi_p1_p2_for_Theta_p1_p2_20_2p, norm_Angle_plots_master, true, hdPhi_p1_p2_for_Theta_p1_p2_20_2p_integral, "#Delta#phi for #theta_{p_{1},p_{2}}<20#circ",
                      "All Int., 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_2p, "02a_dphi_p1_p2_for_Theta_p1_p2_20_All_Int_2p",
                      hdPhi_p1_p2_for_Theta_p1_p2_20_2p_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hdPhi_p1_p2_for_Theta_p1_p2_20_ZOOMIN_2p, norm_Angle_plots_master, true, hdPhi_p1_p2_for_Theta_p1_p2_20_ZOOMIN_2p_integral,
                      "#Delta#phi for #theta_{p_{1},p_{2}}<20#circ - ZOOMIN", "All Int., 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_2p,
                      "02c_dphi_p1_p2_for_Theta_p1_p2_20_ZOOMIN_All_Int_2p", hdPhi_p1_p2_for_Theta_p1_p2_20_ZOOMIN_2p_Dir, "", kBlue, true, true, true, false);

        // dphi_nFD_pCD for Theta_pFD_pCD < 20 (2p, CD & FD) --------------------------------------------------------------------------------------------------------------

        // dphi_nFD_pCD for Theta_pFD_pCD < 20 (2p, CD & FD)
        double hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_2p_integral = hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_2p->Integral();
        double hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_ZOOMIN_2p_integral = hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_ZOOMIN_2p->Integral();

        histPlotter1D(c1, hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_2p, norm_Angle_plots_master, true, hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_2p_integral, "#Delta#phi for #theta_{pFD,pCD}<20#circ",
                      "All Int., 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_2p, "05a_dPhi_pFD_pCD_for_Theta_pFD_pCD_20_All_Int_2p",
                      hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_2p_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_ZOOMIN_2p, norm_Angle_plots_master, true, hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_ZOOMIN_2p_integral,
                      "#Delta#phi for #theta_{pFD,pCD}<20#circ - ZOOMIN", "All Int., 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_2p,
                      "05b_dPhi_pFD_pCD_for_Theta_pFD_pCD_20_ZOOMIN_All_Int_2p", hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_ZOOMIN_2p_Dir, "", kBlue, true, true, true, false);

        // Theta_p1_vs_Theta_p2 for every Theta_p1_p2 (2p, CD & FD) -------------------------------------------------------------------------------------------------------------

        // Theta_p1_vs_Theta_p2 for every Theta_p1_p2 (2p, CD & FD)
        histPlotter2D(c1, hTheta_p1_vs_theta_p2_forall_Theta_p1_p2_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_p1_vs_theta_p2_forall_Theta_p1_p2_2p_Dir,
                      "01b_Theta_p1_vs_theta_p2_for_every_Theta_p1_p2_2p");

        // Theta_p1_vs_Theta_p2 for every Theta_p1_p2 monitoring plots
        if (apply_nucleon_cuts && GoodProtonsMonitorPlots) {
            histPlotter2D(c1, pid.hTheta_pi_vs_theta_pj_forall_Theta_pi_pj_BC_2idp_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false,
                          pid.hTheta_pi_vs_theta_pj_forall_Theta_pi_pj_BC_2idp_2p_Dir, "04a_hTheta_pi_vs_theta_pj_forall_Theta_pi_pj_BC_2idp_2p");
            histPlotter2D(c1, pid.hTheta_pi_vs_theta_pj_forall_Theta_pi_pj_RE_2idp_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false,
                          pid.hTheta_pi_vs_theta_pj_forall_Theta_pi_pj_RE_2idp_2p_Dir, "04b_hTheta_pi_vs_theta_pj_forall_Theta_pi_pj_RE_2idp_2p");
            histPlotter2D(c1, pid.hTheta_pi_vs_theta_pj_forall_Theta_pi_pj_BC_3idp_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false,
                          pid.hTheta_pi_vs_theta_pj_forall_Theta_pi_pj_BC_3idp_2p_Dir, "05a_hTheta_pi_vs_theta_pj_forall_Theta_pi_pj_BC_3idp_2p");
            histPlotter2D(c1, pid.hTheta_pi_vs_theta_pj_forall_Theta_pi_pj_AE_3idp_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false,
                          pid.hTheta_pi_vs_theta_pj_forall_Theta_pi_pj_AE_3idp_2p_Dir, "05b_hTheta_pi_vs_theta_pj_forall_Theta_pi_pj_AE_3idp_2p");
            histPlotter2D(c1, pid.hTheta_pi_vs_theta_pj_forall_Theta_pi_pj_BC_4idp_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false,
                          pid.hTheta_pi_vs_theta_pj_forall_Theta_pi_pj_BC_4idp_2p_Dir, "06a_hTheta_pi_vs_theta_pj_forall_Theta_pi_pj_BC_4idp_2p");
            histPlotter2D(c1, pid.hTheta_pi_vs_theta_pj_forall_Theta_pi_pj_AE_4idp_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false,
                          pid.hTheta_pi_vs_theta_pj_forall_Theta_pi_pj_AE_4idp_2p_Dir, "06b_hTheta_pi_vs_theta_pj_forall_Theta_pi_pj_AE_4idp_2p");
        }

        // Theta_pFD_vs_Theta_pCD for every Theta_pFD_pCD (2p, CD & FD) ---------------------------------------------------------------------------------------------------------

        // Theta_pFD_vs_Theta_pCD for every Theta_pFD_pCD (2p, CD & FD)
        histPlotter2D(c1, hTheta_pFD_vs_Theta_pCD_forall_Theta_pFD_pCD_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false,
                      hTheta_pFD_vs_Theta_pCD_forall_Theta_pFD_pCD_2p_Dir, "04b_Theta_pFD_vs_Theta_pCD_forall_Theta_pFD_pCD_2p_2p");

        // dPhi_p1_p2 for every Theta_p1_p2 (2p, CD & FD) --------------------------------------------------------------------------------------------------------------

        // dPhi_p1_p2 for every Theta_p1_p2 (CD & FD)
        double hdPhi_p1_p2_for_all_Theta_p1_p2_2p_integral = hdPhi_p1_p2_for_all_Theta_p1_p2_2p->Integral();

        histPlotter1D(c1, hdPhi_p1_p2_for_all_Theta_p1_p2_2p, norm_Angle_plots_master, true, hdPhi_p1_p2_for_all_Theta_p1_p2_2p_integral, "#Delta#phi for every #theta_{p_{1},p_{2}}",
                      "All Int., 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_2p, "02b_dphi_p1_p2_for_every_Theta_p1_p2_All_Int_2p",
                      hdPhi_p1_p2_for_Theta_p1_p2_20_2p_Dir, "", kBlue, true, true, true, false);

        double hdPhi_p1_p2_for_all_Theta_p1_p2_ZOOMIN_2p_integral = hdPhi_p1_p2_for_all_Theta_p1_p2_ZOOMIN_2p->Integral();

        histPlotter1D(c1, hdPhi_p1_p2_for_all_Theta_p1_p2_ZOOMIN_2p, norm_Angle_plots_master, true, hdPhi_p1_p2_for_all_Theta_p1_p2_ZOOMIN_2p_integral,
                      "#Delta#phi for every #theta_{p_{1},p_{2}} - ZOOMIN", "All Int., 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_2p,
                      "02c_dphi_p1_p2_for_every_Theta_p1_p2_All_Int_ZOOMIN_2p", hdPhi_p1_p2_for_all_Theta_p1_p2_ZOOMIN_2p_Dir, "", kBlue, true, true, true, false);

        double hdPhi_p1_p2_for_small_dTheta_2p_integral = hdPhi_p1_p2_for_small_dTheta_2p->Integral();

        histPlotter1D(c1, hdPhi_p1_p2_for_small_dTheta_2p, norm_Angle_plots_master, true, hdPhi_p1_p2_for_small_dTheta_2p_integral,
                      "#Delta#phi for small #Delta#theta_{1/2} = #theta_{1/2}-40#circ", "All Int., 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_2p,
                      "03a_dPhi_p1_p2_for_small_dTheta_2p", hdPhi_p1_p2_for_small_dTheta_2p_Dir, "", kBlue, true, true, true, false);

        double hdPhi_p1_p2_for_small_dTheta_ZOOMIN_2p_integral = hdPhi_p1_p2_for_small_dTheta_ZOOMIN_2p->Integral();

        histPlotter1D(c1, hdPhi_p1_p2_for_small_dTheta_ZOOMIN_2p, norm_Angle_plots_master, true, hdPhi_p1_p2_for_small_dTheta_ZOOMIN_2p_integral,
                      "#Delta#phi for small #Delta#theta_{1/2} = #theta_{1/2}-40#circ - ZOOMIN", "All Int., 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_2p,
                      "03b_dPhi_p1_p2_for_small_dTheta_ZOOMIN_2p", hdPhi_p1_p2_for_small_dTheta_ZOOMIN_2p_Dir, "", kBlue, true, true, true, false);

        //        dphi_p1_p2_2p.SetMean(hdPhi_p1_p2_for_small_dTheta_2p->GetBinCenter(hdPhi_p1_p2_for_small_dTheta_2p->GetMaximumBin()));
        dphi_p1_p2_2p.SetMean(hdPhi_p1_p2_for_small_dTheta_ZOOMIN_2p->GetBinCenter(hdPhi_p1_p2_for_small_dTheta_ZOOMIN_2p->GetMaximumBin()));

        // dPhi_pFD_pCD for every Theta_pFD_pCD (2p, CD & FD) --------------------------------------------------------------------------------------------------------------

        // dPhi_pFD_pCD for every Theta_pFD_pCD (CD & FD)
        double hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_2p_integral = hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_2p->Integral();

        histPlotter1D(c1, hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_2p, norm_Angle_plots_master, true, hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_2p_integral, "#Delta#phi for every #theta_{pFD,pCD}",
                      "All Int., 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_2p, "06a_dPhi_pFD_pCD_for_every_Theta_pFD_pCD_All_Int_2p",
                      hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_2p_Dir, "", kBlue, true, true, true, false);

        double hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_ZOOMIN_2p_integral = hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_ZOOMIN_2p->Integral();

        histPlotter1D(c1, hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_ZOOMIN_2p, norm_Angle_plots_master, true, hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_ZOOMIN_2p_integral,
                      "#Delta#phi for every #theta_{pFD,pCD} - ZOOMIN", "All Int., 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_2p,
                      "06b_dPhi_pFD_pCD_for_every_Theta_pFD_pCD_All_Int_ZOOMIN_2p", hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_ZOOMIN_2p_Dir, "", kBlue, true, true, true, false);

        double hdPhi_pFD_pCD_for_small_dTheta_2p_integral = hdPhi_pFD_pCD_for_small_dTheta_2p->Integral();

        histPlotter1D(c1, hdPhi_pFD_pCD_for_small_dTheta_2p, norm_Angle_plots_master, true, hdPhi_pFD_pCD_for_small_dTheta_2p_integral,
                      "#Delta#phi for small #Delta#theta_{pFD/pCD} = |#theta_{pFD/pCD}-40#circ|", "All Int., 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sTheta_q_p_2p, "07a_dPhi_pFD_pCD_for_small_dTheta_2p", hdPhi_pFD_pCD_for_small_dTheta_2p_Dir, "", kBlue, true, true, true, false);

        double hdPhi_pFD_pCD_for_small_dTheta_ZOOMIN_2p_integral = hdPhi_pFD_pCD_for_small_dTheta_ZOOMIN_2p->Integral();

        histPlotter1D(c1, hdPhi_pFD_pCD_for_small_dTheta_ZOOMIN_2p, norm_Angle_plots_master, true, hdPhi_pFD_pCD_for_small_dTheta_ZOOMIN_2p_integral,
                      "#Delta#phi for small #Delta#theta_{pFD/pCD} = |#theta_{pFD/pCD}-40#circ| - ZOOMIN", "All Int., 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sTheta_q_p_2p, "07b_dPhi_pFD_pCD_for_small_dTheta_ZOOMIN_2p", hdPhi_pFD_pCD_for_small_dTheta_ZOOMIN_2p_Dir, "", kBlue, true, true, true, false);

        //        dphi_pFD_pCD_2p.SetMean(hdPhi_pFD_pCD_for_small_dTheta_2p->GetBinCenter(hdPhi_pFD_pCD_for_small_dTheta_2p->GetMaximumBin()));
        dphi_pFD_pCD_2p.SetMean(hdPhi_pFD_pCD_for_small_dTheta_ZOOMIN_2p->GetBinCenter(hdPhi_pFD_pCD_for_small_dTheta_ZOOMIN_2p->GetMaximumBin()));

        //  Ghost tracks handling (2p, CD only) ---------------------------------------------------------------------------------------------------------------------------------

        // Theta_p1_p2 vs. TOF1-TOF2 plots (2p, CD)
        pid.hdTheta_pi_pj_VS_ToFi_ToFj_BC_2idp_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        pid.hdTheta_pi_pj_VS_ToFi_ToFj_RE_2idp_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        pid.hdTheta_pi_pj_VS_ToFi_ToFj_BC_3idp_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        pid.hdTheta_pi_pj_VS_ToFi_ToFj_AE_3idp_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        pid.hdTheta_pi_pj_VS_ToFi_ToFj_BC_4idp_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        pid.hdTheta_pi_pj_VS_ToFi_ToFj_AE_4idp_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTheta_p1_p2_VS_ToF1_ToF2_AC_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        // Theta_p1_p2 vs. position1-position2 plots (2p, CD)
        pid.hTheta_pi_pj_VS_Posi_Posj_BC_2idp_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        pid.hTheta_pi_pj_VS_Posi_Posj_RE_2idp_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        pid.hTheta_pi_pj_VS_Posi_Posj_BC_3idp_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        pid.hTheta_pi_pj_VS_Posi_Posj_AE_3idp_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        pid.hTheta_pi_pj_VS_Posi_Posj_BC_4idp_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        pid.hTheta_pi_pj_VS_Posi_Posj_AE_4idp_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTheta_p1_p2_VS_Pos1_Pos2_AC_2p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        // pFDpCD plots

        //  Theta_pFD plots (pFDpCD, CD & FD)
        //  -------------------------------------------------------------------------------------------------------------------------------------------

        // Theta_pFD plots (pFDpCD, FD)
        double Theta_pFD_All_Int_pFDpCD_integral = hTheta_pFD_All_Int_pFDpCD_FD->Integral();
        double Theta_pFD_QEL_pFDpCD_integral = hTheta_pFD_QEL_pFDpCD_FD->Integral();
        double Theta_pFD_MEC_pFDpCD_integral = hTheta_pFD_MEC_pFDpCD_FD->Integral();
        double Theta_pFD_RES_pFDpCD_integral = hTheta_pFD_RES_pFDpCD_FD->Integral();
        double Theta_pFD_DIS_pFDpCD_integral = hTheta_pFD_DIS_pFDpCD_FD->Integral();

        if (apply_kinematical_cuts) {
            histPlotter1D(c1, hTheta_pFD_All_Int_pFDpCD_FD, norm_Angle_plots_master, true, Theta_pFD_All_Int_pFDpCD_integral, "#theta_{pFD} of FD proton", "All Int., pFDpCD", 0.06, 0.0425,
                          0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_pFD_pFDpCD_FD, "00_Theta_pFD_All_Int_pFDpCD", hTheta_pFD_All_Int_pFDpCD_FD_Dir, "", kBlue, true, true, true,
                          false, true, (FD_nucleon_theta_cut.GetUpperCut() - 5) / 2, (FD_nucleon_theta_cut.GetUpperCut() + 5) / 2, false);
            histPlotter1D(c1, hTheta_pFD_QEL_pFDpCD_FD, norm_Angle_plots_master, true, Theta_pFD_QEL_pFDpCD_integral, "#theta_{pFD} of FD proton", "QEL Only, pFDpCD", 0.06, 0.0425, 0.0425,
                          plots, Histogram_OutPDF, 2, false, true, sTheta_pFD_pFDpCD_FD, "01_Theta_pFD_QEL_Only_pFDpCD", hTheta_pFD_QEL_pFDpCD_FD_Dir, "", kBlue, true, true, true, false,
                          true, (FD_nucleon_theta_cut.GetUpperCut() - 5) / 2, (FD_nucleon_theta_cut.GetUpperCut() + 5) / 2, false);
            histPlotter1D(c1, hTheta_pFD_MEC_pFDpCD_FD, norm_Angle_plots_master, true, Theta_pFD_MEC_pFDpCD_integral, "#theta_{pFD} of FD proton", "MEC Only, pFDpCD", 0.06, 0.0425, 0.0425,
                          plots, Histogram_OutPDF, 2, false, true, sTheta_pFD_pFDpCD_FD, "02_Theta_pFD_MEC_Only_pFDpCD", hTheta_pFD_MEC_pFDpCD_FD_Dir, "", kBlue, true, true, true, false,
                          true, (FD_nucleon_theta_cut.GetUpperCut() - 5) / 2, (FD_nucleon_theta_cut.GetUpperCut() + 5) / 2, false);
            histPlotter1D(c1, hTheta_pFD_RES_pFDpCD_FD, norm_Angle_plots_master, true, Theta_pFD_RES_pFDpCD_integral, "#theta_{pFD} of FD proton", "RES Only, pFDpCD", 0.06, 0.0425, 0.0425,
                          plots, Histogram_OutPDF, 2, false, true, sTheta_pFD_pFDpCD_FD, "03_Theta_pFD_RES_Only_pFDpCD", hTheta_pFD_RES_pFDpCD_FD_Dir, "", kBlue, true, true, true, false,
                          true, (FD_nucleon_theta_cut.GetUpperCut() - 5) / 2, (FD_nucleon_theta_cut.GetUpperCut() + 5) / 2, false);
            histPlotter1D(c1, hTheta_pFD_DIS_pFDpCD_FD, norm_Angle_plots_master, true, Theta_pFD_DIS_pFDpCD_integral, "#theta_{pFD} of FD proton", "DIS Only, pFDpCD", 0.06, 0.0425, 0.0425,
                          plots, Histogram_OutPDF, 2, false, true, sTheta_pFD_pFDpCD_FD, "04_Theta_pFD_DIS_Only_pFDpCD", hTheta_pFD_DIS_pFDpCD_FD_Dir, "", kBlue, true, true, true, false,
                          true, (FD_nucleon_theta_cut.GetUpperCut() - 5) / 2, (FD_nucleon_theta_cut.GetUpperCut() + 5) / 2, false);
        } else {
            histPlotter1D(c1, hTheta_pFD_All_Int_pFDpCD_FD, norm_Angle_plots_master, true, Theta_pFD_All_Int_pFDpCD_integral, "#theta_{pFD} of FD proton", "All Int., pFDpCD", 0.06, 0.0425,
                          0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_pFD_pFDpCD_FD, "00_Theta_pFD_All_Int_pFDpCD", hTheta_pFD_All_Int_pFDpCD_FD_Dir, "", kBlue, true, true, true,
                          false, true, 17.5, 22.5, false);
            histPlotter1D(c1, hTheta_pFD_QEL_pFDpCD_FD, norm_Angle_plots_master, true, Theta_pFD_QEL_pFDpCD_integral, "#theta_{pFD} of FD proton", "QEL Only, pFDpCD", 0.06, 0.0425, 0.0425,
                          plots, Histogram_OutPDF, 2, false, true, sTheta_pFD_pFDpCD_FD, "01_Theta_pFD_QEL_Only_pFDpCD", hTheta_pFD_QEL_pFDpCD_FD_Dir, "", kBlue, true, true, true, false,
                          true, 17.5, 22.5, false);
            histPlotter1D(c1, hTheta_pFD_MEC_pFDpCD_FD, norm_Angle_plots_master, true, Theta_pFD_MEC_pFDpCD_integral, "#theta_{pFD} of FD proton", "MEC Only, pFDpCD", 0.06, 0.0425, 0.0425,
                          plots, Histogram_OutPDF, 2, false, true, sTheta_pFD_pFDpCD_FD, "02_Theta_pFD_MEC_Only_pFDpCD", hTheta_pFD_MEC_pFDpCD_FD_Dir, "", kBlue, true, true, true, false,
                          true, 17.5, 22.5, false);
            histPlotter1D(c1, hTheta_pFD_RES_pFDpCD_FD, norm_Angle_plots_master, true, Theta_pFD_RES_pFDpCD_integral, "#theta_{pFD} of FD proton", "RES Only, pFDpCD", 0.06, 0.0425, 0.0425,
                          plots, Histogram_OutPDF, 2, false, true, sTheta_pFD_pFDpCD_FD, "03_Theta_pFD_RES_Only_pFDpCD", hTheta_pFD_RES_pFDpCD_FD_Dir, "", kBlue, true, true, true, false,
                          true, 17.5, 22.5, false);
            histPlotter1D(c1, hTheta_pFD_DIS_pFDpCD_FD, norm_Angle_plots_master, true, Theta_pFD_DIS_pFDpCD_integral, "#theta_{pFD} of FD proton", "DIS Only, pFDpCD", 0.06, 0.0425, 0.0425,
                          plots, Histogram_OutPDF, 2, false, true, sTheta_pFD_pFDpCD_FD, "04_Theta_pFD_DIS_Only_pFDpCD", hTheta_pFD_DIS_pFDpCD_FD_Dir, "", kBlue, true, true, true, false,
                          true, 17.5, 22.5, false);
        }

        stackPlotter1D(c1, sTheta_pFD_pFDpCD_FD, norm_Angle_plots_master, "#theta_{pFD} of FD proton", "pFDpCD", plots, Histogram_OutPDF, hTheta_pFD_All_Int_pFDpCD_FD,
                       hTheta_pFD_QEL_pFDpCD_FD, hTheta_pFD_MEC_pFDpCD_FD, hTheta_pFD_RES_pFDpCD_FD, hTheta_pFD_DIS_pFDpCD_FD, "05_Theta_pFD_Stack_pFDpCD", hTheta_pFD_All_Int_pFDpCD_FD_Dir,
                       "");

        histPlotter2D(c1, hTheta_pFD_VS_P_pFD_pFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_pFD_VS_P_pFD_pFDpCD_FD_Dir,
                      "Theta_pFD_VS_P_pFD_pFDpCD_FD");
        histPlotter2D(c1, hTheta_pFD_VS_W_pFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_pFD_VS_W_pFDpCD_FD_Dir, "Theta_pFD_VS_W_pFDpCD_FD");

        //  Phi_pFD plots (pFDpCD, CD & FD)
        //  ---------------------------------------------------------------------------------------------------------------------------------------------

        // Phi_pFD plots (pFDpCD, FD)
        double Phi_pFD_All_Int_pFDpCD_integral = hPhi_pFD_All_Int_pFDpCD_FD->Integral();
        double Phi_pFD_QEL_pFDpCD_integral = hPhi_pFD_QEL_pFDpCD_FD->Integral();
        double Phi_pFD_MEC_pFDpCD_integral = hPhi_pFD_MEC_pFDpCD_FD->Integral();
        double Phi_pFD_RES_pFDpCD_integral = hPhi_pFD_RES_pFDpCD_FD->Integral();
        double Phi_pFD_DIS_pFDpCD_integral = hPhi_pFD_DIS_pFDpCD_FD->Integral();

        histPlotter1D(c1, hPhi_pFD_All_Int_pFDpCD_FD, norm_Angle_plots_master, true, Phi_pFD_All_Int_pFDpCD_integral, "#phi_{pFD} of FD proton", "All Int., pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sPhi_pFD_pFDpCD_FD, "00_phi_pFD_All_Int_pFDpCD", hPhi_pFD_All_Int_pFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_pFD_QEL_pFDpCD_FD, norm_Angle_plots_master, true, Phi_pFD_QEL_pFDpCD_integral, "#phi_{pFD} of FD proton", "QEL Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_pFD_pFDpCD_FD, "01_Phi_pFD_QEL_Only_pFDpCD", hPhi_pFD_QEL_pFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_pFD_MEC_pFDpCD_FD, norm_Angle_plots_master, true, Phi_pFD_MEC_pFDpCD_integral, "#phi_{pFD} of FD proton", "MEC Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_pFD_pFDpCD_FD, "02_Phi_pFD_MEC_Only_pFDpCD", hPhi_pFD_MEC_pFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_pFD_RES_pFDpCD_FD, norm_Angle_plots_master, true, Phi_pFD_RES_pFDpCD_integral, "#phi_{pFD} of FD proton", "RES Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_pFD_pFDpCD_FD, "03_Phi_pFD_RES_Only_pFDpCD", hPhi_pFD_RES_pFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_pFD_DIS_pFDpCD_FD, norm_Angle_plots_master, true, Phi_pFD_DIS_pFDpCD_integral, "#phi_{pFD} of FD proton", "DIS Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_pFD_pFDpCD_FD, "04_Phi_pFD_DIS_Only_pFDpCD", hPhi_pFD_DIS_pFDpCD_FD_Dir, "", kBlue, true, true, true);

        histPlotter2D(c1, hPhi_pFD_VS_P_pFD_pFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_pFD_VS_P_pFD_pFDpCD_FD_Dir, "Phi_pFD_VS_P_pFD_pFDpCD_FD");
        histPlotter2D(c1, hPhi_pFD_VS_W_pFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_pFD_VS_W_pFDpCD_FD_Dir, "Phi_pFD_VS_W_pFDpCD_FD");

        //  Theta_pFD vs. Phi_pFD plots (pFDpCD, CD & FD)
        //  -------------------------------------------------------------------------------------------------------------------------------

        // Theta_pFD vs. Phi_pFD plots (pFDpCD, FD)
        histPlotter2D(c1, hTheta_pFD_VS_Phi_pFD_pFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_pFD_VS_Phi_pFD_pFDpCD_FD_Dir,
                      "Theta_pFD_VS_Phi_pFD_All_Int_pFDpCD_FD");

        //  Theta_pCD plots (CD only) -------------------------------------------------------------------------------------------------------------------------------------------

        // Theta_pCD plots (pFDpCD, CD)
        double Theta_pCD_All_Int_pFDpCD_integral = hTheta_pCD_All_Int_pFDpCD_CD->Integral();
        double Theta_pCD_QEL_pFDpCD_integral = hTheta_pCD_QEL_pFDpCD_CD->Integral();
        double Theta_pCD_MEC_pFDpCD_integral = hTheta_pCD_MEC_pFDpCD_CD->Integral();
        double Theta_pCD_RES_pFDpCD_integral = hTheta_pCD_RES_pFDpCD_CD->Integral();
        double Theta_pCD_DIS_pFDpCD_integral = hTheta_pCD_DIS_pFDpCD_CD->Integral();

        histPlotter1D(c1, hTheta_pCD_All_Int_pFDpCD_CD, norm_Angle_plots_master, true, Theta_pCD_All_Int_pFDpCD_integral, "#theta_{pCD} of CD proton", "All Int., pFDpCD", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_pCD_pFDpCD_CD, "00_Theta_pCD_All_Int_pFDpCD", hTheta_pCD_All_Int_pFDpCD_CD_Dir, "", kBlue, true, true, true,
                      false, true, 47.5, 87.5, false);
        histPlotter1D(c1, hTheta_pCD_QEL_pFDpCD_CD, norm_Angle_plots_master, true, Theta_pCD_QEL_pFDpCD_integral, "#theta_{pCD} of CD proton", "QEL Only, pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_pCD_pFDpCD_CD, "01_Theta_pCD_QEL_Only_pFDpCD", hTheta_pCD_QEL_pFDpCD_CD_Dir, "", kBlue, true, true, true, false, true,
                      47.5, 87.5, false);
        histPlotter1D(c1, hTheta_pCD_MEC_pFDpCD_CD, norm_Angle_plots_master, true, Theta_pCD_MEC_pFDpCD_integral, "#theta_{pCD} of CD proton", "MEC Only, pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_pCD_pFDpCD_CD, "02_Theta_pCD_MEC_Only_pFDpCD", hTheta_pCD_MEC_pFDpCD_CD_Dir, "", kBlue, true, true, true, false, true,
                      47.5, 87.5, false);
        histPlotter1D(c1, hTheta_pCD_RES_pFDpCD_CD, norm_Angle_plots_master, true, Theta_pCD_RES_pFDpCD_integral, "#theta_{pCD} of CD proton", "RES Only, pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_pCD_pFDpCD_CD, "03_Theta_pCD_RES_Only_pFDpCD", hTheta_pCD_RES_pFDpCD_CD_Dir, "", kBlue, true, true, true, false, true,
                      47.5, 87.5, false);
        histPlotter1D(c1, hTheta_pCD_DIS_pFDpCD_CD, norm_Angle_plots_master, true, Theta_pCD_DIS_pFDpCD_integral, "#theta_{pCD} of CD proton", "DIS Only, pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_pCD_pFDpCD_CD, "04_Theta_pCD_DIS_Only_pFDpCD", hTheta_pCD_DIS_pFDpCD_CD_Dir, "", kBlue, true, true, true, false, true,
                      47.5, 87.5, false);

        stackPlotter1D(c1, sTheta_pCD_pFDpCD_CD, norm_Angle_plots_master, "#theta_{pCD} of CD proton", "pFDpCD", plots, Histogram_OutPDF, hTheta_pCD_All_Int_pFDpCD_CD,
                       hTheta_pCD_QEL_pFDpCD_CD, hTheta_pCD_MEC_pFDpCD_CD, hTheta_pCD_RES_pFDpCD_CD, hTheta_pCD_DIS_pFDpCD_CD, "05_Theta_pCD_Stack_pFDpCD", hTheta_pCD_All_Int_pFDpCD_CD_Dir,
                       "");

        histPlotter2D(c1, hTheta_pCD_VS_P_pCD_pFDpCD_CD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_pCD_VS_P_pCD_pFDpCD_CD_Dir,
                      "Theta_pCD_VS_P_pCD_pFDpCD_CD");
        histPlotter2D(c1, hTheta_pCD_VS_W_pFDpCD_CD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_pCD_VS_W_pFDpCD_CD_Dir, "Theta_pCD_VS_W_pFDpCD_CD");

        //  Phi_pCD plots (pFDpCD, CD & FD)
        //  ---------------------------------------------------------------------------------------------------------------------------------------------

        // Phi_pCD plots (pFDpCD, FD)
        double Phi_pCD_All_Int_pFDpCD_integral = hPhi_pCD_All_Int_pFDpCD_CD->Integral();
        double Phi_pCD_QEL_pFDpCD_integral = hPhi_pCD_QEL_pFDpCD_CD->Integral();
        double Phi_pCD_MEC_pFDpCD_integral = hPhi_pCD_MEC_pFDpCD_CD->Integral();
        double Phi_pCD_RES_pFDpCD_integral = hPhi_pCD_RES_pFDpCD_CD->Integral();
        double Phi_pCD_DIS_pFDpCD_integral = hPhi_pCD_DIS_pFDpCD_CD->Integral();

        histPlotter1D(c1, hPhi_pCD_All_Int_pFDpCD_CD, norm_Angle_plots_master, true, Phi_pCD_All_Int_pFDpCD_integral, "#phi_{pCD} of CD proton", "All Int., pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sPhi_pCD_pFDpCD_CD, "00_phi_pCD_All_Int_pFDpCD", hPhi_pCD_All_Int_pFDpCD_CD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_pCD_QEL_pFDpCD_CD, norm_Angle_plots_master, true, Phi_pCD_QEL_pFDpCD_integral, "#phi_{pCD} of CD proton", "QEL Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_pCD_pFDpCD_CD, "01_Phi_pCD_QEL_Only_pFDpCD", hPhi_pCD_QEL_pFDpCD_CD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_pCD_MEC_pFDpCD_CD, norm_Angle_plots_master, true, Phi_pCD_MEC_pFDpCD_integral, "#phi_{pCD} of CD proton", "MEC Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_pCD_pFDpCD_CD, "02_Phi_pCD_MEC_Only_pFDpCD", hPhi_pCD_MEC_pFDpCD_CD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_pCD_RES_pFDpCD_CD, norm_Angle_plots_master, true, Phi_pCD_RES_pFDpCD_integral, "#phi_{pCD} of CD proton", "RES Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_pCD_pFDpCD_CD, "03_Phi_pCD_RES_Only_pFDpCD", hPhi_pCD_RES_pFDpCD_CD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_pCD_DIS_pFDpCD_CD, norm_Angle_plots_master, true, Phi_pCD_DIS_pFDpCD_integral, "#phi_{pCD} of CD proton", "DIS Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_pCD_pFDpCD_CD, "04_Phi_pCD_DIS_Only_pFDpCD", hPhi_pCD_DIS_pFDpCD_CD_Dir, "", kBlue, true, true, true);

        histPlotter2D(c1, hPhi_pCD_VS_P_pCD_pFDpCD_CD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_pCD_VS_P_pCD_pFDpCD_CD_Dir, "Phi_pCD_VS_P_pCD_pFDpCD_CD");
        histPlotter2D(c1, hPhi_pCD_VS_W_pFDpCD_CD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_pCD_VS_W_pFDpCD_CD_Dir, "Phi_pCD_VS_W_pFDpCD_CD");

        //  Theta_pCD vs. Phi_pCD plots (pFDpCD, CD & FD)
        //  -------------------------------------------------------------------------------------------------------------------------------

        // Theta_pCD vs. Phi_pCD plots (pFDpCD, FD)
        histPlotter2D(c1, hTheta_pCD_VS_Phi_pCD_pFDpCD_CD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_pCD_VS_Phi_pCD_pFDpCD_CD_Dir,
                      "Theta_pCD_VS_Phi_pCD_All_Int_pFDpCD_CD");

        //  Theta_tot plots -----------------------------------------------------------------------------------------------------------------------------------------------------

        // Theta_tot plots (pFDpCD, CD)
        double Theta_tot_All_Int_pFDpCD_integral = hTheta_tot_All_Int_pFDpCD->Integral();
        double Theta_tot_QEL_pFDpCD_integral = hTheta_tot_QEL_pFDpCD->Integral();
        double Theta_tot_MEC_pFDpCD_integral = hTheta_tot_MEC_pFDpCD->Integral();
        double Theta_tot_RES_pFDpCD_integral = hTheta_tot_RES_pFDpCD->Integral();
        double Theta_tot_DIS_pFDpCD_integral = hTheta_tot_DIS_pFDpCD->Integral();

        histPlotter1D(c1, hTheta_tot_All_Int_pFDpCD, norm_Angle_plots_master, true, Theta_tot_All_Int_pFDpCD_integral, "#theta_{tot} of total 3-momentum", "All Int., pFDpCD", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_tot_pFDpCD, "00_Theta_tot_All_Int_pFDpCD", hTheta_tot_All_Int_pFDpCD_Dir, "", kBlue, true, true, true, true);
        histPlotter1D(c1, hTheta_tot_QEL_pFDpCD, norm_Angle_plots_master, true, Theta_tot_QEL_pFDpCD_integral, "#theta_{tot} of total 3-momentum", "QEL Only, pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_tot_pFDpCD, "01_Theta_tot_QEL_Only_pFDpCD", hTheta_tot_QEL_pFDpCD_Dir, "", kBlue, true, true, true, true);
        histPlotter1D(c1, hTheta_tot_MEC_pFDpCD, norm_Angle_plots_master, true, Theta_tot_MEC_pFDpCD_integral, "#theta_{tot} of total 3-momentum", "MEC Only, pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_tot_pFDpCD, "02_Theta_tot_MEC_Only_pFDpCD", hTheta_tot_MEC_pFDpCD_Dir, "", kBlue, true, true, true, true);
        histPlotter1D(c1, hTheta_tot_RES_pFDpCD, norm_Angle_plots_master, true, Theta_tot_RES_pFDpCD_integral, "#theta_{tot} of total 3-momentum", "RES Only, pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_tot_pFDpCD, "03_Theta_tot_RES_Only_pFDpCD", hTheta_tot_RES_pFDpCD_Dir, "", kBlue, true, true, true, true);
        histPlotter1D(c1, hTheta_tot_DIS_pFDpCD, norm_Angle_plots_master, true, Theta_tot_DIS_pFDpCD_integral, "#theta_{tot} of total 3-momentum", "DIS Only, pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_tot_pFDpCD, "04_Theta_tot_DIS_Only_pFDpCD", hTheta_tot_DIS_pFDpCD_Dir, "", kBlue, true, true, true, true);

        stackPlotter1D(c1, sTheta_tot_pFDpCD, norm_Angle_plots_master, "#theta_{tot} of total 3-momentum", "pFDpCD", plots, Histogram_OutPDF, hTheta_tot_All_Int_pFDpCD,
                       hTheta_tot_QEL_pFDpCD, hTheta_tot_MEC_pFDpCD, hTheta_tot_RES_pFDpCD, hTheta_tot_DIS_pFDpCD, "05_Theta_tot_Stack_pFDpCD", hTheta_tot_All_Int_pFDpCD_Dir, "");

        histPlotter2D(c1, hTheta_tot_VS_P_tot_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_tot_VS_P_tot_pFDpCD_Dir, "Theta_tot_VS_P_tot_pFDpCD");
        histPlotter2D(c1, hTheta_tot_VS_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_tot_VS_W_pFDpCD_Dir, "Theta_tot_VS_W_pFDpCD");

        //  Phi_tot plots -------------------------------------------------------------------------------------------------------------------------------------------------------

        // Phi_tot plots (pFDpCD, FD)
        double Phi_tot_All_Int_pFDpCD_integral = hPhi_tot_All_Int_pFDpCD->Integral();
        double Phi_tot_QEL_pFDpCD_integral = hPhi_tot_QEL_pFDpCD->Integral();
        double Phi_tot_MEC_pFDpCD_integral = hPhi_tot_MEC_pFDpCD->Integral();
        double Phi_tot_RES_pFDpCD_integral = hPhi_tot_RES_pFDpCD->Integral();
        double Phi_tot_DIS_pFDpCD_integral = hPhi_tot_DIS_pFDpCD->Integral();

        histPlotter1D(c1, hPhi_tot_All_Int_pFDpCD, norm_Angle_plots_master, true, Phi_tot_All_Int_pFDpCD_integral, "#phi_{tot} of total 3-momentum", "All Int., pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sPhi_tot_pFDpCD, "00_Phi_tot_All_Int_pFDpCD", hPhi_tot_All_Int_pFDpCD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_tot_QEL_pFDpCD, norm_Angle_plots_master, true, Phi_tot_QEL_pFDpCD_integral, "#phi_{tot} of total 3-momentum", "QEL Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_tot_pFDpCD, "01_Phi_tot_QEL_Only_pFDpCD", hPhi_tot_QEL_pFDpCD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_tot_MEC_pFDpCD, norm_Angle_plots_master, true, Phi_tot_MEC_pFDpCD_integral, "#phi_{tot} of total 3-momentum", "MEC Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_tot_pFDpCD, "02_Phi_tot_MEC_Only_pFDpCD", hPhi_tot_MEC_pFDpCD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_tot_RES_pFDpCD, norm_Angle_plots_master, true, Phi_tot_RES_pFDpCD_integral, "#phi_{tot} of total 3-momentum", "RES Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_tot_pFDpCD, "03_Phi_tot_RES_Only_pFDpCD", hPhi_tot_RES_pFDpCD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_tot_DIS_pFDpCD, norm_Angle_plots_master, true, Phi_tot_DIS_pFDpCD_integral, "#phi_{tot} of total 3-momentum", "DIS Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_tot_pFDpCD, "04_Phi_tot_DIS_Only_pFDpCD", hPhi_tot_DIS_pFDpCD_Dir, "", kBlue, true, true, true);

        histPlotter2D(c1, hPhi_tot_VS_P_tot_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_tot_VS_P_tot_pFDpCD_Dir, "Phi_tot_VS_P_tot_pFDpCD");
        histPlotter2D(c1, hPhi_tot_VS_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_tot_VS_W_pFDpCD_Dir, "Phi_tot_VS_W_pFDpCD");

        //  Theta_tot vs. Phi_tot plots -----------------------------------------------------------------------------------------------------------------------------------------

        // Theta_tot vs. Phi_tot plots (pFDpCD, FD)
        histPlotter2D(c1, hTheta_tot_VS_Phi_tot_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_tot_VS_Phi_tot_pFDpCD_Dir,
                      "Theta_tot_VS_Phi_tot_All_Int_pFDpCD");

        //  Theta_rel plots -----------------------------------------------------------------------------------------------------------------------------------------------------

        // Theta_rel plots (pFDpCD, CD)
        double Theta_rel_All_Int_pFDpCD_integral = hTheta_rel_All_Int_pFDpCD->Integral();
        double Theta_rel_QEL_pFDpCD_integral = hTheta_rel_QEL_pFDpCD->Integral();
        double Theta_rel_MEC_pFDpCD_integral = hTheta_rel_MEC_pFDpCD->Integral();
        double Theta_rel_RES_pFDpCD_integral = hTheta_rel_RES_pFDpCD->Integral();
        double Theta_rel_DIS_pFDpCD_integral = hTheta_rel_DIS_pFDpCD->Integral();

        histPlotter1D(c1, hTheta_rel_All_Int_pFDpCD, norm_Angle_plots_master, true, Theta_rel_All_Int_pFDpCD_integral, "#theta_{rel} of relative 3-momentum", "All Int., pFDpCD", 0.06,
                      0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_rel_pFDpCD, "00_Theta_rel_All_Int_pFDpCD", hTheta_rel_All_Int_pFDpCD_Dir, "", kBlue, true, true, true,
                      true);
        histPlotter1D(c1, hTheta_rel_QEL_pFDpCD, norm_Angle_plots_master, true, Theta_rel_QEL_pFDpCD_integral, "#theta_{rel} of relative 3-momentum", "QEL Only, pFDpCD", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_rel_pFDpCD, "01_Theta_rel_QEL_Only_pFDpCD", hTheta_rel_QEL_pFDpCD_Dir, "", kBlue, true, true, true, true);
        histPlotter1D(c1, hTheta_rel_MEC_pFDpCD, norm_Angle_plots_master, true, Theta_rel_MEC_pFDpCD_integral, "#theta_{rel} of relative 3-momentum", "MEC Only, pFDpCD", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_rel_pFDpCD, "02_Theta_rel_MEC_Only_pFDpCD", hTheta_rel_MEC_pFDpCD_Dir, "", kBlue, true, true, true, true);
        histPlotter1D(c1, hTheta_rel_RES_pFDpCD, norm_Angle_plots_master, true, Theta_rel_RES_pFDpCD_integral, "#theta_{rel} of relative 3-momentum", "RES Only, pFDpCD", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_rel_pFDpCD, "03_Theta_rel_RES_Only_pFDpCD", hTheta_rel_RES_pFDpCD_Dir, "", kBlue, true, true, true, true);
        histPlotter1D(c1, hTheta_rel_DIS_pFDpCD, norm_Angle_plots_master, true, Theta_rel_DIS_pFDpCD_integral, "#theta_{rel} of relative 3-momentum", "DIS Only, pFDpCD", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_rel_pFDpCD, "04_Theta_rel_DIS_Only_pFDpCD", hTheta_rel_DIS_pFDpCD_Dir, "", kBlue, true, true, true, true);

        stackPlotter1D(c1, sTheta_rel_pFDpCD, norm_Angle_plots_master, "#theta_{rel} of relative 3-momentum", "pFDpCD", plots, Histogram_OutPDF, hTheta_rel_All_Int_pFDpCD,
                       hTheta_rel_QEL_pFDpCD, hTheta_rel_MEC_pFDpCD, hTheta_rel_RES_pFDpCD, hTheta_rel_DIS_pFDpCD, "05_Theta_rel_Stack_pFDpCD", hTheta_rel_All_Int_pFDpCD_Dir, "");

        histPlotter2D(c1, hTheta_rel_VS_P_rel_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_rel_VS_P_rel_pFDpCD_Dir, "Theta_rel_VS_P_tot_pFDpCD");
        histPlotter2D(c1, hTheta_rel_VS_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_rel_VS_W_pFDpCD_Dir, "Theta_rel_VS_W_pFDpCD");

        //  Phi_rel plots -------------------------------------------------------------------------------------------------------------------------------------------------------

        // Phi_rel plots (pFDpCD, FD)
        double Phi_rel_All_Int_pFDpCD_integral = hPhi_rel_All_Int_pFDpCD->Integral();
        double Phi_rel_QEL_pFDpCD_integral = hPhi_rel_QEL_pFDpCD->Integral();
        double Phi_rel_MEC_pFDpCD_integral = hPhi_rel_MEC_pFDpCD->Integral();
        double Phi_rel_RES_pFDpCD_integral = hPhi_rel_RES_pFDpCD->Integral();
        double Phi_rel_DIS_pFDpCD_integral = hPhi_rel_DIS_pFDpCD->Integral();

        histPlotter1D(c1, hPhi_rel_All_Int_pFDpCD, norm_Angle_plots_master, true, Phi_rel_All_Int_pFDpCD_integral, "#phi_{rel} of relative 3-momentum", "All Int., pFDpCD", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sPhi_rel_pFDpCD, "00_Phi_rel_All_Int_pFDpCD", hPhi_rel_All_Int_pFDpCD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_rel_QEL_pFDpCD, norm_Angle_plots_master, true, Phi_rel_QEL_pFDpCD_integral, "#phi_{rel} of relative 3-momentum", "QEL Only, pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sPhi_rel_pFDpCD, "01_Phi_rel_QEL_Only_pFDpCD", hPhi_rel_QEL_pFDpCD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_rel_MEC_pFDpCD, norm_Angle_plots_master, true, Phi_rel_MEC_pFDpCD_integral, "#phi_{rel} of relative 3-momentum", "MEC Only, pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sPhi_rel_pFDpCD, "02_Phi_rel_MEC_Only_pFDpCD", hPhi_rel_MEC_pFDpCD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_rel_RES_pFDpCD, norm_Angle_plots_master, true, Phi_rel_RES_pFDpCD_integral, "#phi_{rel} of relative 3-momentum", "RES Only, pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sPhi_rel_pFDpCD, "03_Phi_rel_RES_Only_pFDpCD", hPhi_rel_RES_pFDpCD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_rel_DIS_pFDpCD, norm_Angle_plots_master, true, Phi_rel_DIS_pFDpCD_integral, "#phi_{rel} of relative 3-momentum", "DIS Only, pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sPhi_rel_pFDpCD, "04_Phi_rel_DIS_Only_pFDpCD", hPhi_rel_DIS_pFDpCD_Dir, "", kBlue, true, true, true);

        histPlotter2D(c1, hPhi_rel_VS_P_rel_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_rel_VS_P_rel_pFDpCD_Dir, "Phi_rel_VS_P_tot_pFDpCD");
        histPlotter2D(c1, hPhi_rel_VS_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_rel_VS_W_pFDpCD_Dir, "Phi_rel_VS_W_pFDpCD");

        //  Theta_rel vs. Phi_rel plots -----------------------------------------------------------------------------------------------------------------------------------------

        // Theta_rel vs. Phi_rel plots (pFDpCD, FD)
        histPlotter2D(c1, hTheta_rel_VS_Phi_rel_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_rel_VS_Phi_rel_pFDpCD_Dir,
                      "Theta_rel_VS_Phi_rel_All_Int_pFDpCD");

        // Theta_p_e_p_tot (pFDpCD, CD & FD) ------------------------------------------------------------------------------------------------------------------------------------

        // Theta_p_e_p_tot (pFDpCD, CD & FD)
        double Theta_p_e_p_tot_pFDpCD_integral = hTheta_p_e_p_tot_pFDpCD->Integral();

        histPlotter1D(c1, hTheta_p_e_p_tot_pFDpCD, norm_Angle_plots_master, true, Theta_p_e_p_tot_pFDpCD_integral,
                      "#theta_{#vec{P}_{e},#vec{P}_{tot}} - Opening Angle Between #vec{P}_{e} and #vec{P}_{tot}=#vec{P}_{pFD}+#vec{P}_{pCD}", "All Int., pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_p_e_p_tot_pFDpCD, "01a_Theta_p_e_p_tot_All_Int_pFDpCD", hTheta_p_e_p_tot_pFDpCD_Dir, "", kBlue, true, true, true, false);

        // Theta_pFD_pCD vs. W (pFDpCD, CD & FD) --------------------------------------------------------------------------------------------------------------------------------

        // Theta_pFD_pCD vs. W (pFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_p_e_p_tot_vs_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_p_e_p_tot_vs_W_pFDpCD_Dir,
                      "01b_Theta_p_e_p_tot_vs_W_pFDpCD_Dir");

        // Theta_q_p (pFDpCD, CD & FD) ------------------------------------------------------------------------------------------------------------------------------------------

        // Theta_q_p_tot (pFDpCD, CD & FD)
        double Theta_q_p_tot_pFDpCD_integral = hTheta_q_p_tot_pFDpCD->Integral();

        histPlotter1D(c1, hTheta_q_p_tot_pFDpCD, norm_Angle_plots_master, true, Theta_q_p_tot_pFDpCD_integral,
                      "#theta_{#vec{q},#vec{P}_{tot}} - Opening Angle Between #vec{q} and #vec{P}_{tot}=#vec{P}_{pFD}+#vec{P}_{pCD}", "All Int., pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_q_p_L_R_pFDpCD, "02a_Theta_q_p_tot_All_Int_pFDpCD", hTheta_q_p_tot_pFDpCD_Dir, "", kBlue, true, true, true, false);

        // Theta_q_p_max (pFDpCD, CD & FD)
        double Theta_q_p_max_pFDpCD_integral = hTheta_q_p_max_pFDpCD->Integral();

        histPlotter1D(c1, hTheta_q_p_max_pFDpCD, norm_Angle_plots_master, true, Theta_q_p_max_pFDpCD_integral,
                      "#theta_{#vec{q},#vec{P}_{max}} - Opening Angle Between #vec{q} and #vec{P}_{max}=#vec{P}_{pFD}+#vec{P}_{pCD}", "All Int., pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_q_p_L_R_pFDpCD, "02aa_Theta_q_p_max_All_Int_pFDpCD", hTheta_q_p_max_pFDpCD_Dir, "", kBlue, true, true, true, false);

        // hTheta_q_p_tot vs. W_pFDpCD (pFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_q_p_tot_vs_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_p_tot_vs_W_pFDpCD_Dir, "02b_Theta_q_p_tot_vs_W_pFDpCD");

        // hTheta_q_p_L vs. W_pFDpCD (pFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_q_p_L_vs_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_p_L_vs_W_pFDpCD_Dir, "02c_Theta_q_p_L_vs_W_pFDpCD");

        // hTheta_q_p_R vs. W_pFDpCD (pFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_q_p_R_vs_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_p_R_vs_W_pFDpCD_Dir, "02d_Theta_q_p_R_vs_W_pFDpCD");

        // hTheta_q_pFD vs. W_pFDpCD (pFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_q_pFD_vs_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_pFD_vs_W_pFDpCD_Dir, "02e_Theta_q_pFD_vs_W_pFDpCD");

        // hTheta_q_pCD vs. W_pFDpCD (pFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_q_pCD_vs_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_pCD_vs_W_pFDpCD_Dir, "02f_Theta_q_pCD_vs_W_pFDpCD");

        // Theta_P_pL_minus_q_pR (pFDpCD, CD & FD)
        double Theta_P_pL_minus_q_pR_integral = hTheta_P_pL_minus_q_pR_pFDpCD->Integral();

        histPlotter1D(c1, hTheta_P_pL_minus_q_pR_pFDpCD, norm_Angle_plots_master, true, Theta_P_pL_minus_q_pR_integral,
                      "#theta_{#vec{P}_{pL}-#vec{q},#vec{P}_{pR}} - Opening Angle Between #vec{P}_{pL}-#vec{q} and #vec{P}_{pR}", "All Int., pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_q_p_L_R_pFDpCD, "06a_Theta_P_pL_minus_q_pR_pFDpCD", hTheta_P_pL_minus_q_pR_pFDpCD_Dir, "", kBlue, true, true, true, false);
        histPlotter2D(c1, hTheta_P_pL_minus_q_pR_vs_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_P_pL_minus_q_pR_vs_W_pFDpCD_Dir,
                      "06b_hTheta_P_pL_minus_q_pR_vs_W_pFDpCD");

        // Theta_q_p_L and Theta_q_p_R (pFDpCD, CD & FD)
        double Theta_q_p_L_pFDpCD_integral = hTheta_q_p_L_pFDpCD->Integral(), Theta_q_p_R_pFDpCD_integral = hTheta_q_p_R_pFDpCD->Integral();

        histPlotter1D(c1, hTheta_q_p_L_pFDpCD, norm_Angle_plots_master, true, Theta_q_p_L_pFDpCD_integral,
                      "#theta_{#vec{q},#vec{P}_{pL}} - Opening Angle Between #vec{q} and Leading Proton #vec{P}_{pFD}", "All Int., pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sTheta_q_p_L_R_pFDpCD, "03a_Theta_q_pL_All_Int_pFDpCD", hTheta_q_p_L_pFDpCD_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hTheta_q_p_R_pFDpCD, norm_Angle_plots_master, true, Theta_q_p_R_pFDpCD_integral,
                      "#theta_{#vec{q},#vec{P}_{pR}} - Opening Angle Between #vec{q} and Recoil Proton #vec{P}_{pCD}", "All Int., pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sTheta_q_p_L_R_pFDpCD, "03b_Theta_q_pR_All_Int_pFDpCD", hTheta_q_p_R_pFDpCD_Dir, "", kBlue, true, true, true, false);

        // Theta_q_pFD and Theta_q_pCD (pFDpCD, CD & FD)
        double Theta_q_pFD_pFDpCD_integral = hTheta_q_pFD_pFDpCD->Integral(), Theta_q_pCD_pFDpCD_integral = hTheta_q_pCD_pFDpCD->Integral();

        histPlotter1D(c1, hTheta_q_pFD_pFDpCD, norm_Angle_plots_master, true, Theta_q_pFD_pFDpCD_integral,
                      "#theta_{#vec{q},#vec{P}_{pFD}} - Opening Angle Between #vec{q} and FD Proton #vec{P}_{pFD}", "All Int., pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sTheta_q_p_pFDpCD, "03c_Theta_q_pFD_All_Int_pFDpCD", hTheta_q_pFD_pFDpCD_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hTheta_q_pCD_pFDpCD, norm_Angle_plots_master, true, Theta_q_pCD_pFDpCD_integral,
                      "#theta_{#vec{q},#vec{P}_{pCD}} - Opening Angle Between #vec{q} and CD Proton #vec{P}_{pCD}", "All Int., pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sTheta_q_p_pFDpCD, "03d_Theta_q_pCD_All_Int_pFDpCD", hTheta_q_pCD_pFDpCD_Dir, "", kBlue, true, true, true, false);

        // Theta_q_p vs |P_p|/|q| (pFDpCD, CD & FD) ---------------------------------------------------------------------------------------------------------------------------

        // Theta_q_p_L vs |P_L|/|q (pFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_q_p_L_vs_p_L_q_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_p_L_vs_p_L_q_pFDpCD_Dir,
                      "04a_Theta_q_p_L_vs_p_L_q_pFDpCD");

        // Theta_q_p vs Theta_q_p (pFDpCD, CD & FD) -------------------------------------------------------------------------------------------------------------------------

        // Theta_q_p vs Theta_q_p (pFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_q_p_L_vs_Theta_q_p_R_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_p_L_vs_Theta_q_p_R_pFDpCD_Dir,
                      "04b_Theta_q_p_L_vs_Theta_q_p_R_pFDpCD");

        histPlotter2D(c1, hTheta_q_pFD_vs_Theta_q_pCD_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_pFD_vs_Theta_q_pCD_pFDpCD_Dir,
                      "04c_Theta_q_pFD_vs_Theta_q_pCD_pFDpCD");

        // Theta_pFD_pCD (pFDpCD, CD & FD) ----------------------------------------------------------------------------------------------------------------------------------------

        // Theta_pFD_pCD (pFDpCD, CD & FD)
        double Theta_pFD_pCD_pFDpCD_integral = hTheta_pFD_pCD_All_Int_pFDpCD->Integral();

        histPlotter1D(c1, hTheta_pFD_pCD_All_Int_pFDpCD, norm_Angle_plots_master, true, Theta_pFD_pCD_pFDpCD_integral, "#theta_{pFD,pCD} - Opening Angle Between Protons", "All Int., pFDpCD",
                      0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_pFD_pCD_pFDpCD, "00_Theta_pFD_pCD_All_Int_pFDpCD", hTheta_pFD_pCD_All_Int_pFDpCD_Dir, "", kBlue,
                      true, true, true, false);
        histPlotter1D(c1, hTheta_pFD_pCD_QEL_pFDpCD, norm_Angle_plots_master, true, Theta_pFD_pCD_pFDpCD_integral, "#theta_{pFD,pCD} - Opening Angle Between Protons", "QEL only, pFDpCD",
                      0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_pFD_pCD_pFDpCD, "01_Theta_pFD_pCD_QEL_only_pFDpCD", hTheta_pFD_pCD_QEL_pFDpCD_Dir, "", kBlue,
                      true, true, true, false);
        histPlotter1D(c1, hTheta_pFD_pCD_MEC_pFDpCD, norm_Angle_plots_master, true, Theta_pFD_pCD_pFDpCD_integral, "#theta_{pFD,pCD} - Opening Angle Between Protons", "MEC only, pFDpCD",
                      0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_pFD_pCD_pFDpCD, "02_Theta_pFD_pCD_MEC_only_pFDpCD", hTheta_pFD_pCD_MEC_pFDpCD_Dir, "", kBlue,
                      true, true, true, false);
        histPlotter1D(c1, hTheta_pFD_pCD_RES_pFDpCD, norm_Angle_plots_master, true, Theta_pFD_pCD_pFDpCD_integral, "#theta_{pFD,pCD} - Opening Angle Between Protons", "RES only, pFDpCD",
                      0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_pFD_pCD_pFDpCD, "03_Theta_pFD_pCD_RES_only_pFDpCD", hTheta_pFD_pCD_RES_pFDpCD_Dir, "", kBlue,
                      true, true, true, false);
        histPlotter1D(c1, hTheta_pFD_pCD_DIS_pFDpCD, norm_Angle_plots_master, true, Theta_pFD_pCD_pFDpCD_integral, "#theta_{pFD,pCD} - Opening Angle Between Protons", "DIS only, pFDpCD",
                      0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_pFD_pCD_pFDpCD, "04_Theta_pFD_pCD_DIS_only_pFDpCD", hTheta_pFD_pCD_DIS_pFDpCD_Dir, "", kBlue,
                      true, true, true, false);

        stackPlotter1D(c1, sTheta_pFD_pCD_pFDpCD, norm_E_e_plots, "#theta_{pFD,pCD} - Opening Angle Between Protons", "pFDpCD", plots, Histogram_OutPDF, hTheta_pFD_pCD_All_Int_pFDpCD,
                       hTheta_pFD_pCD_QEL_pFDpCD, hTheta_pFD_pCD_MEC_pFDpCD, hTheta_pFD_pCD_RES_pFDpCD, hTheta_pFD_pCD_DIS_pFDpCD, "05a_Theta_pFD_pCD_Stack", sTheta_pFD_pCD_pFDpCD_Dir, "");

        // hTheta_pFD_pCD_vs_W_pFDpCD (pFDpCD, CD & FD) ---------------------------------------------------------------------------------------------------------------------------

        // hTheta_pFD_pCD vs. W (pFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_pFD_pCD_vs_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_pFD_pCD_vs_W_pFDpCD_Dir, "05b_Theta_pFD_pCD_vs_W_pFDpCD");

        // Theta_pFD_vs_Theta_pCD for Theta_pFD_pCD < 20 (pFDpCD, CD & FD)
        // ----------------------------------------------------------------------------------------------------------

        // Theta_pFD_vs_Theta_pCD for Theta_pFD_pCD < 20 (pFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_pFD_vs_theta_pCD_for_Theta_pFD_pCD_20_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false,
                      hTheta_pFD_vs_theta_pCD_for_Theta_pFD_pCD_20_pFDpCD_Dir, "01a_Theta_pFD_vs_theta_pCD_for_Theta_pFD_pCD_20_pFDpCD");

        // dPhi_pFD_pCD for Theta_pFD_pCD < 20 (pFDpCD, CD & FD)
        // --------------------------------------------------------------------------------------------------------------------

        // dPhi_pFD_pCD for Theta_pFD_pCD < 20 (pFDpCD, CD & FD)
        double hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_pFDpCD_integral = hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_pFDpCD->Integral();
        double hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_ZOOMIN_pFDpCD_integral = hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_ZOOMIN_pFDpCD->Integral();

        histPlotter1D(c1, hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_pFDpCD, norm_Angle_plots_master, true, hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_pFDpCD_integral,
                      "#Delta#phi for #theta_{pFD,pCD}<20#circ", "All Int., pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_pFDpCD,
                      "02a_dPhi_pFD_pCD_for_Theta_pFD_pCD_20_All_Int_pFDpCD", hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_pFDpCD_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_ZOOMIN_pFDpCD, norm_Angle_plots_master, true, hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_ZOOMIN_pFDpCD_integral,
                      "#Delta#phi for #theta_{pFD,pCD}<20#circ - ZOOMIN", "All Int., pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_pFDpCD,
                      "02c_dPhi_pFD_pCD_for_Theta_pFD_pCD_20_ZOOMIN_All_Int_pFDpCD", hdPhi_pFD_pCD_for_Theta_pFD_pCD_20_ZOOMIN_pFDpCD_Dir, "", kBlue, true, true, true, false);

        // Theta_pFD_vs_Theta_pCD for every Theta_pFD_pCD (pFDpCD, CD & FD)
        // ---------------------------------------------------------------------------------------------------------

        // Theta_pFD_vs_Theta_pCD for every Theta_pFD_pCD (pFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_pFD_vs_theta_pCD_forall_Theta_pFD_pCD_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false,
                      hTheta_pFD_vs_theta_pCD_forall_Theta_pFD_pCD_pFDpCD_Dir, "01b_Theta_pFD_vs_theta_pCD_for_every_Theta_pFD_pCD_pFDpCD");

        // dPhi_pFD_pCD for every Theta_pFD_pCD (pFDpCD, CD & FD)
        // -------------------------------------------------------------------------------------------------------------------

        // dPhi_pFD_pCD for every Theta_pFD_pCD (CD & FD)
        double hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_pFDpCD_integral = hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_pFDpCD->Integral();

        histPlotter1D(c1, hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_pFDpCD, norm_Angle_plots_master, true, hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_pFDpCD_integral,
                      "#Delta#phi for every #theta_{pFD,pCD}", "All Int., pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_pFDpCD,
                      "02b_dPhi_pFD_pCD_for_every_Theta_pFD_pCD_All_Int_pFDpCD", hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_pFDpCD_Dir, "", kBlue, true, true, true, false);

        double hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_ZOOMIN_pFDpCD_integral = hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_ZOOMIN_pFDpCD->Integral();

        histPlotter1D(c1, hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_ZOOMIN_pFDpCD, norm_Angle_plots_master, true, hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_ZOOMIN_pFDpCD_integral,
                      "#Delta#phi for every #theta_{pFD,pCD} - ZOOMIN", "All Int., pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_pFDpCD,
                      "02c_dPhi_pFD_pCD_for_every_Theta_pFD_pCD_All_Int_ZOOMIN_pFDpCD", hdPhi_pFD_pCD_for_all_Theta_pFD_pCD_ZOOMIN_pFDpCD_Dir, "", kBlue, true, true, true, false);

        double hdPhi_pFD_pCD_for_small_dTheta_pFDpCD_integral = hdPhi_pFD_pCD_for_small_dTheta_pFDpCD->Integral();

        histPlotter1D(c1, hdPhi_pFD_pCD_for_small_dTheta_pFDpCD, norm_Angle_plots_master, true, hdPhi_pFD_pCD_for_small_dTheta_pFDpCD_integral,
                      "#Delta#phi for small #Delta#theta_{pFD/pCD} = |#theta_{pFD/pCD}-40#circ|", "All Int., pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sTheta_q_p_pFDpCD, "03a_dPhi_pFD_pCD_for_small_dTheta_pFDpCD", hdPhi_pFD_pCD_for_small_dTheta_pFDpCD_Dir, "", kBlue, true, true, true, false);

        double hdPhi_pFD_pCD_for_small_dTheta_ZOOMIN_pFDpCD_integral = hdPhi_pFD_pCD_for_small_dTheta_ZOOMIN_pFDpCD->Integral();

        histPlotter1D(c1, hdPhi_pFD_pCD_for_small_dTheta_ZOOMIN_pFDpCD, norm_Angle_plots_master, true, hdPhi_pFD_pCD_for_small_dTheta_ZOOMIN_pFDpCD_integral,
                      "#Delta#phi for small #Delta#theta_{pFD/pCD} = |#theta_{pFD/pCD}-40#circ| - ZOOMIN", "All Int., pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sTheta_q_p_pFDpCD, "03b_dPhi_pFD_pCD_for_small_dTheta_ZOOMIN_pFDpCD", hdPhi_pFD_pCD_for_small_dTheta_ZOOMIN_pFDpCD_Dir, "", kBlue, true, true, true, false);

        //  Ghost tracks handling (pFDpCD, CD only) -----------------------------------------------------------------------------------------------------------------------------

        // Theta_pFD_pCD vs. TOF1-TOF2 plots (pFDpCD, CD)
        hTheta_pFD_pCD_VS_ToFpFD_ToFpCD_AC_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        // Theta_pFD_pCD vs. position1-position2 plots (pFDpCD, CD)
        hTheta_pFD_pCD_VS_PospFD_PospCD_AC_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        // nFDpCD plots

        //  Theta_nFD plots (nFDpCD, CD & FD) -----------------------------------------------------------------------------------------------------------------------------------

        // Theta_nFD plots (nFDpCD, FD)
        double Theta_nFD_All_Int_nFDpCD_integral = hTheta_nFD_All_Int_nFDpCD_FD->Integral();
        double Theta_nFD_QEL_nFDpCD_integral = hTheta_nFD_QEL_nFDpCD_FD->Integral();
        double Theta_nFD_MEC_nFDpCD_integral = hTheta_nFD_MEC_nFDpCD_FD->Integral();
        double Theta_nFD_RES_nFDpCD_integral = hTheta_nFD_RES_nFDpCD_FD->Integral();
        double Theta_nFD_DIS_nFDpCD_integral = hTheta_nFD_DIS_nFDpCD_FD->Integral();

        if (apply_kinematical_cuts) {
            histPlotter1D(c1, hTheta_nFD_All_Int_nFDpCD_FD, norm_Angle_plots_master, true, Theta_nFD_All_Int_nFDpCD_integral, "#theta_{nFD} of FD neutron", "All Int., nFDpCD", 0.06, 0.0425,
                          0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_nFD_nFDpCD_FD, "00_Theta_nFD_All_Int_nFDpCD", hTheta_nFD_All_Int_nFDpCD_FD_Dir, "", kBlue, true, true, true,
                          false, true, (FD_nucleon_theta_cut.GetUpperCut() - 5) / 2, (FD_nucleon_theta_cut.GetUpperCut() + 5) / 2, false);
            histPlotter1D(c1, hTheta_nFD_QEL_nFDpCD_FD, norm_Angle_plots_master, true, Theta_nFD_QEL_nFDpCD_integral, "#theta_{nFD} of FD neutron", "QEL Only, nFDpCD", 0.06, 0.0425, 0.0425,
                          plots, Histogram_OutPDF, 2, false, true, sTheta_nFD_nFDpCD_FD, "01_Theta_nFD_QEL_Only_nFDpCD", hTheta_nFD_QEL_nFDpCD_FD_Dir, "", kBlue, true, true, true, false,
                          true, (FD_nucleon_theta_cut.GetUpperCut() - 5) / 2, (FD_nucleon_theta_cut.GetUpperCut() + 5) / 2, false);
            histPlotter1D(c1, hTheta_nFD_MEC_nFDpCD_FD, norm_Angle_plots_master, true, Theta_nFD_MEC_nFDpCD_integral, "#theta_{nFD} of FD neutron", "MEC Only, nFDpCD", 0.06, 0.0425, 0.0425,
                          plots, Histogram_OutPDF, 2, false, true, sTheta_nFD_nFDpCD_FD, "02_Theta_nFD_MEC_Only_nFDpCD", hTheta_nFD_MEC_nFDpCD_FD_Dir, "", kBlue, true, true, true, false,
                          true, (FD_nucleon_theta_cut.GetUpperCut() - 5) / 2, (FD_nucleon_theta_cut.GetUpperCut() + 5) / 2, false);
            histPlotter1D(c1, hTheta_nFD_RES_nFDpCD_FD, norm_Angle_plots_master, true, Theta_nFD_RES_nFDpCD_integral, "#theta_{nFD} of FD neutron", "RES Only, nFDpCD", 0.06, 0.0425, 0.0425,
                          plots, Histogram_OutPDF, 2, false, true, sTheta_nFD_nFDpCD_FD, "03_Theta_nFD_RES_Only_nFDpCD", hTheta_nFD_RES_nFDpCD_FD_Dir, "", kBlue, true, true, true, false,
                          true, (FD_nucleon_theta_cut.GetUpperCut() - 5) / 2, (FD_nucleon_theta_cut.GetUpperCut() + 5) / 2, false);
            histPlotter1D(c1, hTheta_nFD_DIS_nFDpCD_FD, norm_Angle_plots_master, true, Theta_nFD_DIS_nFDpCD_integral, "#theta_{nFD} of FD neutron", "DIS Only, nFDpCD", 0.06, 0.0425, 0.0425,
                          plots, Histogram_OutPDF, 2, false, true, sTheta_nFD_nFDpCD_FD, "04_Theta_nFD_DIS_Only_nFDpCD", hTheta_nFD_DIS_nFDpCD_FD_Dir, "", kBlue, true, true, true, false,
                          true, (FD_nucleon_theta_cut.GetUpperCut() - 5) / 2, (FD_nucleon_theta_cut.GetUpperCut() + 5) / 2, false);
        } else {
            histPlotter1D(c1, hTheta_nFD_All_Int_nFDpCD_FD, norm_Angle_plots_master, true, Theta_nFD_All_Int_nFDpCD_integral, "#theta_{nFD} of FD neutron", "All Int., nFDpCD", 0.06, 0.0425,
                          0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_nFD_nFDpCD_FD, "00_Theta_nFD_All_Int_nFDpCD", hTheta_nFD_All_Int_nFDpCD_FD_Dir, "", kBlue, true, true, true,
                          false, true, 17.5, 22.5, false);
            histPlotter1D(c1, hTheta_nFD_QEL_nFDpCD_FD, norm_Angle_plots_master, true, Theta_nFD_QEL_nFDpCD_integral, "#theta_{nFD} of FD neutron", "QEL Only, nFDpCD", 0.06, 0.0425, 0.0425,
                          plots, Histogram_OutPDF, 2, false, true, sTheta_nFD_nFDpCD_FD, "01_Theta_nFD_QEL_Only_nFDpCD", hTheta_nFD_QEL_nFDpCD_FD_Dir, "", kBlue, true, true, true, false,
                          true, 17.5, 22.5, false);
            histPlotter1D(c1, hTheta_nFD_MEC_nFDpCD_FD, norm_Angle_plots_master, true, Theta_nFD_MEC_nFDpCD_integral, "#theta_{nFD} of FD neutron", "MEC Only, nFDpCD", 0.06, 0.0425, 0.0425,
                          plots, Histogram_OutPDF, 2, false, true, sTheta_nFD_nFDpCD_FD, "02_Theta_nFD_MEC_Only_nFDpCD", hTheta_nFD_MEC_nFDpCD_FD_Dir, "", kBlue, true, true, true, false,
                          true, 17.5, 22.5, false);
            histPlotter1D(c1, hTheta_nFD_RES_nFDpCD_FD, norm_Angle_plots_master, true, Theta_nFD_RES_nFDpCD_integral, "#theta_{nFD} of FD neutron", "RES Only, nFDpCD", 0.06, 0.0425, 0.0425,
                          plots, Histogram_OutPDF, 2, false, true, sTheta_nFD_nFDpCD_FD, "03_Theta_nFD_RES_Only_nFDpCD", hTheta_nFD_RES_nFDpCD_FD_Dir, "", kBlue, true, true, true, false,
                          true, 17.5, 22.5, false);
            histPlotter1D(c1, hTheta_nFD_DIS_nFDpCD_FD, norm_Angle_plots_master, true, Theta_nFD_DIS_nFDpCD_integral, "#theta_{nFD} of FD neutron", "DIS Only, nFDpCD", 0.06, 0.0425, 0.0425,
                          plots, Histogram_OutPDF, 2, false, true, sTheta_nFD_nFDpCD_FD, "04_Theta_nFD_DIS_Only_nFDpCD", hTheta_nFD_DIS_nFDpCD_FD_Dir, "", kBlue, true, true, true, false,
                          true, 17.5, 22.5, false);
        }

        stackPlotter1D(c1, sTheta_nFD_nFDpCD_FD, norm_Angle_plots_master, "#theta_{nFD} of FD neutron", "nFDpCD", plots, Histogram_OutPDF, hTheta_nFD_All_Int_nFDpCD_FD,
                       hTheta_nFD_QEL_nFDpCD_FD, hTheta_nFD_MEC_nFDpCD_FD, hTheta_nFD_RES_nFDpCD_FD, hTheta_nFD_DIS_nFDpCD_FD, "05_Theta_nFD_Stack_nFDpCD", hTheta_nFD_All_Int_nFDpCD_FD_Dir,
                       "");

        histPlotter2D(c1, hTheta_nFD_VS_P_nFD_nFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_nFD_VS_P_nFD_nFDpCD_FD_Dir,
                      "Theta_nFD_VS_P_nFD_nFDpCD_FD");
        histPlotter2D(c1, hTheta_nFD_VS_W_nFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_nFD_VS_W_nFDpCD_FD_Dir, "Theta_nFD_VS_W_nFDpCD_FD");

        //  Phi_nFD plots (nFDpCD, CD & FD) -------------------------------------------------------------------------------------------------------------------------------------

        // Phi_nFD plots (nFDpCD, FD)
        double Phi_nFD_All_Int_nFDpCD_integral = hPhi_nFD_All_Int_nFDpCD_FD->Integral();
        double Phi_nFD_QEL_nFDpCD_integral = hPhi_nFD_QEL_nFDpCD_FD->Integral();
        double Phi_nFD_MEC_nFDpCD_integral = hPhi_nFD_MEC_nFDpCD_FD->Integral();
        double Phi_nFD_RES_nFDpCD_integral = hPhi_nFD_RES_nFDpCD_FD->Integral();
        double Phi_nFD_DIS_nFDpCD_integral = hPhi_nFD_DIS_nFDpCD_FD->Integral();

        histPlotter1D(c1, hPhi_nFD_All_Int_nFDpCD_FD, norm_Angle_plots_master, true, Phi_nFD_All_Int_nFDpCD_integral, "#phi_{nFD} of FD neutron", "All Int., nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sPhi_nFD_nFDpCD_FD, "00_phi_nFD_All_Int_nFDpCD", hPhi_nFD_All_Int_nFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_nFD_QEL_nFDpCD_FD, norm_Angle_plots_master, true, Phi_nFD_QEL_nFDpCD_integral, "#phi_{nFD} of FD neutron", "QEL Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_nFD_nFDpCD_FD, "01_Phi_nFD_QEL_Only_nFDpCD", hPhi_nFD_QEL_nFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_nFD_MEC_nFDpCD_FD, norm_Angle_plots_master, true, Phi_nFD_MEC_nFDpCD_integral, "#phi_{nFD} of FD neutron", "MEC Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_nFD_nFDpCD_FD, "02_Phi_nFD_MEC_Only_nFDpCD", hPhi_nFD_MEC_nFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_nFD_RES_nFDpCD_FD, norm_Angle_plots_master, true, Phi_nFD_RES_nFDpCD_integral, "#phi_{nFD} of FD neutron", "RES Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_nFD_nFDpCD_FD, "03_Phi_nFD_RES_Only_nFDpCD", hPhi_nFD_RES_nFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_nFD_DIS_nFDpCD_FD, norm_Angle_plots_master, true, Phi_nFD_DIS_nFDpCD_integral, "#phi_{nFD} of FD neutron", "DIS Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_nFD_nFDpCD_FD, "04_Phi_nFD_DIS_Only_nFDpCD", hPhi_nFD_DIS_nFDpCD_FD_Dir, "", kBlue, true, true, true);

        histPlotter2D(c1, hPhi_nFD_VS_P_nFD_nFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_nFD_VS_P_nFD_nFDpCD_FD_Dir, "Phi_nFD_VS_P_nFD_nFDpCD_FD");
        histPlotter2D(c1, hPhi_nFD_VS_W_nFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_nFD_VS_W_nFDpCD_FD_Dir, "Phi_nFD_VS_W_nFDpCD_FD");

        //  Theta_nFD vs. Phi_nFD plots (nFDpCD, CD & FD) -----------------------------------------------------------------------------------------------------------------------

        // Theta_nFD vs. Phi_nFD plots (nFDpCD, FD)
        histPlotter2D(c1, hTheta_nFD_VS_Phi_nFD_nFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_nFD_VS_Phi_nFD_nFDpCD_FD_Dir,
                      "Theta_nFD_VS_Phi_nFD_All_Int_nFDpCD_FD");

        //  Theta_pCD plots (CD only) -------------------------------------------------------------------------------------------------------------------------------------------

        // Theta_pCD plots (nFDpCD, CD)
        double Theta_pCD_All_Int_nFDpCD_integral = hTheta_pCD_All_Int_nFDpCD_CD->Integral();
        double Theta_pCD_QEL_nFDpCD_integral = hTheta_pCD_QEL_nFDpCD_CD->Integral();
        double Theta_pCD_MEC_nFDpCD_integral = hTheta_pCD_MEC_nFDpCD_CD->Integral();
        double Theta_pCD_RES_nFDpCD_integral = hTheta_pCD_RES_nFDpCD_CD->Integral();
        double Theta_pCD_DIS_nFDpCD_integral = hTheta_pCD_DIS_nFDpCD_CD->Integral();

        histPlotter1D(c1, hTheta_pCD_All_Int_nFDpCD_CD, norm_Angle_plots_master, true, Theta_pCD_All_Int_nFDpCD_integral, "#theta_{pCD} of CD proton", "All Int., nFDpCD", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_pCD_nFDpCD_CD, "00_Theta_pCD_All_Int_nFDpCD", hTheta_pCD_All_Int_nFDpCD_CD_Dir, "", kBlue, true, true, true,
                      false, true, 47.5, 87.5, false);
        histPlotter1D(c1, hTheta_pCD_QEL_nFDpCD_CD, norm_Angle_plots_master, true, Theta_pCD_QEL_nFDpCD_integral, "#theta_{pCD} of CD proton", "QEL Only, nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_pCD_nFDpCD_CD, "01_Theta_pCD_QEL_Only_nFDpCD", hTheta_pCD_QEL_nFDpCD_CD_Dir, "", kBlue, true, true, true, false, true,
                      47.5, 87.5, false);
        histPlotter1D(c1, hTheta_pCD_MEC_nFDpCD_CD, norm_Angle_plots_master, true, Theta_pCD_MEC_nFDpCD_integral, "#theta_{pCD} of CD proton", "MEC Only, nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_pCD_nFDpCD_CD, "02_Theta_pCD_MEC_Only_nFDpCD", hTheta_pCD_MEC_nFDpCD_CD_Dir, "", kBlue, true, true, true, false, true,
                      47.5, 87.5, false);
        histPlotter1D(c1, hTheta_pCD_RES_nFDpCD_CD, norm_Angle_plots_master, true, Theta_pCD_RES_nFDpCD_integral, "#theta_{pCD} of CD proton", "RES Only, nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_pCD_nFDpCD_CD, "03_Theta_pCD_RES_Only_nFDpCD", hTheta_pCD_RES_nFDpCD_CD_Dir, "", kBlue, true, true, true, false, true,
                      47.5, 87.5, false);
        histPlotter1D(c1, hTheta_pCD_DIS_nFDpCD_CD, norm_Angle_plots_master, true, Theta_pCD_DIS_nFDpCD_integral, "#theta_{pCD} of CD proton", "DIS Only, nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_pCD_nFDpCD_CD, "04_Theta_pCD_DIS_Only_nFDpCD", hTheta_pCD_DIS_nFDpCD_CD_Dir, "", kBlue, true, true, true, false, true,
                      47.5, 87.5, false);

        stackPlotter1D(c1, sTheta_pCD_nFDpCD_CD, norm_Angle_plots_master, "#theta_{pCD} of CD proton", "nFDpCD", plots, Histogram_OutPDF, hTheta_pCD_All_Int_nFDpCD_CD,
                       hTheta_pCD_QEL_nFDpCD_CD, hTheta_pCD_MEC_nFDpCD_CD, hTheta_pCD_RES_nFDpCD_CD, hTheta_pCD_DIS_nFDpCD_CD, "05_Theta_pCD_Stack_nFDpCD", hTheta_pCD_All_Int_nFDpCD_CD_Dir,
                       "");

        histPlotter2D(c1, hTheta_pCD_VS_P_pCD_nFDpCD_CD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_pCD_VS_P_pCD_nFDpCD_CD_Dir,
                      "Theta_pCD_VS_P_pCD_nFDpCD_CD");
        histPlotter2D(c1, hTheta_pCD_VS_W_nFDpCD_CD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_pCD_VS_W_nFDpCD_CD_Dir, "Theta_pCD_VS_W_nFDpCD_CD");

        //  Phi_pCD plots (nFDpCD, CD & FD) -------------------------------------------------------------------------------------------------------------------------------------

        // Phi_pCD plots (nFDpCD, FD)
        double Phi_pCD_All_Int_nFDpCD_integral = hPhi_pCD_All_Int_nFDpCD_CD->Integral();
        double Phi_pCD_QEL_nFDpCD_integral = hPhi_pCD_QEL_nFDpCD_CD->Integral();
        double Phi_pCD_MEC_nFDpCD_integral = hPhi_pCD_MEC_nFDpCD_CD->Integral();
        double Phi_pCD_RES_nFDpCD_integral = hPhi_pCD_RES_nFDpCD_CD->Integral();
        double Phi_pCD_DIS_nFDpCD_integral = hPhi_pCD_DIS_nFDpCD_CD->Integral();

        histPlotter1D(c1, hPhi_pCD_All_Int_nFDpCD_CD, norm_Angle_plots_master, true, Phi_pCD_All_Int_nFDpCD_integral, "#phi_{pCD} of CD proton", "All Int., nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sPhi_pCD_nFDpCD_CD, "00_phi_pCD_All_Int_nFDpCD", hPhi_pCD_All_Int_nFDpCD_CD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_pCD_QEL_nFDpCD_CD, norm_Angle_plots_master, true, Phi_pCD_QEL_nFDpCD_integral, "#phi_{pCD} of CD proton", "QEL Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_pCD_nFDpCD_CD, "01_Phi_pCD_QEL_Only_nFDpCD", hPhi_pCD_QEL_nFDpCD_CD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_pCD_MEC_nFDpCD_CD, norm_Angle_plots_master, true, Phi_pCD_MEC_nFDpCD_integral, "#phi_{pCD} of CD proton", "MEC Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_pCD_nFDpCD_CD, "02_Phi_pCD_MEC_Only_nFDpCD", hPhi_pCD_MEC_nFDpCD_CD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_pCD_RES_nFDpCD_CD, norm_Angle_plots_master, true, Phi_pCD_RES_nFDpCD_integral, "#phi_{pCD} of CD proton", "RES Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_pCD_nFDpCD_CD, "03_Phi_pCD_RES_Only_nFDpCD", hPhi_pCD_RES_nFDpCD_CD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_pCD_DIS_nFDpCD_CD, norm_Angle_plots_master, true, Phi_pCD_DIS_nFDpCD_integral, "#phi_{pCD} of CD proton", "DIS Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_pCD_nFDpCD_CD, "04_Phi_pCD_DIS_Only_nFDpCD", hPhi_pCD_DIS_nFDpCD_CD_Dir, "", kBlue, true, true, true);

        histPlotter2D(c1, hPhi_pCD_VS_P_pCD_nFDpCD_CD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_pCD_VS_P_pCD_nFDpCD_CD_Dir, "Phi_pCD_VS_P_pCD_nFDpCD_CD");
        histPlotter2D(c1, hPhi_pCD_VS_W_nFDpCD_CD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_pCD_VS_W_nFDpCD_CD_Dir, "Phi_pCD_VS_W_nFDpCD_CD");

        //  Theta_pCD vs. Phi_pCD plots (nFDpCD, CD & FD) -----------------------------------------------------------------------------------------------------------------------

        // Theta_pCD vs. Phi_pCD plots (nFDpCD, FD)
        histPlotter2D(c1, hTheta_pCD_VS_Phi_pCD_nFDpCD_CD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_pCD_VS_Phi_pCD_nFDpCD_CD_Dir,
                      "Theta_pCD_VS_Phi_pCD_All_Int_nFDpCD_CD");

        //  Theta_tot plots -----------------------------------------------------------------------------------------------------------------------------------------------------

        // Theta_tot plots (nFDpCD, CD)
        double Theta_tot_All_Int_nFDpCD_integral = hTheta_tot_All_Int_nFDpCD->Integral();
        double Theta_tot_QEL_nFDpCD_integral = hTheta_tot_QEL_nFDpCD->Integral();
        double Theta_tot_MEC_nFDpCD_integral = hTheta_tot_MEC_nFDpCD->Integral();
        double Theta_tot_RES_nFDpCD_integral = hTheta_tot_RES_nFDpCD->Integral();
        double Theta_tot_DIS_nFDpCD_integral = hTheta_tot_DIS_nFDpCD->Integral();

        histPlotter1D(c1, hTheta_tot_All_Int_nFDpCD, norm_Angle_plots_master, true, Theta_tot_All_Int_nFDpCD_integral, "#theta_{tot} of total 3-momentum", "All Int., nFDpCD", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_tot_nFDpCD, "00_Theta_tot_All_Int_nFDpCD", hTheta_tot_All_Int_nFDpCD_Dir, "", kBlue, true, true, true, true);
        histPlotter1D(c1, hTheta_tot_QEL_nFDpCD, norm_Angle_plots_master, true, Theta_tot_QEL_nFDpCD_integral, "#theta_{tot} of total 3-momentum", "QEL Only, nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_tot_nFDpCD, "01_Theta_tot_QEL_Only_nFDpCD", hTheta_tot_QEL_nFDpCD_Dir, "", kBlue, true, true, true, true);
        histPlotter1D(c1, hTheta_tot_MEC_nFDpCD, norm_Angle_plots_master, true, Theta_tot_MEC_nFDpCD_integral, "#theta_{tot} of total 3-momentum", "MEC Only, nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_tot_nFDpCD, "02_Theta_tot_MEC_Only_nFDpCD", hTheta_tot_MEC_nFDpCD_Dir, "", kBlue, true, true, true, true);
        histPlotter1D(c1, hTheta_tot_RES_nFDpCD, norm_Angle_plots_master, true, Theta_tot_RES_nFDpCD_integral, "#theta_{tot} of total 3-momentum", "RES Only, nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_tot_nFDpCD, "03_Theta_tot_RES_Only_nFDpCD", hTheta_tot_RES_nFDpCD_Dir, "", kBlue, true, true, true, true);
        histPlotter1D(c1, hTheta_tot_DIS_nFDpCD, norm_Angle_plots_master, true, Theta_tot_DIS_nFDpCD_integral, "#theta_{tot} of total 3-momentum", "DIS Only, nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sTheta_tot_nFDpCD, "04_Theta_tot_DIS_Only_nFDpCD", hTheta_tot_DIS_nFDpCD_Dir, "", kBlue, true, true, true, true);

        stackPlotter1D(c1, sTheta_tot_nFDpCD, norm_Angle_plots_master, "#theta_{tot} of total 3-momentum", "nFDpCD", plots, Histogram_OutPDF, hTheta_tot_All_Int_nFDpCD,
                       hTheta_tot_QEL_nFDpCD, hTheta_tot_MEC_nFDpCD, hTheta_tot_RES_nFDpCD, hTheta_tot_DIS_nFDpCD, "05_Theta_tot_Stack_nFDpCD", hTheta_tot_All_Int_nFDpCD_Dir, "");

        histPlotter2D(c1, hTheta_tot_VS_P_tot_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_tot_VS_P_tot_nFDpCD_Dir, "Theta_tot_VS_P_tot_nFDpCD");
        histPlotter2D(c1, hTheta_tot_VS_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_tot_VS_W_nFDpCD_Dir, "Theta_tot_VS_W_nFDpCD");

        //  Phi_tot plots -------------------------------------------------------------------------------------------------------------------------------------------------------

        // Phi_tot plots (nFDpCD, FD)
        double Phi_tot_All_Int_nFDpCD_integral = hPhi_tot_All_Int_nFDpCD->Integral();
        double Phi_tot_QEL_nFDpCD_integral = hPhi_tot_QEL_nFDpCD->Integral();
        double Phi_tot_MEC_nFDpCD_integral = hPhi_tot_MEC_nFDpCD->Integral();
        double Phi_tot_RES_nFDpCD_integral = hPhi_tot_RES_nFDpCD->Integral();
        double Phi_tot_DIS_nFDpCD_integral = hPhi_tot_DIS_nFDpCD->Integral();

        histPlotter1D(c1, hPhi_tot_All_Int_nFDpCD, norm_Angle_plots_master, true, Phi_tot_All_Int_nFDpCD_integral, "#phi_{tot} of total 3-momentum", "All Int., nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sPhi_tot_nFDpCD, "00_Phi_tot_All_Int_nFDpCD", hPhi_tot_All_Int_nFDpCD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_tot_QEL_nFDpCD, norm_Angle_plots_master, true, Phi_tot_QEL_nFDpCD_integral, "#phi_{tot} of total 3-momentum", "QEL Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_tot_nFDpCD, "01_Phi_tot_QEL_Only_nFDpCD", hPhi_tot_QEL_nFDpCD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_tot_MEC_nFDpCD, norm_Angle_plots_master, true, Phi_tot_MEC_nFDpCD_integral, "#phi_{tot} of total 3-momentum", "MEC Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_tot_nFDpCD, "02_Phi_tot_MEC_Only_nFDpCD", hPhi_tot_MEC_nFDpCD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_tot_RES_nFDpCD, norm_Angle_plots_master, true, Phi_tot_RES_nFDpCD_integral, "#phi_{tot} of total 3-momentum", "RES Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_tot_nFDpCD, "03_Phi_tot_RES_Only_nFDpCD", hPhi_tot_RES_nFDpCD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_tot_DIS_nFDpCD, norm_Angle_plots_master, true, Phi_tot_DIS_nFDpCD_integral, "#phi_{tot} of total 3-momentum", "DIS Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sPhi_tot_nFDpCD, "04_Phi_tot_DIS_Only_nFDpCD", hPhi_tot_DIS_nFDpCD_Dir, "", kBlue, true, true, true);

        histPlotter2D(c1, hPhi_tot_VS_P_tot_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_tot_VS_P_tot_nFDpCD_Dir, "Phi_tot_VS_P_tot_nFDpCD");
        histPlotter2D(c1, hPhi_tot_VS_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_tot_VS_W_nFDpCD_Dir, "Phi_tot_VS_W_nFDpCD");

        //  Theta_tot vs. Phi_tot plots -----------------------------------------------------------------------------------------------------------------------------------------

        // Theta_tot vs. Phi_tot plots (nFDpCD, FD)
        histPlotter2D(c1, hTheta_tot_VS_Phi_tot_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_tot_VS_Phi_tot_nFDpCD_Dir,
                      "Theta_tot_VS_Phi_tot_All_Int_nFDpCD");

        //  Theta_rel plots -----------------------------------------------------------------------------------------------------------------------------------------------------

        // Theta_rel plots (nFDpCD, CD)
        double Theta_rel_All_Int_nFDpCD_integral = hTheta_rel_All_Int_nFDpCD->Integral();
        double Theta_rel_QEL_nFDpCD_integral = hTheta_rel_QEL_nFDpCD->Integral();
        double Theta_rel_MEC_nFDpCD_integral = hTheta_rel_MEC_nFDpCD->Integral();
        double Theta_rel_RES_nFDpCD_integral = hTheta_rel_RES_nFDpCD->Integral();
        double Theta_rel_DIS_nFDpCD_integral = hTheta_rel_DIS_nFDpCD->Integral();

        histPlotter1D(c1, hTheta_rel_All_Int_nFDpCD, norm_Angle_plots_master, true, Theta_rel_All_Int_nFDpCD_integral, "#theta_{rel} of relative 3-momentum", "All Int., nFDpCD", 0.06,
                      0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_rel_nFDpCD, "00_Theta_rel_All_Int_nFDpCD", hTheta_rel_All_Int_nFDpCD_Dir, "", kBlue, true, true, true,
                      true);
        histPlotter1D(c1, hTheta_rel_QEL_nFDpCD, norm_Angle_plots_master, true, Theta_rel_QEL_nFDpCD_integral, "#theta_{rel} of relative 3-momentum", "QEL Only, nFDpCD", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_rel_nFDpCD, "01_Theta_rel_QEL_Only_nFDpCD", hTheta_rel_QEL_nFDpCD_Dir, "", kBlue, true, true, true, true);
        histPlotter1D(c1, hTheta_rel_MEC_nFDpCD, norm_Angle_plots_master, true, Theta_rel_MEC_nFDpCD_integral, "#theta_{rel} of relative 3-momentum", "MEC Only, nFDpCD", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_rel_nFDpCD, "02_Theta_rel_MEC_Only_nFDpCD", hTheta_rel_MEC_nFDpCD_Dir, "", kBlue, true, true, true, true);
        histPlotter1D(c1, hTheta_rel_RES_nFDpCD, norm_Angle_plots_master, true, Theta_rel_RES_nFDpCD_integral, "#theta_{rel} of relative 3-momentum", "RES Only, nFDpCD", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_rel_nFDpCD, "03_Theta_rel_RES_Only_nFDpCD", hTheta_rel_RES_nFDpCD_Dir, "", kBlue, true, true, true, true);
        histPlotter1D(c1, hTheta_rel_DIS_nFDpCD, norm_Angle_plots_master, true, Theta_rel_DIS_nFDpCD_integral, "#theta_{rel} of relative 3-momentum", "DIS Only, nFDpCD", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_rel_nFDpCD, "04_Theta_rel_DIS_Only_nFDpCD", hTheta_rel_DIS_nFDpCD_Dir, "", kBlue, true, true, true, true);

        stackPlotter1D(c1, sTheta_rel_nFDpCD, norm_Angle_plots_master, "#theta_{rel} of relative 3-momentum", "nFDpCD", plots, Histogram_OutPDF, hTheta_rel_All_Int_nFDpCD,
                       hTheta_rel_QEL_nFDpCD, hTheta_rel_MEC_nFDpCD, hTheta_rel_RES_nFDpCD, hTheta_rel_DIS_nFDpCD, "05_Theta_rel_Stack_nFDpCD", hTheta_rel_All_Int_nFDpCD_Dir, "");

        histPlotter2D(c1, hTheta_rel_VS_P_rel_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_rel_VS_P_rel_nFDpCD_Dir, "Theta_rel_VS_P_tot_nFDpCD");
        histPlotter2D(c1, hTheta_rel_VS_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_rel_VS_W_nFDpCD_Dir, "Theta_rel_VS_W_nFDpCD");

        //  Phi_rel plots -------------------------------------------------------------------------------------------------------------------------------------------------------

        // Phi_rel plots (nFDpCD, FD)
        double Phi_rel_All_Int_nFDpCD_integral = hPhi_rel_All_Int_nFDpCD->Integral();
        double Phi_rel_QEL_nFDpCD_integral = hPhi_rel_QEL_nFDpCD->Integral();
        double Phi_rel_MEC_nFDpCD_integral = hPhi_rel_MEC_nFDpCD->Integral();
        double Phi_rel_RES_nFDpCD_integral = hPhi_rel_RES_nFDpCD->Integral();
        double Phi_rel_DIS_nFDpCD_integral = hPhi_rel_DIS_nFDpCD->Integral();

        histPlotter1D(c1, hPhi_rel_All_Int_nFDpCD, norm_Angle_plots_master, true, Phi_rel_All_Int_nFDpCD_integral, "#phi_{rel} of relative 3-momentum", "All Int., nFDpCD", 0.06, 0.0425,
                      0.0425, plots, Histogram_OutPDF, 2, false, true, sPhi_rel_nFDpCD, "00_Phi_rel_All_Int_nFDpCD", hPhi_rel_All_Int_nFDpCD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_rel_QEL_nFDpCD, norm_Angle_plots_master, true, Phi_rel_QEL_nFDpCD_integral, "#phi_{rel} of relative 3-momentum", "QEL Only, nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sPhi_rel_nFDpCD, "01_Phi_rel_QEL_Only_nFDpCD", hPhi_rel_QEL_nFDpCD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_rel_MEC_nFDpCD, norm_Angle_plots_master, true, Phi_rel_MEC_nFDpCD_integral, "#phi_{rel} of relative 3-momentum", "MEC Only, nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sPhi_rel_nFDpCD, "02_Phi_rel_MEC_Only_nFDpCD", hPhi_rel_MEC_nFDpCD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_rel_RES_nFDpCD, norm_Angle_plots_master, true, Phi_rel_RES_nFDpCD_integral, "#phi_{rel} of relative 3-momentum", "RES Only, nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sPhi_rel_nFDpCD, "03_Phi_rel_RES_Only_nFDpCD", hPhi_rel_RES_nFDpCD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hPhi_rel_DIS_nFDpCD, norm_Angle_plots_master, true, Phi_rel_DIS_nFDpCD_integral, "#phi_{rel} of relative 3-momentum", "DIS Only, nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sPhi_rel_nFDpCD, "04_Phi_rel_DIS_Only_nFDpCD", hPhi_rel_DIS_nFDpCD_Dir, "", kBlue, true, true, true);

        histPlotter2D(c1, hPhi_rel_VS_P_rel_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_rel_VS_P_rel_nFDpCD_Dir, "Phi_rel_VS_P_tot_nFDpCD");
        histPlotter2D(c1, hPhi_rel_VS_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hPhi_rel_VS_W_nFDpCD_Dir, "Phi_rel_VS_W_nFDpCD");

        //  Theta_rel vs. Phi_rel plots -----------------------------------------------------------------------------------------------------------------------------------------

        // Theta_rel vs. Phi_rel plots (nFDpCD, FD)
        histPlotter2D(c1, hTheta_rel_VS_Phi_rel_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_rel_VS_Phi_rel_nFDpCD_Dir,
                      "Theta_rel_VS_Phi_rel_All_Int_nFDpCD");

        //  Theta_p_e_p_tot (nFDpCD, CD & FD) -----------------------------------------------------------------------------------------------------------------------------------

        // Theta_p_e_p_tot (nFDpCD, CD & FD)
        double Theta_p_e_p_tot_nFDpCD_integral = hTheta_p_e_p_tot_nFDpCD->Integral();

        histPlotter1D(c1, hTheta_p_e_p_tot_nFDpCD, norm_Angle_plots_master, true, Theta_p_e_p_tot_nFDpCD_integral,
                      "#theta_{#vec{P}_{e},#vec{P}_{tot}} - Opening Angle Between #vec{P}_{e} and #vec{P}_{tot}=#vec{P}_{nFD}+#vec{P}_{pCD}", "All Int., nFDpCD", 0.06, 0.0425, .0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_p_e_p_tot_nFDpCD, "01a_Theta_p_e_p_tot_All_Int_nFDpCD", hTheta_p_e_p_tot_nFDpCD_Dir, "", kBlue, true, true, true, false);

        // Theta_p_e_p_tot vs. W (nFDpCD, CD & FD) --------------------------------------------------------------------------------------------------------------------------------

        // Theta_p_e_p_tot vs. W (nFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_p_e_p_tot_vs_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_p_e_p_tot_vs_W_nFDpCD_Dir,
                      "01b_Theta_p_e_p_tot_vs_W_nFDpCD");

        //  Theta_q_p (nFDpCD, CD & FD)
        //  ----------------------------------------------------------------------------------------------------------------------------------------------

        // Theta_q_p_tot (nFDpCD, CD & FD)
        double Theta_q_p_tot_nFDpCD_integral = hTheta_q_p_tot_nFDpCD->Integral();

        histPlotter1D(c1, hTheta_q_p_tot_nFDpCD, norm_Angle_plots_master, true, Theta_q_p_tot_nFDpCD_integral,
                      "#theta_{#vec{q},#vec{P}_{tot}} - Opening Angle Between #vec{q} and #vec{P}_{tot}=#vec{P}_{nFD}+#vec{P}_{pCD}", "All Int., nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_q_p_L_R_nFDpCD, "02a_Theta_q_p_tot_All_Int_nFDpCD", hTheta_q_p_tot_nFDpCD_Dir, "", kBlue, true, true, true, false);

        // hTheta_q_p_tot vs. W (nFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_q_p_tot_vs_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_p_tot_vs_W_nFDpCD_Dir, "02b_Theta_q_p_tot_vs_W_nFDpCD");

        // hTheta_q_p_L_vs_W_nFDpCD (nFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_q_p_L_vs_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_p_L_vs_W_nFDpCD_Dir, "02c_Theta_q_p_L_vs_W_nFDpCD");

        // hTheta_q_p_R_vs_W_nFDpCD (nFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_q_p_R_vs_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_p_R_vs_W_nFDpCD_Dir, "02d_Theta_q_p_R_vs_W_nFDpCD");

        // hTheta_q_nFD_vs_W_nFDpCD (nFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_q_nFD_vs_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_nFD_vs_W_nFDpCD_Dir, "02e_Theta_q_nFD_vs_W_nFDpCD");

        // hTheta_q_pCD_vs_W_nFDpCD (nFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_q_pCD_vs_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_pCD_vs_W_nFDpCD_Dir, "02f_Theta_q_pCD_vs_W_nFDpCD");

        // Theta_P_nL_minus_q_nR (nFDpCD, CD & FD)
        double Theta_P_nL_minus_q_nR_integral = hTheta_P_nL_minus_q_nR_nFDpCD->Integral();

        histPlotter1D(c1, hTheta_P_nL_minus_q_nR_nFDpCD, norm_Angle_plots_master, true, Theta_P_nL_minus_q_nR_integral,
                      "#theta_{#vec{P}_{nL}-#vec{q},#vec{P}_{nR}} - Opening Angle Between #vec{P}_{nL}-#vec{q} and #vec{P}_{nR}", "All Int., nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sTheta_q_p_L_R_nFDpCD, "06a_Theta_P_nL_minus_q_nR_nFDpCD", hTheta_P_nL_minus_q_nR_nFDpCD_Dir, "", kBlue, true, true, true, false);
        histPlotter2D(c1, hTheta_P_nL_minus_q_nR_vs_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_P_nL_minus_q_nR_vs_W_nFDpCD_Dir,
                      "06b_hTheta_P_nL_minus_q_nR_vs_W_nFDpCD");

        // Theta_q_p_L and Theta_q_p_R (nFDpCD, CD & FD)
        double Theta_q_p_L_nFDpCD_integral = hTheta_q_p_L_nFDpCD->Integral(), Theta_q_p_R_nFDpCD_integral = hTheta_q_p_R_nFDpCD->Integral();

        histPlotter1D(c1, hTheta_q_p_L_nFDpCD, norm_Angle_plots_master, true, Theta_q_p_L_nFDpCD_integral,
                      "#theta_{#vec{q},#vec{P}_{nL}} - Opening Angle Between #vec{q} and Leading Nucleon #vec{P}_{nL}", "All Int., nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sTheta_q_p_L_R_nFDpCD, "03a_Theta_q_nL_All_Int_nFDpCD", hTheta_q_p_L_nFDpCD_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hTheta_q_p_R_nFDpCD, norm_Angle_plots_master, true, Theta_q_p_R_nFDpCD_integral,
                      "#theta_{#vec{q},#vec{P}_{nR}} - Opening Angle Between #vec{q} and Recoil Nucleon #vec{P}_{nR}", "All Int., nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sTheta_q_p_L_R_nFDpCD, "03b_Theta_q_nR_All_Int_nFDpCD", hTheta_q_p_R_nFDpCD_Dir, "", kBlue, true, true, true, false);

        // Theta_q_nFD and Theta_q_pCD (nFDpCD, CD & FD)
        double Theta_q_nFD_nFDpCD_integral = hTheta_q_nFD_nFDpCD->Integral(), Theta_q_pCD_nFDpCD_integral = hTheta_q_pCD_nFDpCD->Integral();

        histPlotter1D(c1, hTheta_q_nFD_nFDpCD, norm_Angle_plots_master, true, Theta_q_nFD_nFDpCD_integral,
                      "#theta_{#vec{q},#vec{P}_{nFD}} - Opening Angle Between #vec{q} and FD Neutron #vec{P}_{nFD}", "All Int., nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sTheta_q_p_L_R_nFDpCD, "03c_Theta_q_nFD_All_Int_nFDpCD", hTheta_q_nFD_nFDpCD_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hTheta_q_pCD_nFDpCD, norm_Angle_plots_master, true, Theta_q_pCD_nFDpCD_integral,
                      "#theta_{#vec{q},#vec{P}_{pCD}} - Opening Angle Between #vec{q} and CD Proton #vec{P}_{pCD}", "All Int., nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sTheta_q_p_L_R_nFDpCD, "03d_Theta_q_pCD_All_Int_nFDpCD", hTheta_q_pCD_nFDpCD_Dir, "", kBlue, true, true, true, false);

        //  Theta_q_p_L vs |P_L|/|q| (nFDpCD, CD & FD)
        //  -------------------------------------------------------------------------------------------------------------------------------

        // Theta_q_p_L vs |P_L|/|q| (nFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_q_p_L_vs_p_L_q_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_p_L_vs_p_L_q_nFDpCD_Dir,
                      "04a_Theta_q_p_L_vs_p_L_q_nFDpCD");

        // Theta_q_p vs Theta_q_p (nFDpCD, CD & FD) -------------------------------------------------------------------------------------------------------------------------

        // Theta_q_p vs Theta_q_p (nFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_q_p_L_vs_Theta_q_p_R_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_p_L_vs_Theta_q_p_R_nFDpCD_Dir,
                      "04b_Theta_q_p_L_vs_Theta_q_p_R_nFDpCD");

        histPlotter2D(c1, hTheta_q_nFD_vs_Theta_q_pCD_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_q_nFD_vs_Theta_q_pCD_nFDpCD_Dir,
                      "04c_Theta_q_nFD_vs_Theta_q_pCD_nFDpCD");

        //  Theta_nFD_pCD (nFDpCD, CD & FD)
        //  --------------------------------------------------------------------------------------------------------------------------------------------

        // Theta_nFD_pCD (nFDpCD, CD & FD)
        double Theta_nFD_pCD_nFDpCD_integral = hTheta_nFD_pCD_All_Int_nFDpCD->Integral();

        histPlotter1D(c1, hTheta_nFD_pCD_All_Int_nFDpCD, norm_Angle_plots_master, true, Theta_nFD_pCD_nFDpCD_integral, "#theta_{nFD,pCD} - Opening Angle Between Nucleons",
                      "All Int., nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_nFD_pCD_nFDpCD, "00_Theta_nFD_pCD_All_Int_nFDpCD",
                      hTheta_nFD_pCD_All_Int_nFDpCD_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hTheta_nFD_pCD_QEL_nFDpCD, norm_Angle_plots_master, true, Theta_nFD_pCD_nFDpCD_integral, "#theta_{nFD,pCD} - Opening Angle Between Nucleons", "QEL only, nFDpCD",
                      0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_nFD_pCD_nFDpCD, "01_Theta_nFD_pCD_QEL_only_nFDpCD", hTheta_nFD_pCD_QEL_nFDpCD_Dir, "", kBlue,
                      true, true, true, false);
        histPlotter1D(c1, hTheta_nFD_pCD_MEC_nFDpCD, norm_Angle_plots_master, true, Theta_nFD_pCD_nFDpCD_integral, "#theta_{nFD,pCD} - Opening Angle Between Nucleons", "MEC only, nFDpCD",
                      0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_nFD_pCD_nFDpCD, "02_Theta_nFD_pCD_MEC_only_nFDpCD", hTheta_nFD_pCD_MEC_nFDpCD_Dir, "", kBlue,
                      true, true, true, false);
        histPlotter1D(c1, hTheta_nFD_pCD_RES_nFDpCD, norm_Angle_plots_master, true, Theta_nFD_pCD_nFDpCD_integral, "#theta_{nFD,pCD} - Opening Angle Between Nucleons", "RES only, nFDpCD",
                      0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_nFD_pCD_nFDpCD, "03_Theta_nFD_pCD_RES_only_nFDpCD", hTheta_nFD_pCD_RES_nFDpCD_Dir, "", kBlue,
                      true, true, true, false);
        histPlotter1D(c1, hTheta_nFD_pCD_DIS_nFDpCD, norm_Angle_plots_master, true, Theta_nFD_pCD_nFDpCD_integral, "#theta_{nFD,pCD} - Opening Angle Between Nucleons", "DIS only, nFDpCD",
                      0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_nFD_pCD_nFDpCD, "04_Theta_nFD_pCD_DIS_only_nFDpCD", hTheta_nFD_pCD_DIS_nFDpCD_Dir, "", kBlue,
                      true, true, true, false);

        stackPlotter1D(c1, sTheta_nFD_pCD_nFDpCD, norm_E_e_plots, "#theta_{nFD,pCD} - Opening Angle Between Nucleons", "nFDpCD", plots, Histogram_OutPDF, hTheta_nFD_pCD_All_Int_nFDpCD,
                       hTheta_nFD_pCD_QEL_nFDpCD, hTheta_nFD_pCD_MEC_nFDpCD, hTheta_nFD_pCD_RES_nFDpCD, hTheta_nFD_pCD_DIS_nFDpCD, "05a_Theta_nFD_pCD_Stack", sTheta_nFD_pCD_nFDpCD_Dir, "");

        //  hTheta_nFD_pCD vs. W_nFDpCD (nFDpCD, CD & FD)
        //  -----------------------------------------------------------------------------------------------------------------------------------

        // hTheta_nFD_pCD_vs_W_nFDpCD (nFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_nFD_pCD_vs_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_nFD_pCD_vs_W_nFDpCD_Dir, "05b_Theta_nFD_pCD_vs_W_nFDpCD");

        //  Theta_nFD_vs_theta_pCD for Theta_nFD_pCD < 20 (nFDpCD, CD & FD)
        //  ----------------------------------------------------------------------------------------------------------

        // Theta_nFD_vs_theta_pCD for Theta_nFD_pCD < 20 (nFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_nFD_vs_theta_pCD_for_Theta_nFD_pCD_20_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false,
                      hTheta_nFD_vs_theta_pCD_for_Theta_nFD_pCD_20_nFDpCD_Dir, "01a_Theta_nFD_vs_theta_pCD_for_Theta_nFD_pCD_20_nFDpCD");

        //  dphi_nFD_pCD for Theta_nFD_pCD < 20 (nFDpCD, CD & FD)
        //  --------------------------------------------------------------------------------------------------------------------

        // dphi_nFD_pCD for Theta_nFD_pCD < 20 (nFDpCD, CD & FD)
        double hdphi_nFD_pCD_for_Theta_nFD_pCD_20_nFDpCD_integral = hdphi_nFD_pCD_for_Theta_nFD_pCD_20_nFDpCD->Integral();
        double hdphi_nFD_pCD_for_Theta_nFD_pCD_20_ZOOMIN_nFDpCD_integral = hdphi_nFD_pCD_for_Theta_nFD_pCD_20_ZOOMIN_nFDpCD->Integral();

        histPlotter1D(c1, hdphi_nFD_pCD_for_Theta_nFD_pCD_20_nFDpCD, norm_Angle_plots_master, true, hdphi_nFD_pCD_for_Theta_nFD_pCD_20_nFDpCD_integral,
                      "#Delta#phi for #theta_{nFD,pCD}<20#circ", "All Int., nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_nFDpCD,
                      "02a_dphi_nFD_pCD_for_Theta_nFD_pCD_20_All_Int_nFDpCD", hdphi_nFD_pCD_for_Theta_nFD_pCD_20_nFDpCD_Dir, "", kBlue, true, true, true, false);
        histPlotter1D(c1, hdphi_nFD_pCD_for_Theta_nFD_pCD_20_ZOOMIN_nFDpCD, norm_Angle_plots_master, true, hdphi_nFD_pCD_for_Theta_nFD_pCD_20_ZOOMIN_nFDpCD_integral,
                      "#Delta#phi for #theta_{nFD,pCD}<20#circ - ZOOMIN", "All Int., nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_nFDpCD,
                      "02c_dphi_nFD_pCD_for_Theta_nFD_pCD_20_ZOOMIN_All_Int_nFDpCD", hdphi_nFD_pCD_for_Theta_nFD_pCD_20_ZOOMIN_nFDpCD_Dir, "", kBlue, true, true, true, false);

        // Theta_nFD_vs_theta_pCD for every Theta_nFD_pCD (nFDpCD, CD & FD)
        // ---------------------------------------------------------------------------------------------------------

        // Theta_nFD_vs_theta_pCD for every Theta_nFD_pCD (nFDpCD, CD & FD)
        histPlotter2D(c1, hTheta_nFD_vs_theta_pCD_forall_Theta_nFD_pCD_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false,
                      hTheta_nFD_vs_theta_pCD_forall_Theta_nFD_pCD_nFDpCD_Dir, "01b_Theta_nFD_vs_theta_pCD_for_every_Theta_nFD_pCD_nFDpCD");

        // dphi_nFD_pCD for every Theta_nFD_pCD (nFDpCD, CD & FD)
        // -------------------------------------------------------------------------------------------------------------------

        // dphi_nFD_pCD for every Theta_nFD_pCD (CD & FD)
        double hdphi_nFD_pCD_for_all_Theta_nFD_pCD_nFDpCD_integral = hdphi_nFD_pCD_for_all_Theta_nFD_pCD_nFDpCD->Integral();

        histPlotter1D(c1, hdphi_nFD_pCD_for_all_Theta_nFD_pCD_nFDpCD, norm_Angle_plots_master, true, hdphi_nFD_pCD_for_all_Theta_nFD_pCD_nFDpCD_integral,
                      "#Delta#phi for every #theta_{nFD,pCD}", "All Int., nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_nFDpCD,
                      "02b_dphi_nFD_pCD_for_every_Theta_nFD_pCD_All_Int_nFDpCD", hdphi_nFD_pCD_for_Theta_nFD_pCD_20_nFDpCD_Dir, "", kBlue, true, true, true, false);

        double hdphi_nFD_pCD_for_all_Theta_nFD_pCD_ZOOMIN_nFDpCD_integral = hdphi_nFD_pCD_for_all_Theta_nFD_pCD_ZOOMIN_nFDpCD->Integral();

        histPlotter1D(c1, hdphi_nFD_pCD_for_all_Theta_nFD_pCD_ZOOMIN_nFDpCD, norm_Angle_plots_master, true, hdphi_nFD_pCD_for_all_Theta_nFD_pCD_ZOOMIN_nFDpCD_integral,
                      "#Delta#phi for every #theta_{nFD,pCD} - ZOOMIN", "All Int., nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sTheta_q_p_nFDpCD,
                      "02c_dphi_nFD_pCD_for_every_Theta_nFD_pCD_All_Int_ZOOMIN_nFDpCD", hdphi_nFD_pCD_for_all_Theta_nFD_pCD_ZOOMIN_nFDpCD_Dir, "", kBlue, true, true, true, false);

        double hdphi_nFD_pCD_for_small_dTheta_nFDpCD_integral = hdphi_nFD_pCD_for_small_dTheta_nFDpCD->Integral();

        histPlotter1D(c1, hdphi_nFD_pCD_for_small_dTheta_nFDpCD, norm_Angle_plots_master, true, hdphi_nFD_pCD_for_small_dTheta_nFDpCD_integral,
                      "#Delta#phi for small #Delta#theta_{nFD/pCD} = #theta_{nFD/pCD}-40#circ", "All Int., nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sTheta_q_p_nFDpCD, "03a_dphi_nFD_pCD_for_small_dTheta_nFDpCD", hdphi_nFD_pCD_for_small_dTheta_nFDpCD_Dir, "", kBlue, true, true, true, false);

        double hdphi_nFD_pCD_for_small_dTheta_ZOOMIN_nFDpCD_integral = hdphi_nFD_pCD_for_small_dTheta_ZOOMIN_nFDpCD->Integral();

        histPlotter1D(c1, hdphi_nFD_pCD_for_small_dTheta_ZOOMIN_nFDpCD, norm_Angle_plots_master, true, hdphi_nFD_pCD_for_small_dTheta_ZOOMIN_nFDpCD_integral,
                      "#Delta#phi for small #Delta#theta_{nFD/pCD} = #theta_{nFD/pCD}-40#circ - ZOOMIN", "All Int., nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sTheta_q_p_nFDpCD, "03b_dphi_nFD_pCD_for_small_dTheta_ZOOMIN_nFDpCD", hdphi_nFD_pCD_for_small_dTheta_ZOOMIN_nFDpCD_Dir, "", kBlue, true, true, true, false);

        //  Neutron veto plots -------------------------------------------------------------------------------------------------------

        // Neutron veto plots (1e cut)
        hdTheta_n_e_VS_dPhi_n_e_Electrons_BV_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hdTheta_n_p_VS_dPhi_n_p_Protons_BV_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hdTheta_LnFD_e_VS_dPhi_LnFD_e_Electrons_BV_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hdTheta_LnFD_e_VS_dPhi_LnFD_e_Electrons_AV_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hdTheta_LnFD_e_VS_dPhi_LnFD_e_Electrons_Vetoed_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hdTheta_nFD_e_VS_dPhi_nFD_e_Electrons_BV_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hdTheta_nFD_e_VS_dPhi_nFD_e_Electrons_AV_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hdTheta_nFD_e_VS_dPhi_nFD_e_Electrons_Vetoed_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hdTheta_LnFD_p_VS_dPhi_LnFD_p_Protons_BV_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hdTheta_LnFD_p_VS_dPhi_LnFD_p_Protons_AV_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hdTheta_LnFD_p_VS_dPhi_LnFD_p_Protons_Vetoed_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hdTheta_nFD_p_VS_dPhi_nFD_p_Protons_BV_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hdTheta_nFD_p_VS_dPhi_nFD_p_Protons_AV_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hdTheta_nFD_p_VS_dPhi_nFD_p_Protons_Vetoed_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        // Neutron veto plots (1n)
        hdTheta_n_e_VS_dPhi_n_e_Electrons_BV_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hdTheta_n_e_VS_dPhi_n_e_Electrons_AV_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hdTheta_n_e_VS_dPhi_n_e_Electrons_Vetoed_Neutrons_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        //        hdTheta_n_p_VS_dPhi_n_p_Protons_BV_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        // Neutron veto plots (nFDpCD)
        hdTheta_nFD_e_VS_dPhi_nFD_e_Electrons_BV_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hdTheta_nFD_e_VS_dPhi_nFD_e_Electrons_AV_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hdTheta_nFD_e_VS_dPhi_nFD_e_Electrons_Vetoed_Neutrons_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        //  Final state ratios (nFDpCD/pFDpCD) ----------------------------------------------------------------------------------------------------------------------------------

        // Final state ratios (nFDpCD/pFDpCD)
        if (apply_nucleon_cuts) {
            if (FSR_1D_plots) {
                DrawAndSaveFSRatio(SampleName, hTheta_e_All_Int_pFDpCD_FD, hTheta_e_All_Int_pFDpCD_FD_Dir, hTheta_e_All_Int_nFDpCD_FD, plots);
                DrawAndSaveFSRatio(SampleName, hPhi_e_All_Int_pFDpCD_FD, hPhi_e_All_Int_pFDpCD_FD_Dir, hPhi_e_All_Int_nFDpCD_FD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_pFD_All_Int_pFDpCD_FD, hTheta_pFD_All_Int_pFDpCD_FD_Dir, hTheta_nFD_All_Int_nFDpCD_FD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_pCD_All_Int_pFDpCD_CD, hTheta_pCD_All_Int_pFDpCD_CD_Dir, hTheta_pCD_All_Int_nFDpCD_CD, plots);
                DrawAndSaveFSRatio(SampleName, hPhi_pFD_All_Int_pFDpCD_FD, hPhi_pFD_All_Int_pFDpCD_FD_Dir, hPhi_nFD_All_Int_nFDpCD_FD, plots);
                DrawAndSaveFSRatio(SampleName, hPhi_pCD_All_Int_pFDpCD_CD, hPhi_pCD_All_Int_pFDpCD_CD_Dir, hPhi_pCD_All_Int_nFDpCD_CD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_tot_All_Int_pFDpCD, hTheta_tot_All_Int_pFDpCD_Dir, hTheta_tot_All_Int_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hPhi_tot_All_Int_pFDpCD, hPhi_tot_All_Int_pFDpCD_Dir, hPhi_tot_All_Int_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_rel_All_Int_pFDpCD, hTheta_rel_All_Int_pFDpCD_Dir, hTheta_rel_All_Int_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hPhi_rel_All_Int_pFDpCD, hPhi_rel_All_Int_pFDpCD_Dir, hPhi_rel_All_Int_nFDpCD, plots);

                DrawAndSaveFSRatio(SampleName, hTheta_p_e_p_tot_pFDpCD, hTheta_p_e_p_tot_pFDpCD_Dir, hTheta_p_e_p_tot_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_q_p_tot_pFDpCD, hTheta_q_p_tot_pFDpCD_Dir, hTheta_q_p_tot_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_P_pL_minus_q_pR_pFDpCD, hTheta_P_pL_minus_q_pR_pFDpCD_Dir, hTheta_P_nL_minus_q_nR_nFDpCD, plots);

                DrawAndSaveFSRatio(SampleName, hTheta_q_p_L_pFDpCD, hTheta_q_p_L_pFDpCD_Dir, hTheta_q_p_L_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_q_p_R_pFDpCD, hTheta_q_p_R_pFDpCD_Dir, hTheta_q_p_R_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_q_pFD_pFDpCD, hTheta_q_pFD_pFDpCD_Dir, hTheta_q_nFD_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_q_pCD_pFDpCD, hTheta_q_pCD_pFDpCD_Dir, hTheta_q_pCD_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_pFD_pCD_All_Int_pFDpCD, hTheta_pFD_pCD_All_Int_pFDpCD_Dir, hTheta_nFD_pCD_All_Int_nFDpCD, plots);
            }

            if (FSR_2D_plots && SampleName != "C12_simulation_6GeV_T5_first_10") {
                DrawAndSaveFSRatio(SampleName, hTheta_e_VS_P_e_pFDpCD_FD, hTheta_e_VS_P_e_pFDpCD_FD_Dir, hTheta_e_VS_P_e_nFDpCD_FD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_e_VS_W_pFDpCD_FD, hTheta_e_VS_W_pFDpCD_FD_Dir, hTheta_e_VS_W_nFDpCD_FD, plots);
                DrawAndSaveFSRatio(SampleName, hPhi_e_VS_P_e_pFDpCD_FD, hPhi_e_VS_P_e_pFDpCD_FD_Dir, hPhi_e_VS_P_e_nFDpCD_FD, plots);
                DrawAndSaveFSRatio(SampleName, hPhi_e_VS_W_pFDpCD_FD, hPhi_e_VS_W_pFDpCD_FD_Dir, hPhi_e_VS_W_nFDpCD_FD, plots);

                DrawAndSaveFSRatio(SampleName, hTheta_pFD_VS_P_pFD_pFDpCD_FD, hTheta_pFD_VS_P_pFD_pFDpCD_FD_Dir, hTheta_nFD_VS_P_nFD_nFDpCD_FD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_pFD_VS_W_pFDpCD_FD, hTheta_pFD_VS_W_pFDpCD_FD_Dir, hTheta_nFD_VS_W_nFDpCD_FD, plots);
                DrawAndSaveFSRatio(SampleName, hPhi_pFD_VS_P_pFD_pFDpCD_FD, hPhi_pFD_VS_P_pFD_pFDpCD_FD_Dir, hPhi_nFD_VS_P_nFD_nFDpCD_FD, plots);
                DrawAndSaveFSRatio(SampleName, hPhi_pFD_VS_W_pFDpCD_FD, hPhi_pFD_VS_W_pFDpCD_FD_Dir, hPhi_nFD_VS_W_nFDpCD_FD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_pCD_VS_P_pCD_pFDpCD_CD, hTheta_pCD_VS_P_pCD_pFDpCD_CD_Dir, hTheta_pCD_VS_P_pCD_nFDpCD_CD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_pCD_VS_W_pFDpCD_CD, hTheta_pCD_VS_W_pFDpCD_CD_Dir, hTheta_pCD_VS_W_nFDpCD_CD, plots);
                DrawAndSaveFSRatio(SampleName, hPhi_pCD_VS_P_pCD_pFDpCD_CD, hPhi_pCD_VS_P_pCD_pFDpCD_CD_Dir, hPhi_pCD_VS_P_pCD_nFDpCD_CD, plots);
                DrawAndSaveFSRatio(SampleName, hPhi_pCD_VS_W_pFDpCD_CD, hPhi_pCD_VS_W_pFDpCD_CD_Dir, hPhi_pCD_VS_W_nFDpCD_CD, plots);

                DrawAndSaveFSRatio(SampleName, hTheta_e_VS_Phi_e_pFDpCD_FD, hTheta_e_VS_Phi_e_pFDpCD_FD_Dir, hTheta_e_VS_Phi_e_nFDpCD_FD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_p_e_p_tot_vs_W_pFDpCD, hTheta_p_e_p_tot_vs_W_pFDpCD_Dir, hTheta_p_e_p_tot_vs_W_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_q_p_tot_vs_W_pFDpCD, hTheta_q_p_tot_vs_W_pFDpCD_Dir, hTheta_q_p_tot_vs_W_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_q_p_L_vs_W_pFDpCD, hTheta_q_p_L_vs_W_pFDpCD_Dir, hTheta_q_p_L_vs_W_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_q_p_R_vs_W_pFDpCD, hTheta_q_p_R_vs_W_pFDpCD_Dir, hTheta_q_p_R_vs_W_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_q_pFD_vs_W_pFDpCD, hTheta_q_pFD_vs_W_pFDpCD_Dir, hTheta_q_nFD_vs_W_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_q_pCD_vs_W_pFDpCD, hTheta_q_pCD_vs_W_pFDpCD_Dir, hTheta_q_pCD_vs_W_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_q_p_L_vs_p_L_q_pFDpCD, hTheta_q_p_L_vs_p_L_q_pFDpCD_Dir, hTheta_q_p_L_vs_p_L_q_nFDpCD, plots);

                // TODO: fix these two (no axis & title!):
                DrawAndSaveFSRatio(SampleName, hTheta_q_p_L_vs_Theta_q_p_R_pFDpCD, hTheta_q_p_L_vs_Theta_q_p_R_pFDpCD_Dir, hTheta_q_p_L_vs_Theta_q_p_R_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hTheta_q_pFD_vs_Theta_q_pCD_pFDpCD, hTheta_q_pFD_vs_Theta_q_pCD_pFDpCD_Dir, hTheta_q_nFD_vs_Theta_q_pCD_nFDpCD, plots);

                DrawAndSaveFSRatio(SampleName, hTheta_pFD_pCD_vs_W_pFDpCD, hTheta_pFD_pCD_vs_W_pFDpCD_Dir, hTheta_nFD_pCD_vs_W_nFDpCD, plots);
            }
        }

        CanvasPDF->cd();
        CanvasPDF->Print(Form("%s]", Histogram_OutPDF));  // Close the PDF file
        c1->cd();
    } else {
        cout << "\033[33m\n\nAngle plots are disabled by user.\n\n\033[0m";
    }

    // ======================================================================================================================================================================
    // Momentum transfer histograms
    // ======================================================================================================================================================================

    // Momentum transfer histograms
    if (Momentum_transfer_plots) {
        cout << "\033[33m\n\nPlotting Momentum transfer histograms...\n\n\033[0m";

        //  Momentum transfer plots (FD only)
        //  --------------------------------------------------------------------------------------------------------------------------------------------------

        // Momentum transfer plots (no #(e) cut, FD)

        // Q2 plots (no #(e) cut, FD)
        double Q2_All_e_integral = hQ2_All_e->Integral();

        histPlotter1D(c1, hQ2_All_e, norm_Momentum_transfer_plots, true, Q2_All_e_integral, "Q^{2} Histogram", "no #(e) cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sQ2_All_e, "01_Q2_All_e", hQ2_All_e_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_QEL_All_e, norm_Momentum_transfer_plots, true, Q2_All_e_integral, "Q^{2} Histogram", "QE Only, no #(e) cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sQ2_All_e, "01a_Q2_QEL_All_e", hQ2_All_e_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_MEC_All_e, norm_Momentum_transfer_plots, true, Q2_All_e_integral, "Q^{2} Histogram", "MEC Only, no #(e) cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sQ2_All_e, "01b_Q2_MEC_All_e", hQ2_All_e_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_RES_All_e, norm_Momentum_transfer_plots, true, Q2_All_e_integral, "Q^{2} Histogram", "RES Only, no #(e) cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sQ2_All_e, "01c_Q2_RES_All_e", hQ2_All_e_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_DIS_All_e, norm_Momentum_transfer_plots, true, Q2_All_e_integral, "Q^{2} Histogram", "DIS Only, no #(e) cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sQ2_All_e, "01d_Q2_DIS_All_e", hQ2_All_e_Dir, "FD", kBlue, true, true, true);

        stackPlotter1D(c1, sQ2_All_e, norm_Momentum_transfer_plots, "Q^{2} Histogram", "no #(e) cut", plots, Histogram_OutPDF, hQ2_All_e, hQ2_QEL_All_e, hQ2_MEC_All_e, hQ2_RES_All_e,
                       hQ2_DIS_All_e, "01e_Q2_All_e_Stack", hQ2_All_e_Dir, "");

        // q_3v plots (no #(e) cut, FD)
        double q_3v_All_e_integral = hq_3v_All_e->Integral();

        histPlotter1D(c1, hq_3v_All_e, norm_Momentum_transfer_plots, true, q_3v_All_e_integral, "q = |#font[62]{q}|", "no #(e) cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sq_3v_All_e, "02_q_3v_All_e", hq_3v_All_e_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_QEL_All_e, norm_Momentum_transfer_plots, true, q_3v_All_e_integral, "q = |#font[62]{q}|", "QE Only, no #(e) cut", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sq_3v_All_e, "02a_q_3v_QEL_All_e", hq_3v_All_e_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_MEC_All_e, norm_Momentum_transfer_plots, true, q_3v_All_e_integral, "q = |#font[62]{q}|", "MEC Only, no #(e) cut", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sq_3v_All_e, "02b_q_3v_MEC_All_e", hq_3v_All_e_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_RES_All_e, norm_Momentum_transfer_plots, true, q_3v_All_e_integral, "q = |#font[62]{q}|", "RES Only, no #(e) cut", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sq_3v_All_e, "02c_q_3v_RES_All_e", hq_3v_All_e_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_DIS_All_e, norm_Momentum_transfer_plots, true, q_3v_All_e_integral, "q = |#font[62]{q}|", "DIS Only, no #(e) cut", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sq_3v_All_e, "02d_q_3v_DIS_All_e", hq_3v_All_e_Dir, "FD", kBlue, true, true, true);

        stackPlotter1D(c1, sq_3v_All_e, norm_Momentum_transfer_plots, "q = |#font[62]{q}|", "no #(e) cut", plots, Histogram_OutPDF, hq_3v_All_e, hq_3v_QEL_All_e, hq_3v_MEC_All_e,
                       hq_3v_RES_All_e, hq_3v_DIS_All_e, "02e_q_3v_All_e_Stack", hq_3v_All_e_Dir, "");

        // Momentum transfer plots (1e cut, FD)

        // Q2 plots (1e cut, FD)
        double Q2_1e_cut_integral = hQ2_1e_cut->Integral();

        histPlotter1D(c1, hQ2_1e_cut, norm_Momentum_transfer_plots, true, Q2_1e_cut_integral, "Q^{2} Histogram", "1e cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sQ2_1e_cut, "01_Q2_1e_cut", hQ2_1e_cut_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_QEL_1e_cut, norm_Momentum_transfer_plots, true, Q2_1e_cut_integral, "Q^{2} Histogram", "QE Only, 1e cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sQ2_1e_cut, "01a_Q2_QEL_1e_cut", hQ2_1e_cut_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_MEC_1e_cut, norm_Momentum_transfer_plots, true, Q2_1e_cut_integral, "Q^{2} Histogram", "MEC Only, 1e cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sQ2_1e_cut, "01b_Q2_MEC_1e_cut", hQ2_1e_cut_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_RES_1e_cut, norm_Momentum_transfer_plots, true, Q2_1e_cut_integral, "Q^{2} Histogram", "RES Only, 1e cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sQ2_1e_cut, "01c_Q2_RES_1e_cut", hQ2_1e_cut_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_DIS_1e_cut, norm_Momentum_transfer_plots, true, Q2_1e_cut_integral, "Q^{2} Histogram", "DIS Only, 1e cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sQ2_1e_cut, "01d_Q2_DIS_1e_cut", hQ2_1e_cut_Dir, "FD", kBlue, true, true, true);

        stackPlotter1D(c1, sQ2_1e_cut, norm_Momentum_transfer_plots, "Q^{2} Histogram", "1e cut", plots, Histogram_OutPDF, hQ2_1e_cut, hQ2_QEL_1e_cut, hQ2_MEC_1e_cut, hQ2_RES_1e_cut,
                       hQ2_DIS_1e_cut, "01e_Q2_1e_cut_Stack", hQ2_1e_cut_Dir, "");

        // q_3v plots (1e cut, FD)
        double q_3v_1e_cut_integral = hq_3v_1e_cut->Integral();

        histPlotter1D(c1, hq_3v_1e_cut, norm_Momentum_transfer_plots, true, q_3v_1e_cut_integral, "q = |#font[62]{q}|", "1e cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sq_3v_1e_cut, "02_q_3v_1e_cut", hq_3v_1e_cut_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_QEL_1e_cut, norm_Momentum_transfer_plots, true, q_3v_1e_cut_integral, "q = |#font[62]{q}|", "QE Only, 1e cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF,
                      2, false, true, sq_3v_1e_cut, "02a_q_3v_QEL_1e_cut", hq_3v_1e_cut_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_MEC_1e_cut, norm_Momentum_transfer_plots, true, q_3v_1e_cut_integral, "q = |#font[62]{q}|", "MEC Only, 1e cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF,
                      2, false, true, sq_3v_1e_cut, "02b_q_3v_MEC_1e_cut", hq_3v_1e_cut_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_RES_1e_cut, norm_Momentum_transfer_plots, true, q_3v_1e_cut_integral, "q = |#font[62]{q}|", "RES Only, 1e cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF,
                      2, false, true, sq_3v_1e_cut, "02c_q_3v_RES_1e_cut", hq_3v_1e_cut_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_DIS_1e_cut, norm_Momentum_transfer_plots, true, q_3v_1e_cut_integral, "q = |#font[62]{q}|", "DIS Only, 1e cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF,
                      2, false, true, sq_3v_1e_cut, "02d_q_3v_DIS_1e_cut", hq_3v_1e_cut_Dir, "FD", kBlue, true, true, true);

        stackPlotter1D(c1, sq_3v_1e_cut, norm_Momentum_transfer_plots, "q = |#font[62]{q}|", "1e cut", plots, Histogram_OutPDF, hq_3v_1e_cut, hq_3v_QEL_1e_cut, hq_3v_MEC_1e_cut,
                       hq_3v_RES_1e_cut, hq_3v_DIS_1e_cut, "02e_q_3v_1e_cut_Stack", hq_3v_1e_cut_Dir, "");

        // Q2 vs. W plots (1e cut, FD)
        histPlotter2D(c1, hQ2_VS_W_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_1e_cut_Dir, "03_Q2_VS_W_1e_cut");
        histPlotter2D(c1, hQ2_VS_W_QEL_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_1e_cut_Dir, "03a_Q2_VS_W_QEL_1e_cut");
        histPlotter2D(c1, hQ2_VS_W_MEC_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_1e_cut_Dir, "03b_Q2_VS_W_MEC_1e_cut");
        histPlotter2D(c1, hQ2_VS_W_RES_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_1e_cut_Dir, "03c_Q2_VS_W_RES_1e_cut");
        histPlotter2D(c1, hQ2_VS_W_DIS_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_1e_cut_Dir, "03d_Q2_VS_W_DIS_1e_cut");

        // Q2 vs. q_3v plots (1e cut, FD)
        histPlotter2D(c1, hQ2_VS_q_3v_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_1e_cut_Dir, "04_Q2_VS_q_3v_1e_cut");
        histPlotter2D(c1, hQ2_VS_q_3v_QEL_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_1e_cut_Dir, "04a_Q2_VS_q_3v_QEL_1e_cut");
        histPlotter2D(c1, hQ2_VS_q_3v_MEC_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_1e_cut_Dir, "04b_Q2_VS_q_3v_MEC_1e_cut");
        histPlotter2D(c1, hQ2_VS_q_3v_RES_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_1e_cut_Dir, "04c_Q2_VS_q_3v_RES_1e_cut");
        histPlotter2D(c1, hQ2_VS_q_3v_DIS_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_1e_cut_Dir, "04d_Q2_VS_q_3v_DIS_1e_cut");

        // Q2 vs. omega plots (1e cut, FD)
        histPlotter2D(c1, hQ2_VS_omega_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_1e_cut_Dir, "05_Q2_VS_omega_1e_cut");
        histPlotter2D(c1, hQ2_VS_omega_QEL_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_1e_cut_Dir, "05a_Q2_VS_omega_QEL_1e_cut");
        histPlotter2D(c1, hQ2_VS_omega_MEC_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_1e_cut_Dir, "05b_Q2_VS_omega_MEC_1e_cut");
        histPlotter2D(c1, hQ2_VS_omega_RES_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_1e_cut_Dir, "05c_Q2_VS_omega_RES_1e_cut");
        histPlotter2D(c1, hQ2_VS_omega_DIS_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_1e_cut_Dir, "05d_Q2_VS_omega_DIS_1e_cut");

        // q_3v vs. omega plots (1e cut, FD)
        histPlotter2D(c1, hq_3v_VS_omega_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_1e_cut_Dir, "06_q_3v_VS_omega_1e_cut");
        histPlotter2D(c1, hq_3v_VS_omega_QEL_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_1e_cut_Dir, "06a_q_3v_VS_omega_QEL_1e_cut");
        histPlotter2D(c1, hq_3v_VS_omega_MEC_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_1e_cut_Dir, "06b_q_3v_VS_omega_MEC_1e_cut");
        histPlotter2D(c1, hq_3v_VS_omega_RES_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_1e_cut_Dir, "06c_q_3v_VS_omega_RES_1e_cut");
        histPlotter2D(c1, hq_3v_VS_omega_DIS_1e_cut, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_1e_cut_Dir, "06d_q_3v_VS_omega_DIS_1e_cut");

        // Momentum transfer plots (1p, FD)

        // Q2 plots (1p, FD)
        double Q2_1p_integral = hQ2_1p->Integral();

        histPlotter1D(c1, hQ2_1p, norm_Momentum_transfer_plots, true, Q2_1p_integral, "Q^{2} Histogram", "1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sQ2_1p,
                      "01_Q2_1p", hQ2_1p_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_QEL_1p, norm_Momentum_transfer_plots, true, Q2_1p_integral, "Q^{2} Histogram", "QE Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sQ2_1p, "01a_Q2_QEL_1p", hQ2_1p_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_MEC_1p, norm_Momentum_transfer_plots, true, Q2_1p_integral, "Q^{2} Histogram", "MEC Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sQ2_1p, "01b_Q2_MEC_1p", hQ2_1p_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_RES_1p, norm_Momentum_transfer_plots, true, Q2_1p_integral, "Q^{2} Histogram", "RES Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sQ2_1p, "01c_Q2_RES_1p", hQ2_1p_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_DIS_1p, norm_Momentum_transfer_plots, true, Q2_1p_integral, "Q^{2} Histogram", "DIS Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sQ2_1p, "01d_Q2_DIS_1p", hQ2_1p_Dir, "FD", kBlue, true, true, true);

        stackPlotter1D(c1, sQ2_1p, norm_Momentum_transfer_plots, "Q^{2} Histogram", "1p", plots, Histogram_OutPDF, hQ2_1p, hQ2_QEL_1p, hQ2_MEC_1p, hQ2_RES_1p, hQ2_DIS_1p, "01e_Q2_1p_Stack",
                       hQ2_1p_Dir, "");

        // q_3v plots (1p, FD)
        double q_3v_1p_integral = hq_3v_1p->Integral();

        histPlotter1D(c1, hq_3v_1p, norm_Momentum_transfer_plots, true, q_3v_1p_integral, "q = |#font[62]{q}|", "1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sq_3v_1p,
                      "02_q_3v_1p", hq_3v_1p_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_QEL_1p, norm_Momentum_transfer_plots, true, q_3v_1p_integral, "q = |#font[62]{q}|", "QE Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sq_3v_1p, "02a_q_3v_QEL_1p", hq_3v_1p_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_MEC_1p, norm_Momentum_transfer_plots, true, q_3v_1p_integral, "q = |#font[62]{q}|", "MEC Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sq_3v_1p, "02b_q_3v_MEC_1p", hq_3v_1p_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_RES_1p, norm_Momentum_transfer_plots, true, q_3v_1p_integral, "q = |#font[62]{q}|", "RES Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sq_3v_1p, "02c_q_3v_RES_1p", hq_3v_1p_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_DIS_1p, norm_Momentum_transfer_plots, true, q_3v_1p_integral, "q = |#font[62]{q}|", "DIS Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sq_3v_1p, "02d_q_3v_DIS_1p", hq_3v_1p_Dir, "FD", kBlue, true, true, true);

        stackPlotter1D(c1, sq_3v_1p, norm_Momentum_transfer_plots, "q = |#font[62]{q}|", "1p", plots, Histogram_OutPDF, hq_3v_1p, hq_3v_QEL_1p, hq_3v_MEC_1p, hq_3v_RES_1p, hq_3v_DIS_1p,
                       "02e_q_3v_1p_Stack", hq_3v_1p_Dir, "");

        // Q2 vs. W plots (1p, FD)
        histPlotter2D(c1, hQ2_VS_W_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_1p_Dir, "03_Q2_VS_W_1p");
        histPlotter2D(c1, hQ2_VS_W_QEL_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_1p_Dir, "03a_Q2_VS_W_QEL_1p");
        histPlotter2D(c1, hQ2_VS_W_MEC_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_1p_Dir, "03b_Q2_VS_W_MEC_1p");
        histPlotter2D(c1, hQ2_VS_W_RES_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_1p_Dir, "03c_Q2_VS_W_RES_1p");
        histPlotter2D(c1, hQ2_VS_W_DIS_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_1p_Dir, "03d_Q2_VS_W_DIS_1p");

        // Q2 vs. q_3v plots (1p, FD)
        histPlotter2D(c1, hQ2_VS_q_3v_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_1p_Dir, "04_Q2_VS_q_3v_1p");
        histPlotter2D(c1, hQ2_VS_q_3v_QEL_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_1p_Dir, "04a_Q2_VS_q_3v_QEL_1p");
        histPlotter2D(c1, hQ2_VS_q_3v_MEC_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_1p_Dir, "04b_Q2_VS_q_3v_MEC_1p");
        histPlotter2D(c1, hQ2_VS_q_3v_RES_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_1p_Dir, "04c_Q2_VS_q_3v_RES_1p");
        histPlotter2D(c1, hQ2_VS_q_3v_DIS_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_1p_Dir, "04d_Q2_VS_q_3v_DIS_1p");

        // Q2 vs. omega plots (1p, FD)
        histPlotter2D(c1, hQ2_VS_omega_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_1p_Dir, "05_Q2_VS_omega_1p");
        histPlotter2D(c1, hQ2_VS_omega_QEL_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_1p_Dir, "05a_Q2_VS_omega_QEL_1p");
        histPlotter2D(c1, hQ2_VS_omega_MEC_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_1p_Dir, "05b_Q2_VS_omega_MEC_1p");
        histPlotter2D(c1, hQ2_VS_omega_RES_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_1p_Dir, "05c_Q2_VS_omega_RES_1p");
        histPlotter2D(c1, hQ2_VS_omega_DIS_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_1p_Dir, "05d_Q2_VS_omega_DIS_1p");

        // q_3v vs. omega plots (1p, FD)
        histPlotter2D(c1, hq_3v_VS_omega_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_1p_Dir, "06_q_3v_VS_omega_1p");
        histPlotter2D(c1, hq_3v_VS_omega_QEL_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_1p_Dir, "06a_q_3v_VS_omega_QEL_1p");
        histPlotter2D(c1, hq_3v_VS_omega_MEC_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_1p_Dir, "06b_q_3v_VS_omega_MEC_1p");
        histPlotter2D(c1, hq_3v_VS_omega_RES_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_1p_Dir, "06c_q_3v_VS_omega_RES_1p");
        histPlotter2D(c1, hq_3v_VS_omega_DIS_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_1p_Dir, "06d_q_3v_VS_omega_DIS_1p");

        // Momentum transfer plots (1n, FD)

        // Q2 plots (1n, FD)
        double Q2_1n_integral = hQ2_1n->Integral();

        histPlotter1D(c1, hQ2_1n, norm_Momentum_transfer_plots, true, Q2_1n_integral, "Q^{2} Histogram", "1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sQ2_1n,
                      "01_Q2_1n", hQ2_1n_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_QEL_1n, norm_Momentum_transfer_plots, true, Q2_1n_integral, "Q^{2} Histogram", "QE Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sQ2_1n, "01a_Q2_QEL_1n", hQ2_1n_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_MEC_1n, norm_Momentum_transfer_plots, true, Q2_1n_integral, "Q^{2} Histogram", "MEC Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sQ2_1n, "01b_Q2_MEC_1n", hQ2_1n_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_RES_1n, norm_Momentum_transfer_plots, true, Q2_1n_integral, "Q^{2} Histogram", "RES Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sQ2_1n, "01c_Q2_RES_1n", hQ2_1n_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_DIS_1n, norm_Momentum_transfer_plots, true, Q2_1n_integral, "Q^{2} Histogram", "DIS Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sQ2_1n, "01d_Q2_DIS_1n", hQ2_1n_Dir, "FD", kBlue, true, true, true);

        stackPlotter1D(c1, sQ2_1n, norm_Momentum_transfer_plots, "Q^{2} Histogram", "1n", plots, Histogram_OutPDF, hQ2_1n, hQ2_QEL_1n, hQ2_MEC_1n, hQ2_RES_1n, hQ2_DIS_1n, "01e_Q2_1n_Stack",
                       hQ2_1n_Dir, "");

        // q_3v plots (1n, FD)
        double q_3v_1n_integral = hq_3v_1n->Integral();

        histPlotter1D(c1, hq_3v_1n, norm_Momentum_transfer_plots, true, q_3v_1n_integral, "q = |#font[62]{q}|", "1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sq_3v_1n,
                      "02_q_3v_1n", hq_3v_1n_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_QEL_1n, norm_Momentum_transfer_plots, true, q_3v_1n_integral, "q = |#font[62]{q}|", "QE Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sq_3v_1n, "02a_q_3v_QEL_1n", hq_3v_1n_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_MEC_1n, norm_Momentum_transfer_plots, true, q_3v_1n_integral, "q = |#font[62]{q}|", "MEC Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sq_3v_1n, "02b_q_3v_MEC_1n", hq_3v_1n_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_RES_1n, norm_Momentum_transfer_plots, true, q_3v_1n_integral, "q = |#font[62]{q}|", "RES Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sq_3v_1n, "02c_q_3v_RES_1n", hq_3v_1n_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_DIS_1n, norm_Momentum_transfer_plots, true, q_3v_1n_integral, "q = |#font[62]{q}|", "DIS Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sq_3v_1n, "02d_q_3v_DIS_1n", hq_3v_1n_Dir, "FD", kBlue, true, true, true);

        stackPlotter1D(c1, sq_3v_1n, norm_Momentum_transfer_plots, "q = |#font[62]{q}|", "1n", plots, Histogram_OutPDF, hq_3v_1n, hq_3v_QEL_1n, hq_3v_MEC_1n, hq_3v_RES_1n, hq_3v_DIS_1n,
                       "02e_q_3v_1n_Stack", hq_3v_1n_Dir, "");

        // Q2 vs. W plots (1n, FD)
        histPlotter2D(c1, hQ2_VS_W_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_1n_Dir, "03_Q2_VS_W_1n");
        histPlotter2D(c1, hQ2_VS_W_QEL_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_1n_Dir, "03a_Q2_VS_W_QEL_1n");
        histPlotter2D(c1, hQ2_VS_W_MEC_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_1n_Dir, "03b_Q2_VS_W_MEC_1n");
        histPlotter2D(c1, hQ2_VS_W_RES_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_1n_Dir, "03c_Q2_VS_W_RES_1n");
        histPlotter2D(c1, hQ2_VS_W_DIS_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_1n_Dir, "03d_Q2_VS_W_DIS_1n");

        // Q2 vs. q_3v plots (1n, FD)
        histPlotter2D(c1, hQ2_VS_q_3v_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_1n_Dir, "04_Q2_VS_q_3v_1n");
        histPlotter2D(c1, hQ2_VS_q_3v_QEL_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_1n_Dir, "04a_Q2_VS_q_3v_QEL_1n");
        histPlotter2D(c1, hQ2_VS_q_3v_MEC_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_1n_Dir, "04b_Q2_VS_q_3v_MEC_1n");
        histPlotter2D(c1, hQ2_VS_q_3v_RES_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_1n_Dir, "04c_Q2_VS_q_3v_RES_1n");
        histPlotter2D(c1, hQ2_VS_q_3v_DIS_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_1n_Dir, "04d_Q2_VS_q_3v_DIS_1n");

        // Q2 vs. omega plots (1n, FD)
        histPlotter2D(c1, hQ2_VS_omega_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_1n_Dir, "05_Q2_VS_omega_1n");
        histPlotter2D(c1, hQ2_VS_omega_QEL_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_1n_Dir, "05a_Q2_VS_omega_QEL_1n");
        histPlotter2D(c1, hQ2_VS_omega_MEC_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_1n_Dir, "05b_Q2_VS_omega_MEC_1n");
        histPlotter2D(c1, hQ2_VS_omega_RES_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_1n_Dir, "05c_Q2_VS_omega_RES_1n");
        histPlotter2D(c1, hQ2_VS_omega_DIS_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_1n_Dir, "05d_Q2_VS_omega_DIS_1n");

        // q_3v vs. omega plots (1n, FD)
        histPlotter2D(c1, hq_3v_VS_omega_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_1n_Dir, "06_q_3v_VS_omega_1n");
        histPlotter2D(c1, hq_3v_VS_omega_QEL_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_1n_Dir, "06a_q_3v_VS_omega_QEL_1n");
        histPlotter2D(c1, hq_3v_VS_omega_MEC_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_1n_Dir, "06b_q_3v_VS_omega_MEC_1n");
        histPlotter2D(c1, hq_3v_VS_omega_RES_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_1n_Dir, "06c_q_3v_VS_omega_RES_1n");
        histPlotter2D(c1, hq_3v_VS_omega_DIS_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_1n_Dir, "06d_q_3v_VS_omega_DIS_1n");

        // Momentum transfer plots (2p, FD)

        // Q2 plots (2p, FD)
        double Q2_2p_integral = hQ2_2p->Integral();

        histPlotter1D(c1, hQ2_2p, norm_Momentum_transfer_plots, true, Q2_2p_integral, "Q^{2} Histogram", "2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sQ2_2p,
                      "01_Q2_2p", hQ2_2p_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_QEL_2p, norm_Momentum_transfer_plots, true, Q2_2p_integral, "Q^{2} Histogram", "QE Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sQ2_2p, "01a_Q2_QEL_2p", hQ2_2p_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_MEC_2p, norm_Momentum_transfer_plots, true, Q2_2p_integral, "Q^{2} Histogram", "MEC Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sQ2_2p, "01b_Q2_MEC_2p", hQ2_2p_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_RES_2p, norm_Momentum_transfer_plots, true, Q2_2p_integral, "Q^{2} Histogram", "RES Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sQ2_2p, "01c_Q2_RES_2p", hQ2_2p_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_DIS_2p, norm_Momentum_transfer_plots, true, Q2_2p_integral, "Q^{2} Histogram", "DIS Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sQ2_2p, "01d_Q2_DIS_2p", hQ2_2p_Dir, "FD", kBlue, true, true, true);

        stackPlotter1D(c1, sQ2_2p, norm_Momentum_transfer_plots, "Q^{2} Histogram", "2p", plots, Histogram_OutPDF, hQ2_2p, hQ2_QEL_2p, hQ2_MEC_2p, hQ2_RES_2p, hQ2_DIS_2p, "01e_Q2_2p_Stack",
                       hQ2_2p_Dir, "");

        // q_3v plots (2p, FD)
        double q_3v_2p_integral = hq_3v_2p->Integral();

        histPlotter1D(c1, hq_3v_2p, norm_Momentum_transfer_plots, true, q_3v_2p_integral, "q = |#font[62]{q}|", "2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sq_3v_2p,
                      "02_q_3v_2p", hq_3v_2p_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_QEL_2p, norm_Momentum_transfer_plots, true, q_3v_2p_integral, "q = |#font[62]{q}|", "QE Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sq_3v_2p, "02a_q_3v_QEL_2p", hq_3v_2p_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_MEC_2p, norm_Momentum_transfer_plots, true, q_3v_2p_integral, "q = |#font[62]{q}|", "MEC Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sq_3v_2p, "02b_q_3v_MEC_2p", hq_3v_2p_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_RES_2p, norm_Momentum_transfer_plots, true, q_3v_2p_integral, "q = |#font[62]{q}|", "RES Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sq_3v_2p, "02c_q_3v_RES_2p", hq_3v_2p_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_DIS_2p, norm_Momentum_transfer_plots, true, q_3v_2p_integral, "q = |#font[62]{q}|", "DIS Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sq_3v_2p, "02d_q_3v_DIS_2p", hq_3v_2p_Dir, "FD", kBlue, true, true, true);

        stackPlotter1D(c1, sq_3v_2p, norm_Momentum_transfer_plots, "q = |#font[62]{q}|", "2p", plots, Histogram_OutPDF, hq_3v_2p, hq_3v_QEL_2p, hq_3v_MEC_2p, hq_3v_RES_2p, hq_3v_DIS_2p,
                       "02e_q_3v_2p_Stack", hq_3v_2p_Dir, "");

        // Q2 vs. W plots (2p, FD)
        histPlotter2D(c1, hQ2_VS_W_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_2p_Dir, "03_Q2_VS_W_2p");
        histPlotter2D(c1, hQ2_VS_W_QEL_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_2p_Dir, "03a_Q2_VS_W_QEL_2p");
        histPlotter2D(c1, hQ2_VS_W_MEC_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_2p_Dir, "03b_Q2_VS_W_MEC_2p");
        histPlotter2D(c1, hQ2_VS_W_RES_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_2p_Dir, "03c_Q2_VS_W_RES_2p");
        histPlotter2D(c1, hQ2_VS_W_DIS_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_2p_Dir, "03d_Q2_VS_W_DIS_2p");

        // Q2 vs. q_3v plots (2p, FD)
        histPlotter2D(c1, hQ2_VS_q_3v_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_2p_Dir, "04_Q2_VS_q_3v_2p");
        histPlotter2D(c1, hQ2_VS_q_3v_QEL_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_2p_Dir, "04a_Q2_VS_q_3v_QEL_2p");
        histPlotter2D(c1, hQ2_VS_q_3v_MEC_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_2p_Dir, "04b_Q2_VS_q_3v_MEC_2p");
        histPlotter2D(c1, hQ2_VS_q_3v_RES_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_2p_Dir, "04c_Q2_VS_q_3v_RES_2p");
        histPlotter2D(c1, hQ2_VS_q_3v_DIS_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_2p_Dir, "04d_Q2_VS_q_3v_DIS_2p");

        // Q2 vs. omega plots (2p, FD)
        histPlotter2D(c1, hQ2_VS_omega_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_2p_Dir, "05_Q2_VS_omega_2p");
        histPlotter2D(c1, hQ2_VS_omega_QEL_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_2p_Dir, "05a_Q2_VS_omega_QEL_2p");
        histPlotter2D(c1, hQ2_VS_omega_MEC_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_2p_Dir, "05b_Q2_VS_omega_MEC_2p");
        histPlotter2D(c1, hQ2_VS_omega_RES_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_2p_Dir, "05c_Q2_VS_omega_RES_2p");
        histPlotter2D(c1, hQ2_VS_omega_DIS_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_2p_Dir, "05d_Q2_VS_omega_DIS_2p");

        // q_3v vs. omega plots (2p, FD)
        histPlotter2D(c1, hq_3v_VS_omega_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_2p_Dir, "06_q_3v_VS_omega_2p");
        histPlotter2D(c1, hq_3v_VS_omega_QEL_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_2p_Dir, "06a_q_3v_VS_omega_QEL_2p");
        histPlotter2D(c1, hq_3v_VS_omega_MEC_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_2p_Dir, "06b_q_3v_VS_omega_MEC_2p");
        histPlotter2D(c1, hq_3v_VS_omega_RES_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_2p_Dir, "06c_q_3v_VS_omega_RES_2p");
        histPlotter2D(c1, hq_3v_VS_omega_DIS_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_2p_Dir, "06d_q_3v_VS_omega_DIS_2p");

        // Momentum transfer plots (pFDpCD, FD)

        // Q2 plots (pFDpCD, FD)
        double Q2_pFDpCD_integral = hQ2_pFDpCD->Integral();

        histPlotter1D(c1, hQ2_pFDpCD, norm_Momentum_transfer_plots, true, Q2_pFDpCD_integral, "Q^{2} Histogram", "pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sQ2_pFDpCD, "01_Q2_pFDpCD", hQ2_pFDpCD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_QEL_pFDpCD, norm_Momentum_transfer_plots, true, Q2_pFDpCD_integral, "Q^{2} Histogram", "QE Only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sQ2_pFDpCD, "01a_Q2_QEL_pFDpCD", hQ2_pFDpCD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_MEC_pFDpCD, norm_Momentum_transfer_plots, true, Q2_pFDpCD_integral, "Q^{2} Histogram", "MEC Only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sQ2_pFDpCD, "01b_Q2_MEC_pFDpCD", hQ2_pFDpCD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_RES_pFDpCD, norm_Momentum_transfer_plots, true, Q2_pFDpCD_integral, "Q^{2} Histogram", "RES Only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sQ2_pFDpCD, "01c_Q2_RES_pFDpCD", hQ2_pFDpCD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_DIS_pFDpCD, norm_Momentum_transfer_plots, true, Q2_pFDpCD_integral, "Q^{2} Histogram", "DIS Only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sQ2_pFDpCD, "01d_Q2_DIS_pFDpCD", hQ2_pFDpCD_Dir, "FD", kBlue, true, true, true);

        stackPlotter1D(c1, sQ2_pFDpCD, norm_Momentum_transfer_plots, "Q^{2} Histogram", "pFDpCD", plots, Histogram_OutPDF, hQ2_pFDpCD, hQ2_QEL_pFDpCD, hQ2_MEC_pFDpCD, hQ2_RES_pFDpCD,
                       hQ2_DIS_pFDpCD, "01e_Q2_pFDpCD_Stack", hQ2_pFDpCD_Dir, "");

        // q_3v plots (pFDpCD, FD)
        double q_3v_pFDpCD_integral = hq_3v_pFDpCD->Integral();

        histPlotter1D(c1, hq_3v_pFDpCD, norm_Momentum_transfer_plots, true, q_3v_pFDpCD_integral, "q = |#font[62]{q}|", "pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sq_3v_pFDpCD, "02_q_3v_pFDpCD", hq_3v_pFDpCD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_QEL_pFDpCD, norm_Momentum_transfer_plots, true, q_3v_pFDpCD_integral, "q = |#font[62]{q}|", "QE Only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF,
                      2, false, true, sq_3v_pFDpCD, "02a_q_3v_QEL_pFDpCD", hq_3v_pFDpCD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_MEC_pFDpCD, norm_Momentum_transfer_plots, true, q_3v_pFDpCD_integral, "q = |#font[62]{q}|", "MEC Only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF,
                      2, false, true, sq_3v_pFDpCD, "02b_q_3v_MEC_pFDpCD", hq_3v_pFDpCD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_RES_pFDpCD, norm_Momentum_transfer_plots, true, q_3v_pFDpCD_integral, "q = |#font[62]{q}|", "RES Only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF,
                      2, false, true, sq_3v_pFDpCD, "02c_q_3v_RES_pFDpCD", hq_3v_pFDpCD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_DIS_pFDpCD, norm_Momentum_transfer_plots, true, q_3v_pFDpCD_integral, "q = |#font[62]{q}|", "DIS Only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF,
                      2, false, true, sq_3v_pFDpCD, "02d_q_3v_DIS_pFDpCD", hq_3v_pFDpCD_Dir, "FD", kBlue, true, true, true);

        stackPlotter1D(c1, sq_3v_pFDpCD, norm_Momentum_transfer_plots, "q = |#font[62]{q}|", "pFDpCD", plots, Histogram_OutPDF, hq_3v_pFDpCD, hq_3v_QEL_pFDpCD, hq_3v_MEC_pFDpCD,
                       hq_3v_RES_pFDpCD, hq_3v_DIS_pFDpCD, "02e_q_3v_pFDpCD_Stack", hq_3v_pFDpCD_Dir, "");

        // Q2 vs. W plots (pFDpCD, FD)
        histPlotter2D(c1, hQ2_VS_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_pFDpCD_Dir, "03_Q2_VS_W_pFDpCD");
        histPlotter2D(c1, hQ2_VS_W_QEL_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_pFDpCD_Dir, "03a_Q2_VS_W_QEL_pFDpCD");
        histPlotter2D(c1, hQ2_VS_W_MEC_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_pFDpCD_Dir, "03b_Q2_VS_W_MEC_pFDpCD");
        histPlotter2D(c1, hQ2_VS_W_RES_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_pFDpCD_Dir, "03c_Q2_VS_W_RES_pFDpCD");
        histPlotter2D(c1, hQ2_VS_W_DIS_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_pFDpCD_Dir, "03d_Q2_VS_W_DIS_pFDpCD");

        // Q2 vs. q_3v plots (pFDpCD, FD)
        histPlotter2D(c1, hQ2_VS_q_3v_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_pFDpCD_Dir, "04_Q2_VS_q_3v_pFDpCD");
        histPlotter2D(c1, hQ2_VS_q_3v_QEL_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_pFDpCD_Dir, "04a_Q2_VS_q_3v_QEL_pFDpCD");
        histPlotter2D(c1, hQ2_VS_q_3v_MEC_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_pFDpCD_Dir, "04b_Q2_VS_q_3v_MEC_pFDpCD");
        histPlotter2D(c1, hQ2_VS_q_3v_RES_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_pFDpCD_Dir, "04c_Q2_VS_q_3v_RES_pFDpCD");
        histPlotter2D(c1, hQ2_VS_q_3v_DIS_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_pFDpCD_Dir, "04d_Q2_VS_q_3v_DIS_pFDpCD");

        // Q2 vs. omega plots (pFDpCD, FD)
        histPlotter2D(c1, hQ2_VS_omega_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_pFDpCD_Dir, "05_Q2_VS_omega_pFDpCD");
        histPlotter2D(c1, hQ2_VS_omega_QEL_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_pFDpCD_Dir, "05a_Q2_VS_omega_QEL_pFDpCD");
        histPlotter2D(c1, hQ2_VS_omega_MEC_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_pFDpCD_Dir, "05b_Q2_VS_omega_MEC_pFDpCD");
        histPlotter2D(c1, hQ2_VS_omega_RES_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_pFDpCD_Dir, "05c_Q2_VS_omega_RES_pFDpCD");
        histPlotter2D(c1, hQ2_VS_omega_DIS_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_pFDpCD_Dir, "05d_Q2_VS_omega_DIS_pFDpCD");

        // q_3v vs. omega plots (pFDpCD, FD)
        histPlotter2D(c1, hq_3v_VS_omega_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_pFDpCD_Dir, "06_q_3v_VS_omega_pFDpCD");
        histPlotter2D(c1, hq_3v_VS_omega_QEL_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_pFDpCD_Dir, "06a_q_3v_VS_omega_QEL_pFDpCD");
        histPlotter2D(c1, hq_3v_VS_omega_MEC_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_pFDpCD_Dir, "06b_q_3v_VS_omega_MEC_pFDpCD");
        histPlotter2D(c1, hq_3v_VS_omega_RES_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_pFDpCD_Dir, "06c_q_3v_VS_omega_RES_pFDpCD");
        histPlotter2D(c1, hq_3v_VS_omega_DIS_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_pFDpCD_Dir, "06d_q_3v_VS_omega_DIS_pFDpCD");

        // Momentum transfer plots (nFDpCD, FD)

        // Q2 plots (nFDpCD, FD)
        double Q2_nFDpCD_integral = hQ2_nFDpCD->Integral();

        histPlotter1D(c1, hQ2_nFDpCD, norm_Momentum_transfer_plots, true, Q2_nFDpCD_integral, "Q^{2} Histogram", "nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sQ2_nFDpCD, "01_Q2_nFDpCD", hQ2_nFDpCD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_QEL_nFDpCD, norm_Momentum_transfer_plots, true, Q2_nFDpCD_integral, "Q^{2} Histogram", "QE Only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sQ2_nFDpCD, "01a_Q2_QEL_nFDpCD", hQ2_nFDpCD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_MEC_nFDpCD, norm_Momentum_transfer_plots, true, Q2_nFDpCD_integral, "Q^{2} Histogram", "MEC Only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sQ2_nFDpCD, "01b_Q2_MEC_nFDpCD", hQ2_nFDpCD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_RES_nFDpCD, norm_Momentum_transfer_plots, true, Q2_nFDpCD_integral, "Q^{2} Histogram", "RES Only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sQ2_nFDpCD, "01c_Q2_RES_nFDpCD", hQ2_nFDpCD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hQ2_DIS_nFDpCD, norm_Momentum_transfer_plots, true, Q2_nFDpCD_integral, "Q^{2} Histogram", "DIS Only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sQ2_nFDpCD, "01d_Q2_DIS_nFDpCD", hQ2_nFDpCD_Dir, "FD", kBlue, true, true, true);

        stackPlotter1D(c1, sQ2_nFDpCD, norm_Momentum_transfer_plots, "Q^{2} Histogram", "nFDpCD", plots, Histogram_OutPDF, hQ2_nFDpCD, hQ2_QEL_nFDpCD, hQ2_MEC_nFDpCD, hQ2_RES_nFDpCD,
                       hQ2_DIS_nFDpCD, "01e_Q2_nFDpCD_Stack", hQ2_nFDpCD_Dir, "");

        // q_3v plots (nFDpCD, FD)
        double q_3v_nFDpCD_integral = hq_3v_nFDpCD->Integral();

        histPlotter1D(c1, hq_3v_nFDpCD, norm_Momentum_transfer_plots, true, q_3v_nFDpCD_integral, "q = |#font[62]{q}|", "nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sq_3v_nFDpCD, "02_q_3v_nFDpCD", hq_3v_nFDpCD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_QEL_nFDpCD, norm_Momentum_transfer_plots, true, q_3v_nFDpCD_integral, "q = |#font[62]{q}|", "QE Only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF,
                      2, false, true, sq_3v_nFDpCD, "02a_q_3v_QEL_nFDpCD", hq_3v_nFDpCD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_MEC_nFDpCD, norm_Momentum_transfer_plots, true, q_3v_nFDpCD_integral, "q = |#font[62]{q}|", "MEC Only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF,
                      2, false, true, sq_3v_nFDpCD, "02b_q_3v_MEC_nFDpCD", hq_3v_nFDpCD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_RES_nFDpCD, norm_Momentum_transfer_plots, true, q_3v_nFDpCD_integral, "q = |#font[62]{q}|", "RES Only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF,
                      2, false, true, sq_3v_nFDpCD, "02c_q_3v_RES_nFDpCD", hq_3v_nFDpCD_Dir, "FD", kBlue, true, true, true);
        histPlotter1D(c1, hq_3v_DIS_nFDpCD, norm_Momentum_transfer_plots, true, q_3v_nFDpCD_integral, "q = |#font[62]{q}|", "DIS Only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF,
                      2, false, true, sq_3v_nFDpCD, "02d_q_3v_DIS_nFDpCD", hq_3v_nFDpCD_Dir, "FD", kBlue, true, true, true);

        stackPlotter1D(c1, sq_3v_nFDpCD, norm_Momentum_transfer_plots, "q = |#font[62]{q}|", "nFDpCD", plots, Histogram_OutPDF, hq_3v_nFDpCD, hq_3v_QEL_nFDpCD, hq_3v_MEC_nFDpCD,
                       hq_3v_RES_nFDpCD, hq_3v_DIS_nFDpCD, "02e_q_3v_nFDpCD_Stack", hq_3v_nFDpCD_Dir, "");

        // Q2 vs. W plots (nFDpCD, FD)
        histPlotter2D(c1, hQ2_VS_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_nFDpCD_Dir, "03_Q2_VS_W_nFDpCD");
        histPlotter2D(c1, hQ2_VS_W_QEL_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_nFDpCD_Dir, "03a_Q2_VS_W_QEL_nFDpCD");
        histPlotter2D(c1, hQ2_VS_W_MEC_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_nFDpCD_Dir, "03b_Q2_VS_W_MEC_nFDpCD");
        histPlotter2D(c1, hQ2_VS_W_RES_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_nFDpCD_Dir, "03c_Q2_VS_W_RES_nFDpCD");
        histPlotter2D(c1, hQ2_VS_W_DIS_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_W_nFDpCD_Dir, "03d_Q2_VS_W_DIS_nFDpCD");

        // Q2 vs. q_3v plots (nFDpCD, FD)
        histPlotter2D(c1, hQ2_VS_q_3v_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_nFDpCD_Dir, "04_Q2_VS_q_3v_nFDpCD");
        histPlotter2D(c1, hQ2_VS_q_3v_QEL_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_nFDpCD_Dir, "04a_Q2_VS_q_3v_QEL_nFDpCD");
        histPlotter2D(c1, hQ2_VS_q_3v_MEC_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_nFDpCD_Dir, "04b_Q2_VS_q_3v_MEC_nFDpCD");
        histPlotter2D(c1, hQ2_VS_q_3v_RES_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_nFDpCD_Dir, "04c_Q2_VS_q_3v_RES_nFDpCD");
        histPlotter2D(c1, hQ2_VS_q_3v_DIS_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_q_3v_nFDpCD_Dir, "04d_Q2_VS_q_3v_DIS_nFDpCD");

        // Q2 vs. omega plots (nFDpCD, FD)
        histPlotter2D(c1, hQ2_VS_omega_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_nFDpCD_Dir, "05_Q2_VS_omega_nFDpCD");
        histPlotter2D(c1, hQ2_VS_omega_QEL_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_nFDpCD_Dir, "05a_Q2_VS_omega_QEL_nFDpCD");
        histPlotter2D(c1, hQ2_VS_omega_MEC_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_nFDpCD_Dir, "05b_Q2_VS_omega_MEC_nFDpCD");
        histPlotter2D(c1, hQ2_VS_omega_RES_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_nFDpCD_Dir, "05c_Q2_VS_omega_RES_nFDpCD");
        histPlotter2D(c1, hQ2_VS_omega_DIS_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hQ2_VS_omega_nFDpCD_Dir, "05d_Q2_VS_omega_DIS_nFDpCD");

        // q_3v vs. omega plots (nFDpCD, FD)
        histPlotter2D(c1, hq_3v_VS_omega_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_nFDpCD_Dir, "06_q_3v_VS_omega_nFDpCD");
        histPlotter2D(c1, hq_3v_VS_omega_QEL_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_nFDpCD_Dir, "06a_q_3v_VS_omega_QEL_nFDpCD");
        histPlotter2D(c1, hq_3v_VS_omega_MEC_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_nFDpCD_Dir, "06b_q_3v_VS_omega_MEC_nFDpCD");
        histPlotter2D(c1, hq_3v_VS_omega_RES_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_nFDpCD_Dir, "06c_q_3v_VS_omega_RES_nFDpCD");
        histPlotter2D(c1, hq_3v_VS_omega_DIS_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hq_3v_VS_omega_nFDpCD_Dir, "06d_q_3v_VS_omega_DIS_nFDpCD");

        //  Final state ratios (nFDpCD/pFDpCD) ----------------------------------------------------------------------------------------------------------------------------------

        // Final state ratios (nFDpCD/pFDpCD)
        if (apply_nucleon_cuts) {
            if (FSR_1D_plots) { DrawAndSaveFSRatio(SampleName, hQ2_pFDpCD, hQ2_pFDpCD_Dir, hQ2_nFDpCD, plots); }

            if (FSR_2D_plots && SampleName != "C12_simulation_6GeV_T5_first_10") { DrawAndSaveFSRatio(SampleName, hQ2_VS_W_pFDpCD, hQ2_VS_W_pFDpCD_Dir, hQ2_VS_W_nFDpCD, plots); }
        }
    } else {
        cout << "\033[33m\n\nMomentum transfer plots are disabled by user.\n\n\033[0m";
    }

    // ======================================================================================================================================================================
    // Energy (E_e) histograms
    // ======================================================================================================================================================================

    // Energy (E_e) histograms
    if (E_e_plots) {
        cout << "\033[33m\n\nPlotting Energy (E_e) histograms...\n\n\033[0m";

        //  E_e plots (FD only) -------------------------------------------------------------------------------------------------------------------------------------------------

        // E_e plots (1e cut, FD)
        double E_e_1e_cut_All_Int_integral = hE_e_All_Int_1e_cut_FD->Integral();

        histPlotter1D(c1, hE_e_All_Int_1e_cut_FD, norm_E_e_plots, true, E_e_1e_cut_All_Int_integral, "E_{e} Histogram", "1e Cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sE_e_1e_cut, "01_E_e_1e_cut", hE_e_All_Int_1e_cut_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_QEL_1e_cut_FD, norm_E_e_plots, true, E_e_1e_cut_All_Int_integral, "E_{e} Histogram", "QEL Only, 1e_cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sE_e_1e_cut, "01_E_e_QEL_Only_1e_cut", hE_e_QEL_1e_cut_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_MEC_1e_cut_FD, norm_E_e_plots, true, E_e_1e_cut_All_Int_integral, "E_{e} Histogram", "MEC Only, 1e_cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sE_e_1e_cut, "02_E_e_MEC_Only_1e_cut", hE_e_MEC_1e_cut_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_RES_1e_cut_FD, norm_E_e_plots, true, E_e_1e_cut_All_Int_integral, "E_{e} Histogram", "RES Only, 1e_cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sE_e_1e_cut, "03_E_e_RES_Only_1e_cut", hE_e_RES_1e_cut_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_DIS_1e_cut_FD, norm_E_e_plots, true, E_e_1e_cut_All_Int_integral, "E_{e} Histogram", "DIS Only, 1e_cut", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sE_e_1e_cut, "04_E_e_DIS_Only_1e_cut", hE_e_DIS_1e_cut_FD_Dir, "", kBlue, true, true, true);

        stackPlotter1D(c1, sE_e_1e_cut, norm_E_e_plots, "E_{e} Histogram", "1e_cut", plots, Histogram_OutPDF, hE_e_All_Int_1e_cut_FD, hE_e_QEL_1e_cut_FD, hE_e_MEC_1e_cut_FD,
                       hE_e_RES_1e_cut_FD, hE_e_DIS_1e_cut_FD, "02_E_e_Stack", sE_e_1e_cut_Dir, "");

        // E_e plots (1p, FD)
        double E_e_1p_All_Int_integral = hE_e_All_Int_1p_FD->Integral();

        histPlotter1D(c1, hE_e_All_Int_1p_FD, norm_E_e_plots, true, E_e_1p_All_Int_integral, "E_{e} Histogram", "All Int., 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sE_e_1p_FD, "00_E_e_All_Int_1p", hE_e_All_Int_1p_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_QEL_1p_FD, norm_E_e_plots, true, E_e_1p_All_Int_integral, "E_{e} Histogram", "QEL Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sE_e_1p_FD, "01_E_e_QEL_Only_1p", hE_e_QEL_1p_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_MEC_1p_FD, norm_E_e_plots, true, E_e_1p_All_Int_integral, "E_{e} Histogram", "MEC Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sE_e_1p_FD, "02_E_e_MEC_Only_1p", hE_e_MEC_1p_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_RES_1p_FD, norm_E_e_plots, true, E_e_1p_All_Int_integral, "E_{e} Histogram", "RES Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sE_e_1p_FD, "03_E_e_RES_Only_1p", hE_e_RES_1p_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_DIS_1p_FD, norm_E_e_plots, true, E_e_1p_All_Int_integral, "E_{e} Histogram", "DIS Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sE_e_1p_FD, "04_E_e_DIS_Only_1p", hE_e_DIS_1p_FD_Dir, "", kBlue, true, true, true);

        stackPlotter1D(c1, sE_e_1p_FD, norm_E_e_plots, "E_{e} Histogram", "1p", plots, Histogram_OutPDF, hE_e_All_Int_1p_FD, hE_e_QEL_1p_FD, hE_e_MEC_1p_FD, hE_e_RES_1p_FD, hE_e_DIS_1p_FD,
                       "02_E_e_Stack", sE_e_1p_FD_Dir, "");

        // Energy (E_e) histograms around theta_e = 15 (1p, CD & FD)
        double E_e_15_1p_All_Int_integral = hE_e_15_All_Int_1p_FD->Integral();

        histPlotter1D(c1, hE_e_15_All_Int_1p_FD, norm_E_e_plots, true, E_e_15_1p_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "All Int., 1p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_1p_FD, "00_E_e_15_All_Int_1p", hE_e_15_All_Int_1p_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_QEL_1p_FD, norm_E_e_plots, true, E_e_15_1p_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "QEL Only, 1p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_1p_FD, "01_E_e_15_QEL_Only_1p", hE_e_15_QEL_1p_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_MEC_1p_FD, norm_E_e_plots, true, E_e_15_1p_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "MEC Only, 1p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_1p_FD, "02_E_e_15_MEC_Only_1p", hE_e_15_MEC_1p_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_RES_1p_FD, norm_E_e_plots, true, E_e_15_1p_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "RES Only, 1p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_1p_FD, "03_E_e_15_RES_Only_1p", hE_e_15_RES_1p_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_DIS_1p_FD, norm_E_e_plots, true, E_e_15_1p_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "DIS Only, 1p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_1p_FD, "04_E_e_15_DIS_Only_1p", hE_e_15_DIS_1p_FD_Dir, "", kBlue, true, true, true);

        stackPlotter1D(c1, sE_e_15_1p_FD, norm_E_e_plots, "E_{e} around #theta_{e} = 15#circ", "1p", plots, Histogram_OutPDF, hE_e_15_All_Int_1p_FD, hE_e_15_QEL_1p_FD, hE_e_15_MEC_1p_FD,
                       hE_e_15_RES_1p_FD, hE_e_15_DIS_1p_FD, "02_E_e_15_Stack", sE_e_15_1p_FD_Dir, "");

        // E_e plots (1n, FD)
        double E_e_1n_All_Int_integral = hE_e_All_Int_1n_FD->Integral();

        histPlotter1D(c1, hE_e_All_Int_1n_FD, norm_E_e_plots, true, E_e_1n_All_Int_integral, "E_{e} Histogram", "All Int., 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sE_e_1n_FD, "00_E_e_All_Int_1n", hE_e_All_Int_1n_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_QEL_1n_FD, norm_E_e_plots, true, E_e_1n_All_Int_integral, "E_{e} Histogram", "QEL Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sE_e_1n_FD, "01_E_e_QEL_Only_1n", hE_e_QEL_1n_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_MEC_1n_FD, norm_E_e_plots, true, E_e_1n_All_Int_integral, "E_{e} Histogram", "MEC Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sE_e_1n_FD, "02_E_e_MEC_Only_1n", hE_e_MEC_1n_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_RES_1n_FD, norm_E_e_plots, true, E_e_1n_All_Int_integral, "E_{e} Histogram", "RES Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sE_e_1n_FD, "03_E_e_RES_Only_1n", hE_e_RES_1n_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_DIS_1n_FD, norm_E_e_plots, true, E_e_1n_All_Int_integral, "E_{e} Histogram", "DIS Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sE_e_1n_FD, "04_E_e_DIS_Only_1n", hE_e_DIS_1n_FD_Dir, "", kBlue, true, true, true);

        stackPlotter1D(c1, sE_e_1n_FD, norm_E_e_plots, "E_{e} Histogram", "1n", plots, Histogram_OutPDF, hE_e_All_Int_1n_FD, hE_e_QEL_1n_FD, hE_e_MEC_1n_FD, hE_e_RES_1n_FD, hE_e_DIS_1n_FD,
                       "02_E_e_Stack", sE_e_1n_FD_Dir, "");

        // Energy (E_e) histograms around theta_e = 15 (1n, CD & FD)
        double E_e_15_1n_All_Int_integral = hE_e_15_All_Int_1n_FD->Integral();

        histPlotter1D(c1, hE_e_15_All_Int_1n_FD, norm_E_e_plots, true, E_e_15_1n_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "All Int., 1n", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_1n_FD, "00_E_e_15_All_Int_1n", hE_e_15_All_Int_1n_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_QEL_1n_FD, norm_E_e_plots, true, E_e_15_1n_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "QEL Only, 1n", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_1n_FD, "01_E_e_15_QEL_Only_1n", hE_e_15_QEL_1n_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_MEC_1n_FD, norm_E_e_plots, true, E_e_15_1n_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "MEC Only, 1n", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_1n_FD, "02_E_e_15_MEC_Only_1n", hE_e_15_MEC_1n_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_RES_1n_FD, norm_E_e_plots, true, E_e_15_1n_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "RES Only, 1n", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_1n_FD, "03_E_e_15_RES_Only_1n", hE_e_15_RES_1n_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_DIS_1n_FD, norm_E_e_plots, true, E_e_15_1n_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "DIS Only, 1n", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_1n_FD, "04_E_e_15_DIS_Only_1n", hE_e_15_DIS_1n_FD_Dir, "", kBlue, true, true, true);

        stackPlotter1D(c1, sE_e_15_1n_FD, norm_E_e_plots, "E_{e} around #theta_{e} = 15#circ", "1n", plots, Histogram_OutPDF, hE_e_15_All_Int_1n_FD, hE_e_15_QEL_1n_FD, hE_e_15_MEC_1n_FD,
                       hE_e_15_RES_1n_FD, hE_e_15_DIS_1n_FD, "02_E_e_15_Stack", sE_e_15_1n_FD_Dir, "");

        // E_e plots (2p, FD)
        double E_e_2p_All_Int_integral = hE_e_All_Int_2p_FD->Integral();
        double E_e_QEL_integral = hE_e_QEL_2p_FD->Integral(), E_e_MEC_integral = hE_e_MEC_2p_FD->Integral();
        double E_e_RES_integral = hE_e_RES_2p_FD->Integral(), E_e_DIS_integral = hE_e_DIS_2p_FD->Integral();

        histPlotter1D(c1, hE_e_All_Int_2p_FD, norm_E_e_plots, true, E_e_2p_All_Int_integral, "E_{e} Histogram", "All Int., 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sE_e_2p_FD, "00_E_e_All_Int_2p", hE_e_All_Int_2p_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_QEL_2p_FD, norm_E_e_plots, true, E_e_2p_All_Int_integral, "E_{e} Histogram", "QEL Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sE_e_2p_FD, "01_E_e_QEL_Only_2p", hE_e_QEL_2p_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_MEC_2p_FD, norm_E_e_plots, true, E_e_2p_All_Int_integral, "E_{e} Histogram", "MEC Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sE_e_2p_FD, "02_E_e_MEC_Only_2p", hE_e_MEC_2p_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_RES_2p_FD, norm_E_e_plots, true, E_e_2p_All_Int_integral, "E_{e} Histogram", "RES Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sE_e_2p_FD, "03_E_e_RES_Only_2p", hE_e_RES_2p_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_DIS_2p_FD, norm_E_e_plots, true, E_e_2p_All_Int_integral, "E_{e} Histogram", "DIS Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sE_e_2p_FD, "04_E_e_DIS_Only_2p", hE_e_DIS_2p_FD_Dir, "", kBlue, true, true, true);

        stackPlotter1D(c1, sE_e_2p_FD, norm_E_e_plots, "E_{e} Histogram", "2p", plots, Histogram_OutPDF, hE_e_All_Int_2p_FD, hE_e_QEL_2p_FD, hE_e_MEC_2p_FD, hE_e_RES_2p_FD, hE_e_DIS_2p_FD,
                       "02_E_e_Stack", sE_e_2p_FD_Dir, "");

        // Energy (E_e) histograms around theta_e = 15 (2p, CD & FD)
        double E_e_15_2p_All_Int_integral = hE_e_15_All_Int_2p_FD->Integral();
        double E_e_15_2p_QEL_integral = hE_e_15_QEL_2p_FD->Integral(), E_e_15_2p_MEC_integral = hE_e_15_MEC_2p_FD->Integral();
        double E_e_15_2p_RES_integral = hE_e_15_RES_2p_FD->Integral(), E_e_15_2p_DIS_integral = hE_e_15_DIS_2p_FD->Integral();

        histPlotter1D(c1, hE_e_15_All_Int_2p_FD, norm_E_e_plots, true, E_e_15_2p_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "All Int., 2p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_2p_FD, "00_E_e_15_All_Int_2p", hE_e_15_All_Int_2p_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_QEL_2p_FD, norm_E_e_plots, true, E_e_15_2p_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "QEL Only, 2p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_2p_FD, "01_E_e_15_QEL_Only_2p", hE_e_15_QEL_2p_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_MEC_2p_FD, norm_E_e_plots, true, E_e_15_2p_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "MEC Only, 2p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_2p_FD, "02_E_e_15_MEC_Only_2p", hE_e_15_MEC_2p_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_RES_2p_FD, norm_E_e_plots, true, E_e_15_2p_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "RES Only, 2p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_2p_FD, "03_E_e_15_RES_Only_2p", hE_e_15_RES_2p_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_DIS_2p_FD, norm_E_e_plots, true, E_e_15_2p_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "DIS Only, 2p", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_2p_FD, "04_E_e_15_DIS_Only_2p", hE_e_15_DIS_2p_FD_Dir, "", kBlue, true, true, true);

        stackPlotter1D(c1, sE_e_15_2p_FD, norm_E_e_plots, "E_{e} around #theta_{e} = 15#circ", "2p", plots, Histogram_OutPDF, hE_e_15_All_Int_2p_FD, hE_e_15_QEL_2p_FD, hE_e_15_MEC_2p_FD,
                       hE_e_15_RES_2p_FD, hE_e_15_DIS_2p_FD, "02_E_e_15_Stack", sE_e_15_2p_FD_Dir, "");

        // E_e plots (pFDpCD, FD)
        double E_e_pFDpCD_All_Int_integral = hE_e_All_Int_pFDpCD_FD->Integral();
        double E_e_QE_pFDpCD_integral = hE_e_QEL_pFDpCD_FD->Integral(), E_e_MEC_pFDpCD_integral = hE_e_MEC_pFDpCD_FD->Integral();
        double E_e_RES_pFDpCD_integral = hE_e_RES_pFDpCD_FD->Integral(), E_e_DIS_pFDpCD_integral = hE_e_DIS_pFDpCD_FD->Integral();

        histPlotter1D(c1, hE_e_All_Int_pFDpCD_FD, norm_E_e_plots, true, E_e_pFDpCD_All_Int_integral, "E_{e} Histogram", "All Int., pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sE_e_pFDpCD_FD, "00_E_e_All_Int_pFDpCD", hE_e_All_Int_pFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_QEL_pFDpCD_FD, norm_E_e_plots, true, E_e_pFDpCD_All_Int_integral, "E_{e} Histogram", "QEL Only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sE_e_pFDpCD_FD, "01_E_e_QEL_Only_pFDpCD", hE_e_QEL_pFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_MEC_pFDpCD_FD, norm_E_e_plots, true, E_e_pFDpCD_All_Int_integral, "E_{e} Histogram", "MEC Only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sE_e_pFDpCD_FD, "02_E_e_MEC_Only_pFDpCD", hE_e_MEC_pFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_RES_pFDpCD_FD, norm_E_e_plots, true, E_e_pFDpCD_All_Int_integral, "E_{e} Histogram", "RES Only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sE_e_pFDpCD_FD, "03_E_e_RES_Only_pFDpCD", hE_e_RES_pFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_DIS_pFDpCD_FD, norm_E_e_plots, true, E_e_pFDpCD_All_Int_integral, "E_{e} Histogram", "DIS Only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sE_e_pFDpCD_FD, "04_E_e_DIS_Only_pFDpCD", hE_e_DIS_pFDpCD_FD_Dir, "", kBlue, true, true, true);

        stackPlotter1D(c1, sE_e_pFDpCD_FD, norm_E_e_plots, "E_{e} Histogram", "pFDpCD", plots, Histogram_OutPDF, hE_e_All_Int_pFDpCD_FD, hE_e_QEL_pFDpCD_FD, hE_e_MEC_pFDpCD_FD,
                       hE_e_RES_pFDpCD_FD, hE_e_DIS_pFDpCD_FD, "02_E_e_Stack", sE_e_pFDpCD_FD_Dir, "");

        // Energy (E_e) histograms around theta_e = 15 (pFDpCD, CD & FD)
        double E_e_15_pFDpCD_All_Int_integral = hE_e_15_All_Int_pFDpCD_FD->Integral();
        double E_e_15_pFDpCD_QEL_integral = hE_e_15_QEL_pFDpCD_FD->Integral(), E_e_15_pFDpCD_MEC_integral = hE_e_15_MEC_pFDpCD_FD->Integral();
        double E_e_15_pFDpCD_RES_integral = hE_e_15_RES_pFDpCD_FD->Integral(), E_e_15_pFDpCD_DIS_integral = hE_e_15_DIS_pFDpCD_FD->Integral();

        histPlotter1D(c1, hE_e_15_All_Int_pFDpCD_FD, norm_E_e_plots, true, E_e_15_pFDpCD_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "All Int., pFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sE_e_15_pFDpCD_FD, "00_E_e_15_All_Int_pFDpCD", hE_e_15_All_Int_pFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_QEL_pFDpCD_FD, norm_E_e_plots, true, E_e_15_pFDpCD_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "QEL Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_pFDpCD_FD, "01_E_e_15_QEL_Only_pFDpCD", hE_e_15_QEL_pFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_MEC_pFDpCD_FD, norm_E_e_plots, true, E_e_15_pFDpCD_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "MEC Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_pFDpCD_FD, "02_E_e_15_MEC_Only_pFDpCD", hE_e_15_MEC_pFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_RES_pFDpCD_FD, norm_E_e_plots, true, E_e_15_pFDpCD_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "RES Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_pFDpCD_FD, "03_E_e_15_RES_Only_pFDpCD", hE_e_15_RES_pFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_DIS_pFDpCD_FD, norm_E_e_plots, true, E_e_15_pFDpCD_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "DIS Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_pFDpCD_FD, "04_E_e_15_DIS_Only_pFDpCD", hE_e_15_DIS_pFDpCD_FD_Dir, "", kBlue, true, true, true);

        stackPlotter1D(c1, sE_e_15_pFDpCD_FD, norm_E_e_plots, "E_{e} around #theta_{e} = 15#circ", "pFDpCD", plots, Histogram_OutPDF, hE_e_15_All_Int_pFDpCD_FD, hE_e_15_QEL_pFDpCD_FD,
                       hE_e_15_MEC_pFDpCD_FD, hE_e_15_RES_pFDpCD_FD, hE_e_15_DIS_pFDpCD_FD, "02_E_e_15_Stack", sE_e_15_pFDpCD_FD_Dir, "");

        // E_e plots (nFDpCD, FD)
        double E_e_nFDpCD_All_Int_integral = hE_e_All_Int_nFDpCD_FD->Integral();
        double E_e_QE_nFDpCD_integral = hE_e_QEL_nFDpCD_FD->Integral(), E_e_MEC_nFDpCD_integral = hE_e_MEC_nFDpCD_FD->Integral();
        double E_e_RES_nFDpCD_integral = hE_e_RES_nFDpCD_FD->Integral(), E_e_DIS_nFDpCD_integral = hE_e_DIS_nFDpCD_FD->Integral();

        histPlotter1D(c1, hE_e_All_Int_nFDpCD_FD, norm_E_e_plots, true, E_e_nFDpCD_All_Int_integral, "E_{e} Histogram", "All Int., nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sE_e_nFDpCD_FD, "00_E_e_All_Int_nFDpCD", hE_e_All_Int_nFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_QEL_nFDpCD_FD, norm_E_e_plots, true, E_e_nFDpCD_All_Int_integral, "E_{e} Histogram", "QEL Only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sE_e_nFDpCD_FD, "01_E_e_QEL_Only_nFDpCD", hE_e_QEL_nFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_MEC_nFDpCD_FD, norm_E_e_plots, true, E_e_nFDpCD_All_Int_integral, "E_{e} Histogram", "MEC Only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sE_e_nFDpCD_FD, "02_E_e_MEC_Only_nFDpCD", hE_e_MEC_nFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_RES_nFDpCD_FD, norm_E_e_plots, true, E_e_nFDpCD_All_Int_integral, "E_{e} Histogram", "RES Only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sE_e_nFDpCD_FD, "03_E_e_RES_Only_nFDpCD", hE_e_RES_nFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_DIS_nFDpCD_FD, norm_E_e_plots, true, E_e_nFDpCD_All_Int_integral, "E_{e} Histogram", "DIS Only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sE_e_nFDpCD_FD, "04_E_e_DIS_Only_nFDpCD", hE_e_DIS_nFDpCD_FD_Dir, "", kBlue, true, true, true);

        stackPlotter1D(c1, sE_e_nFDpCD_FD, norm_E_e_plots, "E_{e} Histogram", "nFDpCD", plots, Histogram_OutPDF, hE_e_All_Int_nFDpCD_FD, hE_e_QEL_nFDpCD_FD, hE_e_MEC_nFDpCD_FD,
                       hE_e_RES_nFDpCD_FD, hE_e_DIS_nFDpCD_FD, "02_E_e_Stack", sE_e_nFDpCD_FD_Dir, "");

        // Energy (E_e) histograms around theta_e = 15 (nFDpCD, CD & FD)
        double E_e_15_nFDpCD_All_Int_integral = hE_e_15_All_Int_nFDpCD_FD->Integral();
        double E_e_15_nFDpCD_QEL_integral = hE_e_15_QEL_nFDpCD_FD->Integral(), E_e_15_nFDpCD_MEC_integral = hE_e_15_MEC_nFDpCD_FD->Integral();
        double E_e_15_nFDpCD_RES_integral = hE_e_15_RES_nFDpCD_FD->Integral(), E_e_15_nFDpCD_DIS_integral = hE_e_15_DIS_nFDpCD_FD->Integral();

        histPlotter1D(c1, hE_e_15_All_Int_nFDpCD_FD, norm_E_e_plots, true, E_e_15_nFDpCD_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "All Int., nFDpCD", 0.06, 0.0425, 0.0425,
                      plots, Histogram_OutPDF, 2, false, true, sE_e_15_nFDpCD_FD, "00_E_e_15_All_Int_nFDpCD", hE_e_15_All_Int_nFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_QEL_nFDpCD_FD, norm_E_e_plots, true, E_e_15_nFDpCD_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "QEL Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_nFDpCD_FD, "01_E_e_15_QEL_Only_nFDpCD", hE_e_15_QEL_nFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_MEC_nFDpCD_FD, norm_E_e_plots, true, E_e_15_nFDpCD_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "MEC Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_nFDpCD_FD, "02_E_e_15_MEC_Only_nFDpCD", hE_e_15_MEC_nFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_RES_nFDpCD_FD, norm_E_e_plots, true, E_e_15_nFDpCD_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "RES Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_nFDpCD_FD, "03_E_e_15_RES_Only_nFDpCD", hE_e_15_RES_nFDpCD_FD_Dir, "", kBlue, true, true, true);
        histPlotter1D(c1, hE_e_15_DIS_nFDpCD_FD, norm_E_e_plots, true, E_e_15_nFDpCD_All_Int_integral, "E_{e} around #theta_{e} = 15#circ", "DIS Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                      Histogram_OutPDF, 2, false, true, sE_e_15_nFDpCD_FD, "04_E_e_15_DIS_Only_nFDpCD", hE_e_15_DIS_nFDpCD_FD_Dir, "", kBlue, true, true, true);

        stackPlotter1D(c1, sE_e_15_nFDpCD_FD, norm_E_e_plots, "E_{e} around #theta_{e} = 15#circ", "nFDpCD", plots, Histogram_OutPDF, hE_e_15_All_Int_nFDpCD_FD, hE_e_15_QEL_nFDpCD_FD,
                       hE_e_15_MEC_nFDpCD_FD, hE_e_15_RES_nFDpCD_FD, hE_e_15_DIS_nFDpCD_FD, "02_E_e_15_Stack", sE_e_15_nFDpCD_FD_Dir, "");

        //  E_e vs. Theta_e plots (FD only) -------------------------------------------------------------------------------------------------------------------------------------

        // E_e vs. Theta_e histograms (1e cut, CD & FD)
        histPlotter2D(c1, hE_e_VS_Theta_e_All_Int_1e_cut_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_All_Int_1e_cut_FD_Dir,
                      "00_E_e_VS_Theta_e_All_Int_All_e_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_QEL_1e_cut_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_QEL_1e_cut_FD_Dir,
                      "01_E_e_VS_Theta_e_QEL_Only_1e_cut_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_MEC_1e_cut_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_MEC_1e_cut_FD_Dir,
                      "02_E_e_VS_Theta_e_MEC_Only_1e_cut_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_RES_1e_cut_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_RES_1e_cut_FD_Dir,
                      "03_E_e_VS_Theta_e_RES_Only_1e_cut_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_DIS_1e_cut_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_DIS_1e_cut_FD_Dir,
                      "04_E_e_VS_Theta_e_DIS_Only_1e_cut_FD");

        // E_e vs. Theta_e histograms (1p, CD & FD)
        histPlotter2D(c1, hE_e_VS_Theta_e_All_Int_1p_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_All_Int_1p_FD_Dir,
                      "00_E_e_VS_Theta_e_All_Int_1p_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_QEL_1p_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_QEL_1p_FD_Dir, "01_E_e_VS_Theta_e_QEL_Only_1p_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_MEC_1p_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_MEC_1p_FD_Dir, "02_E_e_VS_Theta_e_MEC_Only_1p_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_RES_1p_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_RES_1p_FD_Dir, "03_E_e_VS_Theta_e_RES_Only_1p_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_DIS_1p_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_DIS_1p_FD_Dir, "04_E_e_VS_Theta_e_DIS_Only_1p_FD");

        // E_e vs. Theta_e histograms (1n, CD & FD)
        histPlotter2D(c1, hE_e_VS_Theta_e_All_Int_1n_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_All_Int_1n_FD_Dir,
                      "00_E_e_VS_Theta_e_All_Int_1n_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_QEL_1n_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_QEL_1n_FD_Dir, "01_E_e_VS_Theta_e_QEL_Only_1n_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_MEC_1n_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_MEC_1n_FD_Dir, "02_E_e_VS_Theta_e_MEC_Only_1n_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_RES_1n_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_RES_1n_FD_Dir, "03_E_e_VS_Theta_e_RES_Only_1n_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_DIS_1n_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_DIS_1n_FD_Dir, "04_E_e_VS_Theta_e_DIS_Only_1n_FD");

        // E_e vs. Theta_e histograms (2p, CD & FD)
        histPlotter2D(c1, hE_e_VS_Theta_e_All_Int_2p_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_All_Int_2p_FD_Dir,
                      "00_E_e_VS_Theta_e_All_Int_2p_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_QEL_2p_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_QEL_2p_FD_Dir, "01_E_e_VS_Theta_e_QEL_Only_2p_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_MEC_2p_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_MEC_2p_FD_Dir, "02_E_e_VS_Theta_e_MEC_Only_2p_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_RES_2p_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_RES_2p_FD_Dir, "03_E_e_VS_Theta_e_RES_Only_2p_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_DIS_2p_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_DIS_2p_FD_Dir, "04_E_e_VS_Theta_e_DIS_Only_2p_FD");

        // E_e vs. Theta_e histograms (pFDpCD, CD & FD)
        histPlotter2D(c1, hE_e_VS_Theta_e_All_Int_pFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_All_Int_pFDpCD_FD_Dir,
                      "00_E_e_VS_Theta_e_All_Int_pFDpCD_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_QEL_pFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_QEL_pFDpCD_FD_Dir,
                      "01_E_e_VS_Theta_e_QEL_Only_pFDpCD_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_MEC_pFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_MEC_pFDpCD_FD_Dir,
                      "02_E_e_VS_Theta_e_MEC_Only_pFDpCD_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_RES_pFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_RES_pFDpCD_FD_Dir,
                      "03_E_e_VS_Theta_e_RES_Only_pFDpCD_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_DIS_pFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_DIS_pFDpCD_FD_Dir,
                      "04_E_e_VS_Theta_e_DIS_Only_pFDpCD_FD");

        // E_e vs. Theta_e histograms (nFDpCD, CD & FD)
        histPlotter2D(c1, hE_e_VS_Theta_e_All_Int_nFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_All_Int_nFDpCD_FD_Dir,
                      "00_E_e_VS_Theta_e_All_Int_nFDpCD_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_QEL_nFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_QEL_nFDpCD_FD_Dir,
                      "01_E_e_VS_Theta_e_QEL_Only_nFDpCD_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_MEC_nFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_MEC_nFDpCD_FD_Dir,
                      "02_E_e_VS_Theta_e_MEC_Only_nFDpCD_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_RES_nFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_RES_nFDpCD_FD_Dir,
                      "03_E_e_VS_Theta_e_RES_Only_nFDpCD_FD");
        histPlotter2D(c1, hE_e_VS_Theta_e_DIS_nFDpCD_FD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, true, hE_e_VS_Theta_e_DIS_nFDpCD_FD_Dir,
                      "04_E_e_VS_Theta_e_DIS_Only_nFDpCD_FD");

        //  Final state ratios (nFDpCD/pFDpCD) ----------------------------------------------------------------------------------------------------------------------------------

        // Final state ratios (nFDpCD/pFDpCD)
        if (apply_nucleon_cuts) {
            if (FSR_1D_plots) { DrawAndSaveFSRatio(SampleName, hE_e_All_Int_pFDpCD_FD, hE_e_All_Int_pFDpCD_FD_Dir, hE_e_All_Int_nFDpCD_FD, plots); }

            if (FSR_2D_plots && SampleName != "C12_simulation_6GeV_T5_first_10") {
                DrawAndSaveFSRatio(SampleName, hE_e_VS_Theta_e_All_Int_pFDpCD_FD, hE_e_VS_Theta_e_All_Int_pFDpCD_FD_Dir, hE_e_VS_Theta_e_All_Int_nFDpCD_FD, plots);
            }

            //            cout << "\033[33m\n\n\nExited after DrawAndSaveFSRatio finished for Q2!\n\n\n\033[0m";
            //            quit();
        }
    } else {
        cout << "\033[33m\n\nEnergy (E_e) plots are disabled by user.\n\n\033[0m";
    }

    // ======================================================================================================================================================================
    // Energy transfer histograms
    // ======================================================================================================================================================================

    // Energy transfer histograms
    if (ETrans_all_plots) {
        cout << "\033[33m\n\nPlotting Energy Transfer (ET) histograms...\n\n\033[0m";

        if (ETrans_All_Int_plots) {
            double ETrans_All_Ang_All_Int_integral_1p = hET_All_Ang_All_Int_1p_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_All_Int_1p_FD, norm_ET_plots, true, ETrans_All_Ang_All_Int_integral_1p, tET_All_Ang, "All Int., 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF,
                          2, false, true, sET_All_Ang_All_Int_1p_FD, "ET_All_Ang_All_Int_1p", hET_All_Ang_All_Int_1p_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_All_Int_integral_1p = hET15_All_Int_1p_FD->Integral();

            histPlotter1D(c1, hET15_All_Int_1p_FD, norm_ET_plots, true, ETrans15_All_Int_integral_1p, tET15, "All Int., 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                          sET15_All_Int_1p_FD, "ETrans_15_All_Int_1p", hET15_All_Int_1p_FD_Dir, "", kBlack, true, true, true);

            double ETrans_All_Ang_All_Int_integral_1n = hET_All_Ang_All_Int_1n_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_All_Int_1n_FD, norm_ET_plots, true, ETrans_All_Ang_All_Int_integral_1n, tET_All_Ang, "All Int., 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF,
                          2, false, true, sET_All_Ang_All_Int_1n_FD, "ET_All_Ang_All_Int_1n", hET_All_Ang_All_Int_1n_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_All_Int_integral_1n = hET15_All_Int_1n_FD->Integral();

            histPlotter1D(c1, hET15_All_Int_1n_FD, norm_ET_plots, true, ETrans15_All_Int_integral_1n, tET15, "All Int., 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                          sET15_All_Int_1n_FD, "ETrans_15_All_Int_1n", hET15_All_Int_1n_FD_Dir, "", kBlack, true, true, true);

            double ETrans_All_Ang_All_Int_integral_2p = hET_All_Ang_All_Int_2p_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_All_Int_2p_FD, norm_ET_plots, true, ETrans_All_Ang_All_Int_integral_2p, tET_All_Ang, "All Int., 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF,
                          2, false, true, sET_All_Ang_All_Int_2p_FD, "ET_All_Ang_All_Int_2p", hET_All_Ang_All_Int_2p_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_All_Int_integral_2p = hET15_All_Int_2p_FD->Integral();

            histPlotter1D(c1, hET15_All_Int_2p_FD, norm_ET_plots, true, ETrans15_All_Int_integral_2p, tET15, "All Int., 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                          sET15_All_Int_2p_FD, "ETrans_15_All_Int_2p", hET15_All_Int_2p_FD_Dir, "", kBlack, true, true, true);

            double ETrans_All_Ang_All_Int_integral_pFDpCD = hET_All_Ang_All_Int_pFDpCD_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_All_Int_pFDpCD_FD, norm_ET_plots, true, ETrans_All_Ang_All_Int_integral_pFDpCD, tET_All_Ang, "All Int., pFDpCD", 0.06, 0.0425, 0.0425, plots,
                          Histogram_OutPDF, 2, false, true, sET_All_Ang_All_Int_pFDpCD_FD, "ET_All_Ang_All_Int_pFDpCD", hET_All_Ang_All_Int_pFDpCD_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_All_Int_integral_pFDpCD = hET15_All_Int_pFDpCD_FD->Integral();

            histPlotter1D(c1, hET15_All_Int_pFDpCD_FD, norm_ET_plots, true, ETrans15_All_Int_integral_pFDpCD, tET15, "All Int., pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                          false, true, sET15_All_Int_pFDpCD_FD, "ETrans_15_All_Int_pFDpCD", hET15_All_Int_pFDpCD_FD_Dir, "", kBlack, true, true, true);

            double ETrans_All_Ang_All_Int_integral_nFDpCD = hET_All_Ang_All_Int_nFDpCD_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_All_Int_nFDpCD_FD, norm_ET_plots, true, ETrans_All_Ang_All_Int_integral_nFDpCD, tET_All_Ang, "All Int., nFDpCD", 0.06, 0.0425, 0.0425, plots,
                          Histogram_OutPDF, 2, false, true, sET_All_Ang_All_Int_nFDpCD_FD, "ET_All_Ang_All_Int_nFDpCD", hET_All_Ang_All_Int_nFDpCD_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_All_Int_integral_nFDpCD = hET15_All_Int_nFDpCD_FD->Integral();

            histPlotter1D(c1, hET15_All_Int_nFDpCD_FD, norm_ET_plots, true, ETrans15_All_Int_integral_nFDpCD, tET15, "All Int., nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                          false, true, sET15_All_Int_nFDpCD_FD, "ETrans_15_All_Int_nFDpCD", hET15_All_Int_nFDpCD_FD_Dir, "", kBlack, true, true, true);
        }

        if (ETrans_QEL_plots) {
            double ETrans_All_Ang_QEL_integral_1p = hET_All_Ang_QEL_1p_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_QEL_1p_FD, norm_ET_plots, true, ETrans_All_Ang_QEL_integral_1p, tET_All_Ang, "QEL Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                          false, true, sET_All_Ang_All_Int_1p_FD, "ET_All_Ang_QEL_1p", hET_All_Ang_QEL_1p_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_QEL_integral_1p = hET15_QEL_1p_FD->Integral();

            histPlotter1D(c1, hET15_QEL_1p_FD, norm_ET_plots, true, ETrans15_QEL_integral_1p, tET15, "QEL Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                          sET15_All_Int_1p_FD, "ETrans_15_QEL_Only_1p", hET15_QEL_1p_FD_Dir, "", kBlue, true, true, true);

            double ETrans_All_Ang_QEL_integral_1n = hET_All_Ang_QEL_1n_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_QEL_1n_FD, norm_ET_plots, true, ETrans_All_Ang_QEL_integral_1n, tET_All_Ang, "QEL Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                          false, true, sET_All_Ang_All_Int_1n_FD, "ET_All_Ang_QEL_1n", hET_All_Ang_QEL_1n_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_QEL_integral_1n = hET15_QEL_1n_FD->Integral();

            histPlotter1D(c1, hET15_QEL_1n_FD, norm_ET_plots, true, ETrans15_QEL_integral_1n, tET15, "QEL Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                          sET15_All_Int_1n_FD, "ETrans_15_QEL_Only_1n", hET15_QEL_1n_FD_Dir, "", kBlue, true, true, true);

            double ETrans_All_Ang_QEL_integral_2p = hET_All_Ang_QEL_2p_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_QEL_2p_FD, norm_ET_plots, true, ETrans_All_Ang_QEL_integral_2p, tET_All_Ang, "QEL Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                          false, true, sET_All_Ang_All_Int_2p_FD, "ET_All_Ang_QEL_2p", hET_All_Ang_QEL_2p_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_QEL_integral_2p = hET15_QEL_2p_FD->Integral();

            histPlotter1D(c1, hET15_QEL_2p_FD, norm_ET_plots, true, ETrans15_QEL_integral_2p, tET15, "QEL Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                          sET15_All_Int_2p_FD, "ETrans_15_QEL_Only_2p", hET15_QEL_2p_FD_Dir, "", kBlue, true, true, true);

            double ETrans_All_Ang_QEL_integral_pFDpCD = hET_All_Ang_QEL_pFDpCD_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_QEL_pFDpCD_FD, norm_ET_plots, true, ETrans_All_Ang_QEL_integral_pFDpCD, tET_All_Ang, "QEL Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                          Histogram_OutPDF, 2, false, true, sET_All_Ang_All_Int_pFDpCD_FD, "ET_All_Ang_QEL_pFDpCD", hET_All_Ang_QEL_pFDpCD_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_QEL_integral_pFDpCD = hET15_QEL_pFDpCD_FD->Integral();

            histPlotter1D(c1, hET15_QEL_pFDpCD_FD, norm_ET_plots, true, ETrans15_QEL_integral_pFDpCD, tET15, "QEL Only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                          true, sET15_All_Int_pFDpCD_FD, "ETrans_15_QEL_Only_pFDpCD", hET15_QEL_pFDpCD_FD_Dir, "", kBlue, true, true, true);

            double ETrans_All_Ang_QEL_integral_nFDpCD = hET_All_Ang_QEL_nFDpCD_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_QEL_nFDpCD_FD, norm_ET_plots, true, ETrans_All_Ang_QEL_integral_nFDpCD, tET_All_Ang, "QEL Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                          Histogram_OutPDF, 2, false, true, sET_All_Ang_All_Int_nFDpCD_FD, "ET_All_Ang_QEL_nFDpCD", hET_All_Ang_QEL_nFDpCD_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_QEL_integral_nFDpCD = hET15_QEL_nFDpCD_FD->Integral();

            histPlotter1D(c1, hET15_QEL_nFDpCD_FD, norm_ET_plots, true, ETrans15_QEL_integral_nFDpCD, tET15, "QEL Only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                          true, sET15_All_Int_nFDpCD_FD, "ETrans_15_QEL_Only_nFDpCD", hET15_QEL_nFDpCD_FD_Dir, "", kBlue, true, true, true);
        }

        if (ETrans_MEC_plots) {
            double ETrans_All_Ang_MEC_integral_1p = hET_All_Ang_MEC_1p_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_MEC_1p_FD, norm_ET_plots, true, ETrans_All_Ang_MEC_integral_1p, tET_All_Ang, "MEC Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                          false, true, sET_All_Ang_All_Int_1p_FD, "ET_All_Ang_MEC_1p", hET_All_Ang_MEC_1p_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_MEC_integral_1p = hET15_MEC_1p_FD->Integral();

            histPlotter1D(c1, hET15_MEC_1p_FD, norm_ET_plots, true, ETrans15_MEC_integral_1p, tET15, "MEC Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                          sET15_All_Int_1p_FD, "ETrans_15_MEC_Only_1p", hET15_MEC_1p_FD_Dir, "", kRed, true, true, true);

            double ETrans_All_Ang_MEC_integral_1n = hET_All_Ang_MEC_1n_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_MEC_1n_FD, norm_ET_plots, true, ETrans_All_Ang_MEC_integral_1n, tET_All_Ang, "MEC Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                          false, true, sET_All_Ang_All_Int_1n_FD, "ET_All_Ang_MEC_1n", hET_All_Ang_MEC_1n_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_MEC_integral_1n = hET15_MEC_1n_FD->Integral();

            histPlotter1D(c1, hET15_MEC_1n_FD, norm_ET_plots, true, ETrans15_MEC_integral_1n, tET15, "MEC Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                          sET15_All_Int_1n_FD, "ETrans_15_MEC_Only_1n", hET15_MEC_1n_FD_Dir, "", kRed, true, true, true);

            double ETrans_All_Ang_MEC_integral_2p = hET_All_Ang_MEC_2p_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_MEC_2p_FD, norm_ET_plots, true, ETrans_All_Ang_MEC_integral_2p, tET_All_Ang, "MEC Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                          false, true, sET_All_Ang_All_Int_2p_FD, "ET_All_Ang_MEC_2p", hET_All_Ang_MEC_2p_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_MEC_integral_2p = hET15_MEC_2p_FD->Integral();

            histPlotter1D(c1, hET15_MEC_2p_FD, norm_ET_plots, true, ETrans15_MEC_integral_2p, tET15, "MEC Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                          sET15_All_Int_2p_FD, "ETrans_15_MEC_Only_2p", hET15_MEC_2p_FD_Dir, "", kRed, true, true, true);

            double ETrans_All_Ang_MEC_integral_pFDpCD = hET_All_Ang_MEC_pFDpCD_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_MEC_pFDpCD_FD, norm_ET_plots, true, ETrans_All_Ang_MEC_integral_pFDpCD, tET_All_Ang, "MEC Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                          Histogram_OutPDF, 2, false, true, sET_All_Ang_All_Int_pFDpCD_FD, "ET_All_Ang_MEC_pFDpCD", hET_All_Ang_MEC_pFDpCD_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_MEC_integral_pFDpCD = hET15_MEC_pFDpCD_FD->Integral();

            histPlotter1D(c1, hET15_MEC_pFDpCD_FD, norm_ET_plots, true, ETrans15_MEC_integral_pFDpCD, tET15, "MEC Only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                          true, sET15_All_Int_pFDpCD_FD, "ETrans_15_MEC_Only_pFDpCD", hET15_MEC_pFDpCD_FD_Dir, "", kRed, true, true, true);

            double ETrans_All_Ang_MEC_integral_nFDpCD = hET_All_Ang_MEC_nFDpCD_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_MEC_nFDpCD_FD, norm_ET_plots, true, ETrans_All_Ang_MEC_integral_nFDpCD, tET_All_Ang, "MEC Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                          Histogram_OutPDF, 2, false, true, sET_All_Ang_All_Int_nFDpCD_FD, "ET_All_Ang_MEC_nFDpCD", hET_All_Ang_MEC_nFDpCD_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_MEC_integral_nFDpCD = hET15_MEC_nFDpCD_FD->Integral();

            histPlotter1D(c1, hET15_MEC_nFDpCD_FD, norm_ET_plots, true, ETrans15_MEC_integral_nFDpCD, tET15, "MEC Only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                          true, sET15_All_Int_nFDpCD_FD, "ETrans_15_MEC_Only_nFDpCD", hET15_MEC_nFDpCD_FD_Dir, "", kRed, true, true, true);
        }

        if (ETrans_RES_plots) {
            double ETrans_All_Ang_RES_integral_1p = hET_All_Ang_RES_1p_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_RES_1p_FD, norm_ET_plots, true, ETrans_All_Ang_RES_integral_1p, tET_All_Ang, "RES Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                          false, true, sET_All_Ang_All_Int_1p_FD, "ET_All_Ang_RES_1p", hET_All_Ang_RES_1p_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_RES_integral_1p = hET15_RES_1p_FD->Integral();

            histPlotter1D(c1, hET15_RES_1p_FD, norm_ET_plots, true, ETrans15_RES_integral_1p, tET15, "RES Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                          sET15_All_Int_1p_FD, "ETrans_15_RES_1p", hET15_RES_1p_FD_Dir, "", kGreen, true, true, true);

            double ETrans_All_Ang_RES_integral_1n = hET_All_Ang_RES_1n_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_RES_1n_FD, norm_ET_plots, true, ETrans_All_Ang_RES_integral_1n, tET_All_Ang, "RES Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                          false, true, sET_All_Ang_All_Int_1n_FD, "ET_All_Ang_RES_1n", hET_All_Ang_RES_1n_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_RES_integral_1n = hET15_RES_1n_FD->Integral();

            histPlotter1D(c1, hET15_RES_1n_FD, norm_ET_plots, true, ETrans15_RES_integral_1n, tET15, "RES Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                          sET15_All_Int_1n_FD, "ETrans_15_RES_1n", hET15_RES_1n_FD_Dir, "", kGreen, true, true, true);

            double ETrans_All_Ang_RES_integral_2p = hET_All_Ang_RES_2p_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_RES_2p_FD, norm_ET_plots, true, ETrans_All_Ang_RES_integral_2p, tET_All_Ang, "RES Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                          false, true, sET_All_Ang_All_Int_2p_FD, "ET_All_Ang_RES_2p", hET_All_Ang_RES_2p_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_RES_integral_2p = hET15_RES_2p_FD->Integral();

            histPlotter1D(c1, hET15_RES_2p_FD, norm_ET_plots, true, ETrans15_RES_integral_2p, tET15, "RES Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                          sET15_All_Int_2p_FD, "ETrans_15_RES_2p", hET15_RES_2p_FD_Dir, "", kGreen, true, true, true);

            double ETrans_All_Ang_RES_integral_pFDpCD = hET_All_Ang_RES_pFDpCD_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_RES_pFDpCD_FD, norm_ET_plots, true, ETrans_All_Ang_RES_integral_pFDpCD, tET_All_Ang, "RES Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                          Histogram_OutPDF, 2, false, true, sET_All_Ang_All_Int_pFDpCD_FD, "ET_All_Ang_RES_pFDpCD", hET_All_Ang_RES_pFDpCD_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_RES_integral_pFDpCD = hET15_RES_pFDpCD_FD->Integral();

            histPlotter1D(c1, hET15_RES_pFDpCD_FD, norm_ET_plots, true, ETrans15_RES_integral_pFDpCD, tET15, "RES Only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                          true, sET15_All_Int_pFDpCD_FD, "ETrans_15_RES_pFDpCD", hET15_RES_pFDpCD_FD_Dir, "", kGreen, true, true, true);

            double ETrans_All_Ang_RES_integral_nFDpCD = hET_All_Ang_RES_nFDpCD_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_RES_nFDpCD_FD, norm_ET_plots, true, ETrans_All_Ang_RES_integral_nFDpCD, tET_All_Ang, "RES Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                          Histogram_OutPDF, 2, false, true, sET_All_Ang_All_Int_nFDpCD_FD, "ET_All_Ang_RES_nFDpCD", hET_All_Ang_RES_nFDpCD_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_RES_integral_nFDpCD = hET15_RES_nFDpCD_FD->Integral();

            histPlotter1D(c1, hET15_RES_nFDpCD_FD, norm_ET_plots, true, ETrans15_RES_integral_nFDpCD, tET15, "RES Only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                          true, sET15_All_Int_nFDpCD_FD, "ETrans_15_RES_nFDpCD", hET15_RES_nFDpCD_FD_Dir, "", kGreen, true, true, true);
        }

        if (ETrans_DIS_plots) {
            double ETrans_All_Ang_DIS_integral_1p = hET_All_Ang_DIS_1p_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_DIS_1p_FD, norm_ET_plots, true, ETrans_All_Ang_DIS_integral_1p, tET_All_Ang, "DIS Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                          false, true, sET_All_Ang_All_Int_1p_FD, "ET_All_Ang_DIS_1p", hET_All_Ang_DIS_1p_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_DIS_integral_1p = hET15_DIS_1p_FD->Integral();

            histPlotter1D(c1, hET15_DIS_1p_FD, norm_ET_plots, true, ETrans15_DIS_integral_1p, tET15, "DIS Only, 1p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                          sET15_All_Int_1p_FD, "ETrans_15_DIS_1p", hET15_DIS_1p_FD_Dir, "", kMagenta, true, true, true);

            double ETrans_All_Ang_DIS_integral_1n = hET_All_Ang_DIS_1n_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_DIS_1n_FD, norm_ET_plots, true, ETrans_All_Ang_DIS_integral_1n, tET_All_Ang, "DIS Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                          false, true, sET_All_Ang_All_Int_1n_FD, "ET_All_Ang_DIS_1n", hET_All_Ang_DIS_1n_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_DIS_integral_1n = hET15_DIS_1n_FD->Integral();

            histPlotter1D(c1, hET15_DIS_1n_FD, norm_ET_plots, true, ETrans15_DIS_integral_1n, tET15, "DIS Only, 1n", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                          sET15_All_Int_1n_FD, "ETrans_15_DIS_1n", hET15_DIS_1n_FD_Dir, "", kMagenta, true, true, true);

            double ETrans_All_Ang_DIS_integral_2p = hET_All_Ang_DIS_2p_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_DIS_2p_FD, norm_ET_plots, true, ETrans_All_Ang_DIS_integral_2p, tET_All_Ang, "DIS Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                          false, true, sET_All_Ang_All_Int_2p_FD, "ET_All_Ang_DIS_2p", hET_All_Ang_DIS_2p_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_DIS_integral_2p = hET15_DIS_2p_FD->Integral();

            histPlotter1D(c1, hET15_DIS_2p_FD, norm_ET_plots, true, ETrans15_DIS_integral_2p, tET15, "DIS Only, 2p", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                          sET15_All_Int_2p_FD, "ETrans_15_DIS_2p", hET15_DIS_2p_FD_Dir, "", kMagenta, true, true, true);

            double ETrans_All_Ang_DIS_integral_pFDpCD = hET_All_Ang_DIS_pFDpCD_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_DIS_pFDpCD_FD, norm_ET_plots, true, ETrans_All_Ang_DIS_integral_pFDpCD, tET_All_Ang, "DIS Only, pFDpCD", 0.06, 0.0425, 0.0425, plots,
                          Histogram_OutPDF, 2, false, true, sET_All_Ang_All_Int_pFDpCD_FD, "ET_All_Ang_DIS_pFDpCD", hET_All_Ang_DIS_pFDpCD_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_DIS_integral_pFDpCD = hET15_DIS_pFDpCD_FD->Integral();

            histPlotter1D(c1, hET15_DIS_pFDpCD_FD, norm_ET_plots, true, ETrans15_DIS_integral_pFDpCD, tET15, "DIS Only, pFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                          true, sET15_All_Int_pFDpCD_FD, "ETrans_15_DIS_pFDpCD", hET15_DIS_pFDpCD_FD_Dir, "", kMagenta, true, true, true);

            double ETrans_All_Ang_DIS_integral_nFDpCD = hET_All_Ang_DIS_nFDpCD_FD->Integral();

            histPlotter1D(c1, hET_All_Ang_DIS_nFDpCD_FD, norm_ET_plots, true, ETrans_All_Ang_DIS_integral_nFDpCD, tET_All_Ang, "DIS Only, nFDpCD", 0.06, 0.0425, 0.0425, plots,
                          Histogram_OutPDF, 2, false, true, sET_All_Ang_All_Int_nFDpCD_FD, "ET_All_Ang_DIS_nFDpCD", hET_All_Ang_DIS_nFDpCD_FD_Dir, "FD", kBlack, true, true, true);

            double ETrans15_DIS_integral_nFDpCD = hET15_DIS_nFDpCD_FD->Integral();

            histPlotter1D(c1, hET15_DIS_nFDpCD_FD, norm_ET_plots, true, ETrans15_DIS_integral_nFDpCD, tET15, "DIS Only, nFDpCD", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                          true, sET15_All_Int_nFDpCD_FD, "ETrans_15_DIS_nFDpCD", hET15_DIS_nFDpCD_FD_Dir, "", kMagenta, true, true, true);
        }

        //  Energy transfer around 15 deg stack ---------------------------------------------------------------------------------------------------------------------------------

        if (ETrans_All_Int_plots && ETrans_QEL_plots && ETrans_MEC_plots && ETrans_RES_plots && ETrans_DIS_plots) {
            stackPlotter1D(c1, sET_All_Ang_All_Int_1p_FD, norm_ET_plots, tET_All_Ang, "1p", plots, Histogram_OutPDF, hET_All_Ang_All_Int_1p_FD, hET_All_Ang_QEL_1p_FD, hET_All_Ang_MEC_1p_FD,
                           hET_All_Ang_RES_1p_FD, hET_All_Ang_DIS_1p_FD, "02_ET_All_Ang_stack", sET_All_Ang_All_Int_1p_FD_Dir, "");

            stackPlotter1D(c1, sET15_All_Int_1p_FD, norm_ET_plots, tET15, "1p", plots, Histogram_OutPDF, hET15_All_Int_1p_FD, hET15_QEL_1p_FD, hET15_MEC_1p_FD, hET15_RES_1p_FD,
                           hET15_DIS_1p_FD, "02_ET15_stack", sET15_All_Int_1p_FD_Dir, "");

            stackPlotter1D(c1, sET_All_Ang_All_Int_1n_FD, norm_ET_plots, tET_All_Ang, "1n", plots, Histogram_OutPDF, hET_All_Ang_All_Int_1n_FD, hET_All_Ang_QEL_1n_FD, hET_All_Ang_MEC_1n_FD,
                           hET_All_Ang_RES_1n_FD, hET_All_Ang_DIS_1n_FD, "02_ET_All_Ang_stack", sET_All_Ang_All_Int_1n_FD_Dir, "");

            stackPlotter1D(c1, sET15_All_Int_1n_FD, norm_ET_plots, tET15, "1n", plots, Histogram_OutPDF, hET15_All_Int_1n_FD, hET15_QEL_1n_FD, hET15_MEC_1n_FD, hET15_RES_1n_FD,
                           hET15_DIS_1n_FD, "02_ET15_stack", sET15_All_Int_1n_FD_Dir, "");

            stackPlotter1D(c1, sET_All_Ang_All_Int_2p_FD, norm_ET_plots, tET_All_Ang, "2p", plots, Histogram_OutPDF, hET_All_Ang_All_Int_2p_FD, hET_All_Ang_QEL_2p_FD, hET_All_Ang_MEC_2p_FD,
                           hET_All_Ang_RES_2p_FD, hET_All_Ang_DIS_2p_FD, "02_ET_All_Ang_stack", sET_All_Ang_All_Int_2p_FD_Dir, "");

            stackPlotter1D(c1, sET15_All_Int_2p_FD, norm_ET_plots, tET15, "2p", plots, Histogram_OutPDF, hET15_All_Int_2p_FD, hET15_QEL_2p_FD, hET15_MEC_2p_FD, hET15_RES_2p_FD,
                           hET15_DIS_2p_FD, "02_ET15_stack", sET15_All_Int_2p_FD_Dir, "");

            stackPlotter1D(c1, sET_All_Ang_All_Int_pFDpCD_FD, norm_ET_plots, tET_All_Ang, "pFDpCD", plots, Histogram_OutPDF, hET_All_Ang_All_Int_pFDpCD_FD, hET_All_Ang_QEL_pFDpCD_FD,
                           hET_All_Ang_MEC_pFDpCD_FD, hET_All_Ang_RES_pFDpCD_FD, hET_All_Ang_DIS_pFDpCD_FD, "02_ET_All_Ang_stack", sET_All_Ang_All_Int_pFDpCD_FD_Dir, "");

            stackPlotter1D(c1, sET15_All_Int_pFDpCD_FD, norm_ET_plots, tET15, "pFDpCD", plots, Histogram_OutPDF, hET15_All_Int_pFDpCD_FD, hET15_QEL_pFDpCD_FD, hET15_MEC_pFDpCD_FD,
                           hET15_RES_pFDpCD_FD, hET15_DIS_pFDpCD_FD, "02_ET15_stack", sET15_All_Int_pFDpCD_FD_Dir, "");

            stackPlotter1D(c1, sET_All_Ang_All_Int_nFDpCD_FD, norm_ET_plots, tET_All_Ang, "nFDpCD", plots, Histogram_OutPDF, hET_All_Ang_All_Int_nFDpCD_FD, hET_All_Ang_QEL_nFDpCD_FD,
                           hET_All_Ang_MEC_nFDpCD_FD, hET_All_Ang_RES_nFDpCD_FD, hET_All_Ang_DIS_nFDpCD_FD, "02_ET_All_Ang_stack", sET_All_Ang_All_Int_nFDpCD_FD_Dir, "");

            stackPlotter1D(c1, sET15_All_Int_nFDpCD_FD, norm_ET_plots, tET15, "nFDpCD", plots, Histogram_OutPDF, hET15_All_Int_nFDpCD_FD, hET15_QEL_nFDpCD_FD, hET15_MEC_nFDpCD_FD,
                           hET15_RES_nFDpCD_FD, hET15_DIS_nFDpCD_FD, "02_ET15_stack", sET15_All_Int_nFDpCD_FD_Dir, "");
        }

        //  Final state ratios (nFDpCD/pFDpCD) ----------------------------------------------------------------------------------------------------------------------------------

        // Final state ratios (nFDpCD/pFDpCD)
        if (apply_nucleon_cuts) {
            if (FSR_1D_plots) { DrawAndSaveFSRatio(SampleName, hET15_All_Int_pFDpCD_FD, hET15_All_Int_pFDpCD_FD_Dir, hET15_All_Int_nFDpCD_FD, plots); }
        }
    } else {
        cout << "\033[33m\n\nEnergy transfer plots are disabled by user.\n\n\033[0m";
    }

    // ======================================================================================================================================================================
    // Ecal reconstruction histograms
    // ======================================================================================================================================================================

    // Ecal reconstruction histograms
    if (Ecal_plots) {
        cout << "\033[33m\n\nPlotting Ecal reconstruction histograms...\n\n\033[0m";

        //  Ecal plots (CD & FD) ------------------------------------------------------------------------------------------------------------------------------------------------

        // Ecal plots (1p)
        histPlotter1D(c1, hEcal_All_Int_1p, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_1p,
                      "Ecal_rec_All_Int", hEcal_All_Int_1p_Dir, "1p", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_QEL_1p, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "QEL Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_1p,
                      "Ecal_rec_QEL_only", hEcal_QEL_1p_Dir, "1p", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_MEC_1p, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "MEC Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_1p,
                      "Ecal_rec_MEC_only", hEcal_MEC_1p_Dir, "1p", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_RES_1p, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "RES Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_1p,
                      "Ecal_rec_RES_only", hEcal_RES_1p_Dir, "1p", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_DIS_1p, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "DIS Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_1p,
                      "Ecal_rec_DIS_only", hEcal_DIS_1p_Dir, "1p", kBlue, true, true, true);

        stackPlotter1D(c1, sEcal_1p, norm_Ecal_plots, "E_{cal} Reconstruction", "1p", plots, Histogram_OutPDF, hEcal_All_Int_1p, hEcal_QEL_1p, hEcal_MEC_1p, hEcal_RES_1p, hEcal_DIS_1p,
                       "01_Ecal_rec_stack", sEcal_1p_Dir, "");

        // Ecal plots (1n)
        histPlotter1D(c1, hEcal_All_Int_1n, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_1n,
                      "Ecal_rec_All_Int", hEcal_All_Int_1n_Dir, "1n", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_QEL_1n, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "QEL Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_1n,
                      "Ecal_rec_QEL_only", hEcal_QEL_1n_Dir, "1n", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_MEC_1n, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "MEC Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_1n,
                      "Ecal_rec_MEC_only", hEcal_MEC_1n_Dir, "1n", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_RES_1n, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "RES Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_1n,
                      "Ecal_rec_RES_only", hEcal_RES_1n_Dir, "1n", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_DIS_1n, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "DIS Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_1n,
                      "Ecal_rec_DIS_only", hEcal_DIS_1n_Dir, "1n", kBlue, true, true, true);

        stackPlotter1D(c1, sEcal_1n, norm_Ecal_plots, "E_{cal} Reconstruction", "1n", plots, Histogram_OutPDF, hEcal_All_Int_1n, hEcal_QEL_1n, hEcal_MEC_1n, hEcal_RES_1n, hEcal_DIS_1n,
                       "01_Ecal_rec_stack", sEcal_1n_Dir, "");

        // Ecal plots (2p)
        histPlotter1D(c1, hEcal_All_Int_2p, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_2p,
                      "Ecal_rec_All_Int", hEcal_All_Int_2p_Dir, "2p", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_QEL_2p, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "QEL Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_2p,
                      "Ecal_rec_QEL_only", hEcal_QEL_2p_Dir, "2p", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_MEC_2p, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "MEC Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_2p,
                      "Ecal_rec_MEC_only", hEcal_MEC_2p_Dir, "2p", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_RES_2p, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "RES Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_2p,
                      "Ecal_rec_RES_only", hEcal_RES_2p_Dir, "2p", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_DIS_2p, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "DIS Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_2p,
                      "Ecal_rec_DIS_only", hEcal_DIS_2p_Dir, "2p", kBlue, true, true, true);

        stackPlotter1D(c1, sEcal_2p, norm_Ecal_plots, "E_{cal} Reconstruction", "2p", plots, Histogram_OutPDF, hEcal_All_Int_2p, hEcal_QEL_2p, hEcal_MEC_2p, hEcal_RES_2p, hEcal_DIS_2p,
                       "01_Ecal_rec_stack", sEcal_2p_Dir, "");

        // Ecal plots (pFDpCD)
        histPlotter1D(c1, hEcal_All_Int_pFDpCD, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_pFDpCD,
                      "Ecal_rec_All_Int", hEcal_All_Int_pFDpCD_Dir, "pFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_QEL_pFDpCD, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "QEL Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_pFDpCD,
                      "Ecal_rec_QEL_only", hEcal_QEL_pFDpCD_Dir, "pFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_MEC_pFDpCD, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "MEC Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_pFDpCD,
                      "Ecal_rec_MEC_only", hEcal_MEC_pFDpCD_Dir, "pFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_RES_pFDpCD, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "RES Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_pFDpCD,
                      "Ecal_rec_RES_only", hEcal_RES_pFDpCD_Dir, "pFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_DIS_pFDpCD, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "DIS Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_pFDpCD,
                      "Ecal_rec_DIS_only", hEcal_DIS_pFDpCD_Dir, "pFDpCD", kBlue, true, true, true);

        stackPlotter1D(c1, sEcal_pFDpCD, norm_Ecal_plots, "E_{cal} Reconstruction", "pFDpCD", plots, Histogram_OutPDF, hEcal_All_Int_pFDpCD, hEcal_QEL_pFDpCD, hEcal_MEC_pFDpCD,
                       hEcal_RES_pFDpCD, hEcal_DIS_pFDpCD, "01_Ecal_rec_stack", sEcal_pFDpCD_Dir, "");

        // Ecal plots (nFDpCD)
        histPlotter1D(c1, hEcal_All_Int_nFDpCD, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_nFDpCD,
                      "Ecal_rec_All_Int", hEcal_All_Int_nFDpCD_Dir, "nFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_QEL_nFDpCD, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "QEL Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_nFDpCD,
                      "Ecal_rec_QEL_only", hEcal_QEL_nFDpCD_Dir, "nFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_MEC_nFDpCD, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "MEC Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_nFDpCD,
                      "Ecal_rec_MEC_only", hEcal_MEC_nFDpCD_Dir, "nFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_RES_nFDpCD, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "RES Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_nFDpCD,
                      "Ecal_rec_RES_only", hEcal_RES_nFDpCD_Dir, "nFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hEcal_DIS_nFDpCD, norm_Ecal_plots, true, 1., "E_{cal} Reconstruction", "DIS Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sEcal_nFDpCD,
                      "Ecal_rec_DIS_only", hEcal_DIS_nFDpCD_Dir, "nFDpCD", kBlue, true, true, true);

        stackPlotter1D(c1, sEcal_nFDpCD, norm_Ecal_plots, "E_{cal} Reconstruction", "nFDpCD", plots, Histogram_OutPDF, hEcal_All_Int_nFDpCD, hEcal_QEL_nFDpCD, hEcal_MEC_nFDpCD,
                       hEcal_RES_nFDpCD, hEcal_DIS_nFDpCD, "01_Ecal_rec_stack", sEcal_nFDpCD_Dir, "");

        //  Ecal vs. momentum plots (CD & FD) -----------------------------------------------------------------------------------------------------------------------------------

        // Ecal vs. momentum plots (1p)
        histPlotter2D(c1, hEcal_vs_P_e_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_e_1p_Dir, "01_hEcal_vs_P_e_1p", false);
        histPlotter2D(c1, hEcal_vs_P_p_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_p_1p_Dir, "02_hEcal_vs_P_p_1p", false);
        histPlotter2D(c1, hEcal_vs_P_e_test_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_e_1p_Dir, "01_hEcal_vs_P_e_test_1p", false);
        histPlotter2D(c1, hEcal_vs_P_p_test_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_p_1p_Dir, "02_hEcal_vs_P_p_test_1p", false);

        // Ecal vs. momentum plots (1n)
        histPlotter2D(c1, hEcal_vs_P_e_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_e_1n_Dir, "01_hEcal_vs_P_e_1n", false);
        histPlotter2D(c1, hEcal_vs_P_n_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_n_1n_Dir, "02_hEcal_vs_P_n_1n", false);
        histPlotter2D(c1, hEcal_vs_P_e_test_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_e_1n_Dir, "01_hEcal_vs_P_e_test_1n", false);
        histPlotter2D(c1, hEcal_vs_P_n_test_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_n_1n_Dir, "02_hEcal_vs_P_n_test_1n", false);

        // Ecal vs. momentum plots (pFDpCD)
        histPlotter2D(c1, hEcal_vs_P_e_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_e_pFDpCD_Dir, "01_Ecal_vs_P_e_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_P_pFD_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_pFD_pFDpCD_Dir, "02_Ecal_vs_P_pFD_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_P_pCD_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_pCD_pFDpCD_Dir, "03_Ecal_vs_P_pCD_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_P_e_test_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_e_pFDpCD_Dir, "01_Ecal_vs_P_e_test_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_P_pFD_test_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_pFD_pFDpCD_Dir, "02_Ecal_vs_P_pFD_test_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_P_pCD_test_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_pCD_pFDpCD_Dir, "03_Ecal_vs_P_pCD_test_pFDpCD", false);

        // Ecal vs. momentum plots (nFDpCD)
        histPlotter2D(c1, hEcal_vs_P_e_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_e_nFDpCD_Dir, "01_Ecal_vs_P_e_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_P_nFD_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_nFD_nFDpCD_Dir, "02_Ecal_vs_P_nFD_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_P_pCD_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_pCD_nFDpCD_Dir, "03_Ecal_vs_P_pCD_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_P_e_test_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_e_nFDpCD_Dir, "01_Ecal_vs_P_e_test_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_P_nFD_test_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_nFD_nFDpCD_Dir, "02_Ecal_vs_P_nFD_test_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_P_pCD_test_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_P_pCD_nFDpCD_Dir, "03_Ecal_vs_P_pCD_test_nFDpCD", false);

        //  Ecal vs. angles plots (CD & FD) -------------------------------------------------------------------------------------------------------------------------------------

        // Ecal vs. angles plots (1p)
        histPlotter2D(c1, hEcal_vs_Theta_e_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_e_1p_Dir, "01a_Ecal_vs_Theta_e_1p", false);
        histPlotter2D(c1, hEcal_vs_Phi_e_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_e_1p_Dir, "01b_Ecal_vs_Phi_e_1p", false);
        histPlotter2D(c1, hEcal_vs_Theta_p_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_p_1p_Dir, "02a_Ecal_vs_Theta_p_1p", false);
        histPlotter2D(c1, hEcal_vs_Phi_p_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_p_1p_Dir, "02b_Ecal_vs_Phi_p_1p", false);
        histPlotter2D(c1, hEcal_vs_Theta_e_test_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_e_1p_Dir, "01a_Ecal_vs_Theta_e_test_1p", false);
        histPlotter2D(c1, hEcal_vs_Phi_e_test_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_e_1p_Dir, "01b_Ecal_vs_Phi_e_test_1p", false);
        histPlotter2D(c1, hEcal_vs_Theta_p_test_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_p_1p_Dir, "02a_Ecal_vs_Theta_p_test_1p", false);
        histPlotter2D(c1, hEcal_vs_Phi_p_test_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_p_1p_Dir, "02b_Ecal_vs_Phi_p_test_1p", false);

        // Ecal vs. angles plots (1n)
        histPlotter2D(c1, hEcal_vs_Theta_e_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_e_1n_Dir, "01a_Ecal_vs_Theta_e_1n", false);
        histPlotter2D(c1, hEcal_vs_Phi_e_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_e_1n_Dir, "01b_Ecal_vs_Phi_e_1n", false);
        histPlotter2D(c1, hEcal_vs_Theta_n_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_n_1n_Dir, "01_Ecal_vs_Theta_n_1n", false);
        histPlotter2D(c1, hEcal_vs_Phi_n_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_n_1n_Dir, "02_Ecal_vs_Phi_n_1n", false);
        histPlotter2D(c1, hEcal_vs_Theta_e_test_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_e_1n_Dir, "01a_Ecal_vs_Theta_e_test_1n", false);
        histPlotter2D(c1, hEcal_vs_Phi_e_test_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_e_1n_Dir, "01b_Ecal_vs_Phi_e_test_1n", false);
        histPlotter2D(c1, hEcal_vs_Theta_n_test_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_n_1n_Dir, "01_Ecal_vs_Theta_n_test_1n", false);
        histPlotter2D(c1, hEcal_vs_Phi_n_test_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_n_1n_Dir, "02_Ecal_vs_Phi_n_test_1n", false);

        // Ecal vs. angles plots (pFDpCD)
        histPlotter2D(c1, hEcal_vs_Theta_e_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_e_pFDpCD_Dir, "01a_Ecal_vs_Theta_e_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_Phi_e_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_e_pFDpCD_Dir, "01b_Ecal_vs_Phi_e_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_Theta_pFD_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_pFD_pFDpCD_Dir, "02a_Ecal_vs_Theta_pFD_pFDpCD",
                      false);
        histPlotter2D(c1, hEcal_vs_Phi_pFD_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_pFD_pFDpCD_Dir, "02b_Ecal_vs_Phi_pFD_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_Theta_pCD_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_pCD_pFDpCD_Dir, "03a_Ecal_vs_Theta_pCD_pFDpCD",
                      false);
        histPlotter2D(c1, hEcal_vs_Phi_pCD_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_pCD_pFDpCD_Dir, "03b_Ecal_vs_Phi_pCD_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_Theta_e_test_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_e_pFDpCD_Dir, "01a_Ecal_vs_Theta_e_test_pFDpCD",
                      false);
        histPlotter2D(c1, hEcal_vs_Phi_e_test_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_e_pFDpCD_Dir, "01b_Ecal_vs_Phi_e_test_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_Theta_pFD_test_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_pFD_pFDpCD_Dir,
                      "02a_Ecal_vs_Theta_pFD_test_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_Phi_pFD_test_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_pFD_pFDpCD_Dir, "02b_Ecal_vs_Phi_pFD_test_pFDpCD",
                      false);
        histPlotter2D(c1, hEcal_vs_Theta_pCD_test_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_pCD_pFDpCD_Dir,
                      "03a_Ecal_vs_Theta_pCD_test_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_Phi_pCD_test_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_pCD_pFDpCD_Dir, "03b_Ecal_vs_Phi_pCD_test_pFDpCD",
                      false);

        // Ecal vs. angles plots (nFDpCD)
        histPlotter2D(c1, hEcal_vs_Theta_e_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_e_nFDpCD_Dir, "01a_Ecal_vs_Theta_e_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_Phi_e_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_e_nFDpCD_Dir, "01b_Ecal_vs_Phi_e_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_Theta_nFD_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_nFD_nFDpCD_Dir, "02a_Ecal_vs_Theta_nFD_nFDpCD",
                      false);
        histPlotter2D(c1, hEcal_vs_Phi_nFD_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_nFD_nFDpCD_Dir, "02b_Ecal_vs_Phi_nFD_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_Theta_pCD_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_pCD_nFDpCD_Dir, "03a_Ecal_vs_Theta_pCD_nFDpCD",
                      false);
        histPlotter2D(c1, hEcal_vs_Phi_pCD_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_pCD_nFDpCD_Dir, "03b_Ecal_vs_Phi_pCD_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_Theta_e_test_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_e_nFDpCD_Dir, "01a_Ecal_vs_Theta_e_test_nFDpCD",
                      false);
        histPlotter2D(c1, hEcal_vs_Phi_e_test_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_e_nFDpCD_Dir, "01b_Ecal_vs_Phi_e_test_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_Theta_nFD_test_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_nFD_nFDpCD_Dir,
                      "02a_Ecal_vs_Theta_nFD_test_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_Phi_nFD_test_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_nFD_nFDpCD_Dir, "02b_Ecal_vs_Phi_nFD_test_nFDpCD",
                      false);
        histPlotter2D(c1, hEcal_vs_Theta_pCD_test_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Theta_pCD_nFDpCD_Dir,
                      "03a_Ecal_vs_Theta_pCD_test_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_Phi_pCD_test_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_Phi_pCD_nFDpCD_Dir, "03b_Ecal_vs_Phi_pCD_test_nFDpCD",
                      false);

        //  Ecal vs. dP_T plots (CD & FD) ---------------------------------------------------------------------------------------------------------------------------------------

        // Ecal vs. dP_T plots (1p)
        histPlotter2D(c1, hEcal_vs_dP_T_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dP_T_1p_Dir, "02_Ecal_vs_dP_T_1p", false);

        // Ecal vs. dP_T plots (1n)
        histPlotter2D(c1, hEcal_vs_dP_T_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dP_T_1n_Dir, "02_Ecal_vs_dP_T_1n", false);

        // Ecal vs. dP_T plots (2p)
        histPlotter2D(c1, hEcal_vs_dP_T_L_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dP_T_L_2p_Dir, "02_Ecal_vs_dP_T_L_2p", false);
        histPlotter2D(c1, hEcal_vs_dP_T_tot_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dP_T_tot_2p_Dir, "03_Ecal_vs_dP_T_tot_2p", false);

        // Ecal vs. dP_T plots (pFDpCD)
        histPlotter2D(c1, hEcal_vs_dP_T_L_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dP_T_L_pFDpCD_Dir, "02_Ecal_vs_dP_T_L_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_dP_T_tot_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dP_T_tot_pFDpCD_Dir, "03_Ecal_vs_dP_T_tot_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_dP_T_tot_QEL_Only_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dP_T_tot_pFDpCD_Dir,
                      "03a_Ecal_vs_dP_T_tot_QEL_Only_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_dP_T_tot_MEC_Only_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dP_T_tot_pFDpCD_Dir,
                      "03b_Ecal_vs_dP_T_tot_MEC_Only_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_dP_T_tot_RES_Only_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dP_T_tot_pFDpCD_Dir,
                      "03c_Ecal_vs_dP_T_tot_RES_Only_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_dP_T_tot_DIS_Only_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dP_T_tot_pFDpCD_Dir,
                      "03d_Ecal_vs_dP_T_tot_DIS_Only_pFDpCD", false);

        // Ecal vs. dP_T plots (nFDpCD)
        histPlotter2D(c1, hEcal_vs_dP_T_L_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dP_T_L_nFDpCD_Dir, "02_Ecal_vs_dP_T_L_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_dP_T_tot_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dP_T_tot_nFDpCD_Dir, "03_Ecal_vs_dP_T_tot_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_dP_T_tot_QEL_Only_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dP_T_tot_nFDpCD_Dir,
                      "03a_Ecal_vs_dP_T_tot_QEL_Only_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_dP_T_tot_MEC_Only_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dP_T_tot_nFDpCD_Dir,
                      "03b_Ecal_vs_dP_T_tot_MEC_Only_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_dP_T_tot_RES_Only_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dP_T_tot_nFDpCD_Dir,
                      "03c_Ecal_vs_dP_T_tot_RES_Only_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_dP_T_tot_DIS_Only_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dP_T_tot_nFDpCD_Dir,
                      "03d_Ecal_vs_dP_T_tot_DIS_Only_nFDpCD", false);

        //  Ecal vs. dAlpha_T plots (CD & FD) -----------------------------------------------------------------------------------------------------------------------------------

        // Ecal vs. dAlpha_T plots (1p)
        histPlotter2D(c1, hEcal_vs_dAlpha_T_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dAlpha_T_1p_Dir, "02_Ecal_vs_dAlpha_T_1p", false);

        // Ecal vs. dAlpha_T plots (1n)
        histPlotter2D(c1, hEcal_vs_dAlpha_T_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dAlpha_T_1n_Dir, "02_Ecal_vs_dAlpha_T_1n", false);

        // Ecal vs. dAlpha_T plots (2p)
        histPlotter2D(c1, hEcal_vs_dAlpha_T_L_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dAlpha_T_L_2p_Dir, "02_Ecal_vs_dAlpha_T_L_2p", false);
        histPlotter2D(c1, hEcal_vs_dAlpha_T_tot_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dAlpha_T_tot_2p_Dir, "03_Ecal_vs_dAlpha_T_tot_2p", false);

        // Ecal vs. dAlpha_T plots (pFDpCD)
        histPlotter2D(c1, hEcal_vs_dAlpha_T_L_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dAlpha_T_L_pFDpCD_Dir, "02_Ecal_vs_dAlpha_T_L_pFDpCD",
                      false);
        histPlotter2D(c1, hEcal_vs_dAlpha_T_tot_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dAlpha_T_tot_pFDpCD_Dir,
                      "03_Ecal_vs_dAlpha_T_tot_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_dAlpha_T_tot_QEL_Only_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dAlpha_T_tot_pFDpCD_Dir,
                      "03a_Ecal_vs_dAlpha_T_tot_QEL_Only_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_dAlpha_T_tot_MEC_Only_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dAlpha_T_tot_pFDpCD_Dir,
                      "03b_Ecal_vs_dAlpha_T_tot_MEC_Only_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_dAlpha_T_tot_RES_Only_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dAlpha_T_tot_pFDpCD_Dir,
                      "03c_Ecal_vs_dAlpha_T_tot_RES_Only_pFDpCD", false);
        histPlotter2D(c1, hEcal_vs_dAlpha_T_tot_DIS_Only_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dAlpha_T_tot_pFDpCD_Dir,
                      "03d_Ecal_vs_dAlpha_T_tot_DIS_Only_pFDpCD", false);

        // Ecal vs. dAlpha_T plots (nFDpCD)
        histPlotter2D(c1, hEcal_vs_dAlpha_T_L_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dAlpha_T_L_nFDpCD_Dir, "02_Ecal_vs_dAlpha_T_L_nFDpCD",
                      false);
        histPlotter2D(c1, hEcal_vs_dAlpha_T_tot_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dAlpha_T_tot_nFDpCD_Dir,
                      "03_Ecal_vs_dAlpha_T_tot_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_dAlpha_T_tot_QEL_Only_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dAlpha_T_tot_nFDpCD_Dir,
                      "03a_Ecal_vs_dAlpha_T_tot_QEL_Only_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_dAlpha_T_tot_MEC_Only_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dAlpha_T_tot_nFDpCD_Dir,
                      "03b_Ecal_vs_dAlpha_T_tot_MEC_Only_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_dAlpha_T_tot_RES_Only_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dAlpha_T_tot_nFDpCD_Dir,
                      "03c_Ecal_vs_dAlpha_T_tot_RES_Only_nFDpCD", false);
        histPlotter2D(c1, hEcal_vs_dAlpha_T_tot_DIS_Only_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_dAlpha_T_tot_nFDpCD_Dir,
                      "03d_Ecal_vs_dAlpha_T_tot_DIS_Only_nFDpCD", false);

        //  Ecal vs. W (pFDpCD, CD & FD) ----------------------------------------------------------------------------------------------------------------------------------------

        // Ecal vs. W (pFDpCD, CD & FD)
        histPlotter2D(c1, hEcal_vs_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_W_pFDpCD_Dir, "02_Ecal_vs_W_pFDpCD");

        // Ecal vs. W (nFDpCD, CD & FD)
        histPlotter2D(c1, hEcal_vs_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hEcal_vs_W_nFDpCD_Dir, "02_Ecal_vs_W_nFDpCD");

        //  Final state ratios (nFDpCD/pFDpCD) ----------------------------------------------------------------------------------------------------------------------------------

        // Final state ratios (nFDpCD/pFDpCD)
        if (apply_nucleon_cuts) {
            if (FSR_1D_plots) { DrawAndSaveFSRatio(SampleName, hEcal_All_Int_pFDpCD, hEcal_All_Int_pFDpCD_Dir, hEcal_All_Int_nFDpCD, plots); }

            if (FSR_2D_plots && SampleName != "C12_simulation_6GeV_T5_first_10") {
                DrawAndSaveFSRatio(SampleName, hEcal_vs_dP_T_L_pFDpCD, hEcal_vs_dP_T_L_pFDpCD_Dir, hEcal_vs_dP_T_L_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hEcal_vs_dP_T_tot_pFDpCD, hEcal_vs_dP_T_tot_pFDpCD_Dir, hEcal_vs_dP_T_tot_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hEcal_vs_dAlpha_T_L_pFDpCD, hEcal_vs_dAlpha_T_L_pFDpCD_Dir, hEcal_vs_dAlpha_T_L_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hEcal_vs_dAlpha_T_tot_pFDpCD, hEcal_vs_dAlpha_T_tot_pFDpCD_Dir, hEcal_vs_dAlpha_T_tot_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hEcal_vs_W_pFDpCD, hEcal_vs_W_pFDpCD_Dir, hEcal_vs_W_nFDpCD, plots);
            }
        }
    } else {
        cout << "\033[33m\n\nEcal plots are disabled by user.\n\n\033[0m";
    }

    // ======================================================================================================================================================================
    // TKI histograms
    // ======================================================================================================================================================================

    // TKI histograms
    if (TKI_plots) {
        cout << "\033[33m\n\nTKI histograms...\n\n\033[0m";

        //  dP_T plots (CD & FD) ------------------------------------------------------------------------------------------------------------------------------------------------

        // dP_T plots (1p)
        histPlotter1D(c1, hdP_T_1p, norm_TKI_plots, true, 1., "#deltaP_{T} histogram", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sdP_T_1p, "dP_T_1p",
                      hdP_T_1p_Dir, "1p", kBlue, true, true, true);

        // dP_T plots (1n)
        histPlotter1D(c1, hdP_T_1n, norm_TKI_plots, true, 1., "#deltaP_{T} histogram", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sdP_T_1n, "dP_T_1n",
                      hdP_T_1n_Dir, "1n", kBlue, true, true, true);

        // dP_T plots (2p)
        histPlotter1D(c1, hdP_T_L_2p, norm_TKI_plots, true, 1., "#deltaP_{T,L} by Leading FD Proton", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sdP_T_2p,
                      "dP_T_L_2p", hdP_T_L_2p_Dir, "2p", kBlue, true, true, true);
        histPlotter1D(c1, hdP_T_tot_2p, norm_TKI_plots, true, 1., "#deltaP_{T,tot} by Momentum Sum", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sdP_T_2p,
                      "dP_T_tot_2p", hdP_T_tot_2p_Dir, "2p", kBlue, true, true, true);

        // dP_T plots (pFDpCD)
        histPlotter1D(c1, hdP_T_L_pFDpCD, norm_TKI_plots, true, 1., "#deltaP_{T,L} by Leading FD Proton", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdP_T_pFDpCD, "01a_dP_T_L_pFDpCD", hdP_T_L_pFDpCD_Dir, "pFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdP_T_tot_pFDpCD, norm_TKI_plots, true, 1., "#deltaP_{T,tot} by Momentum Sum", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdP_T_tot_pFDpCD, "03a_dP_T_tot_pFDpCD", hdP_T_tot_pFDpCD_Dir, "pFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdP_T_tot_QEL_Only_pFDpCD, norm_TKI_plots, true, 1., "#deltaP_{T,tot} by Momentum Sum", "QE Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdP_T_tot_pFDpCD, "03b_dP_T_tot_QEL_Only_pFDpCD", hdP_T_tot_pFDpCD_Dir, "pFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdP_T_tot_MEC_Only_pFDpCD, norm_TKI_plots, true, 1., "#deltaP_{T,tot} by Momentum Sum", "MEC Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdP_T_tot_pFDpCD, "03c_dP_T_tot_MEC_Only_pFDpCD", hdP_T_tot_pFDpCD_Dir, "pFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdP_T_tot_RES_Only_pFDpCD, norm_TKI_plots, true, 1., "#deltaP_{T,tot} by Momentum Sum", "RES Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdP_T_tot_pFDpCD, "03d_dP_T_tot_RES_Only_pFDpCD", hdP_T_tot_pFDpCD_Dir, "pFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdP_T_tot_DIS_Only_pFDpCD, norm_TKI_plots, true, 1., "#deltaP_{T,tot} by Momentum Sum", "DIS Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdP_T_tot_pFDpCD, "03e_dP_T_tot_DIS_Only_pFDpCD", hdP_T_tot_pFDpCD_Dir, "pFDpCD", kBlue, true, true, true);

        stackPlotter1D(c1, sdP_T_tot_pFDpCD, norm_TKI_plots, "#deltaP_{T,tot} stack", "pFDpCD", plots, Histogram_OutPDF, hdP_T_tot_pFDpCD, hdP_T_tot_QEL_Only_pFDpCD,
                       hdP_T_tot_MEC_Only_pFDpCD, hdP_T_tot_RES_Only_pFDpCD, hdP_T_tot_DIS_Only_pFDpCD, "03f_dP_T_tot_stack_pFDpCD", hdP_T_tot_pFDpCD_Dir, "");

        // dP_T plots (nFDpCD)
        histPlotter1D(c1, hdP_T_L_nFDpCD, norm_TKI_plots, true, 1., "#deltaP_{T,L} by Leading FD Neutron", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdP_T_nFDpCD, "01a_dP_T_L_nFDpCD", hdP_T_L_nFDpCD_Dir, "nFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdP_T_tot_nFDpCD, norm_TKI_plots, true, 1., "#deltaP_{T,tot} by Momentum Sum", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdP_T_tot_nFDpCD, "03a_dP_T_tot_nFDpCD", hdP_T_tot_nFDpCD_Dir, "nFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdP_T_tot_QEL_Only_nFDpCD, norm_TKI_plots, true, 1., "#deltaP_{T,tot} by Momentum Sum", "QE Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdP_T_tot_nFDpCD, "03b_dP_T_tot_QEL_Only_nFDpCD", hdP_T_tot_nFDpCD_Dir, "nFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdP_T_tot_MEC_Only_nFDpCD, norm_TKI_plots, true, 1., "#deltaP_{T,tot} by Momentum Sum", "MEC Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdP_T_tot_nFDpCD, "03c_dP_T_tot_MEC_Only_nFDpCD", hdP_T_tot_nFDpCD_Dir, "nFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdP_T_tot_RES_Only_nFDpCD, norm_TKI_plots, true, 1., "#deltaP_{T,tot} by Momentum Sum", "RES Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdP_T_tot_nFDpCD, "03d_dP_T_tot_RES_Only_nFDpCD", hdP_T_tot_nFDpCD_Dir, "nFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdP_T_tot_DIS_Only_nFDpCD, norm_TKI_plots, true, 1., "#deltaP_{T,tot} by Momentum Sum", "DIS Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdP_T_tot_nFDpCD, "03e_dP_T_tot_DIS_Only_nFDpCD", hdP_T_tot_nFDpCD_Dir, "nFDpCD", kBlue, true, true, true);

        stackPlotter1D(c1, sdP_T_tot_nFDpCD, norm_TKI_plots, "#deltaP_{T,tot} stack", "nFDpCD", plots, Histogram_OutPDF, hdP_T_tot_nFDpCD, hdP_T_tot_QEL_Only_nFDpCD,
                       hdP_T_tot_MEC_Only_nFDpCD, hdP_T_tot_RES_Only_nFDpCD, hdP_T_tot_DIS_Only_nFDpCD, "03f_dP_T_tot_stack_nFDpCD", hdP_T_tot_nFDpCD_Dir, "");

        //  dAlpha_T plots (CD & FD) --------------------------------------------------------------------------------------------------------------------------------------------

        // dAlpha_T plots (1p)
        histPlotter1D(c1, hdAlpha_T_1p, norm_TKI_plots, true, 1., "#delta#alpha_{T} histogram", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sdAlpha_T_1p,
                      "dAlpha_T_1p", hdAlpha_T_1p_Dir, "1p", kBlue, true, true, true);

        // dAlpha_T plots (1n)
        histPlotter1D(c1, hdAlpha_T_1n, norm_TKI_plots, true, 1., "#delta#alpha_{T} histogram", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sdAlpha_T_1n,
                      "dAlpha_T_1n", hdAlpha_T_1n_Dir, "1n", kBlue, true, true, true);

        // dAlpha_T plots (2p)
        histPlotter1D(c1, hdAlpha_T_L_2p, norm_TKI_plots, true, 1., "#delta#alpha_{T,L} by Leading Proton", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdAlpha_T_2p, "dAlpha_T_L_2p", hdAlpha_T_L_2p_Dir, "2p", kBlue, true, true, true);
        histPlotter1D(c1, hdAlpha_T_tot_2p, norm_TKI_plots, true, 1., "#delta#alpha_{T,tot} by Momentum Sum", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdAlpha_T_2p, "dAlpha_T_tot_2p", hdAlpha_T_tot_2p_Dir, "2p", kBlue, true, true, true);

        // dAlpha_T plots (pFDpCD)
        histPlotter1D(c1, hdAlpha_T_L_pFDpCD, norm_TKI_plots, true, 1., "#delta#alpha_{T,L} by Leading FD Proton", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdAlpha_T_pFDpCD, "01a_dAlpha_T_L_pFDpCD", hdAlpha_T_L_pFDpCD_Dir, "pFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdAlpha_T_tot_pFDpCD, norm_TKI_plots, true, 1., "#delta#alpha_{T,tot} by Momentum Sum", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdAlpha_T_tot_pFDpCD, "03a_dAlpha_T_tot_pFDpCD", hdAlpha_T_tot_pFDpCD_Dir, "pFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdAlpha_T_tot_QEL_Only_pFDpCD, norm_TKI_plots, true, 1., "#delta#alpha_{T,tot} by Momentum Sum", "QE Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sdAlpha_T_tot_pFDpCD, "03b_dAlpha_T_tot_QEL_Only_pFDpCD", hdAlpha_T_tot_pFDpCD_Dir, "pFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdAlpha_T_tot_MEC_Only_pFDpCD, norm_TKI_plots, true, 1., "#delta#alpha_{T,tot} by Momentum Sum", "MEC Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sdAlpha_T_tot_pFDpCD, "03c_dAlpha_T_tot_MEC_Only_pFDpCD", hdAlpha_T_tot_pFDpCD_Dir, "pFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdAlpha_T_tot_RES_Only_pFDpCD, norm_TKI_plots, true, 1., "#delta#alpha_{T,tot} by Momentum Sum", "RES Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sdAlpha_T_tot_pFDpCD, "03d_dAlpha_T_tot_RES_Only_pFDpCD", hdAlpha_T_tot_pFDpCD_Dir, "pFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdAlpha_T_tot_DIS_Only_pFDpCD, norm_TKI_plots, true, 1., "#delta#alpha_{T,tot} by Momentum Sum", "DIS Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sdAlpha_T_tot_pFDpCD, "03e_dAlpha_T_tot_DIS_Only_pFDpCD", hdAlpha_T_tot_pFDpCD_Dir, "pFDpCD", kBlue, true, true, true);

        stackPlotter1D(c1, sdAlpha_T_tot_pFDpCD, norm_TKI_plots, "#delta#alpha_{T,tot} stack", "pFDpCD", plots, Histogram_OutPDF, hdAlpha_T_tot_pFDpCD, hdAlpha_T_tot_QEL_Only_pFDpCD,
                       hdAlpha_T_tot_MEC_Only_pFDpCD, hdAlpha_T_tot_RES_Only_pFDpCD, hdAlpha_T_tot_DIS_Only_pFDpCD, "03f_dAlpha_T_tot_stack_pFDpCD", hdAlpha_T_tot_pFDpCD_Dir, "");

        // dAlpha_T plots (nFDpCD)
        histPlotter1D(c1, hdAlpha_T_L_nFDpCD, norm_TKI_plots, true, 1., "#delta#alpha_{T,L} by Leading FD Neutron", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdAlpha_T_nFDpCD, "01a_dAlpha_T_L_nFDpCD", hdAlpha_T_L_nFDpCD_Dir, "nFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdAlpha_T_tot_nFDpCD, norm_TKI_plots, true, 1., "#delta#alpha_{T,tot} by Momentum Sum", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdAlpha_T_tot_nFDpCD, "03a_dAlpha_T_tot_nFDpCD", hdAlpha_T_tot_nFDpCD_Dir, "nFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdAlpha_T_tot_QEL_Only_nFDpCD, norm_TKI_plots, true, 1., "#delta#alpha_{T,tot} by Momentum Sum", "QE Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false,
                      true, sdAlpha_T_tot_nFDpCD, "03b_dAlpha_T_tot_QEL_Only_nFDpCD", hdAlpha_T_tot_nFDpCD_Dir, "nFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdAlpha_T_tot_MEC_Only_nFDpCD, norm_TKI_plots, true, 1., "#delta#alpha_{T,tot} by Momentum Sum", "MEC Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sdAlpha_T_tot_nFDpCD, "03c_dAlpha_T_tot_MEC_Only_nFDpCD", hdAlpha_T_tot_nFDpCD_Dir, "nFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdAlpha_T_tot_RES_Only_nFDpCD, norm_TKI_plots, true, 1., "#delta#alpha_{T,tot} by Momentum Sum", "RES Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sdAlpha_T_tot_nFDpCD, "03d_dAlpha_T_tot_RES_Only_nFDpCD", hdAlpha_T_tot_nFDpCD_Dir, "nFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdAlpha_T_tot_DIS_Only_nFDpCD, norm_TKI_plots, true, 1., "#delta#alpha_{T,tot} by Momentum Sum", "DIS Only", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2,
                      false, true, sdAlpha_T_tot_nFDpCD, "03e_dAlpha_T_tot_DIS_Only_nFDpCD", hdAlpha_T_tot_nFDpCD_Dir, "nFDpCD", kBlue, true, true, true);

        stackPlotter1D(c1, sdAlpha_T_tot_nFDpCD, norm_TKI_plots, "#delta#alpha_{T,tot} stack", "nFDpCD", plots, Histogram_OutPDF, hdAlpha_T_tot_nFDpCD, hdAlpha_T_tot_QEL_Only_nFDpCD,
                       hdAlpha_T_tot_MEC_Only_nFDpCD, hdAlpha_T_tot_RES_Only_nFDpCD, hdAlpha_T_tot_DIS_Only_nFDpCD, "03f_dAlpha_T_tot_stack_nFDpCD", hdAlpha_T_tot_nFDpCD_Dir, "");

        //  dPhi_T plots (CD & FD) ----------------------------------------------------------------------------------------------------------------------------------------------

        // dPhi_T plots (1p)
        histPlotter1D(c1, hdPhi_T_1p, norm_TKI_plots, true, 1., "#delta#phi_{T} histogram", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sdPhi_T_1p,
                      "dPhi_T_1p", hdPhi_T_1p_Dir, "1p", kBlue, true, true, true);

        // dPhi_T plots (1n)
        histPlotter1D(c1, hdPhi_T_1n, norm_TKI_plots, true, 1., "#delta#phi_{T} histogram", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sdPhi_T_1n,
                      "dPhi_T_1n", hdPhi_T_1n_Dir, "1n", kBlue, true, true, true);

        // dPhi_T plots (2p)
        histPlotter1D(c1, hdPhi_T_L_2p, norm_TKI_plots, true, 1., "#delta#phi_{T,L} by Leading Proton", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true, sdPhi_T_2p,
                      "dPhi_T_L_2p", hdPhi_T_L_2p_Dir, "2p", kBlue, true, true, true);
        histPlotter1D(c1, hdPhi_T_tot_2p, norm_TKI_plots, true, 1., "#delta#phi_{T,tot} by Momentum Sum", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdPhi_T_2p, "dPhi_T_tot_2p", hdPhi_T_tot_2p_Dir, "2p", kBlue, true, true, true);

        // dPhi_T plots (pFDpCD)
        histPlotter1D(c1, hdPhi_T_L_pFDpCD, norm_TKI_plots, true, 1., "#delta#phi_{T,L} by Leading FD Proton", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdPhi_T_pFDpCD, "dPhi_T_L_pFDpCD", hdPhi_T_L_pFDpCD_Dir, "pFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdPhi_T_tot_pFDpCD, norm_TKI_plots, true, 1., "#delta#phi_{T,tot} by Momentum Sum", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdPhi_T_pFDpCD, "dPhi_T_tot_pFDpCD", hdPhi_T_tot_pFDpCD_Dir, "pFDpCD", kBlue, true, true, true);

        // dPhi_T plots (nFDpCD)
        histPlotter1D(c1, hdPhi_T_L_nFDpCD, norm_TKI_plots, true, 1., "#delta#phi_{T,L} by Leading FD Neutron", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdPhi_T_nFDpCD, "dPhi_T_L_nFDpCD", hdPhi_T_L_nFDpCD_Dir, "nFDpCD", kBlue, true, true, true);
        histPlotter1D(c1, hdPhi_T_tot_nFDpCD, norm_TKI_plots, true, 1., "#delta#phi_{T,tot} by Momentum Sum", "All Int.", 0.06, 0.0425, 0.0425, plots, Histogram_OutPDF, 2, false, true,
                      sdPhi_T_nFDpCD, "dPhi_T_tot_nFDpCD", hdPhi_T_tot_nFDpCD_Dir, "nFDpCD", kBlue, true, true, true);

        //  dP_T vs. dAlpha_T plots (CD & FD) -----------------------------------------------------------------------------------------------------------------------------------

        // dP_T vs. dAlpha_T plots (1p)
        histPlotter2D(c1, hdP_T_vs_dAlpha_T_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hdP_T_vs_dAlpha_T_1p_Dir, "01_dP_T_vs_dAlpha_T_1p", false);

        // dP_T vs. dAlpha_T plots (1n)
        histPlotter2D(c1, hdP_T_vs_dAlpha_T_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hdP_T_vs_dAlpha_T_1n_Dir, "01_dP_T_vs_dAlpha_T_1n", false);

        // dP_T vs. dAlpha_T plots (2p)
        histPlotter2D(c1, hdP_T_L_vs_dAlpha_T_L_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hdP_T_L_vs_dAlpha_T_L_2p_Dir, "01_dP_T_L_vs_dAlpha_T_L_2p", false);
        histPlotter2D(c1, hdP_T_tot_vs_dAlpha_T_tot_2p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hdP_T_tot_vs_dAlpha_T_tot_2p_Dir,
                      "02_dP_T_tot_vs_dAlpha_T_tot_2p", false);

        // dP_T vs. dAlpha_T plots (pFDpCD)
        histPlotter2D(c1, hdP_T_L_vs_dAlpha_T_L_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hdP_T_L_vs_dAlpha_T_L_pFDpCD_Dir,
                      "01_dP_T_L_vs_dAlpha_T_L_pFDpCD", false);
        histPlotter2D(c1, hdP_T_tot_vs_dAlpha_T_tot_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hdP_T_tot_vs_dAlpha_T_tot_pFDpCD_Dir,
                      "02_dP_T_tot_vs_dAlpha_T_tot_pFDpCD", false);

        // dP_T vs. dAlpha_T plots (nFDpCD)
        histPlotter2D(c1, hdP_T_L_vs_dAlpha_T_L_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hdP_T_L_vs_dAlpha_T_L_nFDpCD_Dir,
                      "01_dP_T_L_vs_dAlpha_T_L_nFDpCD", false);
        histPlotter2D(c1, hdP_T_tot_vs_dAlpha_T_tot_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hdP_T_tot_vs_dAlpha_T_tot_nFDpCD_Dir,
                      "02_dP_T_tot_vs_dAlpha_T_tot_nFDpCD", false);

        //  dP_T vs. W (pFDpCD, CD & FD) ----------------------------------------------------------------------------------------------------------------------------------------

        // dP_T vs. W (pFDpCD, CD & FD)
        histPlotter2D(c1, hdP_T_L_vs_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hdP_T_L_vs_W_pFDpCD_Dir, "01b_dP_T_L_vs_W_pFDpCD");
        histPlotter2D(c1, hdP_T_tot_vs_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hdP_T_tot_vs_W_pFDpCD_Dir, "02b_dP_T_tot_vs_W_pFDpCD");

        // dP_T vs. W (nFDpCD, CD & FD)
        histPlotter2D(c1, hdP_T_L_vs_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hdP_T_L_vs_W_nFDpCD_Dir, "01b_dP_T_L_vs_W_nFDpCD");
        histPlotter2D(c1, hdP_T_tot_vs_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hdP_T_tot_vs_W_nFDpCD_Dir, "02b_dP_T_tot_vs_W_nFDpCD");

        //  dAlpha_T vs. W (pFDpCD, CD & FD)
        //  ----------------------------------------------------------------------------------------------------------------------------------------

        // dAlpha_T vs. W (pFDpCD, CD & FD)
        histPlotter2D(c1, hdAlpha_T_L_vs_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hdAlpha_T_L_vs_W_pFDpCD_Dir, "01b_dAlpha_T_L_vs_W_pFDpCD");
        histPlotter2D(c1, hdAlpha_T_tot_vs_W_pFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hdAlpha_T_tot_vs_W_pFDpCD_Dir, "02b_dAlpha_T_tot_vs_W_pFDpCD");

        // dAlpha_T vs. W (nFDpCD, CD & FD)
        histPlotter2D(c1, hdAlpha_T_L_vs_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hdAlpha_T_L_vs_W_nFDpCD_Dir, "01b_dAlpha_T_L_vs_W_nFDpCD");
        histPlotter2D(c1, hdAlpha_T_tot_vs_W_nFDpCD, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hdAlpha_T_tot_vs_W_nFDpCD_Dir, "02b_dAlpha_T_tot_vs_W_nFDpCD");

        //  Final state ratios (nFDpCD/pFDpCD) ----------------------------------------------------------------------------------------------------------------------------------

        // Final state ratios (nFDpCD/pFDpCD)
        if (apply_nucleon_cuts) {
            if (FSR_1D_plots) {
                DrawAndSaveFSRatio(SampleName, hdP_T_L_pFDpCD, hdP_T_L_pFDpCD_Dir, hdP_T_L_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hdP_T_tot_pFDpCD, hdP_T_tot_pFDpCD_Dir, hdP_T_tot_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hdAlpha_T_L_pFDpCD, hdAlpha_T_L_pFDpCD_Dir, hdAlpha_T_L_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hdAlpha_T_tot_pFDpCD, hdAlpha_T_tot_pFDpCD_Dir, hdAlpha_T_tot_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hdPhi_T_L_pFDpCD, hdPhi_T_L_pFDpCD_Dir, hdPhi_T_L_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hdPhi_T_tot_pFDpCD, hdPhi_T_tot_pFDpCD_Dir, hdPhi_T_tot_nFDpCD, plots);
            }

            if (FSR_2D_plots && SampleName != "C12_simulation_6GeV_T5_first_10") {
                DrawAndSaveFSRatio(SampleName, hdP_T_L_vs_dAlpha_T_L_pFDpCD, hdP_T_L_vs_dAlpha_T_L_pFDpCD_Dir, hdP_T_L_vs_dAlpha_T_L_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hdP_T_tot_vs_dAlpha_T_tot_pFDpCD, hdP_T_tot_vs_dAlpha_T_tot_pFDpCD_Dir, hdP_T_tot_vs_dAlpha_T_tot_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hdP_T_L_vs_W_pFDpCD, hdP_T_L_vs_W_pFDpCD_Dir, hdP_T_L_vs_W_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hdP_T_tot_vs_W_pFDpCD, hdP_T_tot_vs_W_pFDpCD_Dir, hdP_T_tot_vs_W_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hdAlpha_T_L_vs_W_pFDpCD, hdAlpha_T_L_vs_W_pFDpCD_Dir, hdAlpha_T_L_vs_W_nFDpCD, plots);
                DrawAndSaveFSRatio(SampleName, hdAlpha_T_tot_vs_W_pFDpCD, hdAlpha_T_tot_vs_W_pFDpCD_Dir, hdAlpha_T_tot_vs_W_nFDpCD, plots);
            }
        }
    } else {
        cout << "\033[33m\n\nTKI plots are disabled by user.\n\n\033[0m";
    }

    // ======================================================================================================================================================================
    // ToF histograms
    // ======================================================================================================================================================================

    // ToF histograms
    if (ToF_plots) {
        cout << "\033[33m\n\nToF histograms...\n\n\033[0m";
    } else {
        cout << "\033[33m\n\nToF plots are disabled by user.\n\n\033[0m";
    }

    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // Efficiency histograms
    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Efficiency histograms

    // Efficiency plots
    if (Efficiency_plots) {
        cout << "\033[33m\n\nPlotting efficiency histograms...\n\n\033[0m";

        //  Efficiency plots ----------------------------------------------------------------------------------------------------------------------------------------------------

        // Efficiency plots (1e cut, CD & FD)

        // Momentum efficiency plots (1e cut)
        hP_e_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_e_mom_cuts.GetLowerCut(), TL_e_mom_cuts.GetUpperCut(), 0, false);
        hP_e_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_e_mom_cuts.GetLowerCut(), TL_e_mom_cuts.GetUpperCut(), 0, false);

        hP_n_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_n_mom_cuts.GetLowerCut(), TL_n_mom_cuts.GetUpperCut(), 0, false);
        hP_n_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_n_mom_cuts.GetLowerCut(), TL_n_mom_cuts.GetUpperCut(), 0, false);

        hP_p_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);
        hP_p_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);

        hP_pip_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pip_mom_cuts.GetLowerCut(), TL_pip_mom_cuts.GetUpperCut(), 0, false);
        hP_pip_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pip_mom_cuts.GetLowerCut(), TL_pip_mom_cuts.GetUpperCut(), 0, false);

        hP_pim_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pim_mom_cuts.GetLowerCut(), TL_pim_mom_cuts.GetUpperCut(), 0, false);
        hP_pim_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pim_mom_cuts.GetLowerCut(), TL_pim_mom_cuts.GetUpperCut(), 0, false);

        hP_pi0_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pi0_mom_cuts.GetLowerCut(), TL_pi0_mom_cuts.GetUpperCut(), 0, false);
        hP_pi0_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pi0_mom_cuts.GetLowerCut(), TL_pi0_mom_cuts.GetUpperCut(), 0, false);

        hP_ph_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_ph_mom_cuts.GetLowerCut(), TL_ph_mom_cuts.GetUpperCut(), 0, false);
        hP_ph_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_ph_mom_cuts.GetLowerCut(), TL_ph_mom_cuts.GetUpperCut(), 0, false);

        // Theta efficiency plots (1e cut)
        hTheta_e_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_e_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_n_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_n_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_p_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_p_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_pip_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pip_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_pim_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pim_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_pi0_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pi0_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_ph_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_ph_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        // Phi efficiency plots (1e cut)
        hPhi_e_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_e_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_n_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_n_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_p_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_p_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_pip_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pip_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_pim_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pim_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_pi0_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pi0_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_ph_AC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_ph_BC_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        // Truth level momentum plots for momentum thresholds (1e cut)
        hP_e_truth_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_e_truth_1e_cut_FD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);

        if (ZoomIn_On_mom_th_plots) {
            DrawAndSaveEfficiencyPlots(SampleName, hP_e_truth_1e_cut_FD_ZOOMIN, hP_e_reco_1e_cut_FD_ZOOMIN, plots);
        } else {
            DrawAndSaveEfficiencyPlots(SampleName, hP_e_truth_1e_cut_FD, hP_e_reco_1e_cut_FD, plots);
        }

        hP_p_truth_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_p_truth_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_p_truth_1e_cut_FD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_p_truth_1e_cut_CD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);

        if (ZoomIn_On_mom_th_plots) {
            DrawAndSaveEfficiencyPlots(SampleName, hP_p_truth_1e_cut_FD_ZOOMIN, hP_p_reco_1e_cut_FD_ZOOMIN, plots);
            DrawAndSaveEfficiencyPlots(SampleName, hP_p_truth_1e_cut_CD_ZOOMIN, hP_p_reco_1e_cut_CD_ZOOMIN, plots);
        } else {
            DrawAndSaveEfficiencyPlots(SampleName, hP_p_truth_1e_cut_FD, hP_p_reco_1e_cut_FD, plots);
            DrawAndSaveEfficiencyPlots(SampleName, hP_p_truth_1e_cut_CD, hP_p_reco_1e_cut_CD, plots);
        }

        hP_LnFD_truth_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_LnFD_truth_1e_cut_FD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_nFD_truth_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_nFD_truth_1e_cut_FD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);

        if (ZoomIn_On_mom_th_plots) {
            DrawAndSaveEfficiencyPlots(SampleName, hP_LnFD_truth_1e_cut_FD_ZOOMIN, hP_LnFD_reco_BPID_1e_cut_FD_ZOOMIN, plots);
            DrawAndSaveEfficiencyPlots(SampleName, hP_nFD_truth_1e_cut_FD_ZOOMIN, hP_nFD_reco_BPID_1e_cut_FD_ZOOMIN, plots);
        } else {
            DrawAndSaveEfficiencyPlots(SampleName, hP_LnFD_truth_1e_cut_FD, hP_LnFD_reco_BPID_1e_cut_FD, plots);
            DrawAndSaveEfficiencyPlots(SampleName, hP_nFD_truth_1e_cut_FD, hP_nFD_reco_BPID_1e_cut_FD, plots);
        }

        hP_piplus_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piplus_truth_1e_cut_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piplus_truth_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piplus_truth_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piplus_truth_1e_cut_FD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piplus_truth_1e_cut_CD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);

        if (ZoomIn_On_mom_th_plots) {
            DrawAndSaveEfficiencyPlots(SampleName, hP_piplus_truth_1e_cut_ZOOMIN, hP_piplus_reco_1e_cut_ZOOMIN, plots);
        } else {
            DrawAndSaveEfficiencyPlots(SampleName, hP_piplus_truth_1e_cut, hP_piplus_reco_1e_cut, plots);
        }

        hP_piminus_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piminus_truth_1e_cut_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piminus_truth_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piminus_truth_1e_cut_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piminus_truth_1e_cut_FD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_piminus_truth_1e_cut_CD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);

        if (ZoomIn_On_mom_th_plots) {
            DrawAndSaveEfficiencyPlots(SampleName, hP_piminus_truth_1e_cut_ZOOMIN, hP_piminus_reco_1e_cut_ZOOMIN, plots);
        } else {
            DrawAndSaveEfficiencyPlots(SampleName, hP_piminus_truth_1e_cut, hP_piminus_reco_1e_cut, plots);
        }

        hP_ph_truth_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);
        hP_ph_truth_1e_cut_FD_ZOOMIN.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., -9999, 9999, 0, false);

        if (ZoomIn_On_mom_th_plots) {
            DrawAndSaveEfficiencyPlots(SampleName, hP_ph_truth_1e_cut_FD_ZOOMIN, hP_ph_reco_BPID_1e_cut_FD_ZOOMIN, plots);
        } else {
            DrawAndSaveEfficiencyPlots(SampleName, hP_ph_truth_1e_cut_FD, hP_ph_reco_BPID_1e_cut_FD, plots);
        }

        // Efficiency plots (1p, CD & FD)

        // Momentum efficiency plots (1p)
        hP_e_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_e_mom_cuts.GetLowerCut(), TL_e_mom_cuts.GetUpperCut(), 0, false);
        hP_e_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_e_mom_cuts.GetLowerCut(), TL_e_mom_cuts.GetUpperCut(), 0, false);

        hP_n_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_n_mom_cuts.GetLowerCut(), TL_n_mom_cuts.GetUpperCut(), 0, false);
        hP_n_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_n_mom_cuts.GetLowerCut(), TL_n_mom_cuts.GetUpperCut(), 0, false);

        hP_p_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);
        hP_p_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);

        if (!apply_kinematical_cuts) {
            hP_pFD_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);
            hP_pFD_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);
        } else {
            hP_pFD_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                            FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
            hP_pFD_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                            FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
        }

        hP_pip_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pip_mom_cuts.GetLowerCut(), TL_pip_mom_cuts.GetUpperCut(), 0, false);
        hP_pip_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pip_mom_cuts.GetLowerCut(), TL_pip_mom_cuts.GetUpperCut(), 0, false);

        hP_pim_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pim_mom_cuts.GetLowerCut(), TL_pim_mom_cuts.GetUpperCut(), 0, false);
        hP_pim_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pim_mom_cuts.GetLowerCut(), TL_pim_mom_cuts.GetUpperCut(), 0, false);

        hP_pi0_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pi0_mom_cuts.GetLowerCut(), TL_pi0_mom_cuts.GetUpperCut(), 0, false);
        hP_pi0_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pi0_mom_cuts.GetLowerCut(), TL_pi0_mom_cuts.GetUpperCut(), 0, false);

        hP_ph_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_ph_mom_cuts.GetLowerCut(), TL_ph_mom_cuts.GetUpperCut(), 0, false);
        hP_ph_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_ph_mom_cuts.GetLowerCut(), TL_ph_mom_cuts.GetUpperCut(), 0, false);
        hP_ph_AC_truth_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_ph_mom_cuts.GetLowerCut(), TL_ph_mom_cuts.GetUpperCut(), 0, false);
        hP_ph_BC_truth_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_ph_mom_cuts.GetLowerCut(), TL_ph_mom_cuts.GetUpperCut(), 0, false);

        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hP_e_AC_truth_1p, hP_e_APID_1p_FD, plots, ACorr_data, ACorr_data_Dir);
        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hP_pFD_AC_truth_1p, hP_pFD_APID_1p, plots, ACorr_data, ACorr_data_Dir);

        DrawAndSaveEfficiencyPlots(SampleName, hP_e_AC_truth_1p, hP_e_APID_1p_FD, plots);
        DrawAndSaveEfficiencyPlots(SampleName, hP_pFD_AC_truth_1p, hP_pFD_APID_1p, plots);

        // Theta efficiency plots (1p)
        hTheta_e_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_e_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_n_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_n_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_p_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_p_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pFD_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pFD_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_pip_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pip_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_pim_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pim_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_pi0_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pi0_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_ph_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_ph_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_ph_AC_truth_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_ph_BC_truth_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hTheta_e_AC_truth_1p, hTheta_e_All_Int_1p_FD, plots, ACorr_data, ACorr_data_Dir);
        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hTheta_pFD_AC_truth_1p, hTheta_p_All_Int_1p, plots, ACorr_data, ACorr_data_Dir);

        DrawAndSaveEfficiencyPlots(SampleName, hTheta_e_AC_truth_1p, hTheta_e_All_Int_1p_FD, plots);
        DrawAndSaveEfficiencyPlots(SampleName, hTheta_pFD_AC_truth_1p, hTheta_p_All_Int_1p, plots);

        // Phi efficiency plots (1p)
        hPhi_e_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_e_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_n_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_n_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_p_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_p_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pFD_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pFD_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_pip_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pip_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_pim_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pim_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_pi0_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pi0_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_ph_AC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_ph_BC_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_ph_AC_truth_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_ph_BC_truth_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hPhi_e_AC_truth_1p, hPhi_e_All_Int_1p_FD, plots, ACorr_data, ACorr_data_Dir);
        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hPhi_pFD_AC_truth_1p, hPhi_p_All_Int_1p, plots, ACorr_data, ACorr_data_Dir);

        DrawAndSaveEfficiencyPlots(SampleName, hPhi_e_AC_truth_1p, hPhi_e_All_Int_1p_FD, plots);
        DrawAndSaveEfficiencyPlots(SampleName, hPhi_pFD_AC_truth_1p, hPhi_p_All_Int_1p, plots);

        // Efficiency plots (1n, CD & FD)

        // Momentum efficiency plots (1n)
        hP_e_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_e_mom_cuts.GetLowerCut(), TL_e_mom_cuts.GetUpperCut(), 0, false);
        hP_e_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_e_mom_cuts.GetLowerCut(), TL_e_mom_cuts.GetUpperCut(), 0, false);

        hP_n_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_n_mom_cuts.GetLowerCut(), TL_n_mom_cuts.GetUpperCut(), 0, false);
        hP_n_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_n_mom_cuts.GetLowerCut(), TL_n_mom_cuts.GetUpperCut(), 0, false);

        if (!apply_kinematical_cuts) {
            hP_nFD_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_n_mom_cuts.GetLowerCut(), TL_n_mom_cuts.GetUpperCut(), 0, false);
            hP_nFD_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_n_mom_cuts.GetLowerCut(), TL_n_mom_cuts.GetUpperCut(), 0, false);
        } else {
            hP_nFD_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                            FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
            hP_nFD_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                            FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
        }

        hP_p_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);
        hP_p_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);
        hP_p_AC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);
        hP_p_BC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);
        hP_p_AC_truth_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);
        hP_p_BC_truth_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);
        hP_p_AC_truth_1n_undet.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hP_p_BC_truth_1n_undet.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);

        hP_pip_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pip_mom_cuts.GetLowerCut(), TL_pip_mom_cuts.GetUpperCut(), 0, false);
        hP_pip_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pip_mom_cuts.GetLowerCut(), TL_pip_mom_cuts.GetUpperCut(), 0, false);
        hP_pip_AC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pip_mom_cuts.GetLowerCut(), TL_pip_mom_cuts.GetUpperCut(), 0, false);
        hP_pip_BC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pip_mom_cuts.GetLowerCut(), TL_pip_mom_cuts.GetUpperCut(), 0, false);
        hP_pip_AC_truth_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pip_mom_cuts.GetLowerCut(), TL_pip_mom_cuts.GetUpperCut(), 0, false);
        hP_pip_BC_truth_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pip_mom_cuts.GetLowerCut(), TL_pip_mom_cuts.GetUpperCut(), 0, false);
        hP_pip_AC_truth_1n_undet.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hP_pip_BC_truth_1n_undet.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);

        hP_pim_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pim_mom_cuts.GetLowerCut(), TL_pim_mom_cuts.GetUpperCut(), 0, false);
        hP_pim_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pim_mom_cuts.GetLowerCut(), TL_pim_mom_cuts.GetUpperCut(), 0, false);
        hP_pim_AC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pim_mom_cuts.GetLowerCut(), TL_pim_mom_cuts.GetUpperCut(), 0, false);
        hP_pim_BC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pim_mom_cuts.GetLowerCut(), TL_pim_mom_cuts.GetUpperCut(), 0, false);
        hP_pim_AC_truth_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pim_mom_cuts.GetLowerCut(), TL_pim_mom_cuts.GetUpperCut(), 0, false);
        hP_pim_BC_truth_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pim_mom_cuts.GetLowerCut(), TL_pim_mom_cuts.GetUpperCut(), 0, false);
        hP_pim_AC_truth_1n_undet.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hP_pim_BC_truth_1n_undet.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);

        hP_pi0_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pi0_mom_cuts.GetLowerCut(), TL_pi0_mom_cuts.GetUpperCut(), 0, false);
        hP_pi0_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pi0_mom_cuts.GetLowerCut(), TL_pi0_mom_cuts.GetUpperCut(), 0, false);

        hP_ph_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_ph_mom_cuts.GetLowerCut(), TL_ph_mom_cuts.GetUpperCut(), 0, false);
        hP_ph_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_ph_mom_cuts.GetLowerCut(), TL_ph_mom_cuts.GetUpperCut(), 0, false);
        hP_ph_AC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_ph_mom_cuts.GetLowerCut(), TL_ph_mom_cuts.GetUpperCut(), 0, false);
        hP_ph_BC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_ph_mom_cuts.GetLowerCut(), TL_ph_mom_cuts.GetUpperCut(), 0, false);

        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hP_e_AC_truth_1n, hP_e_APID_1n_FD, plots, ACorr_data, ACorr_data_Dir);
        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hP_nFD_AC_truth_1n, hP_nFD_APIDandNS_1n, plots, ACorr_data, ACorr_data_Dir);

        DrawAndSaveEfficiencyPlots(SampleName, hP_e_AC_truth_1n, hP_e_APID_1n_FD, plots);
        DrawAndSaveEfficiencyPlots(SampleName, hP_nFD_AC_truth_1n, hP_nFD_APIDandNS_1n, plots);

        // Theta efficiency plots (1n)
        hTheta_e_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_e_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_n_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_n_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_nFD_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_nFD_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_p_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_p_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_p_AC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_p_BC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_p_AC_truth_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_p_BC_truth_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_p_AC_truth_1n_undet.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_p_BC_truth_1n_undet.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_pip_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pip_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pip_AC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pip_BC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pip_AC_truth_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pip_BC_truth_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pip_AC_truth_1n_undet.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pip_BC_truth_1n_undet.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_pim_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pim_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pim_AC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pim_BC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pim_AC_truth_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pim_BC_truth_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pim_AC_truth_1n_undet.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pim_BC_truth_1n_undet.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_pi0_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pi0_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_ph_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_ph_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_ph_AC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_ph_BC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hTheta_e_AC_truth_1n, hTheta_e_All_Int_1n_FD, plots, ACorr_data, ACorr_data_Dir);
        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hTheta_nFD_AC_truth_1n, hTheta_n_All_Int_1n, plots, ACorr_data, ACorr_data_Dir);

        DrawAndSaveEfficiencyPlots(SampleName, hTheta_e_AC_truth_1n, hTheta_e_All_Int_1n_FD, plots);
        DrawAndSaveEfficiencyPlots(SampleName, hTheta_nFD_AC_truth_1n, hTheta_n_All_Int_1n, plots);

        // Phi efficiency plots (1n)
        hPhi_e_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_e_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_n_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_n_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_nFD_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_nFD_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_p_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_p_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_p_AC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_p_BC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_p_AC_truth_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_p_BC_truth_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_p_AC_truth_1n_undet.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_p_BC_truth_1n_undet.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_pip_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pip_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pip_AC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pip_BC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pip_AC_truth_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pip_BC_truth_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pip_AC_truth_1n_undet.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pip_BC_truth_1n_undet.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_pim_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pim_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pim_AC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pim_BC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pim_AC_truth_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pim_BC_truth_1n_CD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pim_AC_truth_1n_undet.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pim_BC_truth_1n_undet.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_pi0_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pi0_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_ph_AC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_ph_BC_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_ph_AC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_ph_BC_truth_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hPhi_e_AC_truth_1n, hPhi_e_All_Int_1n_FD, plots, ACorr_data, ACorr_data_Dir);
        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hPhi_nFD_AC_truth_1n, hPhi_n_All_Int_1n, plots, ACorr_data, ACorr_data_Dir);

        DrawAndSaveEfficiencyPlots(SampleName, hPhi_e_AC_truth_1n, hPhi_e_All_Int_1n_FD, plots);
        DrawAndSaveEfficiencyPlots(SampleName, hPhi_nFD_AC_truth_1n, hPhi_n_All_Int_1n, plots);

        // Efficiency plots (pFDpCD, CD & FD)

        // Momentum efficiency plots (pFDpCD)
        hP_e_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_e_mom_cuts.GetLowerCut(), TL_e_mom_cuts.GetUpperCut(), 0, false);
        hP_e_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_e_mom_cuts.GetLowerCut(), TL_e_mom_cuts.GetUpperCut(), 0, false);

        hP_n_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_n_mom_cuts.GetLowerCut(), TL_n_mom_cuts.GetUpperCut(), 0, false);
        hP_n_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_n_mom_cuts.GetLowerCut(), TL_n_mom_cuts.GetUpperCut(), 0, false);

        hP_p_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);
        hP_p_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);

        if (!apply_kinematical_cuts) {
            hP_pFD_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);
            hP_pFD_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);
        } else {
            hP_pFD_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                                FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
            hP_pFD_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                                FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
        }

        hP_pCD_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);
        hP_pCD_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);

        hP_pip_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pip_mom_cuts.GetLowerCut(), TL_pip_mom_cuts.GetUpperCut(), 0, false);
        hP_pip_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pip_mom_cuts.GetLowerCut(), TL_pip_mom_cuts.GetUpperCut(), 0, false);

        hP_pim_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pim_mom_cuts.GetLowerCut(), TL_pim_mom_cuts.GetUpperCut(), 0, false);
        hP_pim_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pim_mom_cuts.GetLowerCut(), TL_pim_mom_cuts.GetUpperCut(), 0, false);

        hP_pi0_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pi0_mom_cuts.GetLowerCut(), TL_pi0_mom_cuts.GetUpperCut(), 0, false);
        hP_pi0_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pi0_mom_cuts.GetLowerCut(), TL_pi0_mom_cuts.GetUpperCut(), 0, false);

        hP_ph_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_ph_mom_cuts.GetLowerCut(), TL_ph_mom_cuts.GetUpperCut(), 0, false);
        hP_ph_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_ph_mom_cuts.GetLowerCut(), TL_ph_mom_cuts.GetUpperCut(), 0, false);
        hP_ph_AC_truth_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_ph_mom_cuts.GetLowerCut(), TL_ph_mom_cuts.GetUpperCut(), 0, false);
        hP_ph_BC_truth_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_ph_mom_cuts.GetLowerCut(), TL_ph_mom_cuts.GetUpperCut(), 0, false);

        // Acceptance correction plots (pFDpCD, CD & FD):
        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hP_e_AC_truth_pFDpCD, hP_e_APID_pFDpCD_FD, plots, ACorr_data, ACorr_data_Dir);
        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hP_pFD_AC_truth_pFDpCD, hP_p_APID_pFDpCD_FD, plots, ACorr_data, ACorr_data_Dir);
        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hP_pCD_AC_truth_pFDpCD, hP_p_APID_pFDpCD_CD, plots, ACorr_data, ACorr_data_Dir);

        // Efficiency plots (pFDpCD, CD & FD):
        DrawAndSaveEfficiencyPlots(SampleName, hP_e_AC_truth_pFDpCD, hP_e_APID_pFDpCD_FD, plots);
        DrawAndSaveEfficiencyPlots(SampleName, hP_pFD_AC_truth_pFDpCD, hP_p_APID_pFDpCD_FD, plots);
        DrawAndSaveEfficiencyPlots(SampleName, hP_pCD_AC_truth_pFDpCD, hP_p_APID_pFDpCD_CD, plots);

        // Theta efficiency plots (pFDpCD)
        hTheta_e_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_e_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_n_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_n_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_p_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_p_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pFD_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pFD_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pCD_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pCD_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_pip_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pip_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_pim_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pim_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_pi0_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pi0_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_ph_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_ph_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_ph_AC_truth_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_ph_BC_truth_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hTheta_e_AC_truth_pFDpCD, hTheta_e_All_Int_pFDpCD_FD, plots, ACorr_data, ACorr_data_Dir);
        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hTheta_pFD_AC_truth_pFDpCD, hTheta_pFD_All_Int_pFDpCD_FD, plots, ACorr_data, ACorr_data_Dir);
        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hTheta_pCD_AC_truth_pFDpCD, hTheta_pCD_All_Int_pFDpCD_CD, plots, ACorr_data, ACorr_data_Dir);

        DrawAndSaveEfficiencyPlots(SampleName, hTheta_e_AC_truth_pFDpCD, hTheta_e_All_Int_pFDpCD_FD, plots);
        DrawAndSaveEfficiencyPlots(SampleName, hTheta_pFD_AC_truth_pFDpCD, hTheta_pFD_All_Int_pFDpCD_FD, plots);
        DrawAndSaveEfficiencyPlots(SampleName, hTheta_pCD_AC_truth_pFDpCD, hTheta_pCD_All_Int_pFDpCD_CD, plots);

        // Phi efficiency plots (pFDpCD)
        hPhi_e_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_e_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_n_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_n_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_p_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_p_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pFD_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pFD_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pCD_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pCD_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_pip_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pip_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_pim_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pim_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_pi0_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pi0_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_ph_AC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_ph_BC_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_ph_AC_truth_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_ph_BC_truth_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hPhi_e_AC_truth_pFDpCD, hPhi_e_All_Int_pFDpCD_FD, plots, ACorr_data, ACorr_data_Dir);
        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hPhi_pFD_AC_truth_pFDpCD, hPhi_pFD_All_Int_pFDpCD_FD, plots, ACorr_data, ACorr_data_Dir);
        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hPhi_pCD_AC_truth_pFDpCD, hPhi_pCD_All_Int_pFDpCD_CD, plots, ACorr_data, ACorr_data_Dir);

        DrawAndSaveEfficiencyPlots(SampleName, hPhi_e_AC_truth_pFDpCD, hPhi_e_All_Int_pFDpCD_FD, plots);
        DrawAndSaveEfficiencyPlots(SampleName, hPhi_pFD_AC_truth_pFDpCD, hPhi_pFD_All_Int_pFDpCD_FD, plots);
        DrawAndSaveEfficiencyPlots(SampleName, hPhi_pCD_AC_truth_pFDpCD, hPhi_pCD_All_Int_pFDpCD_CD, plots);

        // Efficiency plots (nFDpCD, CD & FD)

        // Momentum efficiency plots (nFDpCD)
        hP_e_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_e_mom_cuts.GetLowerCut(), TL_e_mom_cuts.GetUpperCut(), 0, false);
        hP_e_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_e_mom_cuts.GetLowerCut(), TL_e_mom_cuts.GetUpperCut(), 0, false);

        hP_n_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_n_mom_cuts.GetLowerCut(), TL_n_mom_cuts.GetUpperCut(), 0, false);
        hP_n_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_n_mom_cuts.GetLowerCut(), TL_n_mom_cuts.GetUpperCut(), 0, false);

        if (!apply_kinematical_cuts) {
            hP_nFD_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_n_mom_cuts.GetLowerCut(), TL_n_mom_cuts.GetUpperCut(), 0, false);
            hP_nFD_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_n_mom_cuts.GetLowerCut(), TL_n_mom_cuts.GetUpperCut(), 0, false);
        } else {
            hP_nFD_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                                FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
            hP_nFD_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                                FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
        }

        hP_p_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);
        hP_p_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);

        if (!apply_kinematical_cuts) {
            hP_pFD_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);
            hP_pFD_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);
        } else {
            hP_pFD_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                                FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
            hP_pFD_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(),
                                                FD_nucleon_momentum_cut.GetUpperCut(), 0, false);
        }

        hP_pCD_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);
        hP_pCD_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_p_mom_cuts.GetLowerCut(), TL_p_mom_cuts.GetUpperCut(), 0, false);

        hP_pip_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pip_mom_cuts.GetLowerCut(), TL_pip_mom_cuts.GetUpperCut(), 0, false);
        hP_pip_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pip_mom_cuts.GetLowerCut(), TL_pip_mom_cuts.GetUpperCut(), 0, false);

        hP_pim_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pim_mom_cuts.GetLowerCut(), TL_pim_mom_cuts.GetUpperCut(), 0, false);
        hP_pim_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pim_mom_cuts.GetLowerCut(), TL_pim_mom_cuts.GetUpperCut(), 0, false);

        hP_pi0_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pi0_mom_cuts.GetLowerCut(), TL_pi0_mom_cuts.GetUpperCut(), 0, false);
        hP_pi0_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_pi0_mom_cuts.GetLowerCut(), TL_pi0_mom_cuts.GetUpperCut(), 0, false);

        hP_ph_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_ph_mom_cuts.GetLowerCut(), TL_ph_mom_cuts.GetUpperCut(), 0, false);
        hP_ph_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_ph_mom_cuts.GetLowerCut(), TL_ph_mom_cuts.GetUpperCut(), 0, false);
        hP_ph_AC_truth_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_ph_mom_cuts.GetLowerCut(), TL_ph_mom_cuts.GetUpperCut(), 0, false);
        hP_ph_BC_truth_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., TL_ph_mom_cuts.GetLowerCut(), TL_ph_mom_cuts.GetUpperCut(), 0, false);

        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hP_e_AC_truth_nFDpCD, hP_e_APID_nFDpCD_FD, plots, ACorr_data, ACorr_data_Dir);
        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hP_nFD_AC_truth_nFDpCD, hP_n_APID_nFDpCD_FD, plots, ACorr_data, ACorr_data_Dir);
        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hP_pCD_AC_truth_nFDpCD, hP_p_APID_nFDpCD_CD, plots, ACorr_data, ACorr_data_Dir);

        DrawAndSaveEfficiencyPlots(SampleName, hP_e_AC_truth_nFDpCD, hP_e_APID_nFDpCD_FD, plots);
        DrawAndSaveEfficiencyPlots(SampleName, hP_nFD_AC_truth_nFDpCD, hP_nFD_nFDpCD, plots);
        DrawAndSaveEfficiencyPlots(SampleName, hP_pCD_AC_truth_nFDpCD, hP_pCD_nFDpCD, plots);

        // Theta efficiency plots (nFDpCD)
        hTheta_e_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_e_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_n_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_n_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_nFD_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_nFD_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_p_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_p_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pFD_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pFD_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pCD_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pCD_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_pip_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pip_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_pim_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pim_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_pi0_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_pi0_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hTheta_ph_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_ph_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_ph_AC_truth_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hTheta_ph_BC_truth_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hTheta_e_AC_truth_nFDpCD, hTheta_e_All_Int_nFDpCD_FD, plots, ACorr_data, ACorr_data_Dir);
        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hTheta_nFD_AC_truth_nFDpCD, hTheta_nFD_All_Int_nFDpCD_FD, plots, ACorr_data, ACorr_data_Dir);
        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hTheta_pCD_AC_truth_nFDpCD, hTheta_pCD_All_Int_nFDpCD_CD, plots, ACorr_data, ACorr_data_Dir);

        DrawAndSaveEfficiencyPlots(SampleName, hTheta_e_AC_truth_nFDpCD, hTheta_e_All_Int_nFDpCD_FD, plots);
        DrawAndSaveEfficiencyPlots(SampleName, hTheta_nFD_AC_truth_nFDpCD, hTheta_nFD_All_Int_nFDpCD_FD, plots);
        DrawAndSaveEfficiencyPlots(SampleName, hTheta_pCD_AC_truth_nFDpCD, hTheta_pCD_All_Int_nFDpCD_CD, plots);

        // Phi efficiency plots (nFDpCD)
        hPhi_e_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_e_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_n_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_n_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_nFD_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_nFD_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_p_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_p_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pFD_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pFD_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pCD_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pCD_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_pip_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pip_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_pim_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pim_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_pi0_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_pi0_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        hPhi_ph_AC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_ph_BC_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_ph_AC_truth_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hPhi_ph_BC_truth_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);

        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hPhi_e_AC_truth_nFDpCD, hPhi_e_All_Int_nFDpCD_FD, plots, ACorr_data, ACorr_data_Dir);
        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hPhi_nFD_AC_truth_nFDpCD, hPhi_nFD_All_Int_nFDpCD_FD, plots, ACorr_data, ACorr_data_Dir);
        eff.DrawAndSaveACorrPlots(save_ACorr_data, SampleName, hPhi_pCD_AC_truth_nFDpCD, hPhi_pCD_All_Int_nFDpCD_CD, plots, ACorr_data, ACorr_data_Dir);

        DrawAndSaveEfficiencyPlots(SampleName, hPhi_e_AC_truth_nFDpCD, hPhi_e_All_Int_nFDpCD_FD, plots);
        DrawAndSaveEfficiencyPlots(SampleName, hPhi_nFD_AC_truth_nFDpCD, hPhi_nFD_All_Int_nFDpCD_FD, plots);
        DrawAndSaveEfficiencyPlots(SampleName, hPhi_pCD_AC_truth_nFDpCD, hPhi_pCD_All_Int_nFDpCD_CD, plots);

        // TL fiducial plots
        if (apply_nucleon_cuts) {
            hnFD_Hit_map_nFDpCD_BEC.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
            hnFD_Hit_map_nFDpCD_AEC.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
            hTheta_nFD_vs_Phi_nFD_nFDpCD_BEC.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
            hTheta_nFD_vs_Phi_nFD_nFDpCD_AEC.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        }

        //  Final state ratios --------------------------------------------------------------------------------------------------------------------------------------------------

        // Final state ratios
        if (apply_nucleon_cuts) {
            if (FSR_1D_plots) {
                DrawAndSaveFSRatio(SampleName, hP_pFD_AC_truth_1p, hP_nFD_AC_truth_1n, plots);
                //                DrawAndSaveFSRatio(SampleName, hTheta_pFD_AC_truth_1p, hTheta_nFD_AC_truth_1n, plots);
                //                DrawAndSaveFSRatio(SampleName, hPhi_pFD_AC_truth_1p, hPhi_nFD_AC_truth_1n, plots);

                DrawAndSaveFSRatio(SampleName, hP_pFD_AC_truth_pFDpCD, hP_nFD_AC_truth_nFDpCD, plots);
                //                DrawAndSaveFSRatio(SampleName, hTheta_pFD_AC_truth_pFDpCD, hTheta_nFD_AC_truth_nFDpCD, plots);
                //                DrawAndSaveFSRatio(SampleName, hPhi_pFD_AC_truth_pFDpCD, hPhi_nFD_AC_truth_nFDpCD, plots);

                DrawAndSaveFSRatio(SampleName, hP_pCD_AC_truth_pFDpCD, hP_pCD_AC_truth_nFDpCD, plots);
                //                DrawAndSaveFSRatio(SampleName, hTheta_pCD_AC_truth_pFDpCD, hTheta_nFD_AC_truth_nFDpCD, plots);
                //                DrawAndSaveFSRatio(SampleName, hPhi_pCD_AC_truth_pFDpCD, hPhi_nFD_AC_truth_nFDpCD, plots);
            }

            //            cout << "\033[33m\n\n\nExited after DrawAndSaveFSRatio finished for TL!\n\n\n\033[0m";
            //            quit();
        }
    } else {
        cout << "\033[33m\n\nEfficiency plots are disabled by user.\n\n\033[0m";
    }

    // TL plots after Acceptance maps
    if (TL_after_Acceptance_Maps_plots) {
        cout << "\033[33m\n\nPlotting TL plots after Acceptance maps...\n\n\033[0m";

        //  TL after Acceptance maps plots
        //  ---------------------------------------------------------------------------------------------------------------------------------------------

        // Truth level theta vs. phi plots (1p)
        hTheta_e_vs_Phi_e_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTheta_nFD_vs_Phi_nFD_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTheta_pFD_vs_Phi_pFD_truth_1e_cut.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        // Truth level theta vs. phi plots (1p)
        hTheta_e_vs_Phi_e_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTheta_pFD_vs_Phi_pFD_truth_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        // Truth level theta vs. phi plots (1n)
        hTheta_e_vs_Phi_e_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTheta_nFD_vs_Phi_nFD_truth_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        // Truth level theta vs. phi plots (pFDpCD)
        hTheta_e_vs_Phi_e_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTheta_pFD_vs_Phi_pFD_truth_pFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        // Truth level theta vs. phi plots (nFDpCD)
        hTheta_e_vs_Phi_e_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTheta_nFD_vs_Phi_nFD_truth_nFDpCD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
    } else {
        cout << "\033[33m\n\nTL plots after Acceptance maps are disabled by user.\n\n\033[0m";
    }

    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // Acceptance maps histograms
    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Acceptance maps histograms
    if (AMaps_plots) {
        cout << "\033[33m\n\nPlotting Acceptance maps histograms...\n\n\033[0m";

        //  Acceptance maps plots -----------------------------------------------------------------------------------------------------------------------------------------------

        // AMap BC plots (1e cut)
        hElectronAMapBC.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_e_AMaps.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hReco_P_e_vs_Reco_Theta_e_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_e_vs_Reco_Phi_e_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_e_AMaps.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hTL_P_e_vs_TL_Theta_e_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_e_vs_TL_Phi_e_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hProtonAMapBC.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_pFD_AMaps.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hReco_P_pFD_vs_Reco_Theta_pFD_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_pFD_vs_Reco_Phi_pFD_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_pFD_vs_Reco_P_e_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_pFD_vs_Reco_Theta_e_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_pFD_vs_Reco_Phi_e_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_pFD_AMaps.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., p_mom_th.GetLowerCut(), p_mom_th.GetUpperCut(), 0, false);
        hTL_P_pFD_vs_TL_Theta_pFD_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_pFD_vs_TL_Phi_pFD_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_pFD_vs_TL_P_e_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_pFD_vs_TL_Theta_e_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_pFD_vs_TL_Phi_e_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hNeutronAMapBC.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_nFD_AMaps.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
        hReco_P_nFD_vs_Reco_Theta_nFD_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_nFD_vs_Reco_Phi_nFD_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_nFD_vs_Reco_P_e_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_nFD_vs_Reco_Theta_e_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_nFD_vs_Reco_Phi_e_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_nFD_AMaps.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., n_mom_th.GetLowerCut(), n_mom_th.GetUpperCut(), 0, false);
        hTL_P_nFD_vs_TL_Theta_nFD_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_nFD_vs_TL_Phi_nFD_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_nFD_vs_TL_P_e_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_nFD_vs_TL_Theta_e_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_nFD_vs_TL_Phi_e_AMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hNucleonAMapBC.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        // Acceptance maps plots (1e cut)
        aMaps_master.DrawAndSaveHitMaps(SampleName, c1, AcceptanceMapsDirectory);
    } else {
        cout << "\033[33m\n\nAcceptance maps plots are disabled by user.\n\n\033[0m";
    }

    if (WMaps_plots) {
        cout << "\033[33m\n\nPlotting Efficiency maps histograms...\n\n\033[0m";

        //  Efficiency maps plots -----------------------------------------------------------------------------------------------------------------------------------------------

        // WMaps BC plots (1e cut)
        hReco_P_e_WMaps.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hReco_P_e_vs_Reco_Theta_e_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_e_vs_Reco_Phi_e_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_e_WMaps.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., 9999, 9999, 0, false);
        hTL_P_e_vs_TL_Theta_e_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_e_vs_TL_Phi_e_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hReco_P_pFD_WMaps.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(),
                                       0, false);
        hReco_P_pFD_vs_Reco_Theta_pFD_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_pFD_vs_Reco_Phi_pFD_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_pFD_vs_Reco_P_e_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_pFD_vs_Reco_Theta_e_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_pFD_vs_Reco_Phi_e_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_pFD_WMaps.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(), 0,
                                     false);
        hTL_P_pFD_vs_TL_Theta_pFD_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_pFD_vs_TL_Phi_pFD_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_pFD_vs_TL_P_e_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_pFD_vs_TL_Theta_e_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_pFD_vs_TL_Phi_e_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hReco_P_nFD_WMaps.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(),
                                       0, false);
        hReco_P_nFD_vs_Reco_Theta_nFD_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_nFD_vs_Reco_Phi_nFD_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_nFD_vs_Reco_P_e_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_nFD_vs_Reco_Theta_e_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_P_nFD_vs_Reco_Phi_e_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_nFD_WMaps.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Momentum_plots, true, 1., FD_nucleon_momentum_cut.GetLowerCut(), FD_nucleon_momentum_cut.GetUpperCut(), 0,
                                     false);
        hTL_P_nFD_vs_TL_Theta_nFD_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_nFD_vs_TL_Phi_nFD_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_nFD_vs_TL_P_e_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_nFD_vs_TL_Theta_e_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_nFD_vs_TL_Phi_e_WMap.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        // Efficiency maps plots (1e cut)
        wMaps_master.DrawAndSaveHitMaps(SampleName, c1, AcceptanceWeightsDirectory);
    } else {
        cout << "\033[33m\n\nEfficiency maps plots are disabled by user.\n\n\033[0m";
    }

    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // Resolution histograms
    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Resolution histograms
    if (Resolution_plots) {
        cout << "\033[33m\n\nPlotting Resolution histograms...\n\n\033[0m";

        //  Resolution plots -----------------------------------------------------------------------------------------------------------------------------------------------------

        // Resolution plots (1p, CD & FD)
        hdTheta_pFD_TL_BC_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hdTheta_pFD_TL_ZOOMIN_BC_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hdPhi_pFD_TL_BC_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hdPhi_pFD_TL_ZOOMIN_BC_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);

        hdTheta_pFD_TL_AdPC_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hdTheta_pFD_TL_ZOOMIN_AdPC_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hdPhi_pFD_TL_AdPC_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hdPhi_pFD_TL_ZOOMIN_AdPC_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);

        hTheta_pFD_TL_ApResC_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hPhi_pFD_TL_ApResC_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        histPlotter2D(c1, hTheta_pFD_TL_VS_Phi_pFD_TL_ApResC_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_pFD_TL_VS_Phi_pFD_TL_ApResC_1p_Dir,
                      "s03a_Theta_pFD_VS_Phi_pFD_ApResC_1p");
        hP_pFD_Res_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        histPlotter2D(c1, hP_pFD_Res_VS_TL_P_pFD_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pFD_Res_VS_TL_P_pFD_1p_Dir, "s05a_P_pFD_Res_VS_TL_P_pFD_1p");
        histPlotter2D(c1, hP_pFD_Res_VS_TL_P_pFD_ZOOMIN_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pFD_Res_VS_TL_P_pFD_1p_Dir,
                      "s05b_P_pFD_Res_VS_TL_P_pFD_ZOOMIN_1p");
        histPlotter2D(c1, hP_pFD_Res_VS_TL_P_pFD_noKC_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pFD_Res_VS_TL_P_pFD_1p_Dir,
                      "s05c_P_pFD_Res_VS_TL_P_pFD_noKC_1p");
        histPlotter2D(c1, hP_pFD_Res_VS_Reco_P_pFD_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pFD_Res_VS_Reco_P_pFD_1p_Dir,
                      "s05d_P_pFD_Res_VS_Reco_P_pFD_1p");
        histPlotter2D(c1, hP_pFD_Res_VS_Reco_P_pFD_ZOOMIN_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pFD_Res_VS_Reco_P_pFD_1p_Dir,
                      "s05e_P_pFD_Res_VS_Reco_P_pFD_ZOOMIN_1p");
        histPlotter2D(c1, hP_pFD_Res_VS_Reco_P_pFD_noKC_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pFD_Res_VS_Reco_P_pFD_1p_Dir,
                      "s05f_P_pFD_Res_VS_Reco_P_pFD_noKC_1p");
        histPlotter2D(c1, hP_pFD_Res_VS_Smear_Reco_P_pFD_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pFD_Res_VS_Reco_P_pFD_1p_Dir,
                      "s05g_P_pFD_Res_VS_Smear_Reco_P_pFD_1p");
        histPlotter2D(c1, hP_pFD_Res_VS_Smear_Reco_P_pFD_ZOOMIN_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pFD_Res_VS_Reco_P_pFD_1p_Dir,
                      "s05h_P_pFD_Res_VS_Smear_Reco_P_pFD_ZOOMIN_1p");
        histPlotter2D(c1, hP_pFD_Res_VS_Smear_Reco_P_pFD_noKC_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_pFD_Res_VS_Reco_P_pFD_1p_Dir,
                      "s05i_P_pFD_Res_VS_Smear_Reco_P_pFD_noKC_1p");

        hTheta_pFD_TL_MatchedP_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hPhi_pFD_TL_MatchedP_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        histPlotter2D(c1, hTheta_pFD_TL_VS_Phi_pFD_TL_MatchedP_1p, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_pFD_TL_VS_Phi_pFD_TL_MatchedP_1p_Dir,
                      "s03b_Theta_pFD_VS_Phi_pFD_MatchedP_1p");

        hReco_P_pFD_pRes_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hTL_P_pFD_pRes_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hTL_P_pFD_vs_Reco_P_pFD_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_pFD_vs_Smear_Reco_P_pFD_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hpRes_Match_Multi_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hpRes_Match_Multi_vs_Reco_P_pFD_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hpRes_Match_Multi_vs_Reco_Theta_pFD_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hpRes_Match_Multi_vs_Reco_Phi_pFD_1p.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        if (plot_and_fit_MomRes) {
            pRes.SliceFitDrawAndSaveByType(SampleName, beamE);
            pRes.LogResDataToFile(SampleName, run_plots_path, MomentumResolutionDirectory);
            pRes.DrawAndSaveResSlices(SampleName, c1, run_plots_path, MomentumResolutionDirectory);
        }

        // Resolution plots (1n, CD & FD)
        hdTheta_nFD_TL_BC_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hdTheta_nFD_TL_ZOOMIN_BC_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hdPhi_nFD_TL_BC_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hdPhi_nFD_TL_ZOOMIN_BC_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);

        hdTheta_nFD_TL_AdPC_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hdTheta_nFD_TL_ZOOMIN_AdPC_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hdPhi_nFD_TL_AdPC_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hdPhi_nFD_TL_ZOOMIN_AdPC_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);

        hTheta_nFD_TL_AnResC_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hPhi_nFD_TL_AnResC_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        histPlotter2D(c1, hTheta_nFD_TL_VS_Phi_nFD_TL_AnResC_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_nFD_TL_VS_Phi_nFD_TL_AnResC_1n_Dir,
                      "s03a_Theta_nFD_VS_Phi_nFD_AnResC_1n");
        hP_nFD_Res_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        histPlotter2D(c1, hP_nFD_Res_VS_TL_P_nFD_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_nFD_Res_VS_TL_P_nFD_1n_Dir, "s05a_P_nFD_Res_VS_TL_P_nFD_1n");
        histPlotter2D(c1, hP_nFD_Res_VS_TL_P_nFD_ZOOMIN_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_nFD_Res_VS_TL_P_nFD_1n_Dir,
                      "s05b_P_nFD_Res_VS_TL_P_nFD_ZOOMIN_1n");
        histPlotter2D(c1, hP_nFD_Res_VS_TL_P_nFD_noKC_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_nFD_Res_VS_TL_P_nFD_1n_Dir,
                      "s05c_P_nFD_Res_VS_TL_P_nFD_noKC_1n");
        histPlotter2D(c1, hP_nFD_Res_VS_Reco_P_nFD_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_nFD_Res_VS_Reco_P_nFD_1n_Dir,
                      "s05d_P_nFD_Res_VS_Reco_P_nFD_1n");
        histPlotter2D(c1, hP_nFD_Res_VS_Reco_P_nFD_ZOOMIN_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_nFD_Res_VS_Reco_P_nFD_1n_Dir,
                      "s05e_P_nFD_Res_VS_Reco_P_nFD_ZOOMIN_1n");
        histPlotter2D(c1, hP_nFD_Res_VS_Reco_P_nFD_noKC_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_nFD_Res_VS_Reco_P_nFD_1n_Dir,
                      "s05f_P_nFD_Res_VS_Reco_P_nFD_noKC_1n");
        histPlotter2D(c1, hP_nFD_Res_VS_Corr_Reco_P_nFD_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_nFD_Res_VS_Reco_P_nFD_1n_Dir,
                      "s05g_P_nFD_Res_VS_Corr_Reco_P_nFD_1n");
        histPlotter2D(c1, hP_nFD_Res_VS_Corr_Reco_P_nFD_ZOOMIN_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_nFD_Res_VS_Reco_P_nFD_1n_Dir,
                      "s05h_P_nFD_Res_VS_Corr_Reco_P_nFD_ZOOMIN_1n");
        histPlotter2D(c1, hP_nFD_Res_VS_Corr_Reco_P_nFD_noKC_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hP_nFD_Res_VS_Reco_P_nFD_1n_Dir,
                      "s05i_P_nFD_Res_VS_Corr_Reco_P_nFD_noKC_1n");

        hTheta_nFD_TL_MatchedN_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hPhi_nFD_TL_MatchedN_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        histPlotter2D(c1, hTheta_nFD_TL_VS_Phi_nFD_TL_MatchedN_1n, 0.06, true, 0.0425, 0.0425, 0.0425, plots, Histogram_OutPDF, false, hTheta_nFD_TL_VS_Phi_nFD_TL_MatchedN_1n_Dir,
                      "s03b_Theta_nFD_VS_Phi_nFD_MatchedN_1n");

        hReco_P_nFD_nRes_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hTL_P_nFD_nRes_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hTL_P_nFD_vs_Reco_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hTL_P_nFD_vs_Corr_Reco_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hnRes_Match_Multi_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_MomRes_plots, true, 1., 9999, 9999, 0, false);
        hnRes_Match_Multi_vs_Reco_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hnRes_Match_Multi_vs_Reco_Theta_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hnRes_Match_Multi_vs_Reco_Phi_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        if (plot_and_fit_MomRes) {
            nRes.SliceFitDrawAndSaveByType(SampleName, beamE);
            nRes.LogResDataToFile(SampleName, run_plots_path, MomentumResolutionDirectory);
            nRes.DrawAndSaveResSlices(SampleName, c1, run_plots_path, MomentumResolutionDirectory);
        }

        hReco_L_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hReco_L_VS_reco_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_L_VS_truth_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_L_VS_R_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hReco_L_ECIN_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hReco_L_VS_reco_P_nFD_ECIN_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_L_VS_truth_P_nFD_ECIN_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_L_VS_R_nFD_ECIN_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);

        hReco_L_ECOUT_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hReco_L_VS_reco_P_nFD_ECOUT_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_L_VS_truth_P_nFD_ECOUT_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_L_VS_R_nFD_ECOUT_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, true);
        hReco_L_VS_reco_theta_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hReco_L_VS_reco_phi_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hReco_t_ToF_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hReco_t_ToF_VS_reco_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hReco_t_ToF_VS_truth_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hReco_t_ToF_VS_R_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hReco_beta_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hReco_beta_VS_reco_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hReco_beta_VS_truth_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hReco_beta_VS_R_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hReco_ToF_from_beta_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hReco_ToF_from_beta_VS_reco_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hReco_ToF_from_beta_VS_truth_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hReco_ToF_from_beta_VS_R_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hReco_calc_ToF_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hReco_calc_ToF_VS_reco_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hReco_calc_ToF_VS_truth_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hReco_calc_ToF_VS_R_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hEff_dist_TL_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hEff_dist_TL_VS_reco_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hEff_dist_TL_VS_truth_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hEff_dist_TL_VS_R_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hEff_dist_calc_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hEff_dist_calc_VS_reco_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hEff_dist_calc_VS_truth_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hEff_dist_calc_VS_R_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hDeltaL_TL_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hDeltaL_TL_VS_reco_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hDeltaL_TL_VS_truth_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hDeltaL_TL_VS_R_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hDeltaL_TL_VS_Eff_dist_TL_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hDeltaL_TL_VS_Reco_L_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hDeltaL_calc_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hDeltaL_calc_VS_reco_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hDeltaL_calc_VS_truth_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hDeltaL_calc_VS_R_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hDeltaL_calc_VS_Eff_dist_TL_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hDeltaL_calc_VS_Reco_L_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hDeltaL_TL_below_0_4_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hDeltaL_TL_VS_reco_P_nFD_below_0_4_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hDeltaL_TL_VS_truth_P_nFD_below_0_4_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hDeltaL_TL_VS_R_nFD_below_0_4_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hDeltaL_TL_above_0_4_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hDeltaL_TL_VS_reco_P_nFD_above_0_4_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hDeltaL_TL_VS_truth_P_nFD_above_0_4_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hDeltaL_TL_VS_R_nFD_above_0_4_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);

        hDeltat_ToF_reco_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Angle_plots_master, true, 1., 9999, 9999, 0, false);
        hDeltat_ToF_reco_VS_reco_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hDeltat_ToF_reco_VS_truth_P_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
        hDeltat_ToF_reco_VS_R_nFD_1n.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, false);
    } else {
        cout << "\033[33m\n\nResolution plots are disabled by user.\n\n\033[0m";
    }

    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // Multiplicity histograms
    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    // Multiplicity histograms
    if (Multiplicity_plots) {
        cout << "\033[33m\n\nPlotting Multiplicity histograms...\n\n\033[0m";

        //  Multiplicity plots -----------------------------------------------------------------------------------------------------------------------------------------------------

        // Multiplicity plots (1e cut)
        hNeut_Multi_By_clas12pid_APID_BV_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);
        hNeut_Multi_By_clas12pid_APID_AV_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);
        hNeut_Multi_By_clas12pid_BPID_BV_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);
        hNeut_Multi_By_clas12pid_BPID_AV_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);

        hNeut_Multi_By_Redef_APID_BV_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);
        hNeut_Multi_By_Redef_APID_AV_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);
        hNeut_Multi_By_Redef_BPID_BV_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);
        hNeut_Multi_By_Redef_BPID_AV_1e_cut_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);

        // Multiplicity plots (1p)
        hNeut_Multi_By_Redef_APID_BV_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);
        hNeut_Multi_By_Redef_APID_AV_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);
        hNeut_Multi_By_Redef_BPID_BV_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);
        hNeut_Multi_By_Redef_BPID_AV_1p_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);

        // Multiplicity plots (1n)
        hNeut_Multi_By_Redef_APID_BV_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);
        hNeut_Multi_By_Redef_APID_AV_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);
        hNeut_Multi_By_Redef_BPID_BV_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);
        hNeut_Multi_By_Redef_BPID_AV_1n_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);

        // Multiplicity plots (pFDpCD)
        hNeut_Multi_By_Redef_APID_BV_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);
        hNeut_Multi_By_Redef_APID_AV_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);
        hNeut_Multi_By_Redef_BPID_BV_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);
        hNeut_Multi_By_Redef_BPID_AV_pFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);

        // Multiplicity plots (nFDpCD)
        hNeut_Multi_By_Redef_APID_BV_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);
        hNeut_Multi_By_Redef_APID_AV_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);
        hNeut_Multi_By_Redef_BPID_BV_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);
        hNeut_Multi_By_Redef_BPID_AV_nFDpCD_FD.hDrawAndSave(SampleName, c1, plots, Histogram_OutPDF, norm_Multi_plots, true, 1., -9999, 9999, 0, false);
    } else {
        cout << "\033[33m\n\nMultiplicity plots are disabled by user.\n\n\033[0m";
    }
}
